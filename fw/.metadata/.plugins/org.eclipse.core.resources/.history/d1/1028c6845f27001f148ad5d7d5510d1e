/*
 * sensor.c
 *
 *  Created on: May 27, 2024
 *      Author: mlundh
 */

#include "sensor.h"

#define NOT_USED 99
// Multiple adjacent triggered photodiodes are allowed, this would represent a hit between the channels.
// It is not allowed to have a gap in between. This would be an error condition.

int Sensor_getPos()
{
  int returnValue = ERROR;
  if (sensor.newValue)
  {
    uint8_t first = NOT_USED;
    uint8_t last = NOT_USED;

    for (int i = 0; i < (BACK_CHANNEL); i++)
    {
      if (sensor.buffer[i])
      {
        if (first == NOT_USED)// If no hit is registered yet, then register.
        {
          first = i;
          last = i;
        } else
        {
          if ((last + 1) == i)// If there is a hit registered, make sure the last hit was the adjacent sensor.
          {
            last = i;
          } else
          {
            // error condition!
            LOG_DBG_ENTRY("ERROR, gaps between triggered sensors.");
            memset(sensor.buffer,0,NR_CHANNELS); // clean up and get ready for next hit.
            return returnValue;
          }
        }
      }
    }

    if (first) // If there is a valid hit
    {
      returnValue = ((first * 2) + (second * 2)) / 2;
    }

    if (sensor.buffer[BACK_CHANNEL]) // Left is negative.
    {
      returnValue = -(returnValue);
    }
  }
  return returnValue;
}

float Sensor_getSpeed()
{
  float returnValue = 0;
  if (sensor.newValue && sensor.buffer[BACK_CHANNEL])
  {
    returnValue = DISTANCE_ROWS_M/((float)sensor.speed)*TIME_PERIOD_S;
    LOG_DBG_ENTRY("INFO, Speed = %f",returnValue);
  }
  return returnValue;
}

unsigned int Sensor_newValue()
{
  return sensor.newValue;
}

void Sensor_clear()
{
  memset(sensor.buffer,0,NR_CHANNELS);// clean up and get ready for next hit.
  sensor.newValue = 0;
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  if (GPIO_Pin == CH_C_Pin)
  {
    sensor.buffer[0] = 1;
  }
  if (GPIO_Pin == CH_1_Pin)
  {
    sensor.buffer[1] = 1;
  }
  if (GPIO_Pin == CH_2_Pin)
  {
    sensor.buffer[2] = 1;
  }
  if (GPIO_Pin == CH_3_Pin)
  {
    sensor.buffer[3] = 1;
  }
  if (GPIO_Pin == CH_4_Pin)
  {
    sensor.buffer[4] = 1;
  }
  if (GPIO_Pin == CH_5_Pin)
  {
    sensor.buffer[5] = 1;
  }
  if (GPIO_Pin == CH_6_Pin)
  {
    sensor.buffer[6] = 1;
  }
  if (GPIO_Pin == CH_7_Pin)
  {
    sensor.buffer[7] = 1;
  }
  if (GPIO_Pin == CH_8_Pin)
  {
    sensor.buffer[8] = 1;
  }

  if (GPIO_Pin == CH_B_Pin)
  {
    sensor.buffer[9] = 1;

    if (!LL_TIM_IsEnabledCounter(sensor.timer)) // If back detector was triggered, and the timer was not already going, start it.
    {
      LL_TIM_SetCounter(sensor.timer, 0);
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
      LL_TIM_EnableIT_UPDATE(sensor.timer);
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rowes.
    }
    else
    {
      LOG_DBG_ENTRY("ERROR: Back row hit after scoring row.");
    }
  }
  else // it is not the back row.
  {
    if (LL_TIM_IsEnabledCounter(sensor.timer) && sensor.buffer[9] = 'B') //  The timer is enabled, and the back row has been triggered previously. Get the timer value.
    {
      sensor.speed = LL_TIM_GetCounter(sensor.timer);
      LOG_DBG_ENTRY("DEBUG: New speed measurement: %d.", sensor.speed);
    }
    else // The timer is not started, we should start the timer as it is also used to ensure enough time has passed before registering a new value.
    {
      LL_TIM_SetCounter(sensor.timer, 0);
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
      LL_TIM_EnableIT_UPDATE(sensor.timer);
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rowes.
    }
  }
}

void timer2UpdateISR()
{
  // Stop the timer then enable the flag for new value.
  LL_TIM_ClearFlag_UPDATE(sensor.timer);
  LL_TIM_DisableCounter(sensor.timer);
  LL_TIM_DisableIT_UPDATE(sensor.timer);
  LL_TIM_SetCounter(sensor.timer, 0);
  sensor.newValue = 1;
}

