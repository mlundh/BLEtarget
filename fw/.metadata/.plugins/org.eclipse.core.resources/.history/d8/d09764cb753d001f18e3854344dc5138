
#include "app.h"
#include "sensor.h"
#include "i2c_slave.h"


uint8_t* serialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t *value);
uint8_t* deserialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t* value);



void app_init(I2C_HandleTypeDef* hi2c)
{
  i2c_slave_init(hi2c);

}


void taskCyclic()
{
  if(Sensor_newValue())
  {
    int position = Sensor_getPos();
    float speed = Sensor_getSpeed();
    Sensor_clear();
    LOG_ENTRY("Position: %d, Speed: %d", position, (int)speed);
  }
}


uint8_t* serialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t *value)
{
    return serialize_uint32_t(buffer, size, (uint32_t*)value);
}

uint8_t* deserialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t* value)
{
    return deserialize_uint32_t(buffer, size, (uint32_t*)value);
}

uint8_t* serialize_uint32_t(uint8_t *buffer, uint32_t* size, uint32_t* value)
{
    if(!buffer || *size < 4)
    {
        return 0;
    }
    buffer[0]  = (uint8_t)((*value >> 24)   & 0xFF);
    buffer[1]  = (uint8_t)((*value >> 16)   & 0xFF);
    buffer[2]  = (uint8_t)((*value >> 8)    & 0xFF);
    buffer[3]  = (uint8_t)((*value)         & 0xFF);
    *size -= 4;
    return buffer + 4;
}

uint8_t* deserialize_uint32_t(uint8_t *buffer, uint32_t* size, uint32_t* value)
{
    if(!buffer || *size < 4)
    {
        return 0;
    }
    *value = (((int32_t)buffer[0]) << 24)+
            (((int32_t)buffer[1]) << 16) +
            (((int32_t)buffer[2]) << 8) +
            ((int32_t)buffer[3]);
    ;
    *size -= 4;
    return buffer + 4;
}
