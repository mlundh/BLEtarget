
BleTarget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012b50  08000140  08000140  00001140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08012c90  08012c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012fac  08012fac  00013fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08012fb4  08012fb4  00013fb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08012fb8  08012fb8  00013fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000184  20000008  08012fbc  00014008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  2000018c  08013140  0001418c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c4  08013175  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f0c  200001d8  08013186  000141d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020e4  08013186  000150e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00014a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00015000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00015000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  08013186  000141e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003c0c8  00000000  00000000  00014a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000855d  00000000  00000000  00050b5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000032d0  00000000  00000000  000590c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000026ba  00000000  00000000  0005c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000325b0  00000000  00000000  0005ea4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003bc06  00000000  00000000  00090ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001057ca  00000000  00000000  000ccc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001d23ca  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d718  00000000  00000000  001d2410  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000052  00000000  00000000  001dfb28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d8 	.word	0x200001d8
 800015c:	00000000 	.word	0x00000000
 8000160:	08012c78 	.word	0x08012c78

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001dc 	.word	0x200001dc
 800017c:	08012c78 	.word	0x08012c78

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	@ 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009e0:	f000 b96a 	b.w	8000cb8 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9d08      	ldr	r5, [sp, #32]
 8000a02:	460c      	mov	r4, r1
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d14e      	bne.n	8000aa6 <__udivmoddi4+0xaa>
 8000a08:	4694      	mov	ip, r2
 8000a0a:	458c      	cmp	ip, r1
 8000a0c:	4686      	mov	lr, r0
 8000a0e:	fab2 f282 	clz	r2, r2
 8000a12:	d962      	bls.n	8000ada <__udivmoddi4+0xde>
 8000a14:	b14a      	cbz	r2, 8000a2a <__udivmoddi4+0x2e>
 8000a16:	f1c2 0320 	rsb	r3, r2, #32
 8000a1a:	4091      	lsls	r1, r2
 8000a1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a24:	4319      	orrs	r1, r3
 8000a26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a2e:	fa1f f68c 	uxth.w	r6, ip
 8000a32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a42:	fb04 f106 	mul.w	r1, r4, r6
 8000a46:	4299      	cmp	r1, r3
 8000a48:	d90a      	bls.n	8000a60 <__udivmoddi4+0x64>
 8000a4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a4e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a52:	f080 8112 	bcs.w	8000c7a <__udivmoddi4+0x27e>
 8000a56:	4299      	cmp	r1, r3
 8000a58:	f240 810f 	bls.w	8000c7a <__udivmoddi4+0x27e>
 8000a5c:	3c02      	subs	r4, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	1a59      	subs	r1, r3, r1
 8000a62:	fa1f f38e 	uxth.w	r3, lr
 8000a66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a72:	fb00 f606 	mul.w	r6, r0, r6
 8000a76:	429e      	cmp	r6, r3
 8000a78:	d90a      	bls.n	8000a90 <__udivmoddi4+0x94>
 8000a7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a7e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a82:	f080 80fc 	bcs.w	8000c7e <__udivmoddi4+0x282>
 8000a86:	429e      	cmp	r6, r3
 8000a88:	f240 80f9 	bls.w	8000c7e <__udivmoddi4+0x282>
 8000a8c:	4463      	add	r3, ip
 8000a8e:	3802      	subs	r0, #2
 8000a90:	1b9b      	subs	r3, r3, r6
 8000a92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a96:	2100      	movs	r1, #0
 8000a98:	b11d      	cbz	r5, 8000aa2 <__udivmoddi4+0xa6>
 8000a9a:	40d3      	lsrs	r3, r2
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d905      	bls.n	8000ab6 <__udivmoddi4+0xba>
 8000aaa:	b10d      	cbz	r5, 8000ab0 <__udivmoddi4+0xb4>
 8000aac:	e9c5 0100 	strd	r0, r1, [r5]
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	e7f5      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000ab6:	fab3 f183 	clz	r1, r3
 8000aba:	2900      	cmp	r1, #0
 8000abc:	d146      	bne.n	8000b4c <__udivmoddi4+0x150>
 8000abe:	42a3      	cmp	r3, r4
 8000ac0:	d302      	bcc.n	8000ac8 <__udivmoddi4+0xcc>
 8000ac2:	4290      	cmp	r0, r2
 8000ac4:	f0c0 80f0 	bcc.w	8000ca8 <__udivmoddi4+0x2ac>
 8000ac8:	1a86      	subs	r6, r0, r2
 8000aca:	eb64 0303 	sbc.w	r3, r4, r3
 8000ace:	2001      	movs	r0, #1
 8000ad0:	2d00      	cmp	r5, #0
 8000ad2:	d0e6      	beq.n	8000aa2 <__udivmoddi4+0xa6>
 8000ad4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ad8:	e7e3      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000ada:	2a00      	cmp	r2, #0
 8000adc:	f040 8090 	bne.w	8000c00 <__udivmoddi4+0x204>
 8000ae0:	eba1 040c 	sub.w	r4, r1, ip
 8000ae4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ae8:	fa1f f78c 	uxth.w	r7, ip
 8000aec:	2101      	movs	r1, #1
 8000aee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000af2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000af6:	fb08 4416 	mls	r4, r8, r6, r4
 8000afa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000afe:	fb07 f006 	mul.w	r0, r7, r6
 8000b02:	4298      	cmp	r0, r3
 8000b04:	d908      	bls.n	8000b18 <__udivmoddi4+0x11c>
 8000b06:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x11a>
 8000b10:	4298      	cmp	r0, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2b4>
 8000b16:	4626      	mov	r6, r4
 8000b18:	1a1c      	subs	r4, r3, r0
 8000b1a:	fa1f f38e 	uxth.w	r3, lr
 8000b1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b22:	fb08 4410 	mls	r4, r8, r0, r4
 8000b26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b2a:	fb00 f707 	mul.w	r7, r0, r7
 8000b2e:	429f      	cmp	r7, r3
 8000b30:	d908      	bls.n	8000b44 <__udivmoddi4+0x148>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b3a:	d202      	bcs.n	8000b42 <__udivmoddi4+0x146>
 8000b3c:	429f      	cmp	r7, r3
 8000b3e:	f200 80b0 	bhi.w	8000ca2 <__udivmoddi4+0x2a6>
 8000b42:	4620      	mov	r0, r4
 8000b44:	1bdb      	subs	r3, r3, r7
 8000b46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b4a:	e7a5      	b.n	8000a98 <__udivmoddi4+0x9c>
 8000b4c:	f1c1 0620 	rsb	r6, r1, #32
 8000b50:	408b      	lsls	r3, r1
 8000b52:	fa22 f706 	lsr.w	r7, r2, r6
 8000b56:	431f      	orrs	r7, r3
 8000b58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b60:	ea43 030c 	orr.w	r3, r3, ip
 8000b64:	40f4      	lsrs	r4, r6
 8000b66:	fa00 f801 	lsl.w	r8, r0, r1
 8000b6a:	0c38      	lsrs	r0, r7, #16
 8000b6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b70:	fbb4 fef0 	udiv	lr, r4, r0
 8000b74:	fa1f fc87 	uxth.w	ip, r7
 8000b78:	fb00 441e 	mls	r4, r0, lr, r4
 8000b7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b80:	fb0e f90c 	mul.w	r9, lr, ip
 8000b84:	45a1      	cmp	r9, r4
 8000b86:	fa02 f201 	lsl.w	r2, r2, r1
 8000b8a:	d90a      	bls.n	8000ba2 <__udivmoddi4+0x1a6>
 8000b8c:	193c      	adds	r4, r7, r4
 8000b8e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b92:	f080 8084 	bcs.w	8000c9e <__udivmoddi4+0x2a2>
 8000b96:	45a1      	cmp	r9, r4
 8000b98:	f240 8081 	bls.w	8000c9e <__udivmoddi4+0x2a2>
 8000b9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ba0:	443c      	add	r4, r7
 8000ba2:	eba4 0409 	sub.w	r4, r4, r9
 8000ba6:	fa1f f983 	uxth.w	r9, r3
 8000baa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bae:	fb00 4413 	mls	r4, r0, r3, r4
 8000bb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bba:	45a4      	cmp	ip, r4
 8000bbc:	d907      	bls.n	8000bce <__udivmoddi4+0x1d2>
 8000bbe:	193c      	adds	r4, r7, r4
 8000bc0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bc4:	d267      	bcs.n	8000c96 <__udivmoddi4+0x29a>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	d965      	bls.n	8000c96 <__udivmoddi4+0x29a>
 8000bca:	3b02      	subs	r3, #2
 8000bcc:	443c      	add	r4, r7
 8000bce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bd6:	eba4 040c 	sub.w	r4, r4, ip
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	46ce      	mov	lr, r9
 8000bde:	469c      	mov	ip, r3
 8000be0:	d351      	bcc.n	8000c86 <__udivmoddi4+0x28a>
 8000be2:	d04e      	beq.n	8000c82 <__udivmoddi4+0x286>
 8000be4:	b155      	cbz	r5, 8000bfc <__udivmoddi4+0x200>
 8000be6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bea:	eb64 040c 	sbc.w	r4, r4, ip
 8000bee:	fa04 f606 	lsl.w	r6, r4, r6
 8000bf2:	40cb      	lsrs	r3, r1
 8000bf4:	431e      	orrs	r6, r3
 8000bf6:	40cc      	lsrs	r4, r1
 8000bf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	e750      	b.n	8000aa2 <__udivmoddi4+0xa6>
 8000c00:	f1c2 0320 	rsb	r3, r2, #32
 8000c04:	fa20 f103 	lsr.w	r1, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000c10:	4094      	lsls	r4, r2
 8000c12:	430c      	orrs	r4, r1
 8000c14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c24:	fb08 3110 	mls	r1, r8, r0, r3
 8000c28:	0c23      	lsrs	r3, r4, #16
 8000c2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2e:	fb00 f107 	mul.w	r1, r0, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d908      	bls.n	8000c48 <__udivmoddi4+0x24c>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c3e:	d22c      	bcs.n	8000c9a <__udivmoddi4+0x29e>
 8000c40:	4299      	cmp	r1, r3
 8000c42:	d92a      	bls.n	8000c9a <__udivmoddi4+0x29e>
 8000c44:	3802      	subs	r0, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c50:	fb08 3311 	mls	r3, r8, r1, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb01 f307 	mul.w	r3, r1, r7
 8000c5c:	42a3      	cmp	r3, r4
 8000c5e:	d908      	bls.n	8000c72 <__udivmoddi4+0x276>
 8000c60:	eb1c 0404 	adds.w	r4, ip, r4
 8000c64:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c68:	d213      	bcs.n	8000c92 <__udivmoddi4+0x296>
 8000c6a:	42a3      	cmp	r3, r4
 8000c6c:	d911      	bls.n	8000c92 <__udivmoddi4+0x296>
 8000c6e:	3902      	subs	r1, #2
 8000c70:	4464      	add	r4, ip
 8000c72:	1ae4      	subs	r4, r4, r3
 8000c74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c78:	e739      	b.n	8000aee <__udivmoddi4+0xf2>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	e6f0      	b.n	8000a60 <__udivmoddi4+0x64>
 8000c7e:	4608      	mov	r0, r1
 8000c80:	e706      	b.n	8000a90 <__udivmoddi4+0x94>
 8000c82:	45c8      	cmp	r8, r9
 8000c84:	d2ae      	bcs.n	8000be4 <__udivmoddi4+0x1e8>
 8000c86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c8e:	3801      	subs	r0, #1
 8000c90:	e7a8      	b.n	8000be4 <__udivmoddi4+0x1e8>
 8000c92:	4631      	mov	r1, r6
 8000c94:	e7ed      	b.n	8000c72 <__udivmoddi4+0x276>
 8000c96:	4603      	mov	r3, r0
 8000c98:	e799      	b.n	8000bce <__udivmoddi4+0x1d2>
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	e7d4      	b.n	8000c48 <__udivmoddi4+0x24c>
 8000c9e:	46d6      	mov	lr, sl
 8000ca0:	e77f      	b.n	8000ba2 <__udivmoddi4+0x1a6>
 8000ca2:	4463      	add	r3, ip
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	e74d      	b.n	8000b44 <__udivmoddi4+0x148>
 8000ca8:	4606      	mov	r6, r0
 8000caa:	4623      	mov	r3, r4
 8000cac:	4608      	mov	r0, r1
 8000cae:	e70f      	b.n	8000ad0 <__udivmoddi4+0xd4>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	4463      	add	r3, ip
 8000cb4:	e730      	b.n	8000b18 <__udivmoddi4+0x11c>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_idiv0>:
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop

08000cbc <app_init>:

static uint8_t master = 1;
static SLIP_t *slipPacket = NULL;

void app_init(I2C_HandleTypeDef* hi2c)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  slipPacket = Slip_Create(32);
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	f000 fc28 	bl	800151a <Slip_Create>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a0c      	ldr	r2, [pc, #48]	@ (8000d00 <app_init+0x44>)
 8000cce:	6013      	str	r3, [r2, #0]
  master = (GPIO_PIN_SET == HAL_GPIO_ReadPin(BOOT_GPIO_Port,BOOT_Pin));
 8000cd0:	2108      	movs	r1, #8
 8000cd2:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <app_init+0x48>)
 8000cd4:	f002 fc36 	bl	8003544 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	bf0c      	ite	eq
 8000cde:	2301      	moveq	r3, #1
 8000ce0:	2300      	movne	r3, #0
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b08      	ldr	r3, [pc, #32]	@ (8000d08 <app_init+0x4c>)
 8000ce8:	701a      	strb	r2, [r3, #0]
  if(master)
 8000cea:	4b07      	ldr	r3, [pc, #28]	@ (8000d08 <app_init+0x4c>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <app_init+0x3c>
  {
    I2C_slave_init(hi2c);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f000 f8b2 	bl	8000e5c <I2C_slave_init>
  }
  else
  {
    // any other init needed?
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200001f4 	.word	0x200001f4
 8000d04:	48001c00 	.word	0x48001c00
 8000d08:	20000008 	.word	0x20000008

08000d0c <taskCyclic>:

void taskCyclic()
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	@ 0x38
 8000d10:	af00      	add	r7, sp, #0
  if(Sensor_newValue())
 8000d12:	f000 fa57 	bl	80011c4 <Sensor_newValue>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d07a      	beq.n	8000e12 <taskCyclic+0x106>
  {
    int32_t position = Sensor_getPos();
 8000d1c:	f000 f9c8 	bl	80010b0 <Sensor_getPos>
 8000d20:	4603      	mov	r3, r0
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    float speed = Sensor_getSpeed();
 8000d24:	f000 fa10 	bl	8001148 <Sensor_getSpeed>
 8000d28:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
    Sensor_clear();
 8000d2c:	f000 fa56 	bl	80011dc <Sensor_clear>

    uint8_t buffer[DATA_LENGTH] = {0};
 8000d30:	2300      	movs	r3, #0
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    uint8_t* buffP = buffer;
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	633b      	str	r3, [r7, #48]	@ 0x30
    uint32_t buffSize = DATA_LENGTH;
 8000d3e:	2308      	movs	r3, #8
 8000d40:	61bb      	str	r3, [r7, #24]

    int32_t speedInt = (int32_t)speed;
 8000d42:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8000d46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d4a:	ee17 3a90 	vmov	r3, s15
 8000d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int32_t speedDecimal = (int32_t)((speed - speedInt) * 1000);
 8000d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d52:	ee07 3a90 	vmov	s15, r3
 8000d56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5a:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8000d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d62:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000e1c <taskCyclic+0x110>
 8000d66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d6e:	ee17 3a90 	vmov	r3, s15
 8000d72:	617b      	str	r3, [r7, #20]

    int32_t zero = 0;
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
    uint8_t message[12];
    uint8_t *messageP = message;
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t bufferSize = BUFFER_SIZE;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	603b      	str	r3, [r7, #0]
    messageP = serialize_int32_t(messageP, &bufferSize, &position);
 8000d80:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d8a:	f000 fbb6 	bl	80014fa <serialize_int32_t>
 8000d8e:	62b8      	str	r0, [r7, #40]	@ 0x28
    messageP = serialize_int32_t(messageP, &bufferSize, &zero);
 8000d90:	f107 0210 	add.w	r2, r7, #16
 8000d94:	463b      	mov	r3, r7
 8000d96:	4619      	mov	r1, r3
 8000d98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000d9a:	f000 fbae 	bl	80014fa <serialize_int32_t>
 8000d9e:	62b8      	str	r0, [r7, #40]	@ 0x28
    messageP = serialize_int32_t(messageP, &bufferSize, &speedDecimal);
 8000da0:	f107 0214 	add.w	r2, r7, #20
 8000da4:	463b      	mov	r3, r7
 8000da6:	4619      	mov	r1, r3
 8000da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000daa:	f000 fba6 	bl	80014fa <serialize_int32_t>
 8000dae:	62b8      	str	r0, [r7, #40]	@ 0x28

    Slip_Packetize(message, 12, slipPacket);
 8000db0:	4b1b      	ldr	r3, [pc, #108]	@ (8000e20 <taskCyclic+0x114>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	210c      	movs	r1, #12
 8000db8:	4618      	mov	r0, r3
 8000dba:	f000 fbd9 	bl	8001570 <Slip_Packetize>

    CDC_Transmit_FS(slipPacket->payload, slipPacket->packetSize);
 8000dbe:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <taskCyclic+0x114>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <taskCyclic+0x114>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	889b      	ldrh	r3, [r3, #4]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4610      	mov	r0, r2
 8000dce:	f010 ff2d 	bl	8011c2c <CDC_Transmit_FS>
    //LOG_ENTRY("Position: %d, Speed: %d,%d", (int)position, (int)speedInt, (int)speedDecimal);
    if(master)
 8000dd2:	4b14      	ldr	r3, [pc, #80]	@ (8000e24 <taskCyclic+0x118>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d015      	beq.n	8000e06 <taskCyclic+0xfa>
    {
      serialize_int32_t(buffP, &buffSize, &position);
 8000dda:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000dde:	f107 0318 	add.w	r3, r7, #24
 8000de2:	4619      	mov	r1, r3
 8000de4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000de6:	f000 fb88 	bl	80014fa <serialize_int32_t>
      serialize_int32_t(buffP, &buffSize, &speedDecimal);
 8000dea:	f107 0214 	add.w	r2, r7, #20
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	4619      	mov	r1, r3
 8000df4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000df6:	f000 fb80 	bl	80014fa <serialize_int32_t>

      I2C_slave_updateData(buffer);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f000 f84a 	bl	8000e98 <I2C_slave_updateData>
      // send on uart or BLE!

    }

  }
}
 8000e04:	e005      	b.n	8000e12 <taskCyclic+0x106>
      I2C_master_read(buffer, DATA_LENGTH);
 8000e06:	f107 031c 	add.w	r3, r7, #28
 8000e0a:	2108      	movs	r1, #8
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f000 f80b 	bl	8000e28 <I2C_master_read>
}
 8000e12:	bf00      	nop
 8000e14:	3738      	adds	r7, #56	@ 0x38
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	447a0000 	.word	0x447a0000
 8000e20:	200001f4 	.word	0x200001f4
 8000e24:	20000008 	.word	0x20000008

08000e28 <I2C_master_read>:
  I2C_master_obj.i2c_handler = hi2c;
  memset(&(I2C_master_obj.data), 0, DATA_LENGTH);
}

void I2C_master_read(uint8_t *buffer, uint16_t Size)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Master_Receive(I2C_master_obj.i2c_handler, I2C_master_obj.slaveAddr, I2C_master_obj.data, DATA_LENGTH, 500);
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <I2C_master_read+0x2c>)
 8000e36:	68d8      	ldr	r0, [r3, #12]
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <I2C_master_read+0x2c>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2308      	movs	r3, #8
 8000e46:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <I2C_master_read+0x30>)
 8000e48:	f002 fcb2 	bl	80037b0 <HAL_I2C_Master_Receive>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	200001f8 	.word	0x200001f8
 8000e58:	200001f9 	.word	0x200001f9

08000e5c <I2C_slave_init>:
#include "i2c_slave.h"

i2cS_t I2C_slave_obj;

void I2C_slave_init(I2C_HandleTypeDef *hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  I2C_slave_obj.i2c_handler = hi2c;
 8000e64:	4a0a      	ldr	r2, [pc, #40]	@ (8000e90 <I2C_slave_init+0x34>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	60d3      	str	r3, [r2, #12]
  I2C_slave_obj.regAddr = 0;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	@ (8000e90 <I2C_slave_init+0x34>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
  I2C_slave_obj.txcount = 0;
 8000e70:	4b07      	ldr	r3, [pc, #28]	@ (8000e90 <I2C_slave_init+0x34>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	705a      	strb	r2, [r3, #1]
  memset(&(I2C_slave_obj.data), 0, DATA_LENGTH);
 8000e76:	2208      	movs	r2, #8
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4806      	ldr	r0, [pc, #24]	@ (8000e94 <I2C_slave_init+0x38>)
 8000e7c:	f011 feaa 	bl	8012bd4 <memset>


  HAL_I2C_EnableListen_IT(hi2c);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f002 feef 	bl	8003c64 <HAL_I2C_EnableListen_IT>
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000208 	.word	0x20000208
 8000e94:	2000020a 	.word	0x2000020a

08000e98 <I2C_slave_updateData>:

void I2C_slave_updateData(uint8_t data[DATA_LENGTH])
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  memcpy(&(I2C_slave_obj.data), data, DATA_LENGTH);
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <I2C_slave_updateData+0x24>)
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	3302      	adds	r3, #2
 8000ea6:	6811      	ldr	r1, [r2, #0]
 8000ea8:	6852      	ldr	r2, [r2, #4]
 8000eaa:	6019      	str	r1, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000208 	.word	0x20000208

08000ec0 <ResetI2C>:

static void ResetI2C(I2C_HandleTypeDef *rev_i2c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_I2C_DeInit(rev_i2c);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f002 fc42 	bl	8003752 <HAL_I2C_DeInit>
  HAL_I2C_Init(rev_i2c);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f002 fba4 	bl	800361c <HAL_I2C_Init>
  I2C_slave_obj.regAddr = 0;
 8000ed4:	4b07      	ldr	r3, [pc, #28]	@ (8000ef4 <ResetI2C+0x34>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
  I2C_slave_obj.txcount = 0;
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <ResetI2C+0x34>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	705a      	strb	r2, [r3, #1]
  memset(I2C_slave_obj.data, 0, DATA_LENGTH);
 8000ee0:	2208      	movs	r2, #8
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4804      	ldr	r0, [pc, #16]	@ (8000ef8 <ResetI2C+0x38>)
 8000ee6:	f011 fe75 	bl	8012bd4 <memset>
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000208 	.word	0x20000208
 8000ef8:	2000020a 	.word	0x2000020a

08000efc <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
    uint16_t AddrMatchCode)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
 8000f08:	4613      	mov	r3, r2
 8000f0a:	803b      	strh	r3, [r7, #0]
  if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d10a      	bne.n	8000f28 <HAL_I2C_AddrCallback+0x2c>
  {
    I2C_slave_obj.regAddr = 0; // reset the register address
 8000f12:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <HAL_I2C_AddrCallback+0x44>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Seq_Receive_IT(hi2c, &(I2C_slave_obj.regAddr), 1, I2C_FIRST_AND_LAST_FRAME);
 8000f18:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4908      	ldr	r1, [pc, #32]	@ (8000f40 <HAL_I2C_AddrCallback+0x44>)
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f002 fded 	bl	8003b00 <HAL_I2C_Slave_Seq_Receive_IT>
  }
  else
  {
    HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_slave_obj.data, DATA_LENGTH, I2C_FIRST_AND_LAST_FRAME);
  }
}
 8000f26:	e006      	b.n	8000f36 <HAL_I2C_AddrCallback+0x3a>
    HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_slave_obj.data, DATA_LENGTH, I2C_FIRST_AND_LAST_FRAME);
 8000f28:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4905      	ldr	r1, [pc, #20]	@ (8000f44 <HAL_I2C_AddrCallback+0x48>)
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f002 fd33 	bl	800399c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000208 	.word	0x20000208
 8000f44:	2000020a 	.word	0x2000020a

08000f48 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  // We never want to receive data other than the reg address.
  HAL_I2C_EnableListen_IT(hi2c);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f002 fe87 	bl	8003c64 <HAL_I2C_EnableListen_IT>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f002 fe7c 	bl	8003c64 <HAL_I2C_EnableListen_IT>
}
 8000f6c:	bf00      	nop
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f002 fe71 	bl	8003c64 <HAL_I2C_EnableListen_IT>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b084      	sub	sp, #16
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	6078      	str	r0, [r7, #4]
  uint32_t error_code = HAL_I2C_GetError(hi2c);
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f002 ff2d 	bl	8003df2 <HAL_I2C_GetError>
 8000f98:	60f8      	str	r0, [r7, #12]

  if (error_code == HAL_I2C_ERROR_AF)
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b04      	cmp	r3, #4
 8000f9e:	d005      	beq.n	8000fac <HAL_I2C_ErrorCallback+0x22>
  {

  }
  else if(error_code == HAL_I2C_ERROR_BERR)
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d102      	bne.n	8000fac <HAL_I2C_ErrorCallback+0x22>
  {
    ResetI2C(hi2c);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ff8a 	bl	8000ec0 <ResetI2C>
  }
  HAL_I2C_EnableListen_IT(hi2c);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f002 fe59 	bl	8003c64 <HAL_I2C_EnableListen_IT>
}
 8000fb2:	bf00      	nop
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f043 0201 	orr.w	r2, r3, #1
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f023 0201 	bic.w	r2, r3, #1
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	601a      	str	r2, [r3, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <LL_TIM_IsEnabledCounter+0x18>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <LL_TIM_IsEnabledCounter+0x1a>
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	683a      	ldr	r2, [r7, #0]
 800102e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001048:	4618      	mov	r0, r3
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f06f 0201 	mvn.w	r2, #1
 8001062:	611a      	str	r2, [r3, #16]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	f043 0201 	orr.w	r2, r3, #1
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60da      	str	r2, [r3, #12]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	f023 0201 	bic.w	r2, r3, #1
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	60da      	str	r2, [r3, #12]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <Sensor_getPos>:

// Multiple adjacent triggered photodiodes are allowed, this would represent a hit between the channels.
// It is not allowed to have a gap in between. This would be an error condition.

int Sensor_getPos()
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
  int returnValue = ERROR;
 80010b6:	2358      	movs	r3, #88	@ 0x58
 80010b8:	60fb      	str	r3, [r7, #12]
  if (sensor.newValue)
 80010ba:	4b22      	ldr	r3, [pc, #136]	@ (8001144 <Sensor_getPos+0x94>)
 80010bc:	7c9b      	ldrb	r3, [r3, #18]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d039      	beq.n	8001136 <Sensor_getPos+0x86>
  {
    uint8_t first = NOT_USED;
 80010c2:	2363      	movs	r3, #99	@ 0x63
 80010c4:	72fb      	strb	r3, [r7, #11]
    uint8_t last = NOT_USED;
 80010c6:	2363      	movs	r3, #99	@ 0x63
 80010c8:	72bb      	strb	r3, [r7, #10]

    for (int i = 0; i < (BACK_CHANNEL); i++)
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	e01b      	b.n	8001108 <Sensor_getPos+0x58>
    {
      if (sensor.buffer[i])
 80010d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <Sensor_getPos+0x94>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	3308      	adds	r3, #8
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d011      	beq.n	8001102 <Sensor_getPos+0x52>
      {
        if (first == NOT_USED)    // If no hit is registered yet, then register.
 80010de:	7afb      	ldrb	r3, [r7, #11]
 80010e0:	2b63      	cmp	r3, #99	@ 0x63
 80010e2:	d104      	bne.n	80010ee <Sensor_getPos+0x3e>
        {
          first = i;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	72fb      	strb	r3, [r7, #11]
          last = i;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	72bb      	strb	r3, [r7, #10]
 80010ec:	e009      	b.n	8001102 <Sensor_getPos+0x52>
        }
        else
        {
          if ((last + 1) == i) // If there is a hit registered, make sure the last hit was the adjacent sensor.
 80010ee:	7abb      	ldrb	r3, [r7, #10]
 80010f0:	3301      	adds	r3, #1
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d102      	bne.n	80010fe <Sensor_getPos+0x4e>
          {
            last = i;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	72bb      	strb	r3, [r7, #10]
 80010fc:	e001      	b.n	8001102 <Sensor_getPos+0x52>
          }
          else
          {
            // error condition!
            //ERROR_ENTRY("Gaps between triggered sensors.");
            return returnValue;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	e01a      	b.n	8001138 <Sensor_getPos+0x88>
    for (int i = 0; i < (BACK_CHANNEL); i++)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	3301      	adds	r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b08      	cmp	r3, #8
 800110c:	dde0      	ble.n	80010d0 <Sensor_getPos+0x20>
          }
        }
      }
    }

    if (first != NOT_USED) // If there is a valid hit
 800110e:	7afb      	ldrb	r3, [r7, #11]
 8001110:	2b63      	cmp	r3, #99	@ 0x63
 8001112:	d009      	beq.n	8001128 <Sensor_getPos+0x78>
    {
      returnValue = ((first * MM_BETWEEN_SENSORS) + (last * MM_BETWEEN_SENSORS))
 8001114:	7afa      	ldrb	r2, [r7, #11]
 8001116:	7abb      	ldrb	r3, [r7, #10]
 8001118:	441a      	add	r2, r3
 800111a:	4613      	mov	r3, r2
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4413      	add	r3, r2
 8001120:	0fda      	lsrs	r2, r3, #31
 8001122:	4413      	add	r3, r2
 8001124:	105b      	asrs	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
          / 2; // integer values, scale to 5mm between channels.
    }

    if (sensor.buffer[BACK_CHANNEL]) // Left is negative.
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <Sensor_getPos+0x94>)
 800112a:	7c5b      	ldrb	r3, [r3, #17]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <Sensor_getPos+0x86>
    {
      returnValue = -(returnValue);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	425b      	negs	r3, r3
 8001134:	60fb      	str	r3, [r7, #12]
    }
  }
  //LOG_DBG_ENTRY("Position = %d",returnValue);
  return returnValue;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	2000000c 	.word	0x2000000c

08001148 <Sensor_getSpeed>:

float Sensor_getSpeed()
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
  float returnValue = 0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  if (sensor.newValue && sensor.buffer[BACK_CHANNEL])
 8001154:	4b1a      	ldr	r3, [pc, #104]	@ (80011c0 <Sensor_getSpeed+0x78>)
 8001156:	7c9b      	ldrb	r3, [r3, #18]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d021      	beq.n	80011a0 <Sensor_getSpeed+0x58>
 800115c:	4b18      	ldr	r3, [pc, #96]	@ (80011c0 <Sensor_getSpeed+0x78>)
 800115e:	7c5b      	ldrb	r3, [r3, #17]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d01d      	beq.n	80011a0 <Sensor_getSpeed+0x58>
  {
    returnValue = DISTANCE_ROWS_M / (((float) sensor.speed) * TIME_PERIOD_S);
 8001164:	4b16      	ldr	r3, [pc, #88]	@ (80011c0 <Sensor_getSpeed+0x78>)
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001170:	ee17 0a90 	vmov	r0, s15
 8001174:	f7ff f970 	bl	8000458 <__aeabi_f2d>
 8001178:	a30d      	add	r3, pc, #52	@ (adr r3, 80011b0 <Sensor_getSpeed+0x68>)
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f7ff f9c3 	bl	8000508 <__aeabi_dmul>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	a10c      	add	r1, pc, #48	@ (adr r1, 80011b8 <Sensor_getSpeed+0x70>)
 8001188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800118c:	f7ff fae6 	bl	800075c <__aeabi_ddiv>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4610      	mov	r0, r2
 8001196:	4619      	mov	r1, r3
 8001198:	f7ff fbc8 	bl	800092c <__aeabi_d2f>
 800119c:	4603      	mov	r3, r0
 800119e:	607b      	str	r3, [r7, #4]
    //LOG_DBG_ENTRY("Speed = %d",(int)returnValue);
  }
  return returnValue;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	ee07 3a90 	vmov	s15, r3
}
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	a0b5ed8d 	.word	0xa0b5ed8d
 80011b4:	3e50c6f7 	.word	0x3e50c6f7
 80011b8:	47ae147b 	.word	0x47ae147b
 80011bc:	3f847ae1 	.word	0x3f847ae1
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <Sensor_newValue>:

unsigned int Sensor_newValue()
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return sensor.newValue;
 80011c8:	4b03      	ldr	r3, [pc, #12]	@ (80011d8 <Sensor_newValue+0x14>)
 80011ca:	7c9b      	ldrb	r3, [r3, #18]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	2000000c 	.word	0x2000000c

080011dc <Sensor_clear>:

void Sensor_clear()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  memset(sensor.buffer, 0, NR_CHANNELS); // clean up and get ready for next hit.
 80011e0:	220a      	movs	r2, #10
 80011e2:	2100      	movs	r1, #0
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <Sensor_clear+0x20>)
 80011e6:	f011 fcf5 	bl	8012bd4 <memset>
  sensor.speed = 0;
 80011ea:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <Sensor_clear+0x24>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  sensor.newValue = 0;
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <Sensor_clear+0x24>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	749a      	strb	r2, [r3, #18]
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000014 	.word	0x20000014
 8001200:	2000000c 	.word	0x2000000c

08001204 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == CH_C_Pin)
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001214:	d102      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x18>
  {
    sensor.buffer[0] = 1;
 8001216:	4b45      	ldr	r3, [pc, #276]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001218:	2201      	movs	r2, #1
 800121a:	721a      	strb	r2, [r3, #8]
  }
  if (GPIO_Pin == CH_1_Pin)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d102      	bne.n	8001228 <HAL_GPIO_EXTI_Callback+0x24>
  {
    sensor.buffer[1] = 1;
 8001222:	4b42      	ldr	r3, [pc, #264]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001224:	2201      	movs	r2, #1
 8001226:	725a      	strb	r2, [r3, #9]
  }
  if (GPIO_Pin == CH_2_Pin)
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	2b02      	cmp	r3, #2
 800122c:	d102      	bne.n	8001234 <HAL_GPIO_EXTI_Callback+0x30>
  {
    sensor.buffer[2] = 1;
 800122e:	4b3f      	ldr	r3, [pc, #252]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001230:	2201      	movs	r2, #1
 8001232:	729a      	strb	r2, [r3, #10]
  }
  if (GPIO_Pin == CH_3_Pin)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	2b04      	cmp	r3, #4
 8001238:	d102      	bne.n	8001240 <HAL_GPIO_EXTI_Callback+0x3c>
  {
    sensor.buffer[3] = 1;
 800123a:	4b3c      	ldr	r3, [pc, #240]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 800123c:	2201      	movs	r2, #1
 800123e:	72da      	strb	r2, [r3, #11]
  }
  if (GPIO_Pin == CH_4_Pin)
 8001240:	88fb      	ldrh	r3, [r7, #6]
 8001242:	2b08      	cmp	r3, #8
 8001244:	d102      	bne.n	800124c <HAL_GPIO_EXTI_Callback+0x48>
  {
    sensor.buffer[4] = 1;
 8001246:	4b39      	ldr	r3, [pc, #228]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001248:	2201      	movs	r2, #1
 800124a:	731a      	strb	r2, [r3, #12]
  }
  if (GPIO_Pin == CH_5_Pin)
 800124c:	88fb      	ldrh	r3, [r7, #6]
 800124e:	2b10      	cmp	r3, #16
 8001250:	d102      	bne.n	8001258 <HAL_GPIO_EXTI_Callback+0x54>
  {
    sensor.buffer[5] = 1;
 8001252:	4b36      	ldr	r3, [pc, #216]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001254:	2201      	movs	r2, #1
 8001256:	735a      	strb	r2, [r3, #13]
  }
  if (GPIO_Pin == CH_6_Pin)
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	2b20      	cmp	r3, #32
 800125c:	d102      	bne.n	8001264 <HAL_GPIO_EXTI_Callback+0x60>
  {
    sensor.buffer[6] = 1;
 800125e:	4b33      	ldr	r3, [pc, #204]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001260:	2201      	movs	r2, #1
 8001262:	739a      	strb	r2, [r3, #14]
  }
  if (GPIO_Pin == CH_7_Pin)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	2b40      	cmp	r3, #64	@ 0x40
 8001268:	d102      	bne.n	8001270 <HAL_GPIO_EXTI_Callback+0x6c>
  {
    sensor.buffer[7] = 1;
 800126a:	4b30      	ldr	r3, [pc, #192]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 800126c:	2201      	movs	r2, #1
 800126e:	73da      	strb	r2, [r3, #15]
  }
  if (GPIO_Pin == CH_8_Pin)
 8001270:	88fb      	ldrh	r3, [r7, #6]
 8001272:	2b80      	cmp	r3, #128	@ 0x80
 8001274:	d102      	bne.n	800127c <HAL_GPIO_EXTI_Callback+0x78>
  {
    sensor.buffer[8] = 1;
 8001276:	4b2d      	ldr	r3, [pc, #180]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001278:	2201      	movs	r2, #1
 800127a:	741a      	strb	r2, [r3, #16]
  }

  if (GPIO_Pin == CH_B_Pin) // it is the back row.
 800127c:	88fb      	ldrh	r3, [r7, #6]
 800127e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001282:	d120      	bne.n	80012c6 <HAL_GPIO_EXTI_Callback+0xc2>
  {
    sensor.buffer[BACK_CHANNEL] = 1;
 8001284:	4b29      	ldr	r3, [pc, #164]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001286:	2201      	movs	r2, #1
 8001288:	745a      	strb	r2, [r3, #17]

    if (!LL_TIM_IsEnabledCounter(sensor.timer)) // If back detector was triggered, and the timer was not already going, start it.
 800128a:	4b28      	ldr	r3, [pc, #160]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff feb3 	bl	8000ffa <LL_TIM_IsEnabledCounter>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d143      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x11e>
    {
      LL_TIM_SetCounter(sensor.timer, 0);
 800129a:	4b24      	ldr	r3, [pc, #144]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff febd 	bl	8001020 <LL_TIM_SetCounter>
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
 80012a6:	4b21      	ldr	r3, [pc, #132]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fed2 	bl	8001054 <LL_TIM_ClearFlag_UPDATE>
      LL_TIM_EnableIT_UPDATE(sensor.timer);
 80012b0:	4b1e      	ldr	r3, [pc, #120]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fedb 	bl	8001070 <LL_TIM_EnableIT_UPDATE>
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rows.
 80012ba:	4b1c      	ldr	r3, [pc, #112]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fe7b 	bl	8000fba <LL_TIM_EnableCounter>
      {
        sensor.speed = LL_TIM_GetCounter(sensor.timer); //
      }
    }
  }
}
 80012c4:	e02d      	b.n	8001322 <HAL_GPIO_EXTI_Callback+0x11e>
    if (!LL_TIM_IsEnabledCounter(sensor.timer)) //  The timer is not enabled. We should start the timer as it is also used to ensure enough time has passed before registering a new value.
 80012c6:	4b19      	ldr	r3, [pc, #100]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff fe95 	bl	8000ffa <LL_TIM_IsEnabledCounter>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d115      	bne.n	8001302 <HAL_GPIO_EXTI_Callback+0xfe>
      LL_TIM_SetCounter(sensor.timer, 0);
 80012d6:	4b15      	ldr	r3, [pc, #84]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2100      	movs	r1, #0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe9f 	bl	8001020 <LL_TIM_SetCounter>
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
 80012e2:	4b12      	ldr	r3, [pc, #72]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff feb4 	bl	8001054 <LL_TIM_ClearFlag_UPDATE>
      LL_TIM_EnableIT_UPDATE(sensor.timer);
 80012ec:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff febd 	bl	8001070 <LL_TIM_EnableIT_UPDATE>
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rowes.
 80012f6:	4b0d      	ldr	r3, [pc, #52]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fe5d 	bl	8000fba <LL_TIM_EnableCounter>
}
 8001300:	e00f      	b.n	8001322 <HAL_GPIO_EXTI_Callback+0x11e>
      if ((sensor.buffer[BACK_CHANNEL] == 1) && (!sensor.speed)) // only take a measurement if the back row was triggered, and if no other speed was registered.
 8001302:	4b0a      	ldr	r3, [pc, #40]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001304:	7c5b      	ldrb	r3, [r3, #17]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d10b      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x11e>
 800130a:	4b08      	ldr	r3, [pc, #32]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 800130c:	695b      	ldr	r3, [r3, #20]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d107      	bne.n	8001322 <HAL_GPIO_EXTI_Callback+0x11e>
        sensor.speed = LL_TIM_GetCounter(sensor.timer); //
 8001312:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fe90 	bl	800103c <LL_TIM_GetCounter>
 800131c:	4603      	mov	r3, r0
 800131e:	4a03      	ldr	r2, [pc, #12]	@ (800132c <HAL_GPIO_EXTI_Callback+0x128>)
 8001320:	6153      	str	r3, [r2, #20]
}
 8001322:	bf00      	nop
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	2000000c 	.word	0x2000000c

08001330 <timer2UpdateISR>:

void timer2UpdateISR()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  // Stop the timer then enable the flag for new value.
  LL_TIM_SetCounter(sensor.timer, 0);
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <timer2UpdateISR+0x68>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2100      	movs	r1, #0
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff fe70 	bl	8001020 <LL_TIM_SetCounter>
  LL_TIM_DisableCounter(sensor.timer);
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <timer2UpdateISR+0x68>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe48 	bl	8000fda <LL_TIM_DisableCounter>
  LL_TIM_DisableIT_UPDATE(sensor.timer);
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <timer2UpdateISR+0x68>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe9e 	bl	8001090 <LL_TIM_DisableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(sensor.timer);
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <timer2UpdateISR+0x68>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe7b 	bl	8001054 <LL_TIM_ClearFlag_UPDATE>

  sensor.newValue = 1;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <timer2UpdateISR+0x68>)
 8001360:	2201      	movs	r2, #1
 8001362:	749a      	strb	r2, [r3, #18]

  // Lockout timer, disable the external interrupts for 0.5s.
  disableExternalInterrupt();
 8001364:	f000 f838 	bl	80013d8 <disableExternalInterrupt>
  LL_TIM_SetCounter(sensor.timerLockout, 0);
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <timer2UpdateISR+0x68>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fe56 	bl	8001020 <LL_TIM_SetCounter>
  LL_TIM_ClearFlag_UPDATE(sensor.timerLockout);
 8001374:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <timer2UpdateISR+0x68>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff fe6b 	bl	8001054 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE(sensor.timerLockout);
 800137e:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <timer2UpdateISR+0x68>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe74 	bl	8001070 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(sensor.timerLockout);
 8001388:	4b03      	ldr	r3, [pc, #12]	@ (8001398 <timer2UpdateISR+0x68>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fe14 	bl	8000fba <LL_TIM_EnableCounter>
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	2000000c 	.word	0x2000000c

0800139c <timer16UpdateISR>:

void timer16UpdateISR()
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  // Stop the lockout timer and enable external interrupts.
  LL_TIM_DisableCounter(sensor.timerLockout);
 80013a0:	4b0c      	ldr	r3, [pc, #48]	@ (80013d4 <timer16UpdateISR+0x38>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe18 	bl	8000fda <LL_TIM_DisableCounter>
  LL_TIM_SetCounter(sensor.timerLockout, 0);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <timer16UpdateISR+0x38>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2100      	movs	r1, #0
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fe35 	bl	8001020 <LL_TIM_SetCounter>
  LL_TIM_DisableIT_UPDATE(sensor.timerLockout);
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <timer16UpdateISR+0x38>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe68 	bl	8001090 <LL_TIM_DisableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(sensor.timerLockout);
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <timer16UpdateISR+0x38>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fe45 	bl	8001054 <LL_TIM_ClearFlag_UPDATE>
  enableExternalInterrupt();
 80013ca:	f000 f845 	bl	8001458 <enableExternalInterrupt>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000000c 	.word	0x2000000c

080013d8 <disableExternalInterrupt>:

void disableExternalInterrupt()
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80013dc:	2006      	movs	r0, #6
 80013de:	f001 fd60 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 80013e2:	2007      	movs	r0, #7
 80013e4:	f001 fd5d 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 80013e8:	2008      	movs	r0, #8
 80013ea:	f001 fd5a 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80013ee:	2009      	movs	r0, #9
 80013f0:	f001 fd57 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 80013f4:	200a      	movs	r0, #10
 80013f6:	f001 fd54 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 80013fa:	2017      	movs	r0, #23
 80013fc:	f001 fd51 	bl	8002ea2 <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001400:	2028      	movs	r0, #40	@ 0x28
 8001402:	f001 fd4e 	bl	8002ea2 <HAL_NVIC_DisableIRQ>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <clearAllExtInterrupts>:

void clearAllExtInterrupts()
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  for (int i = 0; i < NR_CHANNELS; i++)
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	e011      	b.n	800143c <clearAllExtInterrupts+0x30>
  {
    if (__HAL_GPIO_EXTI_GET_IT(pins[i]) != 0x00u)
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <clearAllExtInterrupts+0x44>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	490d      	ldr	r1, [pc, #52]	@ (8001454 <clearAllExtInterrupts+0x48>)
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001424:	4013      	ands	r3, r2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d005      	beq.n	8001436 <clearAllExtInterrupts+0x2a>
    {
      __HAL_GPIO_EXTI_CLEAR_IT(pins[i]);
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <clearAllExtInterrupts+0x48>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <clearAllExtInterrupts+0x44>)
 8001434:	60da      	str	r2, [r3, #12]
  for (int i = 0; i < NR_CHANNELS; i++)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3301      	adds	r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b09      	cmp	r3, #9
 8001440:	ddea      	ble.n	8001418 <clearAllExtInterrupts+0xc>
    }
  }
}
 8001442:	bf00      	nop
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	58000800 	.word	0x58000800
 8001454:	08012d68 	.word	0x08012d68

08001458 <enableExternalInterrupt>:

void enableExternalInterrupt()
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* EXTI line interrupt detected */
  clearAllExtInterrupts();
 800145c:	f7ff ffd6 	bl	800140c <clearAllExtInterrupts>

  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001460:	2006      	movs	r0, #6
 8001462:	f001 fd10 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001466:	2007      	movs	r0, #7
 8001468:	f001 fd0d 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800146c:	2008      	movs	r0, #8
 800146e:	f001 fd0a 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001472:	2009      	movs	r0, #9
 8001474:	f001 fd07 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001478:	200a      	movs	r0, #10
 800147a:	f001 fd04 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800147e:	2017      	movs	r0, #23
 8001480:	f001 fd01 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001484:	2028      	movs	r0, #40	@ 0x28
 8001486:	f001 fcfe 	bl	8002e86 <HAL_NVIC_EnableIRQ>
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}

0800148e <serialize_uint32_t>:
 * THE SOFTWARE.
 */
#include "serialization.h"
#include <string.h>
uint8_t* serialize_uint32_t(uint8_t *buffer, uint32_t* size, uint32_t* value)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	60f8      	str	r0, [r7, #12]
 8001496:	60b9      	str	r1, [r7, #8]
 8001498:	607a      	str	r2, [r7, #4]
    if(!buffer || *size < 4)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <serialize_uint32_t+0x1a>
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b03      	cmp	r3, #3
 80014a6:	d801      	bhi.n	80014ac <serialize_uint32_t+0x1e>
    {
        return 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	e020      	b.n	80014ee <serialize_uint32_t+0x60>
    }
    buffer[0]  = (uint8_t)((*value >> 24)   & 0xFF);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	0e1b      	lsrs	r3, r3, #24
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	701a      	strb	r2, [r3, #0]
    buffer[1]  = (uint8_t)((*value >> 16)   & 0xFF);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	0c1a      	lsrs	r2, r3, #16
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	701a      	strb	r2, [r3, #0]
    buffer[2]  = (uint8_t)((*value >> 8)    & 0xFF);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	0a1a      	lsrs	r2, r3, #8
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3302      	adds	r3, #2
 80014d0:	b2d2      	uxtb	r2, r2
 80014d2:	701a      	strb	r2, [r3, #0]
    buffer[3]  = (uint8_t)((*value)         & 0xFF);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	3303      	adds	r3, #3
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	701a      	strb	r2, [r3, #0]
    *size -= 4;
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	1f1a      	subs	r2, r3, #4
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	601a      	str	r2, [r3, #0]
    return buffer + 4;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	3304      	adds	r3, #4
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <serialize_int32_t>:
    *size -= 4;
    return buffer + 4;
}

uint8_t* serialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t *value)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
    return serialize_uint32_t(buffer, size, (uint32_t*)value);
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f7ff ffbf 	bl	800148e <serialize_uint32_t>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <Slip_Create>:

#include "slip_packet.h"
#include <stdlib.h>

SLIP_t* Slip_Create(uint16_t size)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	80fb      	strh	r3, [r7, #6]
    if(size < 2)
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d801      	bhi.n	800152e <Slip_Create+0x14>
    {
        return NULL;
 800152a:	2300      	movs	r3, #0
 800152c:	e01c      	b.n	8001568 <Slip_Create+0x4e>
    }
    SLIP_t *package = malloc( sizeof(SLIP_t) );
 800152e:	2008      	movs	r0, #8
 8001530:	f011 fa9a 	bl	8012a68 <malloc>
 8001534:	4603      	mov	r3, r0
 8001536:	60fb      	str	r3, [r7, #12]
    package->payload = malloc(sizeof(uint8_t) * size);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f011 fa94 	bl	8012a68 <malloc>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	601a      	str	r2, [r3, #0]
    if(!package || !package->payload) // TODO one malloc...
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d003      	beq.n	8001556 <Slip_Create+0x3c>
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d101      	bne.n	800155a <Slip_Create+0x40>
    {
        return NULL;
 8001556:	2300      	movs	r3, #0
 8001558:	e006      	b.n	8001568 <Slip_Create+0x4e>
    }
    package->allocatedSize = size;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	88fa      	ldrh	r2, [r7, #6]
 800155e:	80da      	strh	r2, [r3, #6]
    package->packetSize = 0;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	2200      	movs	r2, #0
 8001564:	809a      	strh	r2, [r3, #4]
    return package;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <Slip_Packetize>:
    free(obj->payload);
    free(obj);
}

uint16_t Slip_Packetize(uint8_t* buffer, uint16_t dataLength, SLIP_t *packet)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	460b      	mov	r3, r1
 800157a:	607a      	str	r2, [r7, #4]
 800157c:	817b      	strh	r3, [r7, #10]
    if((dataLength + 4) > packet->allocatedSize) // packet must be at least as long as buffer + start and stop bytes and crc.
 800157e:	897b      	ldrh	r3, [r7, #10]
 8001580:	3303      	adds	r3, #3
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	88d2      	ldrh	r2, [r2, #6]
 8001586:	4293      	cmp	r3, r2
 8001588:	db01      	blt.n	800158e <Slip_Packetize+0x1e>
    {
        return 0;
 800158a:	2300      	movs	r3, #0
 800158c:	e05c      	b.n	8001648 <Slip_Packetize+0xd8>
    }

    packet->payload[0] = frame_boundary_octet;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	227e      	movs	r2, #126	@ 0x7e
 8001594:	701a      	strb	r2, [r3, #0]
    int k;
    int i;
    for ( i = 0, k = 1; i < (dataLength); i++, k++ )
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
 800159a:	2301      	movs	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	e040      	b.n	8001622 <Slip_Packetize+0xb2>
    {
        if((k + 2) > packet->allocatedSize) // make sure that this iteration will fit in packet.
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	88d2      	ldrh	r2, [r2, #6]
 80015a8:	4293      	cmp	r3, r2
 80015aa:	db01      	blt.n	80015b0 <Slip_Packetize+0x40>
        {
            return 0;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e04b      	b.n	8001648 <Slip_Packetize+0xd8>
        }

        if ( buffer[i] == frame_boundary_octet )
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b7e      	cmp	r3, #126	@ 0x7e
 80015ba:	d10e      	bne.n	80015da <Slip_Packetize+0x6a>
        {
            packet->payload[k++] = control_escape_octet;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	1c59      	adds	r1, r3, #1
 80015c4:	6179      	str	r1, [r7, #20]
 80015c6:	4413      	add	r3, r2
 80015c8:	227d      	movs	r2, #125	@ 0x7d
 80015ca:	701a      	strb	r2, [r3, #0]
            packet->payload[k] = frame_boundary_octet_replacement;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	4413      	add	r3, r2
 80015d4:	225e      	movs	r2, #94	@ 0x5e
 80015d6:	701a      	strb	r2, [r3, #0]
 80015d8:	e01d      	b.n	8001616 <Slip_Packetize+0xa6>
        }
        else if ( buffer[i] == control_escape_octet )
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b7d      	cmp	r3, #125	@ 0x7d
 80015e4:	d10e      	bne.n	8001604 <Slip_Packetize+0x94>
        {
            packet->payload[k++] = control_escape_octet;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	1c59      	adds	r1, r3, #1
 80015ee:	6179      	str	r1, [r7, #20]
 80015f0:	4413      	add	r3, r2
 80015f2:	227d      	movs	r2, #125	@ 0x7d
 80015f4:	701a      	strb	r2, [r3, #0]
            packet->payload[k] = control_escape_octet_replacement;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	225d      	movs	r2, #93	@ 0x5d
 8001600:	701a      	strb	r2, [r3, #0]
 8001602:	e008      	b.n	8001616 <Slip_Packetize+0xa6>
        }
        else
        {
            packet->payload[k] = buffer[i];
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	441a      	add	r2, r3
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	440b      	add	r3, r1
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	701a      	strb	r2, [r3, #0]
    for ( i = 0, k = 1; i < (dataLength); i++, k++ )
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	3301      	adds	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	3301      	adds	r3, #1
 8001620:	617b      	str	r3, [r7, #20]
 8001622:	897b      	ldrh	r3, [r7, #10]
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	429a      	cmp	r2, r3
 8001628:	dbba      	blt.n	80015a0 <Slip_Packetize+0x30>
        }
    }
    packet->payload[k] = frame_boundary_octet;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	4413      	add	r3, r2
 8001632:	227e      	movs	r2, #126	@ 0x7e
 8001634:	701a      	strb	r2, [r3, #0]
    packet->packetSize = ++k;
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3301      	adds	r3, #1
 800163a:	617b      	str	r3, [r7, #20]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	809a      	strh	r2, [r3, #4]
    return k;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	b29b      	uxth	r3, r3
}
 8001648:	4618      	mov	r0, r3
 800164a:	371c      	adds	r7, #28
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 8001654:	b5b0      	push	{r4, r5, r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 800165a:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <APPD_EnableCPU2+0x34>)
 800165c:	1d3c      	adds	r4, r7, #4
 800165e:	461d      	mov	r5, r3
 8001660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001664:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001668:	c403      	stmia	r4!, {r0, r1}
 800166a:	8022      	strh	r2, [r4, #0]
 800166c:	3402      	adds	r4, #2
 800166e:	0c13      	lsrs	r3, r2, #16
 8001670:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001672:	f00f f9b9 	bl	80109e8 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f00e fc4a 	bl	800ff12 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 800167e:	bf00      	nop
}
 8001680:	3720      	adds	r7, #32
 8001682:	46bd      	mov	sp, r7
 8001684:	bdb0      	pop	{r4, r5, r7, pc}
 8001686:	bf00      	nop
 8001688:	08012c90 	.word	0x08012c90

0800168c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001694:	4b07      	ldr	r3, [pc, #28]	@ (80016b4 <LL_C2_PWR_SetPowerMode+0x28>)
 8001696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4905      	ldr	r1, [pc, #20]	@ (80016b4 <LL_C2_PWR_SetPowerMode+0x28>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	58000400 	.word	0x58000400

080016b8 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <LL_EXTI_EnableIT_32_63+0x24>)
 80016c2:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80016c6:	4905      	ldr	r1, [pc, #20]	@ (80016dc <LL_EXTI_EnableIT_32_63+0x24>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	58000800 	.word	0x58000800

080016e0 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80016e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80016ee:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80016f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80016fa:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001706:	4313      	orrs	r3, r2
 8001708:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	cafecafe 	.word	0xcafecafe

0800171c <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001724:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800172e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4313      	orrs	r3, r2
 8001736:	608b      	str	r3, [r1, #8]
}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr

08001744 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001748:	4b04      	ldr	r3, [pc, #16]	@ (800175c <LL_DBGMCU_GetDeviceID+0x18>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 8001750:	4618      	mov	r0, r3
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	e0042000 	.word	0xe0042000

08001760 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001764:	4b04      	ldr	r3, [pc, #16]	@ (8001778 <LL_DBGMCU_GetRevisionID+0x18>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	b29b      	uxth	r3, r3
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	e0042000 	.word	0xe0042000

0800177c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	22ff      	movs	r2, #255	@ 0xff
 8001788:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr

08001796 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001796:	b480      	push	{r7}
 8001798:	b083      	sub	sp, #12
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	22ca      	movs	r2, #202	@ 0xca
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2253      	movs	r2, #83	@ 0x53
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
 80017be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f023 0207 	bic.w	r2, r3, #7
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	431a      	orrs	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	609a      	str	r2, [r3, #8]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <MX_APPE_Config+0x18>)
 80017e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80017e8:	f000 f824 	bl	8001834 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80017ec:	f000 f829 	bl	8001842 <Config_HSE>

  return;
 80017f0:	bf00      	nop
}
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	58004000 	.word	0x58004000

080017f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80017fc:	f000 f835 	bl	800186a <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001800:	f000 f84e 	bl	80018a0 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001804:	4903      	ldr	r1, [pc, #12]	@ (8001814 <MX_APPE_Init+0x1c>)
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f988 	bl	8001b1c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 800180c:	f000 f856 	bl	80018bc <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 8001810:	bf00      	nop
}
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000348 	.word	0x20000348

08001818 <Init_Smps>:

void Init_Smps(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 800181c:	bf00      	nop
}
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <Init_Exti>:

void Init_Exti(void)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800182a:	2050      	movs	r0, #80	@ 0x50
 800182c:	f7ff ff44 	bl	80016b8 <LL_EXTI_EnableIT_32_63>

  return;
 8001830:	bf00      	nop
}
 8001832:	bd80      	pop	{r7, pc}

08001834 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001838:	bf00      	nop
}
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001848:	2000      	movs	r0, #0
 800184a:	f00f f959 	bl	8010b00 <OTP_Read>
 800184e:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d005      	beq.n	8001862 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	799b      	ldrb	r3, [r3, #6]
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff40 	bl	80016e0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001860:	bf00      	nop
 8001862:	bf00      	nop
}
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <System_Init>:

static void System_Init(void)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	af00      	add	r7, sp, #0
  Init_Smps();
 800186e:	f7ff ffd3 	bl	8001818 <Init_Smps>

  Init_Exti();
 8001872:	f7ff ffd8 	bl	8001826 <Init_Exti>

  Init_Rtc();
 8001876:	f000 f803 	bl	8001880 <Init_Rtc>

  return;
 800187a:	bf00      	nop
}
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001884:	4805      	ldr	r0, [pc, #20]	@ (800189c <Init_Rtc+0x1c>)
 8001886:	f7ff ff86 	bl	8001796 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 800188a:	2100      	movs	r1, #0
 800188c:	4803      	ldr	r0, [pc, #12]	@ (800189c <Init_Rtc+0x1c>)
 800188e:	f7ff ff92 	bl	80017b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001892:	4802      	ldr	r0, [pc, #8]	@ (800189c <Init_Rtc+0x1c>)
 8001894:	f7ff ff72 	bl	800177c <LL_RTC_EnableWriteProtection>

  return;
 8001898:	bf00      	nop
}
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40002800 	.word	0x40002800

080018a0 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80018a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80018a8:	f7ff ff38 	bl	800171c <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 80018ac:	f010 fe60 	bl	8012570 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80018b0:	2004      	movs	r0, #4
 80018b2:	f7ff feeb 	bl	800168c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80018b6:	bf00      	nop
}
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80018c2:	f00e fedb 	bl	801067c <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 80018c6:	4a11      	ldr	r2, [pc, #68]	@ (800190c <appe_Tl_Init+0x50>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	2004      	movs	r0, #4
 80018cc:	f010 ff8e 	bl	80127ec <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <appe_Tl_Init+0x54>)
 80018d2:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001914 <appe_Tl_Init+0x58>)
 80018d6:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	480e      	ldr	r0, [pc, #56]	@ (8001918 <appe_Tl_Init+0x5c>)
 80018de:	f00e fd8f 	bl	8010400 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	@ (800191c <appe_Tl_Init+0x60>)
 80018e4:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001920 <appe_Tl_Init+0x64>)
 80018e8:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80018ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <appe_Tl_Init+0x68>)
 80018ec:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80018ee:	f240 533c 	movw	r3, #1340	@ 0x53c
 80018f2:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	4618      	mov	r0, r3
 80018fa:	f00f f801 	bl	8010900 <TL_MM_Init>

  TL_Enable();
 80018fe:	f00e feb7 	bl	8010670 <TL_Enable>

  return;
 8001902:	bf00      	nop
}
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	08010439 	.word	0x08010439
 8001910:	20030734 	.word	0x20030734
 8001914:	08001929 	.word	0x08001929
 8001918:	08001941 	.word	0x08001941
 800191c:	2003094c 	.word	0x2003094c
 8001920:	20030840 	.word	0x20030840
 8001924:	200301f8 	.word	0x200301f8

08001928 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8001932:	bf00      	nop
}
 8001934:	370c      	adds	r7, #12
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
	...

08001940 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	330b      	adds	r3, #11
 800194e:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29b      	uxth	r3, r3
 8001956:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 800195a:	2b07      	cmp	r3, #7
 800195c:	d81f      	bhi.n	800199e <APPE_SysUserEvtRx+0x5e>
 800195e:	a201      	add	r2, pc, #4	@ (adr r2, 8001964 <APPE_SysUserEvtRx+0x24>)
 8001960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001964:	08001985 	.word	0x08001985
 8001968:	08001997 	.word	0x08001997
 800196c:	0800199f 	.word	0x0800199f
 8001970:	0800199f 	.word	0x0800199f
 8001974:	0800199f 	.word	0x0800199f
 8001978:	0800199f 	.word	0x0800199f
 800197c:	0800199f 	.word	0x0800199f
 8001980:	0800199f 	.word	0x0800199f
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	4618      	mov	r0, r3
 800198a:	f00e faef 	bl	800ff6c <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f000 f81b 	bl	80019ca <APPE_SysEvtReadyProcessing>
    break;
 8001994:	e004      	b.n	80019a0 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f806 	bl	80019a8 <APPE_SysEvtError>
    break;
 800199c:	e000      	b.n	80019a0 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 800199e:	bf00      	nop
  }

  return;
 80019a0:	bf00      	nop
}
 80019a2:	3720      	adds	r7, #32
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	330b      	adds	r3, #11
 80019b6:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3302      	adds	r3, #2
 80019bc:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80019be:	bf00      	nop
}
 80019c0:	3714      	adds	r7, #20
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b08a      	sub	sp, #40	@ 0x28
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]
 80019de:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	330b      	adds	r3, #11
 80019ee:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	3302      	adds	r3, #2
 80019f4:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d11d      	bne.n	8001a3a <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 80019fe:	f7ff fe29 	bl	8001654 <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 8001a02:	230f      	movs	r3, #15
 8001a04:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001a06:	237f      	movs	r3, #127	@ 0x7f
 8001a08:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001a0a:	f7ff fea9 	bl	8001760 <LL_DBGMCU_GetRevisionID>
 8001a0e:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 8001a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 8001a16:	f7ff fe95 	bl	8001744 <LL_DBGMCU_GetDeviceID>
 8001a1a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4618      	mov	r0, r3
 8001a28:	f00e fa8a 	bl	800ff40 <SHCI_C2_Config>

    APP_BLE_Init();
 8001a2c:	f00f f972 	bl	8010d14 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001a30:	2100      	movs	r1, #0
 8001a32:	2001      	movs	r0, #1
 8001a34:	f010 fdae 	bl	8012594 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 8001a38:	e007      	b.n	8001a4a <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d103      	bne.n	8001a4a <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
  return;
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
}
 8001a4c:	3728      	adds	r7, #40	@ 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a5a:	f010 fdcb 	bl	80125f4 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001a5e:	bf00      	nop
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001a66:	bf00      	nop
}
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
 8001a78:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a7e:	f010 fdb9 	bl	80125f4 <UTIL_SEQ_Run>
  return;
 8001a82:	bf00      	nop
}
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001a92:	2100      	movs	r1, #0
 8001a94:	2004      	movs	r0, #4
 8001a96:	f010 fecb 	bl	8012830 <UTIL_SEQ_SetTask>
  return;
 8001a9a:	bf00      	nop
}
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f010 ff2c 	bl	8012908 <UTIL_SEQ_SetEvt>
  return;
 8001ab0:	bf00      	nop
}
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001ac0:	2002      	movs	r0, #2
 8001ac2:	f010 ff41 	bl	8012948 <UTIL_SEQ_WaitEvt>
  return;
 8001ac6:	bf00      	nop
}
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <LL_EXTI_EnableIT_0_31>:
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ad8:	4b06      	ldr	r3, [pc, #24]	@ (8001af4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ada:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001ade:	4905      	ldr	r1, [pc, #20]	@ (8001af4 <LL_EXTI_EnableIT_0_31+0x24>)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	58000800 	.word	0x58000800

08001af8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4904      	ldr	r1, [pc, #16]	@ (8001b18 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	58000800 	.word	0x58000800

08001b1c <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b088      	sub	sp, #32
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	22ca      	movs	r2, #202	@ 0xca
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b30:	4b5c      	ldr	r3, [pc, #368]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2253      	movs	r2, #83	@ 0x53
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001b38:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <HW_TS_Init+0x18c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8001ca8 <HW_TS_Init+0x18c>)
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001b44:	4b58      	ldr	r3, [pc, #352]	@ (8001ca8 <HW_TS_Init+0x18c>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	f1c3 0304 	rsb	r3, r3, #4
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4b55      	ldr	r3, [pc, #340]	@ (8001cac <HW_TS_Init+0x190>)
 8001b58:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001b5a:	4b53      	ldr	r3, [pc, #332]	@ (8001ca8 <HW_TS_Init+0x18c>)
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b62:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001b66:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	fa92 f2a2 	rbit	r2, r2
 8001b6e:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b74:	697a      	ldr	r2, [r7, #20]
 8001b76:	2a00      	cmp	r2, #0
 8001b78:	d101      	bne.n	8001b7e <HW_TS_Init+0x62>
  {
    return 32U;
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	e003      	b.n	8001b86 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	fab2 f282 	clz	r2, r2
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	40d3      	lsrs	r3, r2
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b48      	ldr	r3, [pc, #288]	@ (8001cb0 <HW_TS_Init+0x194>)
 8001b90:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b92:	4b45      	ldr	r3, [pc, #276]	@ (8001ca8 <HW_TS_Init+0x18c>)
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b44      	ldr	r3, [pc, #272]	@ (8001cb4 <HW_TS_Init+0x198>)
 8001ba4:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HW_TS_Init+0x198>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	4a40      	ldr	r2, [pc, #256]	@ (8001cb0 <HW_TS_Init+0x194>)
 8001bae:	7812      	ldrb	r2, [r2, #0]
 8001bb0:	fb02 f303 	mul.w	r3, r2, r3
 8001bb4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001bb8:	4a3c      	ldr	r2, [pc, #240]	@ (8001cac <HW_TS_Init+0x190>)
 8001bba:	7812      	ldrb	r2, [r2, #0]
 8001bbc:	40d3      	lsrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d904      	bls.n	8001bd4 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001bca:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HW_TS_Init+0x19c>)
 8001bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bd0:	801a      	strh	r2, [r3, #0]
 8001bd2:	e003      	b.n	8001bdc <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	b29a      	uxth	r2, r3
 8001bd8:	4b37      	ldr	r3, [pc, #220]	@ (8001cb8 <HW_TS_Init+0x19c>)
 8001bda:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001bdc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001be0:	f7ff ff8a 	bl	8001af8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001be4:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001be8:	f7ff ff72 	bl	8001ad0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001bec:	79fb      	ldrb	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d13d      	bne.n	8001c6e <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001bf2:	4b32      	ldr	r3, [pc, #200]	@ (8001cbc <HW_TS_Init+0x1a0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001bf8:	4b31      	ldr	r3, [pc, #196]	@ (8001cc0 <HW_TS_Init+0x1a4>)
 8001bfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bfe:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	77fb      	strb	r3, [r7, #31]
 8001c04:	e00c      	b.n	8001c20 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001c06:	7ffa      	ldrb	r2, [r7, #31]
 8001c08:	492e      	ldr	r1, [pc, #184]	@ (8001cc4 <HW_TS_Init+0x1a8>)
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	4413      	add	r3, r2
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	440b      	add	r3, r1
 8001c14:	330c      	adds	r3, #12
 8001c16:	2200      	movs	r2, #0
 8001c18:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001c1a:	7ffb      	ldrb	r3, [r7, #31]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	77fb      	strb	r3, [r7, #31]
 8001c20:	7ffb      	ldrb	r3, [r7, #31]
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d9ef      	bls.n	8001c06 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001c26:	4b28      	ldr	r3, [pc, #160]	@ (8001cc8 <HW_TS_Init+0x1ac>)
 8001c28:	2206      	movs	r2, #6
 8001c2a:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3a:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001c3c:	4b19      	ldr	r3, [pc, #100]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	4b17      	ldr	r3, [pc, #92]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001c4c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001c4e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <HW_TS_Init+0x1b0>)
 8001c50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001c54:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001c56:	2003      	movs	r0, #3
 8001c58:	f001 f94b 	bl	8002ef2 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001c5c:	4b11      	ldr	r3, [pc, #68]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689a      	ldr	r2, [r3, #8]
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	e009      	b.n	8001c82 <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d002      	beq.n	8001c82 <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c7c:	2003      	movs	r0, #3
 8001c7e:	f001 f92a 	bl	8002ed6 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c82:	4b08      	ldr	r3, [pc, #32]	@ (8001ca4 <HW_TS_Init+0x188>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	22ff      	movs	r2, #255	@ 0xff
 8001c88:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	2103      	movs	r1, #3
 8001c8e:	2003      	movs	r0, #3
 8001c90:	f001 f8df 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c94:	2003      	movs	r0, #3
 8001c96:	f001 f8f6 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  return;
 8001c9a:	bf00      	nop
}
 8001c9c:	3720      	adds	r7, #32
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000348 	.word	0x20000348
 8001ca8:	40002800 	.word	0x40002800
 8001cac:	200002b1 	.word	0x200002b1
 8001cb0:	200002b2 	.word	0x200002b2
 8001cb4:	200002b4 	.word	0x200002b4
 8001cb8:	200002b6 	.word	0x200002b6
 8001cbc:	200002b0 	.word	0x200002b0
 8001cc0:	200002ac 	.word	0x200002ac
 8001cc4:	20000218 	.word	0x20000218
 8001cc8:	200002a8 	.word	0x200002a8
 8001ccc:	58000800 	.word	0x58000800

08001cd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cd4:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <__NVIC_GetPriorityGrouping+0x18>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	0a1b      	lsrs	r3, r3, #8
 8001cda:	f003 0307 	and.w	r3, r3, #7
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	e000ed00 	.word	0xe000ed00

08001cec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	db0b      	blt.n	8001d16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cfe:	79fb      	ldrb	r3, [r7, #7]
 8001d00:	f003 021f 	and.w	r2, r3, #31
 8001d04:	4907      	ldr	r1, [pc, #28]	@ (8001d24 <__NVIC_EnableIRQ+0x38>)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	095b      	lsrs	r3, r3, #5
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	e000e100 	.word	0xe000e100

08001d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	6039      	str	r1, [r7, #0]
 8001d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	db0a      	blt.n	8001d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	490c      	ldr	r1, [pc, #48]	@ (8001d74 <__NVIC_SetPriority+0x4c>)
 8001d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d46:	0112      	lsls	r2, r2, #4
 8001d48:	b2d2      	uxtb	r2, r2
 8001d4a:	440b      	add	r3, r1
 8001d4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d50:	e00a      	b.n	8001d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4908      	ldr	r1, [pc, #32]	@ (8001d78 <__NVIC_SetPriority+0x50>)
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3b04      	subs	r3, #4
 8001d60:	0112      	lsls	r2, r2, #4
 8001d62:	b2d2      	uxtb	r2, r2
 8001d64:	440b      	add	r3, r1
 8001d66:	761a      	strb	r2, [r3, #24]
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000e100 	.word	0xe000e100
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b089      	sub	sp, #36	@ 0x24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	60b9      	str	r1, [r7, #8]
 8001d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f1c3 0307 	rsb	r3, r3, #7
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	bf28      	it	cs
 8001d9a:	2304      	movcs	r3, #4
 8001d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3304      	adds	r3, #4
 8001da2:	2b06      	cmp	r3, #6
 8001da4:	d902      	bls.n	8001dac <NVIC_EncodePriority+0x30>
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	3b03      	subs	r3, #3
 8001daa:	e000      	b.n	8001dae <NVIC_EncodePriority+0x32>
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dc4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	fa01 f303 	lsl.w	r3, r1, r3
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	4313      	orrs	r3, r2
         );
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	@ 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr

08001de2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001de2:	b480      	push	{r7}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001dea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001df0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001dfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4013      	ands	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e06:	68fb      	ldr	r3, [r7, #12]
}
 8001e08:	bf00      	nop
 8001e0a:	3714      	adds	r7, #20
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001e2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e38:	68fb      	ldr	r3, [r7, #12]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr

08001e46 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e46:	b480      	push	{r7}
 8001e48:	b085      	sub	sp, #20
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e52:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e62:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4013      	ands	r3, r2
 8001e68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	3220      	adds	r2, #32
 8001e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e8c:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <LL_HSEM_1StepLock+0x2c>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d001      	beq.n	8001e96 <LL_HSEM_1StepLock+0x1e>
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <LL_HSEM_1StepLock+0x20>
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	80000400 	.word	0x80000400

08001ea8 <LL_TIM_DisableARRPreload>:
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	601a      	str	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <LL_TIM_SetClockSource>:
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8001eda:	f023 0307 	bic.w	r3, r3, #7
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <LL_TIM_SetTriggerOutput>:
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	605a      	str	r2, [r3, #4]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <LL_TIM_DisableMasterSlaveMode>:
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f3c:	f000 fdc8 	bl	8002ad0 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001f40:	f7ff fc4c 	bl	80017dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f44:	f000 f822 	bl	8001f8c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001f48:	f000 f890 	bl	800206c <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001f4c:	f000 f8f4 	bl	8002138 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f50:	f000 f9fc 	bl	800234c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001f54:	f000 f8b0 	bl	80020b8 <MX_I2C1_Init>
  MX_RTC_Init();
 8001f58:	f000 f90a 	bl	8002170 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001f5c:	f000 f9aa 	bl	80022b4 <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001f60:	f00f fda6 	bl	8011ab0 <MX_USB_Device_Init>
  MX_TIM16_Init();
 8001f64:	f000 f96e 	bl	8002244 <MX_TIM16_Init>
  MX_TIM2_Init();
 8001f68:	f000 f92c 	bl	80021c4 <MX_TIM2_Init>
  MX_RF_Init();
 8001f6c:	f000 f8f8 	bl	8002160 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  app_init(&hi2c1);
 8001f70:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <main+0x50>)
 8001f72:	f7fe fea3 	bl	8000cbc <app_init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f76:	f7ff fc3f 	bl	80017f8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001f7a:	f7ff fd6a 	bl	8001a52 <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    taskCyclic();
 8001f7e:	f7fe fec5 	bl	8000d0c <taskCyclic>
    MX_APPE_Process();
 8001f82:	bf00      	nop
 8001f84:	e7f9      	b.n	8001f7a <main+0x42>
 8001f86:	bf00      	nop
 8001f88:	200002b8 	.word	0x200002b8

08001f8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b09a      	sub	sp, #104	@ 0x68
 8001f90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f92:	f107 0320 	add.w	r3, r7, #32
 8001f96:	2248      	movs	r2, #72	@ 0x48
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f010 fe1a 	bl	8012bd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa0:	1d3b      	adds	r3, r7, #4
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
 8001fa6:	605a      	str	r2, [r3, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
 8001faa:	60da      	str	r2, [r3, #12]
 8001fac:	611a      	str	r2, [r3, #16]
 8001fae:	615a      	str	r2, [r3, #20]
 8001fb0:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8002068 <SystemClock_Config+0xdc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fba:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <SystemClock_Config+0xdc>)
 8001fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b29      	ldr	r3, [pc, #164]	@ (8002068 <SystemClock_Config+0xdc>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fca:	603b      	str	r3, [r7, #0]
 8001fcc:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001fce:	232f      	movs	r3, #47	@ 0x2f
 8001fd0:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fd2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fe6:	2340      	movs	r3, #64	@ 0x40
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001fea:	2300      	movs	r3, #0
 8001fec:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001fee:	2360      	movs	r3, #96	@ 0x60
 8001ff0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001ff2:	2305      	movs	r3, #5
 8001ff4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8002002:	2320      	movs	r3, #32
 8002004:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002006:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800200a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800200c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002010:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002016:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4618      	mov	r0, r3
 800201e:	f005 fcdf 	bl	80079e0 <HAL_RCC_OscConfig>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8002028:	f000 fa22 	bl	8002470 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800202c:	236f      	movs	r3, #111	@ 0x6f
 800202e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002030:	2303      	movs	r3, #3
 8002032:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203c:	2300      	movs	r3, #0
 800203e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8002040:	2380      	movs	r3, #128	@ 0x80
 8002042:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002044:	2300      	movs	r3, #0
 8002046:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2103      	movs	r1, #3
 800204c:	4618      	mov	r0, r3
 800204e:	f006 f83b 	bl	80080c8 <HAL_RCC_ClockConfig>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002058:	f000 fa0a 	bl	8002470 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800205c:	f006 fdf6 	bl	8008c4c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002060:	bf00      	nop
 8002062:	3768      	adds	r7, #104	@ 0x68
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	58000400 	.word	0x58000400

0800206c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b094      	sub	sp, #80	@ 0x50
 8002070:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2250      	movs	r2, #80	@ 0x50
 8002076:	2100      	movs	r1, #0
 8002078:	4618      	mov	r0, r3
 800207a:	f010 fdab 	bl	8012bd4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 800207e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002082:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8002084:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002088:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800208a:	2300      	movs	r3, #0
 800208c:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800208e:	2310      	movs	r3, #16
 8002090:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002092:	463b      	mov	r3, r7
 8002094:	4618      	mov	r0, r3
 8002096:	f006 fc63 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80020a0:	f000 f9e6 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 ); // Fix to make USB work with BLE.
 80020a4:	2105      	movs	r1, #5
 80020a6:	4803      	ldr	r0, [pc, #12]	@ (80020b4 <PeriphCommonClock_Config+0x48>)
 80020a8:	f7ff fee6 	bl	8001e78 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 80020ac:	bf00      	nop
 80020ae:	3750      	adds	r7, #80	@ 0x50
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	58001400 	.word	0x58001400

080020b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020bc:	4b1b      	ldr	r3, [pc, #108]	@ (800212c <MX_I2C1_Init+0x74>)
 80020be:	4a1c      	ldr	r2, [pc, #112]	@ (8002130 <MX_I2C1_Init+0x78>)
 80020c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80020c2:	4b1a      	ldr	r3, [pc, #104]	@ (800212c <MX_I2C1_Init+0x74>)
 80020c4:	4a1b      	ldr	r2, [pc, #108]	@ (8002134 <MX_I2C1_Init+0x7c>)
 80020c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 80020c8:	4b18      	ldr	r3, [pc, #96]	@ (800212c <MX_I2C1_Init+0x74>)
 80020ca:	2204      	movs	r2, #4
 80020cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020ce:	4b17      	ldr	r3, [pc, #92]	@ (800212c <MX_I2C1_Init+0x74>)
 80020d0:	2201      	movs	r2, #1
 80020d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020d4:	4b15      	ldr	r3, [pc, #84]	@ (800212c <MX_I2C1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020da:	4b14      	ldr	r3, [pc, #80]	@ (800212c <MX_I2C1_Init+0x74>)
 80020dc:	2200      	movs	r2, #0
 80020de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020e0:	4b12      	ldr	r3, [pc, #72]	@ (800212c <MX_I2C1_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <MX_I2C1_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ec:	4b0f      	ldr	r3, [pc, #60]	@ (800212c <MX_I2C1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020f2:	480e      	ldr	r0, [pc, #56]	@ (800212c <MX_I2C1_Init+0x74>)
 80020f4:	f001 fa92 	bl	800361c <HAL_I2C_Init>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020fe:	f000 f9b7 	bl	8002470 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002102:	2100      	movs	r1, #0
 8002104:	4809      	ldr	r0, [pc, #36]	@ (800212c <MX_I2C1_Init+0x74>)
 8002106:	f003 fa75 	bl	80055f4 <HAL_I2CEx_ConfigAnalogFilter>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002110:	f000 f9ae 	bl	8002470 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002114:	2100      	movs	r1, #0
 8002116:	4805      	ldr	r0, [pc, #20]	@ (800212c <MX_I2C1_Init+0x74>)
 8002118:	f003 fab7 	bl	800568a <HAL_I2CEx_ConfigDigitalFilter>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002122:	f000 f9a5 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	200002b8 	.word	0x200002b8
 8002130:	40005400 	.word	0x40005400
 8002134:	10707dbc 	.word	0x10707dbc

08002138 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <MX_IPCC_Init+0x20>)
 800213e:	4a07      	ldr	r2, [pc, #28]	@ (800215c <MX_IPCC_Init+0x24>)
 8002140:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_IPCC_Init+0x20>)
 8002144:	f003 faee 	bl	8005724 <HAL_IPCC_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800214e:	f000 f98f 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000030c 	.word	0x2000030c
 800215c:	58000c00 	.word	0x58000c00

08002160 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <MX_RTC_Init+0x4c>)
 8002176:	4a12      	ldr	r2, [pc, #72]	@ (80021c0 <MX_RTC_Init+0x50>)
 8002178:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800217a:	4b10      	ldr	r3, [pc, #64]	@ (80021bc <MX_RTC_Init+0x4c>)
 800217c:	2200      	movs	r2, #0
 800217e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002180:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <MX_RTC_Init+0x4c>)
 8002182:	227f      	movs	r2, #127	@ 0x7f
 8002184:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <MX_RTC_Init+0x4c>)
 8002188:	f641 6284 	movw	r2, #7812	@ 0x1e84
 800218c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <MX_RTC_Init+0x4c>)
 8002190:	2200      	movs	r2, #0
 8002192:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <MX_RTC_Init+0x4c>)
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800219a:	4b08      	ldr	r3, [pc, #32]	@ (80021bc <MX_RTC_Init+0x4c>)
 800219c:	2200      	movs	r2, #0
 800219e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80021a0:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <MX_RTC_Init+0x4c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021a6:	4805      	ldr	r0, [pc, #20]	@ (80021bc <MX_RTC_Init+0x4c>)
 80021a8:	f006 fe68 	bl	8008e7c <HAL_RTC_Init>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80021b2:	f000 f95d 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80021b6:	bf00      	nop
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	20000348 	.word	0x20000348
 80021c0:	40002800 	.word	0x40002800

080021c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021ca:	1d3b      	adds	r3, r7, #4
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80021d8:	2001      	movs	r0, #1
 80021da:	f7ff fe1b 	bl	8001e14 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80021de:	f7ff fd77 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fdc7 	bl	8001d7c <NVIC_EncodePriority>
 80021ee:	4603      	mov	r3, r0
 80021f0:	4619      	mov	r1, r3
 80021f2:	201c      	movs	r0, #28
 80021f4:	f7ff fd98 	bl	8001d28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 80021f8:	201c      	movs	r0, #28
 80021fa:	f7ff fd77 	bl	8001cec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 640000;
 8002206:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <MX_TIM2_Init+0x7c>)
 8002208:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	4619      	mov	r1, r3
 8002212:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002216:	f008 f8c9 	bl	800a3ac <LL_TIM_Init>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800221a:	2100      	movs	r1, #0
 800221c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002220:	f7ff fe52 	bl	8001ec8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8002224:	2100      	movs	r1, #0
 8002226:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800222a:	f7ff fe62 	bl	8001ef2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800222e:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8002232:	f7ff fe71 	bl	8001f18 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002236:	bf00      	nop
 8002238:	3718      	adds	r7, #24
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	0009c400 	.word	0x0009c400

08002244 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	605a      	str	r2, [r3, #4]
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 8002258:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800225c:	f7ff fdf3 	bl	8001e46 <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8002260:	f7ff fd36 	bl	8001cd0 <__NVIC_GetPriorityGrouping>
 8002264:	4603      	mov	r3, r0
 8002266:	2200      	movs	r2, #0
 8002268:	210f      	movs	r1, #15
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff fd86 	bl	8001d7c <NVIC_EncodePriority>
 8002270:	4603      	mov	r3, r0
 8002272:	4619      	mov	r1, r3
 8002274:	2019      	movs	r0, #25
 8002276:	f7ff fd57 	bl	8001d28 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800227a:	2019      	movs	r0, #25
 800227c:	f7ff fd36 	bl	8001cec <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8002280:	f641 03ff 	movw	r3, #6399	@ 0x18ff
 8002284:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 5999;
 800228a:	f241 736f 	movw	r3, #5999	@ 0x176f
 800228e:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002290:	2300      	movs	r3, #0
 8002292:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8002298:	1d3b      	adds	r3, r7, #4
 800229a:	4619      	mov	r1, r3
 800229c:	4804      	ldr	r0, [pc, #16]	@ (80022b0 <MX_TIM16_Init+0x6c>)
 800229e:	f008 f885 	bl	800a3ac <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 80022a2:	4803      	ldr	r0, [pc, #12]	@ (80022b0 <MX_TIM16_Init+0x6c>)
 80022a4:	f7ff fe00 	bl	8001ea8 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40014400 	.word	0x40014400

080022b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b8:	4b22      	ldr	r3, [pc, #136]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022ba:	4a23      	ldr	r2, [pc, #140]	@ (8002348 <MX_USART1_UART_Init+0x94>)
 80022bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c6:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022da:	220c      	movs	r2, #12
 80022dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e4:	4b17      	ldr	r3, [pc, #92]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ea:	4b16      	ldr	r3, [pc, #88]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022f0:	4b14      	ldr	r3, [pc, #80]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022f6:	4b13      	ldr	r3, [pc, #76]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022fc:	4811      	ldr	r0, [pc, #68]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 80022fe:	f006 fedd 	bl	80090bc <HAL_UART_Init>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002308:	f000 f8b2 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800230c:	2100      	movs	r1, #0
 800230e:	480d      	ldr	r0, [pc, #52]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 8002310:	f007 ff47 	bl	800a1a2 <HAL_UARTEx_SetTxFifoThreshold>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800231a:	f000 f8a9 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800231e:	2100      	movs	r1, #0
 8002320:	4808      	ldr	r0, [pc, #32]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 8002322:	f007 ff7c 	bl	800a21e <HAL_UARTEx_SetRxFifoThreshold>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800232c:	f000 f8a0 	bl	8002470 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	@ (8002344 <MX_USART1_UART_Init+0x90>)
 8002332:	f007 fefd 	bl	800a130 <HAL_UARTEx_DisableFifoMode>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800233c:	f000 f898 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000036c 	.word	0x2000036c
 8002348:	40013800 	.word	0x40013800

0800234c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002360:	2004      	movs	r0, #4
 8002362:	f7ff fd3e 	bl	8001de2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002366:	2080      	movs	r0, #128	@ 0x80
 8002368:	f7ff fd3b 	bl	8001de2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800236c:	2002      	movs	r0, #2
 800236e:	f7ff fd38 	bl	8001de2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2001      	movs	r0, #1
 8002374:	f7ff fd35 	bl	8001de2 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002378:	2201      	movs	r2, #1
 800237a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800237e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002382:	f001 f8f7 	bl	8003574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH_B_Pin CH_C_Pin */
  GPIO_InitStruct.Pin = CH_B_Pin|CH_C_Pin;
 8002386:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800238a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800238c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002390:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4833      	ldr	r0, [pc, #204]	@ (8002468 <MX_GPIO_Init+0x11c>)
 800239c:	f000 fe84 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 80023a0:	2308      	movs	r3, #8
 80023a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 80023ac:	1d3b      	adds	r3, r7, #4
 80023ae:	4619      	mov	r1, r3
 80023b0:	482e      	ldr	r0, [pc, #184]	@ (800246c <MX_GPIO_Init+0x120>)
 80023b2:	f000 fe79 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH_1_Pin CH_2_Pin CH_3_Pin CH_4_Pin
                           CH_5_Pin CH_6_Pin CH_7_Pin CH_8_Pin */
  GPIO_InitStruct.Pin = CH_1_Pin|CH_2_Pin|CH_3_Pin|CH_4_Pin
 80023b6:	23ff      	movs	r3, #255	@ 0xff
 80023b8:	607b      	str	r3, [r7, #4]
                          |CH_5_Pin|CH_6_Pin|CH_7_Pin|CH_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c4:	1d3b      	adds	r3, r7, #4
 80023c6:	4619      	mov	r1, r3
 80023c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023cc:	f000 fe6c 	bl	80030a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80023d6:	2311      	movs	r3, #17
 80023d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80023de:	2301      	movs	r3, #1
 80023e0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023e2:	1d3b      	adds	r3, r7, #4
 80023e4:	4619      	mov	r1, r3
 80023e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023ea:	f000 fe5d 	bl	80030a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	2006      	movs	r0, #6
 80023f4:	f000 fd2d 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80023f8:	2006      	movs	r0, #6
 80023fa:	f000 fd44 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2007      	movs	r0, #7
 8002404:	f000 fd25 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002408:	2007      	movs	r0, #7
 800240a:	f000 fd3c 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	2008      	movs	r0, #8
 8002414:	f000 fd1d 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002418:	2008      	movs	r0, #8
 800241a:	f000 fd34 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	2009      	movs	r0, #9
 8002424:	f000 fd15 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002428:	2009      	movs	r0, #9
 800242a:	f000 fd2c 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	200a      	movs	r0, #10
 8002434:	f000 fd0d 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002438:	200a      	movs	r0, #10
 800243a:	f000 fd24 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2017      	movs	r0, #23
 8002444:	f000 fd05 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002448:	2017      	movs	r0, #23
 800244a:	f000 fd1c 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	2028      	movs	r0, #40	@ 0x28
 8002454:	f000 fcfd 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002458:	2028      	movs	r0, #40	@ 0x28
 800245a:	f000 fd14 	bl	8002e86 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	48000800 	.word	0x48000800
 800246c:	48001c00 	.word	0x48001c00

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002478:	bf00      	nop
 800247a:	e7fd      	b.n	8002478 <Error_Handler+0x8>

0800247c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002488:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800248c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <LL_AHB2_GRP1_EnableClock>:
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80024a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80024b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4013      	ands	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	bf00      	nop
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <LL_AHB3_GRP1_EnableClock>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024dc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4013      	ands	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024f4:	68fb      	ldr	r3, [r7, #12]
}
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <LL_APB1_GRP1_EnableClock>:
{
 8002502:	b480      	push	{r7}
 8002504:	b085      	sub	sp, #20
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002510:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4313      	orrs	r3, r2
 8002518:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800251a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800251e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4013      	ands	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002526:	68fb      	ldr	r3, [r7, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_APB1_GRP1_DisableClock>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002540:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	43db      	mvns	r3, r3
 8002546:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800254a:	4013      	ands	r3, r2
 800254c:	658b      	str	r3, [r1, #88]	@ 0x58
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_APB2_GRP1_EnableClock>:
{
 800255a:	b480      	push	{r7}
 800255c:	b085      	sub	sp, #20
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002566:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002568:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4313      	orrs	r3, r2
 8002570:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002572:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002576:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4013      	ands	r3, r2
 800257c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800257e:	68fb      	ldr	r3, [r7, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002590:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002594:	f7ff ff9c 	bl	80024d0 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002598:	2200      	movs	r2, #0
 800259a:	2100      	movs	r1, #0
 800259c:	202e      	movs	r0, #46	@ 0x2e
 800259e:	f000 fc58 	bl	8002e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80025a2:	202e      	movs	r0, #46	@ 0x2e
 80025a4:	f000 fc6f 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b09c      	sub	sp, #112	@ 0x70
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	605a      	str	r2, [r3, #4]
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	60da      	str	r2, [r3, #12]
 80025c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2250      	movs	r2, #80	@ 0x50
 80025ca:	2100      	movs	r1, #0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f010 fb01 	bl	8012bd4 <memset>
  if(hi2c->Instance==I2C1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1f      	ldr	r2, [pc, #124]	@ (8002654 <HAL_I2C_MspInit+0xa8>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d136      	bne.n	800264a <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025dc:	2304      	movs	r3, #4
 80025de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025e0:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80025e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	4618      	mov	r0, r3
 80025ec:	f006 f9b8 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025f6:	f7ff ff3b 	bl	8002470 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2002      	movs	r0, #2
 80025fc:	f7ff ff4f 	bl	800249e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002600:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002604:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002606:	2312      	movs	r3, #18
 8002608:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260e:	2300      	movs	r3, #0
 8002610:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002612:	2304      	movs	r3, #4
 8002614:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002616:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800261a:	4619      	mov	r1, r3
 800261c:	480e      	ldr	r0, [pc, #56]	@ (8002658 <HAL_I2C_MspInit+0xac>)
 800261e:	f000 fd43 	bl	80030a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002622:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002626:	f7ff ff6c 	bl	8002502 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	201e      	movs	r0, #30
 8002630:	f000 fc0f 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002634:	201e      	movs	r0, #30
 8002636:	f000 fc26 	bl	8002e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800263a:	2200      	movs	r2, #0
 800263c:	2100      	movs	r1, #0
 800263e:	201f      	movs	r0, #31
 8002640:	f000 fc07 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002644:	201f      	movs	r0, #31
 8002646:	f000 fc1e 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	3770      	adds	r7, #112	@ 0x70
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40005400 	.word	0x40005400
 8002658:	48000400 	.word	0x48000400

0800265c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <HAL_I2C_MspDeInit+0x44>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d113      	bne.n	8002696 <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800266e:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8002672:	f7ff ff5f 	bl	8002534 <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8002676:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800267a:	480a      	ldr	r0, [pc, #40]	@ (80026a4 <HAL_I2C_MspDeInit+0x48>)
 800267c:	f000 fe84 	bl	8003388 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002680:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002684:	4807      	ldr	r0, [pc, #28]	@ (80026a4 <HAL_I2C_MspDeInit+0x48>)
 8002686:	f000 fe7f 	bl	8003388 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 800268a:	201e      	movs	r0, #30
 800268c:	f000 fc09 	bl	8002ea2 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002690:	201f      	movs	r0, #31
 8002692:	f000 fc06 	bl	8002ea2 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	40005400 	.word	0x40005400
 80026a4:	48000400 	.word	0x48000400

080026a8 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0d      	ldr	r2, [pc, #52]	@ (80026ec <HAL_IPCC_MspInit+0x44>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d113      	bne.n	80026e2 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80026ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80026be:	f7ff ff07 	bl	80024d0 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	202c      	movs	r0, #44	@ 0x2c
 80026c8:	f000 fbc3 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80026cc:	202c      	movs	r0, #44	@ 0x2c
 80026ce:	f000 fbda 	bl	8002e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80026d2:	2200      	movs	r2, #0
 80026d4:	2100      	movs	r1, #0
 80026d6:	202d      	movs	r0, #45	@ 0x2d
 80026d8:	f000 fbbb 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80026dc:	202d      	movs	r0, #45	@ 0x2d
 80026de:	f000 fbd2 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	58000c00 	.word	0x58000c00

080026f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b096      	sub	sp, #88	@ 0x58
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	2250      	movs	r2, #80	@ 0x50
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f010 fa67 	bl	8012bd4 <memset>
  if(hrtc->Instance==RTC)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a0f      	ldr	r2, [pc, #60]	@ (8002748 <HAL_RTC_MspInit+0x58>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d117      	bne.n	8002740 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8002710:	f004 fdc2 	bl	8007298 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002714:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002718:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800271a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800271e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002720:	f107 0308 	add.w	r3, r7, #8
 8002724:	4618      	mov	r0, r3
 8002726:	f006 f91b 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8002730:	f7ff fe9e 	bl	8002470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002734:	f7ff fea2 	bl	800247c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002738:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800273c:	f7ff fee1 	bl	8002502 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002740:	bf00      	nop
 8002742:	3758      	adds	r7, #88	@ 0x58
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40002800 	.word	0x40002800

0800274c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b09c      	sub	sp, #112	@ 0x70
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002754:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	605a      	str	r2, [r3, #4]
 800275e:	609a      	str	r2, [r3, #8]
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002764:	f107 030c 	add.w	r3, r7, #12
 8002768:	2250      	movs	r2, #80	@ 0x50
 800276a:	2100      	movs	r1, #0
 800276c:	4618      	mov	r0, r3
 800276e:	f010 fa31 	bl	8012bd4 <memset>
  if(huart->Instance==USART1)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a1a      	ldr	r2, [pc, #104]	@ (80027e0 <HAL_UART_MspInit+0x94>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d12c      	bne.n	80027d6 <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800277c:	2301      	movs	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002780:	2300      	movs	r3, #0
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002784:	f107 030c 	add.w	r3, r7, #12
 8002788:	4618      	mov	r0, r3
 800278a:	f006 f8e9 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002794:	f7ff fe6c 	bl	8002470 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002798:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800279c:	f7ff fedd 	bl	800255a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a0:	2002      	movs	r0, #2
 80027a2:	f7ff fe7c 	bl	800249e <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027a6:	23c0      	movs	r3, #192	@ 0xc0
 80027a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027aa:	2302      	movs	r3, #2
 80027ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b6:	2307      	movs	r3, #7
 80027b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80027be:	4619      	mov	r1, r3
 80027c0:	4808      	ldr	r0, [pc, #32]	@ (80027e4 <HAL_UART_MspInit+0x98>)
 80027c2:	f000 fc71 	bl	80030a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2100      	movs	r1, #0
 80027ca:	2024      	movs	r0, #36	@ 0x24
 80027cc:	f000 fb41 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80027d0:	2024      	movs	r0, #36	@ 0x24
 80027d2:	f000 fb58 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027d6:	bf00      	nop
 80027d8:	3770      	adds	r7, #112	@ 0x70
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	40013800 	.word	0x40013800
 80027e4:	48000400 	.word	0x48000400

080027e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027ec:	bf00      	nop
 80027ee:	e7fd      	b.n	80027ec <NMI_Handler+0x4>

080027f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027f4:	bf00      	nop
 80027f6:	e7fd      	b.n	80027f4 <HardFault_Handler+0x4>

080027f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <MemManage_Handler+0x4>

08002800 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <UsageFault_Handler+0x4>

08002810 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281e:	b480      	push	{r7}
 8002820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283e:	f000 f9a1 	bl	8002b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}

08002846 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_1_Pin);
 800284a:	2001      	movs	r0, #1
 800284c:	f000 feaa 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002850:	bf00      	nop
 8002852:	bd80      	pop	{r7, pc}

08002854 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_2_Pin);
 8002858:	2002      	movs	r0, #2
 800285a:	f000 fea3 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800285e:	bf00      	nop
 8002860:	bd80      	pop	{r7, pc}

08002862 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_3_Pin);
 8002866:	2004      	movs	r0, #4
 8002868:	f000 fe9c 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}

08002870 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_4_Pin);
 8002874:	2008      	movs	r0, #8
 8002876:	f000 fe95 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800287a:	bf00      	nop
 800287c:	bd80      	pop	{r7, pc}

0800287e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_5_Pin);
 8002882:	2010      	movs	r0, #16
 8002884:	f000 fe8e 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002890:	4802      	ldr	r0, [pc, #8]	@ (800289c <USB_LP_IRQHandler+0x10>)
 8002892:	f003 f8bd 	bl	8005a10 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200019f8 	.word	0x200019f8

080028a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_6_Pin);
 80028a4:	2020      	movs	r0, #32
 80028a6:	f000 fe7d 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_7_Pin);
 80028aa:	2040      	movs	r0, #64	@ 0x40
 80028ac:	f000 fe7a 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_8_Pin);
 80028b0:	2080      	movs	r0, #128	@ 0x80
 80028b2:	f000 fe77 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028b6:	bf00      	nop
 80028b8:	bd80      	pop	{r7, pc}

080028ba <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80028ba:	b580      	push	{r7, lr}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
  timer16UpdateISR();
 80028be:	f7fe fd6d 	bl	800139c <timer16UpdateISR>
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  timer2UpdateISR();
 80028ca:	f7fe fd31 	bl	8001330 <timer2UpdateISR>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028ce:	bf00      	nop
 80028d0:	bd80      	pop	{r7, pc}
	...

080028d4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80028d8:	4802      	ldr	r0, [pc, #8]	@ (80028e4 <I2C1_EV_IRQHandler+0x10>)
 80028da:	f001 f9e3 	bl	8003ca4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80028de:	bf00      	nop
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	200002b8 	.word	0x200002b8

080028e8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <I2C1_ER_IRQHandler+0x10>)
 80028ee:	f001 f9f3 	bl	8003cd8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200002b8 	.word	0x200002b8

080028fc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002900:	4802      	ldr	r0, [pc, #8]	@ (800290c <USART1_IRQHandler+0x10>)
 8002902:	f006 fc2b 	bl	800915c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	2000036c 	.word	0x2000036c

08002910 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_B_Pin);
 8002914:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002918:	f000 fe44 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_C_Pin);
 800291c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002920:	f000 fe40 	bl	80035a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002924:	bf00      	nop
 8002926:	bd80      	pop	{r7, pc}

08002928 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800292c:	f00e ff82 	bl	8011834 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}

08002934 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8002938:	f00e ffb2 	bl	80118a0 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800293c:	bf00      	nop
 800293e:	bd80      	pop	{r7, pc}

08002940 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002944:	f000 fe46 	bl	80035d4 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002948:	bf00      	nop
 800294a:	bd80      	pop	{r7, pc}

0800294c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002954:	4a14      	ldr	r2, [pc, #80]	@ (80029a8 <_sbrk+0x5c>)
 8002956:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <_sbrk+0x60>)
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002960:	4b13      	ldr	r3, [pc, #76]	@ (80029b0 <_sbrk+0x64>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002968:	4b11      	ldr	r3, [pc, #68]	@ (80029b0 <_sbrk+0x64>)
 800296a:	4a12      	ldr	r2, [pc, #72]	@ (80029b4 <_sbrk+0x68>)
 800296c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800296e:	4b10      	ldr	r3, [pc, #64]	@ (80029b0 <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	693a      	ldr	r2, [r7, #16]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800297c:	f010 f942 	bl	8012c04 <__errno>
 8002980:	4603      	mov	r3, r0
 8002982:	220c      	movs	r2, #12
 8002984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800298a:	e009      	b.n	80029a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800298c:	4b08      	ldr	r3, [pc, #32]	@ (80029b0 <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002992:	4b07      	ldr	r3, [pc, #28]	@ (80029b0 <_sbrk+0x64>)
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4413      	add	r3, r2
 800299a:	4a05      	ldr	r2, [pc, #20]	@ (80029b0 <_sbrk+0x64>)
 800299c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800299e:	68fb      	ldr	r3, [r7, #12]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	20030000 	.word	0x20030000
 80029ac:	00000400 	.word	0x00000400
 80029b0:	20000400 	.word	0x20000400
 80029b4:	200020e8 	.word	0x200020e8

080029b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80029bc:	4b24      	ldr	r3, [pc, #144]	@ (8002a50 <SystemInit+0x98>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c2:	4a23      	ldr	r2, [pc, #140]	@ (8002a50 <SystemInit+0x98>)
 80029c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80029cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d6:	f043 0301 	orr.w	r3, r3, #1
 80029da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80029dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029e0:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80029e4:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80029e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80029f0:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <SystemInit+0x9c>)
 80029f2:	4013      	ands	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80029f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a02:	f023 0305 	bic.w	r3, r3, #5
 8002a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8002a0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002a12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a16:	f023 0301 	bic.w	r3, r3, #1
 8002a1a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8002a1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a22:	4a0d      	ldr	r2, [pc, #52]	@ (8002a58 <SystemInit+0xa0>)
 8002a24:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8002a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002a58 <SystemInit+0xa0>)
 8002a2c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a38:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a3c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00
 8002a54:	faf6fefb 	.word	0xfaf6fefb
 8002a58:	22041000 	.word	0x22041000

08002a5c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8002a5c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a5e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a60:	3304      	adds	r3, #4

08002a62 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a62:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a64:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8002a66:	d3f9      	bcc.n	8002a5c <CopyDataInit>
  bx lr
 8002a68:	4770      	bx	lr

08002a6a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a6a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a6c:	3004      	adds	r0, #4

08002a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a6e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a70:	d3fb      	bcc.n	8002a6a <FillZerobss>
  bx lr
 8002a72:	4770      	bx	lr

08002a74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a74:	480c      	ldr	r0, [pc, #48]	@ (8002aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a76:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a78:	f7ff ff9e 	bl	80029b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a7c:	480b      	ldr	r0, [pc, #44]	@ (8002aac <LoopForever+0x6>)
 8002a7e:	490c      	ldr	r1, [pc, #48]	@ (8002ab0 <LoopForever+0xa>)
 8002a80:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab4 <LoopForever+0xe>)
 8002a82:	2300      	movs	r3, #0
 8002a84:	f7ff ffed 	bl	8002a62 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a88:	480b      	ldr	r0, [pc, #44]	@ (8002ab8 <LoopForever+0x12>)
 8002a8a:	490c      	ldr	r1, [pc, #48]	@ (8002abc <LoopForever+0x16>)
 8002a8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ac0 <LoopForever+0x1a>)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f7ff ffe7 	bl	8002a62 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a94:	480b      	ldr	r0, [pc, #44]	@ (8002ac4 <LoopForever+0x1e>)
 8002a96:	490c      	ldr	r1, [pc, #48]	@ (8002ac8 <LoopForever+0x22>)
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f7ff ffe8 	bl	8002a6e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a9e:	f010 f8b7 	bl	8012c10 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002aa2:	f7ff fa49 	bl	8001f38 <main>

08002aa6 <LoopForever>:

LoopForever:
  b LoopForever
 8002aa6:	e7fe      	b.n	8002aa6 <LoopForever>
  ldr   r0, =_estack
 8002aa8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002aac:	20000008 	.word	0x20000008
 8002ab0:	2000018c 	.word	0x2000018c
 8002ab4:	08012fbc 	.word	0x08012fbc
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002ab8:	200301e4 	.word	0x200301e4
 8002abc:	20030a67 	.word	0x20030a67
 8002ac0:	08013186 	.word	0x08013186
  INIT_BSS _sbss, _ebss
 8002ac4:	200001d8 	.word	0x200001d8
 8002ac8:	200020e4 	.word	0x200020e4

08002acc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002acc:	e7fe      	b.n	8002acc <ADC1_IRQHandler>
	...

08002ad0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ada:	4b0c      	ldr	r3, [pc, #48]	@ (8002b0c <HAL_Init+0x3c>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a0b      	ldr	r2, [pc, #44]	@ (8002b0c <HAL_Init+0x3c>)
 8002ae0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ae6:	2003      	movs	r0, #3
 8002ae8:	f000 f9a8 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aec:	200f      	movs	r0, #15
 8002aee:	f000 f80f 	bl	8002b10 <HAL_InitTick>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d002      	beq.n	8002afe <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	e001      	b.n	8002b02 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002afe:	f7ff fd45 	bl	800258c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b02:	79fb      	ldrb	r3, [r7, #7]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	58004000 	.word	0x58004000

08002b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002b1c:	4b17      	ldr	r3, [pc, #92]	@ (8002b7c <HAL_InitTick+0x6c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d024      	beq.n	8002b6e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b24:	f005 fc7c 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	4b14      	ldr	r3, [pc, #80]	@ (8002b7c <HAL_InitTick+0x6c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	4619      	mov	r1, r3
 8002b30:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b34:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f000 f9be 	bl	8002ebe <HAL_SYSTICK_Config>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10f      	bne.n	8002b68 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2b0f      	cmp	r3, #15
 8002b4c:	d809      	bhi.n	8002b62 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b4e:	2200      	movs	r2, #0
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002b56:	f000 f97c 	bl	8002e52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b5a:	4a09      	ldr	r2, [pc, #36]	@ (8002b80 <HAL_InitTick+0x70>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	e007      	b.n	8002b72 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
 8002b66:	e004      	b.n	8002b72 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e001      	b.n	8002b72 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	2000002c 	.word	0x2000002c
 8002b80:	20000028 	.word	0x20000028

08002b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b88:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <HAL_IncTick+0x20>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_IncTick+0x24>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4413      	add	r3, r2
 8002b94:	4a04      	ldr	r2, [pc, #16]	@ (8002ba8 <HAL_IncTick+0x24>)
 8002b96:	6013      	str	r3, [r2, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	2000002c 	.word	0x2000002c
 8002ba8:	20000404 	.word	0x20000404

08002bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	@ (8002bc0 <HAL_GetTick+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000404 	.word	0x20000404

08002bc4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002bc8:	4b03      	ldr	r3, [pc, #12]	@ (8002bd8 <HAL_GetTickPrio+0x14>)
 8002bca:	681b      	ldr	r3, [r3, #0]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd4:	4770      	bx	lr
 8002bd6:	bf00      	nop
 8002bd8:	20000028 	.word	0x20000028

08002bdc <__NVIC_SetPriorityGrouping>:
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bec:	4b0c      	ldr	r3, [pc, #48]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c0e:	4a04      	ldr	r2, [pc, #16]	@ (8002c20 <__NVIC_SetPriorityGrouping+0x44>)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	60d3      	str	r3, [r2, #12]
}
 8002c14:	bf00      	nop
 8002c16:	3714      	adds	r7, #20
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	e000ed00 	.word	0xe000ed00

08002c24 <__NVIC_GetPriorityGrouping>:
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c28:	4b04      	ldr	r3, [pc, #16]	@ (8002c3c <__NVIC_GetPriorityGrouping+0x18>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	0a1b      	lsrs	r3, r3, #8
 8002c2e:	f003 0307 	and.w	r3, r3, #7
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <__NVIC_EnableIRQ>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	db0b      	blt.n	8002c6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	f003 021f 	and.w	r2, r3, #31
 8002c58:	4907      	ldr	r1, [pc, #28]	@ (8002c78 <__NVIC_EnableIRQ+0x38>)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	2001      	movs	r0, #1
 8002c62:	fa00 f202 	lsl.w	r2, r0, r2
 8002c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000e100 	.word	0xe000e100

08002c7c <__NVIC_DisableIRQ>:
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	4603      	mov	r3, r0
 8002c84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	db12      	blt.n	8002cb4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	f003 021f 	and.w	r2, r3, #31
 8002c94:	490a      	ldr	r1, [pc, #40]	@ (8002cc0 <__NVIC_DisableIRQ+0x44>)
 8002c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9a:	095b      	lsrs	r3, r3, #5
 8002c9c:	2001      	movs	r0, #1
 8002c9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca2:	3320      	adds	r3, #32
 8002ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002ca8:	f3bf 8f4f 	dsb	sy
}
 8002cac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002cae:	f3bf 8f6f 	isb	sy
}
 8002cb2:	bf00      	nop
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	e000e100 	.word	0xe000e100

08002cc4 <__NVIC_SetPendingIRQ>:
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	db0c      	blt.n	8002cf0 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	f003 021f 	and.w	r2, r3, #31
 8002cdc:	4907      	ldr	r1, [pc, #28]	@ (8002cfc <__NVIC_SetPendingIRQ+0x38>)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	2001      	movs	r0, #1
 8002ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cea:	3340      	adds	r3, #64	@ 0x40
 8002cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cf0:	bf00      	nop
 8002cf2:	370c      	adds	r7, #12
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_ClearPendingIRQ>:
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0c      	blt.n	8002d2c <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	@ (8002d38 <__NVIC_ClearPendingIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	3360      	adds	r3, #96	@ 0x60
 8002d28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	@ (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	@ (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	@ 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	@ (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff fec9 	bl	8002bdc <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e60:	f7ff fee0 	bl	8002c24 <__NVIC_GetPriorityGrouping>
 8002e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	6978      	ldr	r0, [r7, #20]
 8002e6c:	f7ff ff90 	bl	8002d90 <NVIC_EncodePriority>
 8002e70:	4602      	mov	r2, r0
 8002e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e76:	4611      	mov	r1, r2
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff5f 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b082      	sub	sp, #8
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff fed3 	bl	8002c40 <__NVIC_EnableIRQ>
}
 8002e9a:	bf00      	nop
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b082      	sub	sp, #8
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff fee3 	bl	8002c7c <__NVIC_DisableIRQ>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b082      	sub	sp, #8
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7ff ff96 	bl	8002df8 <SysTick_Config>
 8002ecc:	4603      	mov	r3, r0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f7ff feed 	bl	8002cc4 <__NVIC_SetPendingIRQ>
}
 8002eea:	bf00      	nop
 8002eec:	3708      	adds	r7, #8
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002ef2:	b580      	push	{r7, lr}
 8002ef4:	b082      	sub	sp, #8
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4603      	mov	r3, r0
 8002efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7ff fefd 	bl	8002d00 <__NVIC_ClearPendingIRQ>
}
 8002f06:	bf00      	nop
 8002f08:	3708      	adds	r7, #8
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b083      	sub	sp, #12
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e04f      	b.n	8002fc0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d008      	beq.n	8002f3e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e040      	b.n	8002fc0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 020e 	bic.w	r2, r2, #14
 8002f4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f003 021c 	and.w	r2, r3, #28
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f80:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f8a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00c      	beq.n	8002fae <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f9e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fa2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002fac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d005      	beq.n	8002ff0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	73fb      	strb	r3, [r7, #15]
 8002fee:	e047      	b.n	8003080 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f022 020e 	bic.w	r2, r2, #14
 8002ffe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f022 0201 	bic.w	r2, r2, #1
 800300e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800301a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800301e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003024:	f003 021c 	and.w	r2, r3, #28
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	2101      	movs	r1, #1
 800302e:	fa01 f202 	lsl.w	r2, r1, r2
 8003032:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800303c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003050:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003054:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800305e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003074:	2b00      	cmp	r3, #0
 8003076:	d003      	beq.n	8003080 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	4798      	blx	r3
    }
  }
  return status;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003098:	b2db      	uxtb	r3, r3
}
 800309a:	4618      	mov	r0, r3
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030b2:	2300      	movs	r3, #0
 80030b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030b6:	e14c      	b.n	8003352 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	2101      	movs	r1, #1
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	fa01 f303 	lsl.w	r3, r1, r3
 80030c4:	4013      	ands	r3, r2
 80030c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 813e 	beq.w	800334c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f003 0303 	and.w	r3, r3, #3
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d005      	beq.n	80030e8 <HAL_GPIO_Init+0x40>
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d130      	bne.n	800314a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800311e:	2201      	movs	r2, #1
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 0201 	and.w	r2, r3, #1
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4313      	orrs	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b03      	cmp	r3, #3
 8003154:	d017      	beq.n	8003186 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	689a      	ldr	r2, [r3, #8]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fa02 f303 	lsl.w	r3, r2, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4313      	orrs	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d123      	bne.n	80031da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	08da      	lsrs	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	3208      	adds	r2, #8
 800319a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800319e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	220f      	movs	r2, #15
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4013      	ands	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	693a      	ldr	r2, [r7, #16]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	08da      	lsrs	r2, r3, #3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3208      	adds	r2, #8
 80031d4:	6939      	ldr	r1, [r7, #16]
 80031d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	2203      	movs	r2, #3
 80031e6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ea:	43db      	mvns	r3, r3
 80031ec:	693a      	ldr	r2, [r7, #16]
 80031ee:	4013      	ands	r3, r2
 80031f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f003 0203 	and.w	r2, r3, #3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	693a      	ldr	r2, [r7, #16]
 800320c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8098 	beq.w	800334c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800321c:	4a54      	ldr	r2, [pc, #336]	@ (8003370 <HAL_GPIO_Init+0x2c8>)
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	089b      	lsrs	r3, r3, #2
 8003222:	3302      	adds	r3, #2
 8003224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003228:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	f003 0303 	and.w	r3, r3, #3
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	220f      	movs	r2, #15
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003246:	d019      	beq.n	800327c <HAL_GPIO_Init+0x1d4>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a4a      	ldr	r2, [pc, #296]	@ (8003374 <HAL_GPIO_Init+0x2cc>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <HAL_GPIO_Init+0x1d0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a49      	ldr	r2, [pc, #292]	@ (8003378 <HAL_GPIO_Init+0x2d0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00d      	beq.n	8003274 <HAL_GPIO_Init+0x1cc>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a48      	ldr	r2, [pc, #288]	@ (800337c <HAL_GPIO_Init+0x2d4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <HAL_GPIO_Init+0x1c8>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a47      	ldr	r2, [pc, #284]	@ (8003380 <HAL_GPIO_Init+0x2d8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d101      	bne.n	800326c <HAL_GPIO_Init+0x1c4>
 8003268:	2304      	movs	r3, #4
 800326a:	e008      	b.n	800327e <HAL_GPIO_Init+0x1d6>
 800326c:	2307      	movs	r3, #7
 800326e:	e006      	b.n	800327e <HAL_GPIO_Init+0x1d6>
 8003270:	2303      	movs	r3, #3
 8003272:	e004      	b.n	800327e <HAL_GPIO_Init+0x1d6>
 8003274:	2302      	movs	r3, #2
 8003276:	e002      	b.n	800327e <HAL_GPIO_Init+0x1d6>
 8003278:	2301      	movs	r3, #1
 800327a:	e000      	b.n	800327e <HAL_GPIO_Init+0x1d6>
 800327c:	2300      	movs	r3, #0
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	f002 0203 	and.w	r2, r2, #3
 8003284:	0092      	lsls	r2, r2, #2
 8003286:	4093      	lsls	r3, r2
 8003288:	693a      	ldr	r2, [r7, #16]
 800328a:	4313      	orrs	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800328e:	4938      	ldr	r1, [pc, #224]	@ (8003370 <HAL_GPIO_Init+0x2c8>)
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	089b      	lsrs	r3, r3, #2
 8003294:	3302      	adds	r3, #2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800329c:	4b39      	ldr	r3, [pc, #228]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	43db      	mvns	r3, r3
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	4013      	ands	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032c0:	4a30      	ldr	r2, [pc, #192]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80032c6:	4b2f      	ldr	r3, [pc, #188]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4013      	ands	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ea:	4a26      	ldr	r2, [pc, #152]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80032f0:	4b24      	ldr	r3, [pc, #144]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 80032f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	43db      	mvns	r3, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4013      	ands	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003316:	4a1b      	ldr	r2, [pc, #108]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800331e:	4b19      	ldr	r3, [pc, #100]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 8003320:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	43db      	mvns	r3, r3
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	4013      	ands	r3, r2
 800332e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d003      	beq.n	8003344 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4313      	orrs	r3, r2
 8003342:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003344:	4a0f      	ldr	r2, [pc, #60]	@ (8003384 <HAL_GPIO_Init+0x2dc>)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	3301      	adds	r3, #1
 8003350:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	f47f aeab 	bne.w	80030b8 <HAL_GPIO_Init+0x10>
  }
}
 8003362:	bf00      	nop
 8003364:	bf00      	nop
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	40010000 	.word	0x40010000
 8003374:	48000400 	.word	0x48000400
 8003378:	48000800 	.word	0x48000800
 800337c:	48000c00 	.word	0x48000c00
 8003380:	48001000 	.word	0x48001000
 8003384:	58000800 	.word	0x58000800

08003388 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003392:	2300      	movs	r3, #0
 8003394:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003396:	e0bb      	b.n	8003510 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003398:	2201      	movs	r2, #1
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80ae 	beq.w	800350a <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80033ae:	4a5f      	ldr	r2, [pc, #380]	@ (800352c <HAL_GPIO_DeInit+0x1a4>)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	3302      	adds	r3, #2
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	4013      	ands	r3, r2
 80033ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80033d6:	d019      	beq.n	800340c <HAL_GPIO_DeInit+0x84>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a55      	ldr	r2, [pc, #340]	@ (8003530 <HAL_GPIO_DeInit+0x1a8>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <HAL_GPIO_DeInit+0x80>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a54      	ldr	r2, [pc, #336]	@ (8003534 <HAL_GPIO_DeInit+0x1ac>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00d      	beq.n	8003404 <HAL_GPIO_DeInit+0x7c>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a53      	ldr	r2, [pc, #332]	@ (8003538 <HAL_GPIO_DeInit+0x1b0>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d007      	beq.n	8003400 <HAL_GPIO_DeInit+0x78>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a52      	ldr	r2, [pc, #328]	@ (800353c <HAL_GPIO_DeInit+0x1b4>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_GPIO_DeInit+0x74>
 80033f8:	2304      	movs	r3, #4
 80033fa:	e008      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 80033fc:	2307      	movs	r3, #7
 80033fe:	e006      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003400:	2303      	movs	r3, #3
 8003402:	e004      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003404:	2302      	movs	r3, #2
 8003406:	e002      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_GPIO_DeInit+0x86>
 800340c:	2300      	movs	r3, #0
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	429a      	cmp	r2, r3
 800341c:	d136      	bne.n	800348c <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800341e:	4b48      	ldr	r3, [pc, #288]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 8003420:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	43db      	mvns	r3, r3
 8003428:	4945      	ldr	r1, [pc, #276]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 800342a:	4013      	ands	r3, r2
 800342c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8003430:	4b43      	ldr	r3, [pc, #268]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 8003432:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	4941      	ldr	r1, [pc, #260]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 800343c:	4013      	ands	r3, r2
 800343e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8003442:	4b3f      	ldr	r3, [pc, #252]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	43db      	mvns	r3, r3
 800344a:	493d      	ldr	r1, [pc, #244]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 800344c:	4013      	ands	r3, r2
 800344e:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	43db      	mvns	r3, r3
 8003458:	4939      	ldr	r1, [pc, #228]	@ (8003540 <HAL_GPIO_DeInit+0x1b8>)
 800345a:	4013      	ands	r3, r2
 800345c:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	f003 0303 	and.w	r3, r3, #3
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	220f      	movs	r2, #15
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800346e:	4a2f      	ldr	r2, [pc, #188]	@ (800352c <HAL_GPIO_DeInit+0x1a4>)
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	089b      	lsrs	r3, r3, #2
 8003474:	3302      	adds	r3, #2
 8003476:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	43da      	mvns	r2, r3
 800347e:	482b      	ldr	r0, [pc, #172]	@ (800352c <HAL_GPIO_DeInit+0x1a4>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	400a      	ands	r2, r1
 8003486:	3302      	adds	r3, #2
 8003488:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2103      	movs	r1, #3
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	08da      	lsrs	r2, r3, #3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	3208      	adds	r2, #8
 80034a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	220f      	movs	r2, #15
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	43db      	mvns	r3, r3
 80034bc:	697a      	ldr	r2, [r7, #20]
 80034be:	08d2      	lsrs	r2, r2, #3
 80034c0:	4019      	ands	r1, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3208      	adds	r2, #8
 80034c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	2103      	movs	r1, #3
 80034d4:	fa01 f303 	lsl.w	r3, r1, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	401a      	ands	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	2101      	movs	r1, #1
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	fa01 f303 	lsl.w	r3, r1, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	2103      	movs	r1, #3
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	401a      	ands	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	609a      	str	r2, [r3, #8]
    }

    position++;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	3301      	adds	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	fa22 f303 	lsr.w	r3, r2, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	f47f af3d 	bne.w	8003398 <HAL_GPIO_DeInit+0x10>
  }
}
 800351e:	bf00      	nop
 8003520:	bf00      	nop
 8003522:	371c      	adds	r7, #28
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	40010000 	.word	0x40010000
 8003530:	48000400 	.word	0x48000400
 8003534:	48000800 	.word	0x48000800
 8003538:	48000c00 	.word	0x48000c00
 800353c:	48001000 	.word	0x48001000
 8003540:	58000800 	.word	0x58000800

08003544 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	887b      	ldrh	r3, [r7, #2]
 8003556:	4013      	ands	r3, r2
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
 8003560:	e001      	b.n	8003566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003566:	7bfb      	ldrb	r3, [r7, #15]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
 800357c:	460b      	mov	r3, r1
 800357e:	807b      	strh	r3, [r7, #2]
 8003580:	4613      	mov	r3, r2
 8003582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003584:	787b      	ldrb	r3, [r7, #1]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003590:	e002      	b.n	8003598 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003598:	bf00      	nop
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	4603      	mov	r3, r0
 80035ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035ae:	4b08      	ldr	r3, [pc, #32]	@ (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d006      	beq.n	80035c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035ba:	4a05      	ldr	r2, [pc, #20]	@ (80035d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c0:	88fb      	ldrh	r3, [r7, #6]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fe1e 	bl	8001204 <HAL_GPIO_EXTI_Callback>
  }
}
 80035c8:	bf00      	nop
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	58000800 	.word	0x58000800

080035d4 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80035da:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <HAL_HSEM_IRQHandler+0x30>)
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80035e0:	4b08      	ldr	r3, [pc, #32]	@ (8003604 <HAL_HSEM_IRQHandler+0x30>)
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	4906      	ldr	r1, [pc, #24]	@ (8003604 <HAL_HSEM_IRQHandler+0x30>)
 80035ea:	4013      	ands	r3, r2
 80035ec:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 80035ee:	4a05      	ldr	r2, [pc, #20]	@ (8003604 <HAL_HSEM_IRQHandler+0x30>)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 f807 	bl	8003608 <HAL_HSEM_FreeCallback>
}
 80035fa:	bf00      	nop
 80035fc:	3708      	adds	r7, #8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	58001500 	.word	0x58001500

08003608 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d101      	bne.n	800362e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e08d      	b.n	800374a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d106      	bne.n	8003648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f7fe ffb2 	bl	80025ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2224      	movs	r2, #36	@ 0x24
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 0201 	bic.w	r2, r2, #1
 800365e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800366c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800367c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d107      	bne.n	8003696 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	e006      	b.n	80036a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80036a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d108      	bne.n	80036be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ba:	605a      	str	r2, [r3, #4]
 80036bc:	e007      	b.n	80036ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80036dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691a      	ldr	r2, [r3, #16]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69d9      	ldr	r1, [r3, #28]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1a      	ldr	r2, [r3, #32]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f042 0201 	orr.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2220      	movs	r2, #32
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e021      	b.n	80037a8 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	@ 0x24
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7fe ff6d 	bl	800265c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3708      	adds	r7, #8
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af02      	add	r7, sp, #8
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	461a      	mov	r2, r3
 80037bc:	460b      	mov	r3, r1
 80037be:	817b      	strh	r3, [r7, #10]
 80037c0:	4613      	mov	r3, r2
 80037c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	2b20      	cmp	r3, #32
 80037ce:	f040 80db 	bne.w	8003988 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_I2C_Master_Receive+0x30>
 80037dc:	2302      	movs	r3, #2
 80037de:	e0d4      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80037e8:	f7ff f9e0 	bl	8002bac <HAL_GetTick>
 80037ec:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	2319      	movs	r3, #25
 80037f4:	2201      	movs	r2, #1
 80037f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f001 fbdd 	bl	8004fba <I2C_WaitOnFlagUntilTimeout>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0bf      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2222      	movs	r2, #34	@ 0x22
 800380e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2210      	movs	r2, #16
 8003816:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	893a      	ldrh	r2, [r7, #8]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003836:	b29b      	uxth	r3, r3
 8003838:	2bff      	cmp	r3, #255	@ 0xff
 800383a:	d90e      	bls.n	800385a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	22ff      	movs	r2, #255	@ 0xff
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003846:	b2da      	uxtb	r2, r3
 8003848:	8979      	ldrh	r1, [r7, #10]
 800384a:	4b52      	ldr	r3, [pc, #328]	@ (8003994 <HAL_I2C_Master_Receive+0x1e4>)
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f001 fdba 	bl	80053cc <I2C_TransferConfig>
 8003858:	e06d      	b.n	8003936 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	b2da      	uxtb	r2, r3
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	4b49      	ldr	r3, [pc, #292]	@ (8003994 <HAL_I2C_Master_Receive+0x1e4>)
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f001 fda9 	bl	80053cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800387a:	e05c      	b.n	8003936 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	6a39      	ldr	r1, [r7, #32]
 8003880:	68f8      	ldr	r0, [r7, #12]
 8003882:	f001 fc37 	bl	80050f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003886:	4603      	mov	r3, r0
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e07c      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	b2d2      	uxtb	r2, r2
 800389c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a2:	1c5a      	adds	r2, r3, #1
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d034      	beq.n	8003936 <HAL_I2C_Master_Receive+0x186>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d130      	bne.n	8003936 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	9300      	str	r3, [sp, #0]
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	2200      	movs	r2, #0
 80038dc:	2180      	movs	r1, #128	@ 0x80
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f001 fb6b 	bl	8004fba <I2C_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e04d      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2bff      	cmp	r3, #255	@ 0xff
 80038f6:	d90e      	bls.n	8003916 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	22ff      	movs	r2, #255	@ 0xff
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	b2da      	uxtb	r2, r3
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f001 fd5c 	bl	80053cc <I2C_TransferConfig>
 8003914:	e00f      	b.n	8003936 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003924:	b2da      	uxtb	r2, r3
 8003926:	8979      	ldrh	r1, [r7, #10]
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f001 fd4b 	bl	80053cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	d19d      	bne.n	800387c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	6a39      	ldr	r1, [r7, #32]
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f001 fb91 	bl	800506c <I2C_WaitOnSTOPFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e01a      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2220      	movs	r2, #32
 800395a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6859      	ldr	r1, [r3, #4]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	4b0c      	ldr	r3, [pc, #48]	@ (8003998 <HAL_I2C_Master_Receive+0x1e8>)
 8003968:	400b      	ands	r3, r1
 800396a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003984:	2300      	movs	r3, #0
 8003986:	e000      	b.n	800398a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003988:	2302      	movs	r3, #2
  }
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	80002400 	.word	0x80002400
 8003998:	fe00e800 	.word	0xfe00e800

0800399c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	603b      	str	r3, [r7, #0]
 80039a8:	4613      	mov	r3, r2
 80039aa:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039b8:	2b28      	cmp	r3, #40	@ 0x28
 80039ba:	f040 8098 	bne.w	8003aee <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d105      	bne.n	80039d6 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039d0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e08c      	b.n	8003af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80039d6:	f248 0101 	movw	r1, #32769	@ 0x8001
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f001 fdac 	bl	8005538 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d101      	bne.n	80039ee <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 80039ea:	2302      	movs	r3, #2
 80039ec:	e080      	b.n	8003af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a00:	d12a      	bne.n	8003a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a02:	2102      	movs	r1, #2
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f001 fd97 	bl	8005538 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a18:	d11e      	bne.n	8003a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a28:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d012      	beq.n	8003a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a36:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 8003a38:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fac4 	bl	8002fcc <HAL_DMA_Abort_IT>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d006      	beq.n	8003a58 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003a54:	4610      	mov	r0, r2
 8003a56:	4798      	blx	r3
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2229      	movs	r2, #41	@ 0x29
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a7c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	88fa      	ldrh	r2, [r7, #6]
 8003a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	683a      	ldr	r2, [r7, #0]
 8003a98:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	@ (8003afc <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003a9e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	0c1b      	lsrs	r3, r3, #16
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	f003 0301 	and.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003aca:	7dfb      	ldrb	r3, [r7, #23]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2208      	movs	r2, #8
 8003ad6:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003ae0:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 fca3 	bl	8005430 <I2C_Enable_IRQ>

    return HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	e000      	b.n	8003af0 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
  }
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3718      	adds	r7, #24
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	08004f7f 	.word	0x08004f7f
 8003afc:	08003e0b 	.word	0x08003e0b

08003b00 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	603b      	str	r3, [r7, #0]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003b1c:	2b28      	cmp	r3, #40	@ 0x28
 8003b1e:	f040 8098 	bne.w	8003c52 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b34:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08c      	b.n	8003c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b3a:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f001 fcfa 	bl	8005538 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e080      	b.n	8003c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b29      	cmp	r3, #41	@ 0x29
 8003b64:	d12a      	bne.n	8003bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b66:	2101      	movs	r1, #1
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f001 fce5 	bl	8005538 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b7c:	d11e      	bne.n	8003bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b8c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d012      	beq.n	8003bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9a:	4a30      	ldr	r2, [pc, #192]	@ (8003c5c <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003b9c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff fa12 	bl	8002fcc <HAL_DMA_Abort_IT>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003bb8:	4610      	mov	r0, r2
 8003bba:	4798      	blx	r3
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	222a      	movs	r2, #42	@ 0x2a
 8003bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003be0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003c02:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0308 	and.w	r3, r3, #8
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	bf0c      	ite	eq
 8003c12:	2301      	moveq	r3, #1
 8003c14:	2300      	movne	r3, #0
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	0c1b      	lsrs	r3, r3, #16
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003c2e:	7dfb      	ldrb	r3, [r7, #23]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2208      	movs	r2, #8
 8003c3a:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003c44:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f001 fbf1 	bl	8005430 <I2C_Enable_IRQ>

    return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
  }
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	08004f7f 	.word	0x08004f7f
 8003c60:	08003e0b 	.word	0x08003e0b

08003c64 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b20      	cmp	r3, #32
 8003c76:	d10d      	bne.n	8003c94 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2228      	movs	r2, #40	@ 0x28
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a07      	ldr	r2, [pc, #28]	@ (8003ca0 <HAL_I2C_EnableListen_IT+0x3c>)
 8003c84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f001 fbd0 	bl	8005430 <I2C_Enable_IRQ>

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	08003e0b 	.word	0x08003e0b

08003ca4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d005      	beq.n	8003cd0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
  }
}
 8003cd0:	bf00      	nop
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00f      	beq.n	8003d1a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00a      	beq.n	8003d1a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d18:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00f      	beq.n	8003d44 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d32:	f043 0208 	orr.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003d42:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00f      	beq.n	8003d6e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00a      	beq.n	8003d6e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d5c:	f043 0202 	orr.w	r2, r3, #2
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d6c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 030b 	and.w	r3, r3, #11
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d003      	beq.n	8003d86 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 ffc1 	bl	8004d08 <I2C_ITError>
  }
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b086      	sub	sp, #24
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d101      	bne.n	8003e2e <I2C_Slave_ISR_IT+0x24>
 8003e2a:	2302      	movs	r3, #2
 8003e2c:	e0e2      	b.n	8003ff4 <I2C_Slave_ISR_IT+0x1ea>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d004      	beq.n	8003e54 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003e4a:	6939      	ldr	r1, [r7, #16]
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fda3 	bl	8004998 <I2C_ITSlaveCplt>
 8003e52:	e0ca      	b.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d04b      	beq.n	8003ef6 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d046      	beq.n	8003ef6 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d128      	bne.n	8003ec4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b28      	cmp	r3, #40	@ 0x28
 8003e7c:	d108      	bne.n	8003e90 <I2C_Slave_ISR_IT+0x86>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e84:	d104      	bne.n	8003e90 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e86:	6939      	ldr	r1, [r7, #16]
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f000 fee9 	bl	8004c60 <I2C_ITListenCplt>
 8003e8e:	e031      	b.n	8003ef4 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	2b29      	cmp	r3, #41	@ 0x29
 8003e9a:	d10e      	bne.n	8003eba <I2C_Slave_ISR_IT+0xb0>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ea2:	d00a      	beq.n	8003eba <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2210      	movs	r2, #16
 8003eaa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f001 f842 	bl	8004f36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 fc4c 	bl	8004750 <I2C_ITSlaveSeqCplt>
 8003eb8:	e01c      	b.n	8003ef4 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2210      	movs	r2, #16
 8003ec0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003ec2:	e08f      	b.n	8003fe4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed0:	f043 0204 	orr.w	r2, r3, #4
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <I2C_Slave_ISR_IT+0xdc>
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ee4:	d17e      	bne.n	8003fe4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	4619      	mov	r1, r3
 8003eec:	68f8      	ldr	r0, [r7, #12]
 8003eee:	f000 ff0b 	bl	8004d08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ef2:	e077      	b.n	8003fe4 <I2C_Slave_ISR_IT+0x1da>
 8003ef4:	e076      	b.n	8003fe4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02f      	beq.n	8003f60 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02a      	beq.n	8003f60 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f26:	1c5a      	adds	r2, r3, #1
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f30:	3b01      	subs	r3, #1
 8003f32:	b29a      	uxth	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3c:	b29b      	uxth	r3, r3
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d14b      	bne.n	8003fe8 <I2C_Slave_ISR_IT+0x1de>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f56:	d047      	beq.n	8003fe8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fbf9 	bl	8004750 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003f5e:	e043      	b.n	8003fe8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d009      	beq.n	8003f7e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d004      	beq.n	8003f7e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f74:	6939      	ldr	r1, [r7, #16]
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fb29 	bl	80045ce <I2C_ITAddrCplt>
 8003f7c:	e035      	b.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d030      	beq.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d02b      	beq.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d018      	beq.n	8003fce <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa0:	781a      	ldrb	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	1c5a      	adds	r2, r3, #1
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003fcc:	e00d      	b.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fd4:	d002      	beq.n	8003fdc <I2C_Slave_ISR_IT+0x1d2>
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 fbb7 	bl	8004750 <I2C_ITSlaveSeqCplt>
 8003fe2:	e002      	b.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003fe4:	bf00      	nop
 8003fe6:	e000      	b.n	8003fea <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003fe8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800400e:	2b01      	cmp	r3, #1
 8004010:	d101      	bne.n	8004016 <I2C_Master_ISR_DMA+0x1a>
 8004012:	2302      	movs	r3, #2
 8004014:	e0d9      	b.n	80041ca <I2C_Master_ISR_DMA+0x1ce>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f003 0310 	and.w	r3, r3, #16
 8004024:	2b00      	cmp	r3, #0
 8004026:	d016      	beq.n	8004056 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2210      	movs	r2, #16
 8004038:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0204 	orr.w	r2, r3, #4
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004046:	2120      	movs	r1, #32
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f001 f9f1 	bl	8005430 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 ff71 	bl	8004f36 <I2C_Flush_TXDR>
 8004054:	e0b4      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d071      	beq.n	8004144 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004066:	2b00      	cmp	r3, #0
 8004068:	d06c      	beq.n	8004144 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004078:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407e:	b29b      	uxth	r3, r3
 8004080:	2b00      	cmp	r3, #0
 8004082:	d04e      	beq.n	8004122 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	b29b      	uxth	r3, r3
 800408c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004090:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004096:	b29b      	uxth	r3, r3
 8004098:	2bff      	cmp	r3, #255	@ 0xff
 800409a:	d906      	bls.n	80040aa <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	22ff      	movs	r2, #255	@ 0xff
 80040a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 80040a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040a6:	617b      	str	r3, [r7, #20]
 80040a8:	e010      	b.n	80040cc <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ae:	b29a      	uxth	r2, r3
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040bc:	d003      	beq.n	80040c6 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c2:	617b      	str	r3, [r7, #20]
 80040c4:	e002      	b.n	80040cc <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80040c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040ca:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	8a79      	ldrh	r1, [r7, #18]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f001 f976 	bl	80053cc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	@ 0x22
 80040fc:	d108      	bne.n	8004110 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800410c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800410e:	e057      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800411e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004120:	e04e      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800412c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004130:	d003      	beq.n	800413a <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 facf 	bl	80046d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8004138:	e042      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fde3 	bl	8004d08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004142:	e03d      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800414a:	2b00      	cmp	r3, #0
 800414c:	d028      	beq.n	80041a0 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004154:	2b00      	cmp	r3, #0
 8004156:	d023      	beq.n	80041a0 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800416c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004170:	d025      	beq.n	80041be <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800417a:	d108      	bne.n	800418e <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800418a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800418c:	e017      	b.n	80041be <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 faa1 	bl	80046d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8004194:	e013      	b.n	80041be <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004196:	2140      	movs	r1, #64	@ 0x40
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fdb5 	bl	8004d08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800419e:	e00e      	b.n	80041be <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80041b4:	68b9      	ldr	r1, [r7, #8]
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 fb26 	bl	8004808 <I2C_ITMasterCplt>
 80041bc:	e000      	b.n	80041c0 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 80041be:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
	...

080041d4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b088      	sub	sp, #32
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80041e0:	4b8d      	ldr	r3, [pc, #564]	@ (8004418 <I2C_Mem_ISR_DMA+0x244>)
 80041e2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <I2C_Mem_ISR_DMA+0x1e>
 80041ee:	2302      	movs	r3, #2
 80041f0:	e10e      	b.n	8004410 <I2C_Mem_ISR_DMA+0x23c>
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	f003 0310 	and.w	r3, r3, #16
 8004200:	2b00      	cmp	r3, #0
 8004202:	d016      	beq.n	8004232 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800420a:	2b00      	cmp	r3, #0
 800420c:	d011      	beq.n	8004232 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2210      	movs	r2, #16
 8004214:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800421a:	f043 0204 	orr.w	r2, r3, #4
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004222:	2120      	movs	r1, #32
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f001 f903 	bl	8005430 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f000 fe83 	bl	8004f36 <I2C_Flush_TXDR>
 8004230:	e0e9      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00e      	beq.n	800425a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004242:	2b00      	cmp	r3, #0
 8004244:	d009      	beq.n	800425a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004256:	651a      	str	r2, [r3, #80]	@ 0x50
 8004258:	e0d5      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d05f      	beq.n	8004324 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800426a:	2b00      	cmp	r3, #0
 800426c:	d05a      	beq.n	8004324 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800426e:	2101      	movs	r1, #1
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f001 f961 	bl	8005538 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004276:	2110      	movs	r1, #16
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f001 f8d9 	bl	8005430 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d048      	beq.n	800431a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800428c:	b29b      	uxth	r3, r3
 800428e:	2bff      	cmp	r3, #255	@ 0xff
 8004290:	d910      	bls.n	80042b4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	22ff      	movs	r2, #255	@ 0xff
 8004296:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800429c:	b299      	uxth	r1, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	2300      	movs	r3, #0
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f001 f88d 	bl	80053cc <I2C_TransferConfig>
 80042b2:	e011      	b.n	80042d8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042c2:	b299      	uxth	r1, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	2300      	movs	r3, #0
 80042cc:	9300      	str	r3, [sp, #0]
 80042ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f001 f87a 	bl	80053cc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042dc:	b29a      	uxth	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b22      	cmp	r3, #34	@ 0x22
 80042f4:	d108      	bne.n	8004308 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004304:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004306:	e07e      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004316:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004318:	e075      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800431a:	2140      	movs	r1, #64	@ 0x40
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fcf3 	bl	8004d08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004322:	e070      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d05d      	beq.n	80043ea <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004334:	2b00      	cmp	r3, #0
 8004336:	d058      	beq.n	80043ea <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004338:	2101      	movs	r1, #1
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 f8fc 	bl	8005538 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004340:	2110      	movs	r1, #16
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f001 f874 	bl	8005430 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b22      	cmp	r3, #34	@ 0x22
 8004352:	d101      	bne.n	8004358 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004354:	4b31      	ldr	r3, [pc, #196]	@ (800441c <I2C_Mem_ISR_DMA+0x248>)
 8004356:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2bff      	cmp	r3, #255	@ 0xff
 8004360:	d910      	bls.n	8004384 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	22ff      	movs	r2, #255	@ 0xff
 8004366:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	b299      	uxth	r1, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	b2da      	uxtb	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f001 f825 	bl	80053cc <I2C_TransferConfig>
 8004382:	e011      	b.n	80043a8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004392:	b299      	uxth	r1, r3
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004398:	b2da      	uxtb	r2, r3
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f001 f812 	bl	80053cc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b22      	cmp	r3, #34	@ 0x22
 80043c4:	d108      	bne.n	80043d8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043d4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043d6:	e016      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043e8:	e00d      	b.n	8004406 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d003      	beq.n	8004406 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68f8      	ldr	r0, [r7, #12]
 8004402:	f000 fa01 	bl	8004808 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	80002000 	.word	0x80002000
 800441c:	80002400 	.word	0x80002400

08004420 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004432:	2300      	movs	r3, #0
 8004434:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <I2C_Slave_ISR_DMA+0x24>
 8004440:	2302      	movs	r3, #2
 8004442:	e0c0      	b.n	80045c6 <I2C_Slave_ISR_DMA+0x1a6>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 0320 	and.w	r3, r3, #32
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004460:	68b9      	ldr	r1, [r7, #8]
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 fa98 	bl	8004998 <I2C_ITSlaveCplt>
 8004468:	e0a8      	b.n	80045bc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f003 0310 	and.w	r3, r3, #16
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 8095 	beq.w	80045a0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 808f 	beq.w	80045a0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d104      	bne.n	8004496 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004492:	2b00      	cmp	r3, #0
 8004494:	d07d      	beq.n	8004592 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d007      	beq.n	80044b8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80044b4:	2301      	movs	r3, #1
 80044b6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00c      	beq.n	80044da <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d007      	beq.n	80044da <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80044d6:	2301      	movs	r3, #1
 80044d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d128      	bne.n	8004532 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b28      	cmp	r3, #40	@ 0x28
 80044ea:	d108      	bne.n	80044fe <I2C_Slave_ISR_DMA+0xde>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044f2:	d104      	bne.n	80044fe <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80044f4:	68b9      	ldr	r1, [r7, #8]
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f000 fbb2 	bl	8004c60 <I2C_ITListenCplt>
 80044fc:	e048      	b.n	8004590 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b29      	cmp	r3, #41	@ 0x29
 8004508:	d10e      	bne.n	8004528 <I2C_Slave_ISR_DMA+0x108>
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004510:	d00a      	beq.n	8004528 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2210      	movs	r2, #16
 8004518:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fd0b 	bl	8004f36 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 f915 	bl	8004750 <I2C_ITSlaveSeqCplt>
 8004526:	e033      	b.n	8004590 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2210      	movs	r2, #16
 800452e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004530:	e034      	b.n	800459c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2210      	movs	r2, #16
 8004538:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800453e:	f043 0204 	orr.w	r2, r3, #4
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800454c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <I2C_Slave_ISR_DMA+0x13c>
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800455a:	d11f      	bne.n	800459c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b21      	cmp	r3, #33	@ 0x21
 8004560:	d002      	beq.n	8004568 <I2C_Slave_ISR_DMA+0x148>
 8004562:	7dfb      	ldrb	r3, [r7, #23]
 8004564:	2b29      	cmp	r3, #41	@ 0x29
 8004566:	d103      	bne.n	8004570 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2221      	movs	r2, #33	@ 0x21
 800456c:	631a      	str	r2, [r3, #48]	@ 0x30
 800456e:	e008      	b.n	8004582 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	2b22      	cmp	r3, #34	@ 0x22
 8004574:	d002      	beq.n	800457c <I2C_Slave_ISR_DMA+0x15c>
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	2b2a      	cmp	r3, #42	@ 0x2a
 800457a:	d102      	bne.n	8004582 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2222      	movs	r2, #34	@ 0x22
 8004580:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	4619      	mov	r1, r3
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fbbd 	bl	8004d08 <I2C_ITError>
      if (treatdmanack == 1U)
 800458e:	e005      	b.n	800459c <I2C_Slave_ISR_DMA+0x17c>
 8004590:	e004      	b.n	800459c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2210      	movs	r2, #16
 8004598:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800459a:	e00f      	b.n	80045bc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800459c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800459e:	e00d      	b.n	80045bc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d008      	beq.n	80045bc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f809 	bl	80045ce <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3720      	adds	r7, #32
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}

080045ce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045ce:	b580      	push	{r7, lr}
 80045d0:	b084      	sub	sp, #16
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045e4:	2b28      	cmp	r3, #40	@ 0x28
 80045e6:	d16a      	bne.n	80046be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	b29b      	uxth	r3, r3
 8004602:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004606:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004614:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	b29b      	uxth	r3, r3
 800461e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004622:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b02      	cmp	r3, #2
 800462a:	d138      	bne.n	800469e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800462c:	897b      	ldrh	r3, [r7, #10]
 800462e:	09db      	lsrs	r3, r3, #7
 8004630:	b29a      	uxth	r2, r3
 8004632:	89bb      	ldrh	r3, [r7, #12]
 8004634:	4053      	eors	r3, r2
 8004636:	b29b      	uxth	r3, r3
 8004638:	f003 0306 	and.w	r3, r3, #6
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11c      	bne.n	800467a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004640:	897b      	ldrh	r3, [r7, #10]
 8004642:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004652:	2b02      	cmp	r3, #2
 8004654:	d13b      	bne.n	80046ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2208      	movs	r2, #8
 8004662:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800466c:	89ba      	ldrh	r2, [r7, #12]
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	4619      	mov	r1, r3
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fc fc42 	bl	8000efc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004678:	e029      	b.n	80046ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800467a:	893b      	ldrh	r3, [r7, #8]
 800467c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800467e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 ff58 	bl	8005538 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004690:	89ba      	ldrh	r2, [r7, #12]
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fc fc30 	bl	8000efc <HAL_I2C_AddrCallback>
}
 800469c:	e017      	b.n	80046ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800469e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 ff48 	bl	8005538 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046b0:	89ba      	ldrh	r2, [r7, #12]
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	4619      	mov	r1, r3
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7fc fc20 	bl	8000efc <HAL_I2C_AddrCallback>
}
 80046bc:	e007      	b.n	80046ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2208      	movs	r2, #8
 80046c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	b082      	sub	sp, #8
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b21      	cmp	r3, #33	@ 0x21
 80046f0:	d115      	bne.n	800471e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2211      	movs	r2, #17
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004706:	2101      	movs	r1, #1
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 ff15 	bl	8005538 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fb39 	bl	8003d8e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800471c:	e014      	b.n	8004748 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2220      	movs	r2, #32
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2212      	movs	r2, #18
 800472a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004732:	2102      	movs	r1, #2
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 feff 	bl	8005538 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff fb2d 	bl	8003da2 <HAL_I2C_MasterRxCpltCallback>
}
 8004748:	bf00      	nop
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004780:	601a      	str	r2, [r3, #0]
 8004782:	e00c      	b.n	800479e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800479c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b29      	cmp	r3, #41	@ 0x29
 80047a8:	d112      	bne.n	80047d0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2228      	movs	r2, #40	@ 0x28
 80047ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2221      	movs	r2, #33	@ 0x21
 80047b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047b8:	2101      	movs	r1, #1
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 febc 	bl	8005538 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2200      	movs	r2, #0
 80047c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f7fc fbd3 	bl	8000f74 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80047ce:	e017      	b.n	8004800 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80047da:	d111      	bne.n	8004800 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2228      	movs	r2, #40	@ 0x28
 80047e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2222      	movs	r2, #34	@ 0x22
 80047e8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047ea:	2102      	movs	r1, #2
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 fea3 	bl	8005538 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fba4 	bl	8000f48 <HAL_I2C_SlaveRxCpltCallback>
}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	2220      	movs	r2, #32
 800481c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b21      	cmp	r3, #33	@ 0x21
 8004828:	d107      	bne.n	800483a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800482a:	2101      	movs	r1, #1
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fe83 	bl	8005538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2211      	movs	r2, #17
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30
 8004838:	e00c      	b.n	8004854 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b22      	cmp	r3, #34	@ 0x22
 8004844:	d106      	bne.n	8004854 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004846:	2102      	movs	r1, #2
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fe75 	bl	8005538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2212      	movs	r2, #18
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b4c      	ldr	r3, [pc, #304]	@ (8004990 <I2C_ITMasterCplt+0x188>)
 8004860:	400b      	ands	r3, r1
 8004862:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	4a49      	ldr	r2, [pc, #292]	@ (8004994 <I2C_ITMasterCplt+0x18c>)
 800486e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 0310 	and.w	r3, r3, #16
 8004876:	2b00      	cmp	r3, #0
 8004878:	d009      	beq.n	800488e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2210      	movs	r2, #16
 8004880:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004886:	f043 0204 	orr.w	r2, r3, #4
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b60      	cmp	r3, #96	@ 0x60
 8004898:	d10a      	bne.n	80048b0 <I2C_ITMasterCplt+0xa8>
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 0304 	and.w	r3, r3, #4
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80048ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fb40 	bl	8004f36 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b60      	cmp	r3, #96	@ 0x60
 80048c6:	d002      	beq.n	80048ce <I2C_ITMasterCplt+0xc6>
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d006      	beq.n	80048dc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d2:	4619      	mov	r1, r3
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fa17 	bl	8004d08 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80048da:	e054      	b.n	8004986 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b21      	cmp	r3, #33	@ 0x21
 80048e6:	d124      	bne.n	8004932 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2220      	movs	r2, #32
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d10b      	bne.n	800491a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fa4f 	bl	8003db6 <HAL_I2C_MemTxCpltCallback>
}
 8004918:	e035      	b.n	8004986 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f7ff fa2f 	bl	8003d8e <HAL_I2C_MasterTxCpltCallback>
}
 8004930:	e029      	b.n	8004986 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b22      	cmp	r3, #34	@ 0x22
 800493c:	d123      	bne.n	8004986 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2220      	movs	r2, #32
 8004942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b40      	cmp	r3, #64	@ 0x40
 8004956:	d10b      	bne.n	8004970 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f7ff fa2e 	bl	8003dca <HAL_I2C_MemRxCpltCallback>
}
 800496e:	e00a      	b.n	8004986 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f7ff fa0e 	bl	8003da2 <HAL_I2C_MasterRxCpltCallback>
}
 8004986:	bf00      	nop
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	fe00e800 	.word	0xfe00e800
 8004994:	ffff0000 	.word	0xffff0000

08004998 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2220      	movs	r2, #32
 80049c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049c4:	7afb      	ldrb	r3, [r7, #11]
 80049c6:	2b21      	cmp	r3, #33	@ 0x21
 80049c8:	d002      	beq.n	80049d0 <I2C_ITSlaveCplt+0x38>
 80049ca:	7afb      	ldrb	r3, [r7, #11]
 80049cc:	2b29      	cmp	r3, #41	@ 0x29
 80049ce:	d108      	bne.n	80049e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80049d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fdaf 	bl	8005538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2221      	movs	r2, #33	@ 0x21
 80049de:	631a      	str	r2, [r3, #48]	@ 0x30
 80049e0:	e019      	b.n	8004a16 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049e2:	7afb      	ldrb	r3, [r7, #11]
 80049e4:	2b22      	cmp	r3, #34	@ 0x22
 80049e6:	d002      	beq.n	80049ee <I2C_ITSlaveCplt+0x56>
 80049e8:	7afb      	ldrb	r3, [r7, #11]
 80049ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80049ec:	d108      	bne.n	8004a00 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fda0 	bl	8005538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2222      	movs	r2, #34	@ 0x22
 80049fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80049fe:	e00a      	b.n	8004a16 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004a00:	7afb      	ldrb	r3, [r7, #11]
 8004a02:	2b28      	cmp	r3, #40	@ 0x28
 8004a04:	d107      	bne.n	8004a16 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004a06:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fd94 	bl	8005538 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	685a      	ldr	r2, [r3, #4]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a24:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	6859      	ldr	r1, [r3, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	4b89      	ldr	r3, [pc, #548]	@ (8004c58 <I2C_ITSlaveCplt+0x2c0>)
 8004a32:	400b      	ands	r3, r1
 8004a34:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fa7d 	bl	8004f36 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d013      	beq.n	8004a6e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a54:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d01f      	beq.n	8004a9e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a6c:	e017      	b.n	8004a9e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d012      	beq.n	8004a9e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a86:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d006      	beq.n	8004a9e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d020      	beq.n	8004aea <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	f023 0304 	bic.w	r3, r3, #4
 8004aae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d00c      	beq.n	8004aea <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d005      	beq.n	8004b00 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af8:	f043 0204 	orr.w	r2, r3, #4
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 0310 	and.w	r3, r3, #16
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d049      	beq.n	8004b9e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d044      	beq.n	8004b9e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d128      	bne.n	8004b70 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b28      	cmp	r3, #40	@ 0x28
 8004b28:	d108      	bne.n	8004b3c <I2C_ITSlaveCplt+0x1a4>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b30:	d104      	bne.n	8004b3c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b32:	6979      	ldr	r1, [r7, #20]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f893 	bl	8004c60 <I2C_ITListenCplt>
 8004b3a:	e030      	b.n	8004b9e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b29      	cmp	r3, #41	@ 0x29
 8004b46:	d10e      	bne.n	8004b66 <I2C_ITSlaveCplt+0x1ce>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b4e:	d00a      	beq.n	8004b66 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2210      	movs	r2, #16
 8004b56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9ec 	bl	8004f36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fdf6 	bl	8004750 <I2C_ITSlaveSeqCplt>
 8004b64:	e01b      	b.n	8004b9e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2210      	movs	r2, #16
 8004b6c:	61da      	str	r2, [r3, #28]
 8004b6e:	e016      	b.n	8004b9e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2210      	movs	r2, #16
 8004b76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7c:	f043 0204 	orr.w	r2, r3, #4
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d003      	beq.n	8004b92 <I2C_ITSlaveCplt+0x1fa>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b90:	d105      	bne.n	8004b9e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	4619      	mov	r1, r3
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f000 f8b5 	bl	8004d08 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d010      	beq.n	8004bd6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb8:	4619      	mov	r1, r3
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8a4 	bl	8004d08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b28      	cmp	r3, #40	@ 0x28
 8004bca:	d141      	bne.n	8004c50 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004bcc:	6979      	ldr	r1, [r7, #20]
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f846 	bl	8004c60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bd4:	e03c      	b.n	8004c50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bda:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bde:	d014      	beq.n	8004c0a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff fdb5 	bl	8004750 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a1c      	ldr	r2, [pc, #112]	@ (8004c5c <I2C_ITSlaveCplt+0x2c4>)
 8004bea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc f9ab 	bl	8000f5e <HAL_I2C_ListenCpltCallback>
}
 8004c08:	e022      	b.n	8004c50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b22      	cmp	r3, #34	@ 0x22
 8004c14:	d10e      	bne.n	8004c34 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2220      	movs	r2, #32
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fc f98b 	bl	8000f48 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c32:	e00d      	b.n	8004c50 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7fc f992 	bl	8000f74 <HAL_I2C_SlaveTxCpltCallback>
}
 8004c50:	bf00      	nop
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}
 8004c58:	fe00e800 	.word	0xfe00e800
 8004c5c:	ffff0000 	.word	0xffff0000

08004c60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a25      	ldr	r2, [pc, #148]	@ (8004d04 <I2C_ITListenCplt+0xa4>)
 8004c6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d022      	beq.n	8004cdc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	b2d2      	uxtb	r2, r2
 8004ca2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d012      	beq.n	8004cdc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	b29a      	uxth	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b29a      	uxth	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cd4:	f043 0204 	orr.w	r2, r3, #4
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cdc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fc29 	bl	8005538 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2210      	movs	r2, #16
 8004cec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f7fc f931 	bl	8000f5e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004cfc:	bf00      	nop
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	ffff0000 	.word	0xffff0000

08004d08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d18:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a6d      	ldr	r2, [pc, #436]	@ (8004edc <I2C_ITError+0x1d4>)
 8004d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d3a:	7bfb      	ldrb	r3, [r7, #15]
 8004d3c:	2b28      	cmp	r3, #40	@ 0x28
 8004d3e:	d005      	beq.n	8004d4c <I2C_ITError+0x44>
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b29      	cmp	r3, #41	@ 0x29
 8004d44:	d002      	beq.n	8004d4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d4a:	d10b      	bne.n	8004d64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d4c:	2103      	movs	r1, #3
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fbf2 	bl	8005538 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2228      	movs	r2, #40	@ 0x28
 8004d58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a60      	ldr	r2, [pc, #384]	@ (8004ee0 <I2C_ITError+0x1d8>)
 8004d60:	635a      	str	r2, [r3, #52]	@ 0x34
 8004d62:	e030      	b.n	8004dc6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 fbe5 	bl	8005538 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f000 f8e1 	bl	8004f36 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b60      	cmp	r3, #96	@ 0x60
 8004d7e:	d01f      	beq.n	8004dc0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2220      	movs	r2, #32
 8004d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d114      	bne.n	8004dc0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b10      	cmp	r3, #16
 8004da2:	d109      	bne.n	8004db8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2210      	movs	r2, #16
 8004daa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db0:	f043 0204 	orr.w	r2, r3, #4
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d039      	beq.n	8004e48 <I2C_ITError+0x140>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b11      	cmp	r3, #17
 8004dd8:	d002      	beq.n	8004de0 <I2C_ITError+0xd8>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b21      	cmp	r3, #33	@ 0x21
 8004dde:	d133      	bne.n	8004e48 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dee:	d107      	bne.n	8004e00 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004dfe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe f940 	bl	800308a <HAL_DMA_GetState>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d017      	beq.n	8004e40 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	4a33      	ldr	r2, [pc, #204]	@ (8004ee4 <I2C_ITError+0x1dc>)
 8004e16:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e24:	4618      	mov	r0, r3
 8004e26:	f7fe f8d1 	bl	8002fcc <HAL_DMA_Abort_IT>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d04d      	beq.n	8004ecc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004e3a:	4610      	mov	r0, r2
 8004e3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e3e:	e045      	b.n	8004ecc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f851 	bl	8004ee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e46:	e041      	b.n	8004ecc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d039      	beq.n	8004ec4 <I2C_ITError+0x1bc>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b12      	cmp	r3, #18
 8004e54:	d002      	beq.n	8004e5c <I2C_ITError+0x154>
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	2b22      	cmp	r3, #34	@ 0x22
 8004e5a:	d133      	bne.n	8004ec4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e6a:	d107      	bne.n	8004e7c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe f902 	bl	800308a <HAL_DMA_GetState>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d017      	beq.n	8004ebc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e90:	4a14      	ldr	r2, [pc, #80]	@ (8004ee4 <I2C_ITError+0x1dc>)
 8004e92:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fe f893 	bl	8002fcc <HAL_DMA_Abort_IT>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d011      	beq.n	8004ed0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eba:	e009      	b.n	8004ed0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f813 	bl	8004ee8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ec2:	e005      	b.n	8004ed0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 f80f 	bl	8004ee8 <I2C_TreatErrorCallback>
  }
}
 8004eca:	e002      	b.n	8004ed2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ecc:	bf00      	nop
 8004ece:	e000      	b.n	8004ed2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ed0:	bf00      	nop
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	ffff0000 	.word	0xffff0000
 8004ee0:	08003e0b 	.word	0x08003e0b
 8004ee4:	08004f7f 	.word	0x08004f7f

08004ee8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b60      	cmp	r3, #96	@ 0x60
 8004efa:	d10e      	bne.n	8004f1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2220      	movs	r2, #32
 8004f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fe ff63 	bl	8003dde <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f18:	e009      	b.n	8004f2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2200      	movs	r2, #0
 8004f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fc f82e 	bl	8000f8a <HAL_I2C_ErrorCallback>
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}

08004f36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d103      	bne.n	8004f54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2200      	movs	r2, #0
 8004f52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d007      	beq.n	8004f72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	619a      	str	r2, [r3, #24]
  }
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d003      	beq.n	8004f9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f98:	2200      	movs	r2, #0
 8004f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d003      	beq.n	8004fac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fa8:	2200      	movs	r2, #0
 8004faa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004fac:	68f8      	ldr	r0, [r7, #12]
 8004fae:	f7ff ff9b 	bl	8004ee8 <I2C_TreatErrorCallback>
}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	60f8      	str	r0, [r7, #12]
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	603b      	str	r3, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fca:	e03b      	b.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	6839      	ldr	r1, [r7, #0]
 8004fd0:	68f8      	ldr	r0, [r7, #12]
 8004fd2:	f000 f91b 	bl	800520c <I2C_IsErrorOccurred>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	e041      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe6:	d02d      	beq.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe8:	f7fd fde0 	bl	8002bac <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d302      	bcc.n	8004ffe <I2C_WaitOnFlagUntilTimeout+0x44>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d122      	bne.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	699a      	ldr	r2, [r3, #24]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	bf0c      	ite	eq
 800500e:	2301      	moveq	r3, #1
 8005010:	2300      	movne	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	461a      	mov	r2, r3
 8005016:	79fb      	ldrb	r3, [r7, #7]
 8005018:	429a      	cmp	r2, r3
 800501a:	d113      	bne.n	8005044 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005020:	f043 0220 	orr.w	r2, r3, #32
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2220      	movs	r2, #32
 800502c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e00f      	b.n	8005064 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	4013      	ands	r3, r2
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	429a      	cmp	r2, r3
 8005052:	bf0c      	ite	eq
 8005054:	2301      	moveq	r3, #1
 8005056:	2300      	movne	r3, #0
 8005058:	b2db      	uxtb	r3, r3
 800505a:	461a      	mov	r2, r3
 800505c:	79fb      	ldrb	r3, [r7, #7]
 800505e:	429a      	cmp	r2, r3
 8005060:	d0b4      	beq.n	8004fcc <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005062:	2300      	movs	r3, #0
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	60f8      	str	r0, [r7, #12]
 8005074:	60b9      	str	r1, [r7, #8]
 8005076:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005078:	e02f      	b.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f000 f8c4 	bl	800520c <I2C_IsErrorOccurred>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e02d      	b.n	80050ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fd fd8d 	bl	8002bac <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11a      	bne.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b20      	cmp	r3, #32
 80050b0:	d013      	beq.n	80050da <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e007      	b.n	80050ea <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699b      	ldr	r3, [r3, #24]
 80050e0:	f003 0320 	and.w	r3, r3, #32
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d1c8      	bne.n	800507a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b086      	sub	sp, #24
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005104:	e071      	b.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	68b9      	ldr	r1, [r7, #8]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 f87e 	bl	800520c <I2C_IsErrorOccurred>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d001      	beq.n	800511a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d13b      	bne.n	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8005128:	7dfb      	ldrb	r3, [r7, #23]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d138      	bne.n	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b04      	cmp	r3, #4
 800513a:	d105      	bne.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d121      	bne.n	800519a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2210      	movs	r2, #16
 800515c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2204      	movs	r2, #4
 8005162:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2220      	movs	r2, #32
 800516a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6859      	ldr	r1, [r3, #4]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	4b24      	ldr	r3, [pc, #144]	@ (8005208 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005178:	400b      	ands	r3, r1
 800517a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2220      	movs	r2, #32
 8005180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	75fb      	strb	r3, [r7, #23]
 8005198:	e002      	b.n	80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80051a0:	f7fd fd04 	bl	8002bac <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d302      	bcc.n	80051b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d119      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d116      	bne.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d00f      	beq.n	80051ea <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ce:	f043 0220 	orr.w	r2, r3, #32
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2220      	movs	r2, #32
 80051da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0304 	and.w	r3, r3, #4
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d002      	beq.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80051f8:	7dfb      	ldrb	r3, [r7, #23]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d083      	beq.n	8005106 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	fe00e800 	.word	0xfe00e800

0800520c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08a      	sub	sp, #40	@ 0x28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	699b      	ldr	r3, [r3, #24]
 8005224:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	d068      	beq.n	800530a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2210      	movs	r2, #16
 800523e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005240:	e049      	b.n	80052d6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005248:	d045      	beq.n	80052d6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800524a:	f7fd fcaf 	bl	8002bac <HAL_GetTick>
 800524e:	4602      	mov	r2, r0
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	68ba      	ldr	r2, [r7, #8]
 8005256:	429a      	cmp	r2, r3
 8005258:	d302      	bcc.n	8005260 <I2C_IsErrorOccurred+0x54>
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d13a      	bne.n	80052d6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800526a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005272:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	699b      	ldr	r3, [r3, #24]
 800527a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800527e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005282:	d121      	bne.n	80052c8 <I2C_IsErrorOccurred+0xbc>
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800528a:	d01d      	beq.n	80052c8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800528c:	7cfb      	ldrb	r3, [r7, #19]
 800528e:	2b20      	cmp	r3, #32
 8005290:	d01a      	beq.n	80052c8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052a0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80052a2:	f7fd fc83 	bl	8002bac <HAL_GetTick>
 80052a6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052a8:	e00e      	b.n	80052c8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80052aa:	f7fd fc7f 	bl	8002bac <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b19      	cmp	r3, #25
 80052b6:	d907      	bls.n	80052c8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	f043 0320 	orr.w	r3, r3, #32
 80052be:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80052c6:	e006      	b.n	80052d6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	f003 0320 	and.w	r3, r3, #32
 80052d2:	2b20      	cmp	r3, #32
 80052d4:	d1e9      	bne.n	80052aa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	699b      	ldr	r3, [r3, #24]
 80052dc:	f003 0320 	and.w	r3, r3, #32
 80052e0:	2b20      	cmp	r3, #32
 80052e2:	d003      	beq.n	80052ec <I2C_IsErrorOccurred+0xe0>
 80052e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d0aa      	beq.n	8005242 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80052ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d103      	bne.n	80052fc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2220      	movs	r2, #32
 80052fa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f043 0304 	orr.w	r3, r3, #4
 8005302:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005312:	69bb      	ldr	r3, [r7, #24]
 8005314:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800531c:	6a3b      	ldr	r3, [r7, #32]
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800532c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005334:	69bb      	ldr	r3, [r7, #24]
 8005336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00b      	beq.n	8005356 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800533e:	6a3b      	ldr	r3, [r7, #32]
 8005340:	f043 0308 	orr.w	r3, r3, #8
 8005344:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800534e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00b      	beq.n	8005378 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005370:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005378:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01c      	beq.n	80053ba <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005380:	68f8      	ldr	r0, [r7, #12]
 8005382:	f7ff fdd8 	bl	8004f36 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6859      	ldr	r1, [r3, #4]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <I2C_IsErrorOccurred+0x1bc>)
 8005392:	400b      	ands	r3, r1
 8005394:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	431a      	orrs	r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80053ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3728      	adds	r7, #40	@ 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	fe00e800 	.word	0xfe00e800

080053cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	607b      	str	r3, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	817b      	strh	r3, [r7, #10]
 80053da:	4613      	mov	r3, r2
 80053dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053de:	897b      	ldrh	r3, [r7, #10]
 80053e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053e4:	7a7b      	ldrb	r3, [r7, #9]
 80053e6:	041b      	lsls	r3, r3, #16
 80053e8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053ec:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80053f2:	6a3b      	ldr	r3, [r7, #32]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80053fa:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	0d5b      	lsrs	r3, r3, #21
 8005406:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800540a:	4b08      	ldr	r3, [pc, #32]	@ (800542c <I2C_TransferConfig+0x60>)
 800540c:	430b      	orrs	r3, r1
 800540e:	43db      	mvns	r3, r3
 8005410:	ea02 0103 	and.w	r1, r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800541e:	bf00      	nop
 8005420:	371c      	adds	r7, #28
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	03ff63ff 	.word	0x03ff63ff

08005430 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800543c:	2300      	movs	r3, #0
 800543e:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005444:	4a39      	ldr	r2, [pc, #228]	@ (800552c <I2C_Enable_IRQ+0xfc>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d032      	beq.n	80054b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800544e:	4a38      	ldr	r2, [pc, #224]	@ (8005530 <I2C_Enable_IRQ+0x100>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d02d      	beq.n	80054b0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8005458:	4a36      	ldr	r2, [pc, #216]	@ (8005534 <I2C_Enable_IRQ+0x104>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d028      	beq.n	80054b0 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800545e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005462:	2b00      	cmp	r3, #0
 8005464:	da03      	bge.n	800546e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800546c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800546e:	887b      	ldrh	r3, [r7, #2]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 800547e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005480:	887b      	ldrh	r3, [r7, #2]
 8005482:	f003 0302 	and.w	r3, r3, #2
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005490:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	2b10      	cmp	r3, #16
 8005496:	d103      	bne.n	80054a0 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800549e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054a0:	887b      	ldrh	r3, [r7, #2]
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d133      	bne.n	800550e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f043 0320 	orr.w	r3, r3, #32
 80054ac:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054ae:	e02e      	b.n	800550e <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80054b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	da03      	bge.n	80054c0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80054be:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054c0:	887b      	ldrh	r3, [r7, #2]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80054d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80054d2:	887b      	ldrh	r3, [r7, #2]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80054e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80054e4:	887b      	ldrh	r3, [r7, #2]
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d103      	bne.n	80054f2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80054f0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80054f2:	887b      	ldrh	r3, [r7, #2]
 80054f4:	2b20      	cmp	r3, #32
 80054f6:	d103      	bne.n	8005500 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80054fe:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	2b40      	cmp	r3, #64	@ 0x40
 8005504:	d103      	bne.n	800550e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800550c:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	430a      	orrs	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	08003ffd 	.word	0x08003ffd
 8005530:	08004421 	.word	0x08004421
 8005534:	080041d5 	.word	0x080041d5

08005538 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005548:	887b      	ldrh	r3, [r7, #2]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00f      	beq.n	8005572 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8005558:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005560:	b2db      	uxtb	r3, r3
 8005562:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005566:	2b28      	cmp	r3, #40	@ 0x28
 8005568:	d003      	beq.n	8005572 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005570:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005572:	887b      	ldrh	r3, [r7, #2]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00f      	beq.n	800559c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8005582:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800558a:	b2db      	uxtb	r3, r3
 800558c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005590:	2b28      	cmp	r3, #40	@ 0x28
 8005592:	d003      	beq.n	800559c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800559a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800559c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	da03      	bge.n	80055ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80055ac:	887b      	ldrh	r3, [r7, #2]
 80055ae:	2b10      	cmp	r3, #16
 80055b0:	d103      	bne.n	80055ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80055b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d103      	bne.n	80055c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f043 0320 	orr.w	r3, r3, #32
 80055c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80055c8:	887b      	ldrh	r3, [r7, #2]
 80055ca:	2b40      	cmp	r3, #64	@ 0x40
 80055cc:	d103      	bne.n	80055d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	6819      	ldr	r1, [r3, #0]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	43da      	mvns	r2, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	400a      	ands	r2, r1
 80055e6:	601a      	str	r2, [r3, #0]
}
 80055e8:	bf00      	nop
 80055ea:	3714      	adds	r7, #20
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr

080055f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	d138      	bne.n	800567c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005614:	2302      	movs	r3, #2
 8005616:	e032      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2224      	movs	r2, #36	@ 0x24
 8005624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005646:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6819      	ldr	r1, [r3, #0]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	430a      	orrs	r2, r1
 8005656:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800568a:	b480      	push	{r7}
 800568c:	b085      	sub	sp, #20
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
 8005692:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b20      	cmp	r3, #32
 800569e:	d139      	bne.n	8005714 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e033      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2224      	movs	r2, #36	@ 0x24
 80056ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0201 	bic.w	r2, r2, #1
 80056cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80056dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2220      	movs	r2, #32
 8005704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	e000      	b.n	8005716 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005714:	2302      	movs	r3, #2
  }
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800572c:	2300      	movs	r3, #0
 800572e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d01e      	beq.n	8005774 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 8005736:	4b13      	ldr	r3, [pc, #76]	@ (8005784 <HAL_IPCC_Init+0x60>)
 8005738:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005740:	b2db      	uxtb	r3, r3
 8005742:	2b00      	cmp	r3, #0
 8005744:	d102      	bne.n	800574c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fc ffae 	bl	80026a8 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800574c:	68b8      	ldr	r0, [r7, #8]
 800574e:	f000 f85b 	bl	8005808 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f82c 	bl	80057bc <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2201      	movs	r2, #1
 800576e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8005772:	e001      	b.n	8005778 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 8005774:	2301      	movs	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005778:	7bfb      	ldrb	r3, [r7, #15]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	58000c00 	.word	0x58000c00

08005788 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005788:	b480      	push	{r7}
 800578a:	b085      	sub	sp, #20
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4613      	mov	r3, r2
 8005794:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 8005796:	bf00      	nop
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	60f8      	str	r0, [r7, #12]
 80057aa:	60b9      	str	r1, [r7, #8]
 80057ac:	4613      	mov	r3, r2
 80057ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 80057b0:	bf00      	nop
 80057b2:	3714      	adds	r7, #20
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80057c4:	2300      	movs	r3, #0
 80057c6:	60fb      	str	r3, [r7, #12]
 80057c8:	e00f      	b.n	80057ea <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	4a0b      	ldr	r2, [pc, #44]	@ (8005800 <IPCC_SetDefaultCallbacks+0x44>)
 80057d4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3306      	adds	r3, #6
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	4a08      	ldr	r2, [pc, #32]	@ (8005804 <IPCC_SetDefaultCallbacks+0x48>)
 80057e2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b05      	cmp	r3, #5
 80057ee:	d9ec      	bls.n	80057ca <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	08005789 	.word	0x08005789
 8005804:	080057a3 	.word	0x080057a3

08005808 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800581c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	223f      	movs	r2, #63	@ 0x3f
 8005822:	609a      	str	r2, [r3, #8]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e0c0      	b.n	80059c4 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f00c fb62 	bl	8011f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2203      	movs	r2, #3
 8005860:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f004 fe14 	bl	800a496 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800586e:	2300      	movs	r3, #0
 8005870:	73fb      	strb	r3, [r7, #15]
 8005872:	e03e      	b.n	80058f2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005874:	7bfa      	ldrb	r2, [r7, #15]
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	00db      	lsls	r3, r3, #3
 8005880:	440b      	add	r3, r1
 8005882:	3311      	adds	r3, #17
 8005884:	2201      	movs	r2, #1
 8005886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005888:	7bfa      	ldrb	r2, [r7, #15]
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	440b      	add	r3, r1
 8005896:	3310      	adds	r3, #16
 8005898:	7bfa      	ldrb	r2, [r7, #15]
 800589a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800589c:	7bfa      	ldrb	r2, [r7, #15]
 800589e:	6879      	ldr	r1, [r7, #4]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	00db      	lsls	r3, r3, #3
 80058a8:	440b      	add	r3, r1
 80058aa:	3313      	adds	r3, #19
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	3320      	adds	r3, #32
 80058c0:	2200      	movs	r2, #0
 80058c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80058c4:	7bfa      	ldrb	r2, [r7, #15]
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	4613      	mov	r3, r2
 80058ca:	009b      	lsls	r3, r3, #2
 80058cc:	4413      	add	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	440b      	add	r3, r1
 80058d2:	3324      	adds	r3, #36	@ 0x24
 80058d4:	2200      	movs	r2, #0
 80058d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	6879      	ldr	r1, [r7, #4]
 80058dc:	1c5a      	adds	r2, r3, #1
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	00db      	lsls	r3, r3, #3
 80058e6:	440b      	add	r3, r1
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
 80058ee:	3301      	adds	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	791b      	ldrb	r3, [r3, #4]
 80058f6:	7bfa      	ldrb	r2, [r7, #15]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d3bb      	bcc.n	8005874 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	73fb      	strb	r3, [r7, #15]
 8005900:	e044      	b.n	800598c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005902:	7bfa      	ldrb	r2, [r7, #15]
 8005904:	6879      	ldr	r1, [r7, #4]
 8005906:	4613      	mov	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4413      	add	r3, r2
 800590c:	00db      	lsls	r3, r3, #3
 800590e:	440b      	add	r3, r1
 8005910:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8005914:	2200      	movs	r2, #0
 8005916:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005918:	7bfa      	ldrb	r2, [r7, #15]
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	440b      	add	r3, r1
 8005926:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800592a:	7bfa      	ldrb	r2, [r7, #15]
 800592c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800592e:	7bfa      	ldrb	r2, [r7, #15]
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	440b      	add	r3, r1
 800593c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8005940:	2200      	movs	r2, #0
 8005942:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005944:	7bfa      	ldrb	r2, [r7, #15]
 8005946:	6879      	ldr	r1, [r7, #4]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800595a:	7bfa      	ldrb	r2, [r7, #15]
 800595c:	6879      	ldr	r1, [r7, #4]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800596c:	2200      	movs	r2, #0
 800596e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005970:	7bfa      	ldrb	r2, [r7, #15]
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	440b      	add	r3, r1
 800597e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	3301      	adds	r3, #1
 800598a:	73fb      	strb	r3, [r7, #15]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	791b      	ldrb	r3, [r3, #4]
 8005990:	7bfa      	ldrb	r2, [r7, #15]
 8005992:	429a      	cmp	r2, r3
 8005994:	d3b5      	bcc.n	8005902 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	3304      	adds	r3, #4
 800599e:	e893 0006 	ldmia.w	r3, {r1, r2}
 80059a2:	f004 fd93 	bl	800a4cc <USB_DevInit>

  hpcd->USB_Address = 0U;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	7a9b      	ldrb	r3, [r3, #10]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d102      	bne.n	80059c2 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fc40 	bl	8007242 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}

080059cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d101      	bne.n	80059e2 <HAL_PCD_Start+0x16>
 80059de:	2302      	movs	r3, #2
 80059e0:	e012      	b.n	8005a08 <HAL_PCD_Start+0x3c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4618      	mov	r0, r3
 80059f0:	f004 fd3a 	bl	800a468 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f006 fffa 	bl	800c9f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3708      	adds	r7, #8
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f006 ffff 	bl	800ca20 <USB_ReadInterrupts>
 8005a22:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d003      	beq.n	8005a36 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 fb04 	bl	800603c <PCD_EP_ISR_Handler>

    return;
 8005a34:	e110      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d013      	beq.n	8005a68 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a52:	b292      	uxth	r2, r2
 8005a54:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f00c fb14 	bl	8012086 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005a5e:	2100      	movs	r1, #0
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f8fc 	bl	8005c5e <HAL_PCD_SetAddress>

    return;
 8005a66:	e0f7      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00c      	beq.n	8005a8c <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a84:	b292      	uxth	r2, r2
 8005a86:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a8a:	e0e5      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00c      	beq.n	8005ab0 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aa8:	b292      	uxth	r2, r2
 8005aaa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005aae:	e0d3      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d034      	beq.n	8005b24 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0204 	bic.w	r2, r2, #4
 8005acc:	b292      	uxth	r2, r2
 8005ace:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ada:	b29a      	uxth	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0208 	bic.w	r2, r2, #8
 8005ae4:	b292      	uxth	r2, r2
 8005ae6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d107      	bne.n	8005b04 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005afc:	2100      	movs	r1, #0
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f00c fcb6 	bl	8012470 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f00c faf7 	bl	80120f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005b1c:	b292      	uxth	r2, r2
 8005b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005b22:	e099      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d027      	beq.n	8005b7e <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b36:	b29a      	uxth	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f042 0208 	orr.w	r2, r2, #8
 8005b40:	b292      	uxth	r2, r2
 8005b42:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b58:	b292      	uxth	r2, r2
 8005b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f042 0204 	orr.w	r2, r2, #4
 8005b70:	b292      	uxth	r2, r2
 8005b72:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f00c faa4 	bl	80120c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b7c:	e06c      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d040      	beq.n	8005c0a <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b9a:	b292      	uxth	r2, r2
 8005b9c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d12b      	bne.n	8005c02 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f042 0204 	orr.w	r2, r2, #4
 8005bbc:	b292      	uxth	r2, r2
 8005bbe:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005bca:	b29a      	uxth	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0208 	orr.w	r2, r2, #8
 8005bd4:	b292      	uxth	r2, r2
 8005bd6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2201      	movs	r2, #1
 8005bde:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	089b      	lsrs	r3, r3, #2
 8005bee:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f00c fc38 	bl	8012470 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005c00:	e02a      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f00c fa5e 	bl	80120c4 <HAL_PCD_SuspendCallback>
    return;
 8005c08:	e026      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00f      	beq.n	8005c34 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c1c:	b29a      	uxth	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005c26:	b292      	uxth	r2, r2
 8005c28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f00c fa1c 	bl	801206a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005c32:	e011      	b.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c50:	b292      	uxth	r2, r2
 8005c52:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005c56:	bf00      	nop
  }
}
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d101      	bne.n	8005c78 <HAL_PCD_SetAddress+0x1a>
 8005c74:	2302      	movs	r3, #2
 8005c76:	e012      	b.n	8005c9e <HAL_PCD_SetAddress+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	78fa      	ldrb	r2, [r7, #3]
 8005c84:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f006 fe9b 	bl	800c9ca <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	70fb      	strb	r3, [r7, #3]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	803b      	strh	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da0e      	bge.n	8005cea <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 0207 	and.w	r2, r3, #7
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	3310      	adds	r3, #16
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	4413      	add	r3, r2
 8005ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	705a      	strb	r2, [r3, #1]
 8005ce8:	e00e      	b.n	8005d08 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cea:	78fb      	ldrb	r3, [r7, #3]
 8005cec:	f003 0207 	and.w	r2, r3, #7
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	009b      	lsls	r3, r3, #2
 8005cf4:	4413      	add	r3, r2
 8005cf6:	00db      	lsls	r3, r3, #3
 8005cf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	4413      	add	r3, r2
 8005d00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	b2da      	uxtb	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d14:	883a      	ldrh	r2, [r7, #0]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	78ba      	ldrb	r2, [r7, #2]
 8005d1e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d20:	78bb      	ldrb	r3, [r7, #2]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d102      	bne.n	8005d2c <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d101      	bne.n	8005d3a <HAL_PCD_EP_Open+0x94>
 8005d36:	2302      	movs	r3, #2
 8005d38:	e00e      	b.n	8005d58 <HAL_PCD_EP_Open+0xb2>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68f9      	ldr	r1, [r7, #12]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f004 fbdd 	bl	800a508 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005d56:	7afb      	ldrb	r3, [r7, #11]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	da0e      	bge.n	8005d92 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 0207 	and.w	r2, r3, #7
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	4413      	add	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	3310      	adds	r3, #16
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	4413      	add	r3, r2
 8005d88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	705a      	strb	r2, [r3, #1]
 8005d90:	e00e      	b.n	8005db0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d92:	78fb      	ldrb	r3, [r7, #3]
 8005d94:	f003 0207 	and.w	r2, r3, #7
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	00db      	lsls	r3, r3, #3
 8005da0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005db0:	78fb      	ldrb	r3, [r7, #3]
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_PCD_EP_Close+0x6a>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e00e      	b.n	8005de8 <HAL_PCD_EP_Close+0x88>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68f9      	ldr	r1, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f004 ff59 	bl	800ac90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005de6:	2300      	movs	r3, #0
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	603b      	str	r3, [r7, #0]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	f003 0207 	and.w	r2, r3, #7
 8005e06:	4613      	mov	r3, r2
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	4413      	add	r3, r2
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	683a      	ldr	r2, [r7, #0]
 8005e22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2200      	movs	r2, #0
 8005e28:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	b2da      	uxtb	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6979      	ldr	r1, [r7, #20]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f005 f911 	bl	800b06a <USB_EPStartXfer>

  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3718      	adds	r7, #24
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	f003 0207 	and.w	r2, r3, #7
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	4613      	mov	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	4413      	add	r3, r2
 8005e6c:	00db      	lsls	r3, r3, #3
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005e74:	681b      	ldr	r3, [r3, #0]
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b086      	sub	sp, #24
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	60f8      	str	r0, [r7, #12]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	f003 0207 	and.w	r2, r3, #7
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	3310      	adds	r3, #16
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	4413      	add	r3, r2
 8005ea6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ece:	7afb      	ldrb	r3, [r7, #11]
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6979      	ldr	r1, [r7, #20]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f005 f8c2 	bl	800b06a <USB_EPStartXfer>

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005efc:	78fb      	ldrb	r3, [r7, #3]
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	7912      	ldrb	r2, [r2, #4]
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	e03e      	b.n	8005f8c <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	da0e      	bge.n	8005f34 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	78fb      	ldrb	r3, [r7, #3]
 8005f18:	f003 0207 	and.w	r2, r3, #7
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	00db      	lsls	r3, r3, #3
 8005f24:	3310      	adds	r3, #16
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	705a      	strb	r2, [r3, #1]
 8005f32:	e00c      	b.n	8005f4e <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f34:	78fa      	ldrb	r2, [r7, #3]
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	00db      	lsls	r3, r3, #3
 8005f3e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_PCD_EP_SetStall+0x7e>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e00e      	b.n	8005f8c <HAL_PCD_EP_SetStall+0x9c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68f9      	ldr	r1, [r7, #12]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f006 fc25 	bl	800c7cc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	7912      	ldrb	r2, [r2, #4]
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d901      	bls.n	8005fb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005fae:	2301      	movs	r3, #1
 8005fb0:	e040      	b.n	8006034 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	da0e      	bge.n	8005fd8 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fba:	78fb      	ldrb	r3, [r7, #3]
 8005fbc:	f003 0207 	and.w	r2, r3, #7
 8005fc0:	4613      	mov	r3, r2
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	4413      	add	r3, r2
 8005fc6:	00db      	lsls	r3, r3, #3
 8005fc8:	3310      	adds	r3, #16
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	705a      	strb	r2, [r3, #1]
 8005fd6:	e00e      	b.n	8005ff6 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005fd8:	78fb      	ldrb	r3, [r7, #3]
 8005fda:	f003 0207 	and.w	r2, r3, #7
 8005fde:	4613      	mov	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	b2da      	uxtb	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_PCD_EP_ClrStall+0x82>
 8006012:	2302      	movs	r3, #2
 8006014:	e00e      	b.n	8006034 <HAL_PCD_EP_ClrStall+0xa0>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	68f9      	ldr	r1, [r7, #12]
 8006024:	4618      	mov	r0, r3
 8006026:	f006 fc22 	bl	800c86e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b096      	sub	sp, #88	@ 0x58
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006044:	e3ad      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800604e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006052:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006056:	b2db      	uxtb	r3, r3
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8006060:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 816f 	bne.w	8006348 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800606a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800606e:	f003 0310 	and.w	r3, r3, #16
 8006072:	2b00      	cmp	r3, #0
 8006074:	d14c      	bne.n	8006110 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006086:	81fb      	strh	r3, [r7, #14]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006096:	b29b      	uxth	r3, r3
 8006098:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3310      	adds	r3, #16
 800609e:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	461a      	mov	r2, r3
 80060ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	4413      	add	r3, r2
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	6812      	ldr	r2, [r2, #0]
 80060b8:	4413      	add	r3, r2
 80060ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80060be:	881b      	ldrh	r3, [r3, #0]
 80060c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80060c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ca:	695a      	ldr	r2, [r3, #20]
 80060cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ce:	69db      	ldr	r3, [r3, #28]
 80060d0:	441a      	add	r2, r3
 80060d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80060d6:	2100      	movs	r1, #0
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f00b ffac 	bl	8012036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	7b1b      	ldrb	r3, [r3, #12]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 835c 	beq.w	80067a2 <PCD_EP_ISR_Handler+0x766>
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f040 8357 	bne.w	80067a2 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	7b1b      	ldrb	r3, [r3, #12]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	731a      	strb	r2, [r3, #12]
 800610e:	e348      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006116:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800612a:	2b00      	cmp	r3, #0
 800612c:	d032      	beq.n	8006194 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006136:	b29b      	uxth	r3, r3
 8006138:	461a      	mov	r2, r3
 800613a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	00db      	lsls	r3, r3, #3
 8006140:	4413      	add	r3, r2
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6812      	ldr	r2, [r2, #0]
 8006146:	4413      	add	r3, r2
 8006148:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800614c:	881b      	ldrh	r3, [r3, #0]
 800614e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006154:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8006160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006162:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006166:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006168:	b29b      	uxth	r3, r3
 800616a:	f006 fcab 	bl	800cac4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	b29a      	uxth	r2, r3
 8006176:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800617a:	4013      	ands	r3, r2
 800617c:	823b      	strh	r3, [r7, #16]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	8a3a      	ldrh	r2, [r7, #16]
 8006184:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006188:	b292      	uxth	r2, r2
 800618a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f00b ff25 	bl	8011fdc <HAL_PCD_SetupStageCallback>
 8006192:	e306      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006194:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006198:	2b00      	cmp	r3, #0
 800619a:	f280 8302 	bge.w	80067a2 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	881b      	ldrh	r3, [r3, #0]
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80061aa:	4013      	ands	r3, r2
 80061ac:	83fb      	strh	r3, [r7, #30]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	8bfa      	ldrh	r2, [r7, #30]
 80061b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061b8:	b292      	uxth	r2, r2
 80061ba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	461a      	mov	r2, r3
 80061c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	00db      	lsls	r3, r3, #3
 80061ce:	4413      	add	r3, r2
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	6812      	ldr	r2, [r2, #0]
 80061d4:	4413      	add	r3, r2
 80061d6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061da:	881b      	ldrh	r3, [r3, #0]
 80061dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80061e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80061e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d019      	beq.n	8006220 <PCD_EP_ISR_Handler+0x1e4>
 80061ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d015      	beq.n	8006220 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fa:	6959      	ldr	r1, [r3, #20]
 80061fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006202:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006204:	b29b      	uxth	r3, r3
 8006206:	f006 fc5d 	bl	800cac4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800620a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800620c:	695a      	ldr	r2, [r3, #20]
 800620e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	441a      	add	r2, r3
 8006214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006216:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006218:	2100      	movs	r1, #0
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f00b fef0 	bl	8012000 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800622a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800622e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006232:	2b00      	cmp	r3, #0
 8006234:	f040 82b5 	bne.w	80067a2 <PCD_EP_ISR_Handler+0x766>
 8006238:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800623c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8006240:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006244:	f000 82ad 	beq.w	80067a2 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006256:	b29b      	uxth	r3, r3
 8006258:	461a      	mov	r2, r3
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	4413      	add	r3, r2
 800625e:	61bb      	str	r3, [r7, #24]
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006266:	617b      	str	r3, [r7, #20]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	881b      	ldrh	r3, [r3, #0]
 800626c:	b29b      	uxth	r3, r3
 800626e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006272:	b29a      	uxth	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	2b3e      	cmp	r3, #62	@ 0x3e
 800627e:	d91d      	bls.n	80062bc <PCD_EP_ISR_Handler+0x280>
 8006280:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	095b      	lsrs	r3, r3, #5
 8006286:	647b      	str	r3, [r7, #68]	@ 0x44
 8006288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	f003 031f 	and.w	r3, r3, #31
 8006290:	2b00      	cmp	r3, #0
 8006292:	d102      	bne.n	800629a <PCD_EP_ISR_Handler+0x25e>
 8006294:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006296:	3b01      	subs	r3, #1
 8006298:	647b      	str	r3, [r7, #68]	@ 0x44
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	881b      	ldrh	r3, [r3, #0]
 800629e:	b29a      	uxth	r2, r3
 80062a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	029b      	lsls	r3, r3, #10
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4313      	orrs	r3, r2
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062b4:	b29a      	uxth	r2, r3
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	801a      	strh	r2, [r3, #0]
 80062ba:	e026      	b.n	800630a <PCD_EP_ISR_Handler+0x2ce>
 80062bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062be:	691b      	ldr	r3, [r3, #16]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <PCD_EP_ISR_Handler+0x29e>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062d2:	b29a      	uxth	r2, r3
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	801a      	strh	r2, [r3, #0]
 80062d8:	e017      	b.n	800630a <PCD_EP_ISR_Handler+0x2ce>
 80062da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	085b      	lsrs	r3, r3, #1
 80062e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0301 	and.w	r3, r3, #1
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <PCD_EP_ISR_Handler+0x2b8>
 80062ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062f0:	3301      	adds	r3, #1
 80062f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	029b      	lsls	r3, r3, #10
 8006300:	b29b      	uxth	r3, r3
 8006302:	4313      	orrs	r3, r2
 8006304:	b29a      	uxth	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	881b      	ldrh	r3, [r3, #0]
 8006310:	b29b      	uxth	r3, r3
 8006312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	827b      	strh	r3, [r7, #18]
 800631c:	8a7b      	ldrh	r3, [r7, #18]
 800631e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006322:	827b      	strh	r3, [r7, #18]
 8006324:	8a7b      	ldrh	r3, [r7, #18]
 8006326:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800632a:	827b      	strh	r3, [r7, #18]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	8a7b      	ldrh	r3, [r7, #18]
 8006332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800633a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800633e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006342:	b29b      	uxth	r3, r3
 8006344:	8013      	strh	r3, [r2, #0]
 8006346:	e22c      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	881b      	ldrh	r3, [r3, #0]
 8006358:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800635c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006360:	2b00      	cmp	r3, #0
 8006362:	f280 80f6 	bge.w	8006552 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	4413      	add	r3, r2
 8006374:	881b      	ldrh	r3, [r3, #0]
 8006376:	b29a      	uxth	r2, r3
 8006378:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800637c:	4013      	ands	r3, r2
 800637e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	461a      	mov	r2, r3
 8006388:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8006394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006398:	b292      	uxth	r2, r2
 800639a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800639c:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	4413      	add	r3, r2
 80063b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80063b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b4:	7b1b      	ldrb	r3, [r3, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d123      	bne.n	8006402 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	461a      	mov	r2, r3
 80063c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	4413      	add	r3, r2
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	6812      	ldr	r2, [r2, #0]
 80063d2:	4413      	add	r3, r2
 80063d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80063e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 808e 	beq.w	8006508 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f2:	6959      	ldr	r1, [r3, #20]
 80063f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063f6:	88da      	ldrh	r2, [r3, #6]
 80063f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80063fc:	f006 fb62 	bl	800cac4 <USB_ReadPMA>
 8006400:	e082      	b.n	8006508 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006404:	78db      	ldrb	r3, [r3, #3]
 8006406:	2b02      	cmp	r3, #2
 8006408:	d10a      	bne.n	8006420 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800640a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800640e:	461a      	mov	r2, r3
 8006410:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 f9d3 	bl	80067be <HAL_PCD_EP_DB_Receive>
 8006418:	4603      	mov	r3, r0
 800641a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800641e:	e073      	b.n	8006508 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	4413      	add	r3, r2
 800642e:	881b      	ldrh	r3, [r3, #0]
 8006430:	b29b      	uxth	r3, r3
 8006432:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006436:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800643a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800645c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	b29b      	uxth	r3, r3
 8006476:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d022      	beq.n	80064c4 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006486:	b29b      	uxth	r3, r3
 8006488:	461a      	mov	r2, r3
 800648a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	6812      	ldr	r2, [r2, #0]
 8006496:	4413      	add	r3, r2
 8006498:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800649c:	881b      	ldrh	r3, [r3, #0]
 800649e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064a2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80064a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d02c      	beq.n	8006508 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6818      	ldr	r0, [r3, #0]
 80064b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b4:	6959      	ldr	r1, [r3, #20]
 80064b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b8:	891a      	ldrh	r2, [r3, #8]
 80064ba:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064be:	f006 fb01 	bl	800cac4 <USB_ReadPMA>
 80064c2:	e021      	b.n	8006508 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	461a      	mov	r2, r3
 80064d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	6812      	ldr	r2, [r2, #0]
 80064dc:	4413      	add	r3, r2
 80064de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064e2:	881b      	ldrh	r3, [r3, #0]
 80064e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80064ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d009      	beq.n	8006508 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064fa:	6959      	ldr	r1, [r3, #20]
 80064fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064fe:	895a      	ldrh	r2, [r3, #10]
 8006500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006504:	f006 fade 	bl	800cac4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006510:	441a      	add	r2, r3
 8006512:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006514:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006518:	695a      	ldr	r2, [r3, #20]
 800651a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800651e:	441a      	add	r2, r3
 8006520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006522:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006524:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d005      	beq.n	8006538 <PCD_EP_ISR_Handler+0x4fc>
 800652c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8006530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	429a      	cmp	r2, r3
 8006536:	d206      	bcs.n	8006546 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006538:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	4619      	mov	r1, r3
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f00b fd5e 	bl	8012000 <HAL_PCD_DataOutStageCallback>
 8006544:	e005      	b.n	8006552 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800654c:	4618      	mov	r0, r3
 800654e:	f004 fd8c 	bl	800b06a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006552:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800655a:	2b00      	cmp	r3, #0
 800655c:	f000 8121 	beq.w	80067a2 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8006560:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006564:	4613      	mov	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4413      	add	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	3310      	adds	r3, #16
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	4413      	add	r3, r2
 8006572:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	881b      	ldrh	r3, [r3, #0]
 8006584:	b29b      	uxth	r3, r3
 8006586:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800658a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800658e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	441a      	add	r2, r3
 80065a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80065a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80065b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065b2:	78db      	ldrb	r3, [r3, #3]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	f040 80a2 	bne.w	80066fe <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80065ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065bc:	2200      	movs	r2, #0
 80065be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80065c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c2:	7b1b      	ldrb	r3, [r3, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8093 	beq.w	80066f0 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80065ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d046      	beq.n	8006664 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d126      	bne.n	800662c <PCD_EP_ISR_Handler+0x5f0>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	461a      	mov	r2, r3
 80065f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f2:	4413      	add	r3, r2
 80065f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80065f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	00da      	lsls	r2, r3, #3
 80065fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fe:	4413      	add	r3, r2
 8006600:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006604:	623b      	str	r3, [r7, #32]
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	881b      	ldrh	r3, [r3, #0]
 800660a:	b29b      	uxth	r3, r3
 800660c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006610:	b29a      	uxth	r2, r3
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	801a      	strh	r2, [r3, #0]
 8006616:	6a3b      	ldr	r3, [r7, #32]
 8006618:	881b      	ldrh	r3, [r3, #0]
 800661a:	b29b      	uxth	r3, r3
 800661c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006620:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006624:	b29a      	uxth	r2, r3
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	801a      	strh	r2, [r3, #0]
 800662a:	e061      	b.n	80066f0 <PCD_EP_ISR_Handler+0x6b4>
 800662c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800662e:	785b      	ldrb	r3, [r3, #1]
 8006630:	2b01      	cmp	r3, #1
 8006632:	d15d      	bne.n	80066f0 <PCD_EP_ISR_Handler+0x6b4>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006642:	b29b      	uxth	r3, r3
 8006644:	461a      	mov	r2, r3
 8006646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006648:	4413      	add	r3, r2
 800664a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800664c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	00da      	lsls	r2, r3, #3
 8006652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006654:	4413      	add	r3, r2
 8006656:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800665a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	2200      	movs	r2, #0
 8006660:	801a      	strh	r2, [r3, #0]
 8006662:	e045      	b.n	80066f0 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800666a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d126      	bne.n	80066c0 <PCD_EP_ISR_Handler+0x684>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	637b      	str	r3, [r7, #52]	@ 0x34
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006680:	b29b      	uxth	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006686:	4413      	add	r3, r2
 8006688:	637b      	str	r3, [r7, #52]	@ 0x34
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	00da      	lsls	r2, r3, #3
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	4413      	add	r3, r2
 8006694:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006698:	633b      	str	r3, [r7, #48]	@ 0x30
 800669a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669c:	881b      	ldrh	r3, [r3, #0]
 800669e:	b29b      	uxth	r3, r3
 80066a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ac:	881b      	ldrh	r3, [r3, #0]
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066b8:	b29a      	uxth	r2, r3
 80066ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066bc:	801a      	strh	r2, [r3, #0]
 80066be:	e017      	b.n	80066f0 <PCD_EP_ISR_Handler+0x6b4>
 80066c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066c2:	785b      	ldrb	r3, [r3, #1]
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d113      	bne.n	80066f0 <PCD_EP_ISR_Handler+0x6b4>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	461a      	mov	r2, r3
 80066d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066d6:	4413      	add	r3, r2
 80066d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	00da      	lsls	r2, r3, #3
 80066e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e2:	4413      	add	r3, r2
 80066e4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80066e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ec:	2200      	movs	r2, #0
 80066ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f2:	781b      	ldrb	r3, [r3, #0]
 80066f4:	4619      	mov	r1, r3
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f00b fc9d 	bl	8012036 <HAL_PCD_DataInStageCallback>
 80066fc:	e051      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80066fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006706:	2b00      	cmp	r3, #0
 8006708:	d144      	bne.n	8006794 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006712:	b29b      	uxth	r3, r3
 8006714:	461a      	mov	r2, r3
 8006716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	00db      	lsls	r3, r3, #3
 800671c:	4413      	add	r3, r2
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	6812      	ldr	r2, [r2, #0]
 8006722:	4413      	add	r3, r2
 8006724:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800672e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8006732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800673a:	429a      	cmp	r2, r3
 800673c:	d907      	bls.n	800674e <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 800673e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006740:	699a      	ldr	r2, [r3, #24]
 8006742:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800674a:	619a      	str	r2, [r3, #24]
 800674c:	e002      	b.n	8006754 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 800674e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006750:	2200      	movs	r2, #0
 8006752:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8006754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006756:	699b      	ldr	r3, [r3, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d106      	bne.n	800676a <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800675c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f00b fc67 	bl	8012036 <HAL_PCD_DataInStageCallback>
 8006768:	e01b      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800676a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800676c:	695a      	ldr	r2, [r3, #20]
 800676e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006772:	441a      	add	r2, r3
 8006774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006776:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006778:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677a:	69da      	ldr	r2, [r3, #28]
 800677c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006780:	441a      	add	r2, r3
 8006782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006784:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800678c:	4618      	mov	r0, r3
 800678e:	f004 fc6c 	bl	800b06a <USB_EPStartXfer>
 8006792:	e006      	b.n	80067a2 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006794:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006798:	461a      	mov	r2, r3
 800679a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f917 	bl	80069d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	b21b      	sxth	r3, r3
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	f6ff ac49 	blt.w	8006046 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3758      	adds	r7, #88	@ 0x58
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b088      	sub	sp, #32
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	4613      	mov	r3, r2
 80067ca:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d07c      	beq.n	80068d0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067de:	b29b      	uxth	r3, r3
 80067e0:	461a      	mov	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4413      	add	r3, r2
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	4413      	add	r3, r2
 80067f0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067fa:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	699a      	ldr	r2, [r3, #24]
 8006800:	8b7b      	ldrh	r3, [r7, #26]
 8006802:	429a      	cmp	r2, r3
 8006804:	d306      	bcc.n	8006814 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	699a      	ldr	r2, [r3, #24]
 800680a:	8b7b      	ldrh	r3, [r7, #26]
 800680c:	1ad2      	subs	r2, r2, r3
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	619a      	str	r2, [r3, #24]
 8006812:	e002      	b.n	800681a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	2200      	movs	r2, #0
 8006818:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d123      	bne.n	800686a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	461a      	mov	r2, r3
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006838:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800683c:	833b      	strh	r3, [r7, #24]
 800683e:	8b3b      	ldrh	r3, [r7, #24]
 8006840:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006844:	833b      	strh	r3, [r7, #24]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	441a      	add	r2, r3
 8006854:	8b3b      	ldrh	r3, [r7, #24]
 8006856:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800685a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800685e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006862:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006866:	b29b      	uxth	r3, r3
 8006868:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800686a:	88fb      	ldrh	r3, [r7, #6]
 800686c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006870:	2b00      	cmp	r3, #0
 8006872:	d01f      	beq.n	80068b4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	461a      	mov	r2, r3
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4413      	add	r3, r2
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	b29b      	uxth	r3, r3
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800688a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800688e:	82fb      	strh	r3, [r7, #22]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	461a      	mov	r2, r3
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	441a      	add	r2, r3
 800689e:	8afb      	ldrh	r3, [r7, #22]
 80068a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80068b4:	8b7b      	ldrh	r3, [r7, #26]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	f000 8085 	beq.w	80069c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6818      	ldr	r0, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6959      	ldr	r1, [r3, #20]
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	891a      	ldrh	r2, [r3, #8]
 80068c8:	8b7b      	ldrh	r3, [r7, #26]
 80068ca:	f006 f8fb 	bl	800cac4 <USB_ReadPMA>
 80068ce:	e07a      	b.n	80069c6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068d8:	b29b      	uxth	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	00db      	lsls	r3, r3, #3
 80068e2:	4413      	add	r3, r2
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	4413      	add	r3, r2
 80068ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80068ee:	881b      	ldrh	r3, [r3, #0]
 80068f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068f4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	8b7b      	ldrh	r3, [r7, #26]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d306      	bcc.n	800690e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	699a      	ldr	r2, [r3, #24]
 8006904:	8b7b      	ldrh	r3, [r7, #26]
 8006906:	1ad2      	subs	r2, r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	619a      	str	r2, [r3, #24]
 800690c:	e002      	b.n	8006914 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d123      	bne.n	8006964 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	461a      	mov	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	b29b      	uxth	r3, r3
 800692e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006932:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006936:	83fb      	strh	r3, [r7, #30]
 8006938:	8bfb      	ldrh	r3, [r7, #30]
 800693a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800693e:	83fb      	strh	r3, [r7, #30]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	461a      	mov	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	441a      	add	r2, r3
 800694e:	8bfb      	ldrh	r3, [r7, #30]
 8006950:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006954:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006958:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800695c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006960:	b29b      	uxth	r3, r3
 8006962:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006964:	88fb      	ldrh	r3, [r7, #6]
 8006966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11f      	bne.n	80069ae <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	881b      	ldrh	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006988:	83bb      	strh	r3, [r7, #28]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	781b      	ldrb	r3, [r3, #0]
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	441a      	add	r2, r3
 8006998:	8bbb      	ldrh	r3, [r7, #28]
 800699a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800699e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80069a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80069a6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80069ae:	8b7b      	ldrh	r3, [r7, #26]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d008      	beq.n	80069c6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6818      	ldr	r0, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	6959      	ldr	r1, [r3, #20]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	895a      	ldrh	r2, [r3, #10]
 80069c0:	8b7b      	ldrh	r3, [r7, #26]
 80069c2:	f006 f87f 	bl	800cac4 <USB_ReadPMA>
    }
  }

  return count;
 80069c6:	8b7b      	ldrh	r3, [r7, #26]
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3720      	adds	r7, #32
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b0a4      	sub	sp, #144	@ 0x90
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 81db 	beq.w	8006da0 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069f2:	b29b      	uxth	r3, r3
 80069f4:	461a      	mov	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	4413      	add	r3, r2
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	699a      	ldr	r2, [r3, #24]
 8006a16:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a1a:	429a      	cmp	r2, r3
 8006a1c:	d907      	bls.n	8006a2e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006a26:	1ad2      	subs	r2, r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	619a      	str	r2, [r3, #24]
 8006a2c:	e002      	b.n	8006a34 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f040 80b9 	bne.w	8006bb0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	785b      	ldrb	r3, [r3, #1]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d126      	bne.n	8006a94 <HAL_PCD_EP_DB_Transmit+0xc4>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a54:	b29b      	uxth	r3, r3
 8006a56:	461a      	mov	r2, r3
 8006a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a5a:	4413      	add	r3, r2
 8006a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	00da      	lsls	r2, r3, #3
 8006a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a66:	4413      	add	r3, r2
 8006a68:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	801a      	strh	r2, [r3, #0]
 8006a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e01a      	b.n	8006aca <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	785b      	ldrb	r3, [r3, #1]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d116      	bne.n	8006aca <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	461a      	mov	r2, r3
 8006aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ab0:	4413      	add	r3, r2
 8006ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	00da      	lsls	r2, r3, #3
 8006aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006abc:	4413      	add	r3, r2
 8006abe:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	785b      	ldrb	r3, [r3, #1]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d126      	bne.n	8006b26 <HAL_PCD_EP_DB_Transmit+0x156>
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	61fb      	str	r3, [r7, #28]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	461a      	mov	r2, r3
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	4413      	add	r3, r2
 8006aee:	61fb      	str	r3, [r7, #28]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00da      	lsls	r2, r3, #3
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	4413      	add	r3, r2
 8006afa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	881b      	ldrh	r3, [r3, #0]
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b0a:	b29a      	uxth	r2, r3
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	801a      	strh	r2, [r3, #0]
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	801a      	strh	r2, [r3, #0]
 8006b24:	e017      	b.n	8006b56 <HAL_PCD_EP_DB_Transmit+0x186>
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d113      	bne.n	8006b56 <HAL_PCD_EP_DB_Transmit+0x186>
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	4413      	add	r3, r2
 8006b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	00da      	lsls	r2, r3, #3
 8006b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b48:	4413      	add	r3, r2
 8006b4a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006b4e:	623b      	str	r3, [r7, #32]
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	2200      	movs	r2, #0
 8006b54:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f00b fa6a 	bl	8012036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 82fa 	beq.w	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	881b      	ldrh	r3, [r3, #0]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b88:	82fb      	strh	r3, [r7, #22]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	461a      	mov	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	441a      	add	r2, r3
 8006b98:	8afb      	ldrh	r3, [r7, #22]
 8006b9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ba2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ba6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	8013      	strh	r3, [r2, #0]
 8006bae:	e2d8      	b.n	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006bb0:	88fb      	ldrh	r3, [r7, #6]
 8006bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d021      	beq.n	8006bfe <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	4413      	add	r3, r2
 8006bc8:	881b      	ldrh	r3, [r3, #0]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006bd0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	441a      	add	r2, r3
 8006be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006bea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006bee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006bf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	f040 82ac 	bne.w	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c12:	441a      	add	r2, r3
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	69da      	ldr	r2, [r3, #28]
 8006c1c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c20:	441a      	add	r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	6a1a      	ldr	r2, [r3, #32]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d30b      	bcc.n	8006c4a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	6a1a      	ldr	r2, [r3, #32]
 8006c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	621a      	str	r2, [r3, #32]
 8006c48:	e017      	b.n	8006c7a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d108      	bne.n	8006c64 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006c52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006c56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006c62:	e00a      	b.n	8006c7a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	6a1b      	ldr	r3, [r3, #32]
 8006c70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d165      	bne.n	8006d4e <HAL_PCD_EP_DB_Transmit+0x37e>
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c96:	4413      	add	r3, r2
 8006c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	00da      	lsls	r2, r3, #3
 8006ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cac:	881b      	ldrh	r3, [r3, #0]
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb8:	801a      	strh	r2, [r3, #0]
 8006cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006cc0:	d91d      	bls.n	8006cfe <HAL_PCD_EP_DB_Transmit+0x32e>
 8006cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cce:	f003 031f 	and.w	r3, r3, #31
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d102      	bne.n	8006cdc <HAL_PCD_EP_DB_Transmit+0x30c>
 8006cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	029b      	lsls	r3, r3, #10
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	4313      	orrs	r3, r2
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e044      	b.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006cfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <HAL_PCD_EP_DB_Transmit+0x34c>
 8006d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d18:	801a      	strh	r2, [r3, #0]
 8006d1a:	e035      	b.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d20:	085b      	lsrs	r3, r3, #1
 8006d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d002      	beq.n	8006d36 <HAL_PCD_EP_DB_Transmit+0x366>
 8006d30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d32:	3301      	adds	r3, #1
 8006d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	029b      	lsls	r3, r3, #10
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	b29a      	uxth	r2, r3
 8006d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4a:	801a      	strh	r2, [r3, #0]
 8006d4c:	e01c      	b.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	785b      	ldrb	r3, [r3, #1]
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d118      	bne.n	8006d88 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	461a      	mov	r2, r3
 8006d68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d6a:	4413      	add	r3, r2
 8006d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	00da      	lsls	r2, r3, #3
 8006d74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d76:	4413      	add	r3, r2
 8006d78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d86:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6818      	ldr	r0, [r3, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	6959      	ldr	r1, [r3, #20]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	891a      	ldrh	r2, [r3, #8]
 8006d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	f005 fe51 	bl	800ca40 <USB_WritePMA>
 8006d9e:	e1e0      	b.n	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	461a      	mov	r2, r3
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	4413      	add	r3, r2
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	4413      	add	r3, r2
 8006dba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	699a      	ldr	r2, [r3, #24]
 8006dcc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d307      	bcc.n	8006de4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	699a      	ldr	r2, [r3, #24]
 8006dd8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006ddc:	1ad2      	subs	r2, r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	619a      	str	r2, [r3, #24]
 8006de2:	e002      	b.n	8006dea <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	f040 80c0 	bne.w	8006f74 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	785b      	ldrb	r3, [r3, #1]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d126      	bne.n	8006e4a <HAL_PCD_EP_DB_Transmit+0x47a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e10:	4413      	add	r3, r2
 8006e12:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	00da      	lsls	r2, r3, #3
 8006e1a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e22:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e42:	b29a      	uxth	r2, r3
 8006e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e46:	801a      	strh	r2, [r3, #0]
 8006e48:	e01a      	b.n	8006e80 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	785b      	ldrb	r3, [r3, #1]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d116      	bne.n	8006e80 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	461a      	mov	r2, r3
 8006e64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e66:	4413      	add	r3, r2
 8006e68:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	00da      	lsls	r2, r3, #3
 8006e70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e72:	4413      	add	r3, r2
 8006e74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e78:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e7a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d12b      	bne.n	8006ee6 <HAL_PCD_EP_DB_Transmit+0x516>
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ea2:	4413      	add	r3, r2
 8006ea4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	00da      	lsls	r2, r3, #3
 8006eac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006eae:	4413      	add	r3, r2
 8006eb0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ebc:	881b      	ldrh	r3, [r3, #0]
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006eca:	801a      	strh	r2, [r3, #0]
 8006ecc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ed0:	881b      	ldrh	r3, [r3, #0]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006edc:	b29a      	uxth	r2, r3
 8006ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ee2:	801a      	strh	r2, [r3, #0]
 8006ee4:	e017      	b.n	8006f16 <HAL_PCD_EP_DB_Transmit+0x546>
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	785b      	ldrb	r3, [r3, #1]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d113      	bne.n	8006f16 <HAL_PCD_EP_DB_Transmit+0x546>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006efc:	4413      	add	r3, r2
 8006efe:	677b      	str	r3, [r7, #116]	@ 0x74
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	00da      	lsls	r2, r3, #3
 8006f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006f08:	4413      	add	r3, r2
 8006f0a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006f0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f12:	2200      	movs	r2, #0
 8006f14:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f00b f88a 	bl	8012036 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f22:	88fb      	ldrh	r3, [r7, #6]
 8006f24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f040 811a 	bne.w	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	4413      	add	r3, r2
 8006f3c:	881b      	ldrh	r3, [r3, #0]
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f48:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	461a      	mov	r2, r3
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	441a      	add	r2, r3
 8006f5a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006f5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	8013      	strh	r3, [r2, #0]
 8006f72:	e0f6      	b.n	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f74:	88fb      	ldrh	r3, [r7, #6]
 8006f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d121      	bne.n	8006fc2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	461a      	mov	r2, r3
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	881b      	ldrh	r3, [r3, #0]
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f98:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	441a      	add	r2, r3
 8006faa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	f040 80ca 	bne.w	8007162 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	695a      	ldr	r2, [r3, #20]
 8006fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006fd6:	441a      	add	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	69da      	ldr	r2, [r3, #28]
 8006fe0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006fe4:	441a      	add	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6a1a      	ldr	r2, [r3, #32]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d30b      	bcc.n	800700e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007006:	1ad2      	subs	r2, r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	621a      	str	r2, [r3, #32]
 800700c:	e017      	b.n	800703e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d108      	bne.n	8007028 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800701a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8007026:	e00a      	b.n	800703e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	657b      	str	r3, [r7, #84]	@ 0x54
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	785b      	ldrb	r3, [r3, #1]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d165      	bne.n	8007118 <HAL_PCD_EP_DB_Transmit+0x748>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800705a:	b29b      	uxth	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007060:	4413      	add	r3, r2
 8007062:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	00da      	lsls	r2, r3, #3
 800706a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800706c:	4413      	add	r3, r2
 800706e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007072:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007074:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29b      	uxth	r3, r3
 800707a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800707e:	b29a      	uxth	r2, r3
 8007080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007082:	801a      	strh	r2, [r3, #0]
 8007084:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007088:	2b3e      	cmp	r3, #62	@ 0x3e
 800708a:	d91d      	bls.n	80070c8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800708c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007090:	095b      	lsrs	r3, r3, #5
 8007092:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007094:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	2b00      	cmp	r3, #0
 800709e:	d102      	bne.n	80070a6 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80070a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a2:	3b01      	subs	r3, #1
 80070a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070a8:	881b      	ldrh	r3, [r3, #0]
 80070aa:	b29a      	uxth	r2, r3
 80070ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	029b      	lsls	r3, r3, #10
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	4313      	orrs	r3, r2
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e041      	b.n	800714c <HAL_PCD_EP_DB_Transmit+0x77c>
 80070c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10a      	bne.n	80070e6 <HAL_PCD_EP_DB_Transmit+0x716>
 80070d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070e2:	801a      	strh	r2, [r3, #0]
 80070e4:	e032      	b.n	800714c <HAL_PCD_EP_DB_Transmit+0x77c>
 80070e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070ea:	085b      	lsrs	r3, r3, #1
 80070ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d002      	beq.n	8007100 <HAL_PCD_EP_DB_Transmit+0x730>
 80070fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070fc:	3301      	adds	r3, #1
 80070fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007100:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007102:	881b      	ldrh	r3, [r3, #0]
 8007104:	b29a      	uxth	r2, r3
 8007106:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007108:	b29b      	uxth	r3, r3
 800710a:	029b      	lsls	r3, r3, #10
 800710c:	b29b      	uxth	r3, r3
 800710e:	4313      	orrs	r3, r2
 8007110:	b29a      	uxth	r2, r3
 8007112:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007114:	801a      	strh	r2, [r3, #0]
 8007116:	e019      	b.n	800714c <HAL_PCD_EP_DB_Transmit+0x77c>
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	785b      	ldrb	r3, [r3, #1]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d115      	bne.n	800714c <HAL_PCD_EP_DB_Transmit+0x77c>
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800712e:	4413      	add	r3, r2
 8007130:	657b      	str	r3, [r7, #84]	@ 0x54
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	00da      	lsls	r2, r3, #3
 8007138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800713a:	4413      	add	r3, r2
 800713c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8007140:	653b      	str	r3, [r7, #80]	@ 0x50
 8007142:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007146:	b29a      	uxth	r2, r3
 8007148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800714a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6818      	ldr	r0, [r3, #0]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	6959      	ldr	r1, [r3, #20]
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	895a      	ldrh	r2, [r3, #10]
 8007158:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800715c:	b29b      	uxth	r3, r3
 800715e:	f005 fc6f 	bl	800ca40 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4413      	add	r3, r2
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29b      	uxth	r3, r3
 8007174:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007178:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800717c:	82bb      	strh	r3, [r7, #20]
 800717e:	8abb      	ldrh	r3, [r7, #20]
 8007180:	f083 0310 	eor.w	r3, r3, #16
 8007184:	82bb      	strh	r3, [r7, #20]
 8007186:	8abb      	ldrh	r3, [r7, #20]
 8007188:	f083 0320 	eor.w	r3, r3, #32
 800718c:	82bb      	strh	r3, [r7, #20]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	461a      	mov	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	441a      	add	r2, r3
 800719c:	8abb      	ldrh	r3, [r7, #20]
 800719e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3790      	adds	r7, #144	@ 0x90
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	460b      	mov	r3, r1
 80071c8:	817b      	strh	r3, [r7, #10]
 80071ca:	4613      	mov	r3, r2
 80071cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80071ce:	897b      	ldrh	r3, [r7, #10]
 80071d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d4:	b29b      	uxth	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	f003 0207 	and.w	r2, r3, #7
 80071e0:	4613      	mov	r3, r2
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	4413      	add	r3, r2
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	3310      	adds	r3, #16
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e009      	b.n	8007206 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80071f2:	897a      	ldrh	r2, [r7, #10]
 80071f4:	4613      	mov	r3, r2
 80071f6:	009b      	lsls	r3, r3, #2
 80071f8:	4413      	add	r3, r2
 80071fa:	00db      	lsls	r3, r3, #3
 80071fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007206:	893b      	ldrh	r3, [r7, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d107      	bne.n	800721c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	2200      	movs	r2, #0
 8007210:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	b29a      	uxth	r2, r3
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	80da      	strh	r2, [r3, #6]
 800721a:	e00b      	b.n	8007234 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	2201      	movs	r2, #1
 8007220:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	b29a      	uxth	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	0c1b      	lsrs	r3, r3, #16
 800722e:	b29a      	uxth	r2, r3
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007234:	2300      	movs	r3, #0
}
 8007236:	4618      	mov	r0, r3
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007266:	b29b      	uxth	r3, r3
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	b29a      	uxth	r2, r3
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800727a:	b29b      	uxth	r3, r3
 800727c:	f043 0302 	orr.w	r3, r3, #2
 8007280:	b29a      	uxth	r2, r3
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007298:	b480      	push	{r7}
 800729a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800729c:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a04      	ldr	r2, [pc, #16]	@ (80072b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80072a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072a6:	6013      	str	r3, [r2, #0]
}
 80072a8:	bf00      	nop
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	58000400 	.word	0x58000400

080072b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80072b8:	b480      	push	{r7}
 80072ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80072bc:	4b04      	ldr	r3, [pc, #16]	@ (80072d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	58000400 	.word	0x58000400

080072d4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80072d8:	4b05      	ldr	r3, [pc, #20]	@ (80072f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4a04      	ldr	r2, [pc, #16]	@ (80072f0 <HAL_PWREx_EnableVddUSB+0x1c>)
 80072de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80072e2:	6053      	str	r3, [r2, #4]
}
 80072e4:	bf00      	nop
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr
 80072ee:	bf00      	nop
 80072f0:	58000400 	.word	0x58000400

080072f4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80072f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007306:	d101      	bne.n	800730c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007308:	2301      	movs	r3, #1
 800730a:	e000      	b.n	800730e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <LL_RCC_HSE_Enable>:
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800731c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800732a:	6013      	str	r3, [r2, #0]
}
 800732c:	bf00      	nop
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <LL_RCC_HSE_Disable>:
{
 8007336:	b480      	push	{r7}
 8007338:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800733a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007344:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007348:	6013      	str	r3, [r2, #0]
}
 800734a:	bf00      	nop
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <LL_RCC_HSE_IsReady>:
{
 8007354:	b480      	push	{r7}
 8007356:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8007358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007366:	d101      	bne.n	800736c <LL_RCC_HSE_IsReady+0x18>
 8007368:	2301      	movs	r3, #1
 800736a:	e000      	b.n	800736e <LL_RCC_HSE_IsReady+0x1a>
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <LL_RCC_HSI_Enable>:
{
 8007378:	b480      	push	{r7}
 800737a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800737c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007386:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800738a:	6013      	str	r3, [r2, #0]
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <LL_RCC_HSI_Disable>:
{
 8007396:	b480      	push	{r7}
 8007398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800739a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073a8:	6013      	str	r3, [r2, #0]
}
 80073aa:	bf00      	nop
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <LL_RCC_HSI_IsReady>:
{
 80073b4:	b480      	push	{r7}
 80073b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80073b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80073c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c6:	d101      	bne.n	80073cc <LL_RCC_HSI_IsReady+0x18>
 80073c8:	2301      	movs	r3, #1
 80073ca:	e000      	b.n	80073ce <LL_RCC_HSI_IsReady+0x1a>
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80073e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	061b      	lsls	r3, r3, #24
 80073ee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80073f2:	4313      	orrs	r3, r2
 80073f4:	604b      	str	r3, [r1, #4]
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_HSI48_Enable>:
{
 8007402:	b480      	push	{r7}
 8007404:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800740e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_RCC_HSI48_Disable>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800743c:	bf00      	nop
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <LL_RCC_HSI48_IsReady>:
{
 8007446:	b480      	push	{r7}
 8007448:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800744a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b02      	cmp	r3, #2
 8007458:	d101      	bne.n	800745e <LL_RCC_HSI48_IsReady+0x18>
 800745a:	2301      	movs	r3, #1
 800745c:	e000      	b.n	8007460 <LL_RCC_HSI48_IsReady+0x1a>
 800745e:	2300      	movs	r3, #0
}
 8007460:	4618      	mov	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <LL_RCC_LSE_Enable>:
{
 800746a:	b480      	push	{r7}
 800746c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800746e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007472:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007476:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800747a:	f043 0301 	orr.w	r3, r3, #1
 800747e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007482:	bf00      	nop
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <LL_RCC_LSE_Disable>:
{
 800748c:	b480      	push	{r7}
 800748e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007490:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007498:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800749c:	f023 0301 	bic.w	r3, r3, #1
 80074a0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <LL_RCC_LSE_EnableBypass>:
{
 80074ae:	b480      	push	{r7}
 80074b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80074b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074be:	f043 0304 	orr.w	r3, r3, #4
 80074c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074c6:	bf00      	nop
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_RCC_LSE_DisableBypass>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80074d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e0:	f023 0304 	bic.w	r3, r3, #4
 80074e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <LL_RCC_LSE_IsReady>:
{
 80074f2:	b480      	push	{r7}
 80074f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d101      	bne.n	800750a <LL_RCC_LSE_IsReady+0x18>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <LL_RCC_LSE_IsReady+0x1a>
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_LSI1_Enable>:
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800752e:	bf00      	nop
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_RCC_LSI1_Disable>:
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007548:	f023 0301 	bic.w	r3, r3, #1
 800754c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <LL_RCC_LSI1_IsReady>:
{
 800755a:	b480      	push	{r7}
 800755c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b02      	cmp	r3, #2
 800756c:	d101      	bne.n	8007572 <LL_RCC_LSI1_IsReady+0x18>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <LL_RCC_LSI1_IsReady+0x1a>
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <LL_RCC_LSI2_Enable>:
{
 800757e:	b480      	push	{r7}
 8007580:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8007582:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007586:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800758a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800758e:	f043 0304 	orr.w	r3, r3, #4
 8007592:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007596:	bf00      	nop
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <LL_RCC_LSI2_Disable>:
{
 80075a0:	b480      	push	{r7}
 80075a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80075a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075b0:	f023 0304 	bic.w	r3, r3, #4
 80075b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80075b8:	bf00      	nop
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <LL_RCC_LSI2_IsReady>:
{
 80075c2:	b480      	push	{r7}
 80075c4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80075c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b08      	cmp	r3, #8
 80075d4:	d101      	bne.n	80075da <LL_RCC_LSI2_IsReady+0x18>
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <LL_RCC_LSI2_IsReady+0x1a>
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <LL_RCC_LSI2_SetTrimming>:
{
 80075e6:	b480      	push	{r7}
 80075e8:	b083      	sub	sp, #12
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80075ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80075f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007602:	4313      	orrs	r3, r2
 8007604:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <LL_RCC_MSI_Enable>:
{
 8007614:	b480      	push	{r7}
 8007616:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007618:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007622:	f043 0301 	orr.w	r3, r3, #1
 8007626:	6013      	str	r3, [r2, #0]
}
 8007628:	bf00      	nop
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <LL_RCC_MSI_Disable>:
{
 8007632:	b480      	push	{r7}
 8007634:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007636:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007640:	f023 0301 	bic.w	r3, r3, #1
 8007644:	6013      	str	r3, [r2, #0]
}
 8007646:	bf00      	nop
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr

08007650 <LL_RCC_MSI_IsReady>:
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b02      	cmp	r3, #2
 8007660:	d101      	bne.n	8007666 <LL_RCC_MSI_IsReady+0x16>
 8007662:	2301      	movs	r3, #1
 8007664:	e000      	b.n	8007668 <LL_RCC_MSI_IsReady+0x18>
 8007666:	2300      	movs	r3, #0
}
 8007668:	4618      	mov	r0, r3
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <LL_RCC_MSI_SetRange>:
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800767a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007684:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4313      	orrs	r3, r2
 800768c:	600b      	str	r3, [r1, #0]
}
 800768e:	bf00      	nop
 8007690:	370c      	adds	r7, #12
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr

0800769a <LL_RCC_MSI_GetRange>:
{
 800769a:	b480      	push	{r7}
 800769c:	b083      	sub	sp, #12
 800769e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80076a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80076aa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2bb0      	cmp	r3, #176	@ 0xb0
 80076b0:	d901      	bls.n	80076b6 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 80076b2:	23b0      	movs	r3, #176	@ 0xb0
 80076b4:	607b      	str	r3, [r7, #4]
  return msiRange;
 80076b6:	687b      	ldr	r3, [r7, #4]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80076cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	021b      	lsls	r3, r3, #8
 80076da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076de:	4313      	orrs	r3, r2
 80076e0:	604b      	str	r3, [r1, #4]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <LL_RCC_SetSysClkSource>:
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80076f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	f023 0203 	bic.w	r2, r3, #3
 8007700:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4313      	orrs	r3, r2
 8007708:	608b      	str	r3, [r1, #8]
}
 800770a:	bf00      	nop
 800770c:	370c      	adds	r7, #12
 800770e:	46bd      	mov	sp, r7
 8007710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007714:	4770      	bx	lr

08007716 <LL_RCC_GetSysClkSource>:
{
 8007716:	b480      	push	{r7}
 8007718:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800771a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 030c 	and.w	r3, r3, #12
}
 8007724:	4618      	mov	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <LL_RCC_SetAHBPrescaler>:
{
 800772e:	b480      	push	{r7}
 8007730:	b083      	sub	sp, #12
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4313      	orrs	r3, r2
 8007748:	608b      	str	r3, [r1, #8]
}
 800774a:	bf00      	nop
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr

08007756 <LL_C2_RCC_SetAHBPrescaler>:
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800775e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007762:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007766:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800776a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4313      	orrs	r3, r2
 8007772:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <LL_RCC_SetAHB4Prescaler>:
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800778a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800778e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007792:	f023 020f 	bic.w	r2, r3, #15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	091b      	lsrs	r3, r3, #4
 800779a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800779e:	4313      	orrs	r3, r2
 80077a0:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 80077a4:	bf00      	nop
 80077a6:	370c      	adds	r7, #12
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <LL_RCC_SetAPB1Prescaler>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	b083      	sub	sp, #12
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80077b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4313      	orrs	r3, r2
 80077ca:	608b      	str	r3, [r1, #8]
}
 80077cc:	bf00      	nop
 80077ce:	370c      	adds	r7, #12
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <LL_RCC_SetAPB2Prescaler>:
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80077e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80077ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	608b      	str	r3, [r1, #8]
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <LL_RCC_GetAHBPrescaler>:
{
 8007800:	b480      	push	{r7}
 8007802:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007804:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800780e:	4618      	mov	r0, r3
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <LL_RCC_GetAHB4Prescaler>:
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800781c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007820:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007824:	011b      	lsls	r3, r3, #4
 8007826:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800782a:	4618      	mov	r0, r3
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <LL_RCC_GetAPB1Prescaler>:
{
 8007834:	b480      	push	{r7}
 8007836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8007842:	4618      	mov	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <LL_RCC_GetAPB2Prescaler>:
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007886:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007890:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007894:	6013      	str	r3, [r2, #0]
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80078a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80078b2:	d101      	bne.n	80078b8 <LL_RCC_PLL_IsReady+0x18>
 80078b4:	2301      	movs	r3, #1
 80078b6:	e000      	b.n	80078ba <LL_RCC_PLL_IsReady+0x1a>
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80078c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	0a1b      	lsrs	r3, r3, #8
 80078d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80078de:	b480      	push	{r7}
 80078e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80078e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr

080078f6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80078f6:	b480      	push	{r7}
 80078f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80078fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8007904:	4618      	mov	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800790e:	b480      	push	{r7}
 8007910:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	f003 0303 	and.w	r3, r3, #3
}
 800791c:	4618      	mov	r0, r3
 800791e:	46bd      	mov	sp, r7
 8007920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007924:	4770      	bx	lr

08007926 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8007926:	b480      	push	{r7}
 8007928:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800792a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800792e:	689b      	ldr	r3, [r3, #8]
 8007930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007938:	d101      	bne.n	800793e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800793a:	2301      	movs	r3, #1
 800793c:	e000      	b.n	8007940 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800794a:	b480      	push	{r7}
 800794c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800794e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007952:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800795a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800795e:	d101      	bne.n	8007964 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007960:	2301      	movs	r3, #1
 8007962:	e000      	b.n	8007966 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007978:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800797c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007984:	d101      	bne.n	800798a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007986:	2301      	movs	r3, #1
 8007988:	e000      	b.n	800798c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8007996:	b480      	push	{r7}
 8007998:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80079a8:	d101      	bne.n	80079ae <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80079aa:	2301      	movs	r3, #1
 80079ac:	e000      	b.n	80079b0 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	46bd      	mov	sp, r7
 80079b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80079ba:	b480      	push	{r7}
 80079bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80079be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80079c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80079cc:	d101      	bne.n	80079d2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80079ce:	2301      	movs	r3, #1
 80079d0:	e000      	b.n	80079d4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr
	...

080079e0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079e0:	b590      	push	{r4, r7, lr}
 80079e2:	b08d      	sub	sp, #52	@ 0x34
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d101      	bne.n	80079f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	e363      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 0320 	and.w	r3, r3, #32
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 808d 	beq.w	8007b1a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a00:	f7ff fe89 	bl	8007716 <LL_RCC_GetSysClkSource>
 8007a04:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a06:	f7ff ff82 	bl	800790e <LL_RCC_PLL_GetMainSource>
 8007a0a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <HAL_RCC_OscConfig+0x3e>
 8007a12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a14:	2b0c      	cmp	r3, #12
 8007a16:	d147      	bne.n	8007aa8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d144      	bne.n	8007aa8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	69db      	ldr	r3, [r3, #28]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e347      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8007a2e:	f7ff fe34 	bl	800769a <LL_RCC_MSI_GetRange>
 8007a32:	4603      	mov	r3, r0
 8007a34:	429c      	cmp	r4, r3
 8007a36:	d914      	bls.n	8007a62 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f000 fd2f 	bl	80084a0 <RCC_SetFlashLatencyFromMSIRange>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d001      	beq.n	8007a4c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e336      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fe0e 	bl	8007672 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6a1b      	ldr	r3, [r3, #32]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fe32 	bl	80076c4 <LL_RCC_MSI_SetCalibTrimming>
 8007a60:	e013      	b.n	8007a8a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	4618      	mov	r0, r3
 8007a68:	f7ff fe03 	bl	8007672 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7ff fe27 	bl	80076c4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 fd10 	bl	80084a0 <RCC_SetFlashLatencyFromMSIRange>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e317      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007a8a:	f000 fcc9 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	4aa4      	ldr	r2, [pc, #656]	@ (8007d24 <HAL_RCC_OscConfig+0x344>)
 8007a92:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a94:	4ba4      	ldr	r3, [pc, #656]	@ (8007d28 <HAL_RCC_OscConfig+0x348>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7fb f839 	bl	8002b10 <HAL_InitTick>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d039      	beq.n	8007b18 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	e308      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01e      	beq.n	8007aee <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007ab0:	f7ff fdb0 	bl	8007614 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007ab4:	f7fb f87a 	bl	8002bac <HAL_GetTick>
 8007ab8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007abc:	f7fb f876 	bl	8002bac <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e2f5      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007ace:	f7ff fdbf 	bl	8007650 <LL_RCC_MSI_IsReady>
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d0f1      	beq.n	8007abc <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7ff fdc8 	bl	8007672 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a1b      	ldr	r3, [r3, #32]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7ff fdec 	bl	80076c4 <LL_RCC_MSI_SetCalibTrimming>
 8007aec:	e015      	b.n	8007b1a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007aee:	f7ff fda0 	bl	8007632 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007af2:	f7fb f85b 	bl	8002bac <HAL_GetTick>
 8007af6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007afa:	f7fb f857 	bl	8002bac <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e2d6      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007b0c:	f7ff fda0 	bl	8007650 <LL_RCC_MSI_IsReady>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1f1      	bne.n	8007afa <HAL_RCC_OscConfig+0x11a>
 8007b16:	e000      	b.n	8007b1a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007b18:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d047      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b26:	f7ff fdf6 	bl	8007716 <LL_RCC_GetSysClkSource>
 8007b2a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b2c:	f7ff feef 	bl	800790e <LL_RCC_PLL_GetMainSource>
 8007b30:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007b32:	6a3b      	ldr	r3, [r7, #32]
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d005      	beq.n	8007b44 <HAL_RCC_OscConfig+0x164>
 8007b38:	6a3b      	ldr	r3, [r7, #32]
 8007b3a:	2b0c      	cmp	r3, #12
 8007b3c:	d108      	bne.n	8007b50 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	2b03      	cmp	r3, #3
 8007b42:	d105      	bne.n	8007b50 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d134      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e2b4      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b58:	d102      	bne.n	8007b60 <HAL_RCC_OscConfig+0x180>
 8007b5a:	f7ff fbdd 	bl	8007318 <LL_RCC_HSE_Enable>
 8007b5e:	e001      	b.n	8007b64 <HAL_RCC_OscConfig+0x184>
 8007b60:	f7ff fbe9 	bl	8007336 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d012      	beq.n	8007b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7fb f81e 	bl	8002bac <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b74:	f7fb f81a 	bl	8002bac <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	@ 0x64
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e299      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b86:	f7ff fbe5 	bl	8007354 <LL_RCC_HSE_IsReady>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d0f1      	beq.n	8007b74 <HAL_RCC_OscConfig+0x194>
 8007b90:	e011      	b.n	8007bb6 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b92:	f7fb f80b 	bl	8002bac <HAL_GetTick>
 8007b96:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007b98:	e008      	b.n	8007bac <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b9a:	f7fb f807 	bl	8002bac <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	2b64      	cmp	r3, #100	@ 0x64
 8007ba6:	d901      	bls.n	8007bac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e286      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007bac:	f7ff fbd2 	bl	8007354 <LL_RCC_HSE_IsReady>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1f1      	bne.n	8007b9a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d04c      	beq.n	8007c5c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007bc2:	f7ff fda8 	bl	8007716 <LL_RCC_GetSysClkSource>
 8007bc6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007bc8:	f7ff fea1 	bl	800790e <LL_RCC_PLL_GetMainSource>
 8007bcc:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	2b04      	cmp	r3, #4
 8007bd2:	d005      	beq.n	8007be0 <HAL_RCC_OscConfig+0x200>
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	2b0c      	cmp	r3, #12
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d10b      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	e266      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff fbf1 	bl	80073d8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007bf6:	e031      	b.n	8007c5c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d019      	beq.n	8007c34 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c00:	f7ff fbba 	bl	8007378 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c04:	f7fa ffd2 	bl	8002bac <HAL_GetTick>
 8007c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c0a:	e008      	b.n	8007c1e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c0c:	f7fa ffce 	bl	8002bac <HAL_GetTick>
 8007c10:	4602      	mov	r2, r0
 8007c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c14:	1ad3      	subs	r3, r2, r3
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d901      	bls.n	8007c1e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c1a:	2303      	movs	r3, #3
 8007c1c:	e24d      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007c1e:	f7ff fbc9 	bl	80073b4 <LL_RCC_HSI_IsReady>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d0f1      	beq.n	8007c0c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	4618      	mov	r0, r3
 8007c2e:	f7ff fbd3 	bl	80073d8 <LL_RCC_HSI_SetCalibTrimming>
 8007c32:	e013      	b.n	8007c5c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c34:	f7ff fbaf 	bl	8007396 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c38:	f7fa ffb8 	bl	8002bac <HAL_GetTick>
 8007c3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c40:	f7fa ffb4 	bl	8002bac <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e233      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007c52:	f7ff fbaf 	bl	80073b4 <LL_RCC_HSI_IsReady>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d1f1      	bne.n	8007c40 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f003 0308 	and.w	r3, r3, #8
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d106      	bne.n	8007c76 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	f000 80a3 	beq.w	8007dbc <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d076      	beq.n	8007d6c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0310 	and.w	r3, r3, #16
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d046      	beq.n	8007d18 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007c8a:	f7ff fc66 	bl	800755a <LL_RCC_LSI1_IsReady>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d113      	bne.n	8007cbc <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007c94:	f7ff fc3f 	bl	8007516 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c98:	f7fa ff88 	bl	8002bac <HAL_GetTick>
 8007c9c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007ca0:	f7fa ff84 	bl	8002bac <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e203      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007cb2:	f7ff fc52 	bl	800755a <LL_RCC_LSI1_IsReady>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f1      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007cbc:	f7ff fc5f 	bl	800757e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cc0:	f7fa ff74 	bl	8002bac <HAL_GetTick>
 8007cc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007cc6:	e008      	b.n	8007cda <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007cc8:	f7fa ff70 	bl	8002bac <HAL_GetTick>
 8007ccc:	4602      	mov	r2, r0
 8007cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd0:	1ad3      	subs	r3, r2, r3
 8007cd2:	2b03      	cmp	r3, #3
 8007cd4:	d901      	bls.n	8007cda <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007cd6:	2303      	movs	r3, #3
 8007cd8:	e1ef      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007cda:	f7ff fc72 	bl	80075c2 <LL_RCC_LSI2_IsReady>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d0f1      	beq.n	8007cc8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	699b      	ldr	r3, [r3, #24]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7ff fc7c 	bl	80075e6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007cee:	f7ff fc23 	bl	8007538 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cf2:	f7fa ff5b 	bl	8002bac <HAL_GetTick>
 8007cf6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007cf8:	e008      	b.n	8007d0c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007cfa:	f7fa ff57 	bl	8002bac <HAL_GetTick>
 8007cfe:	4602      	mov	r2, r0
 8007d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d02:	1ad3      	subs	r3, r2, r3
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d901      	bls.n	8007d0c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e1d6      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007d0c:	f7ff fc25 	bl	800755a <LL_RCC_LSI1_IsReady>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d1f1      	bne.n	8007cfa <HAL_RCC_OscConfig+0x31a>
 8007d16:	e051      	b.n	8007dbc <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007d18:	f7ff fbfd 	bl	8007516 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d1c:	f7fa ff46 	bl	8002bac <HAL_GetTick>
 8007d20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007d22:	e00c      	b.n	8007d3e <HAL_RCC_OscConfig+0x35e>
 8007d24:	20000024 	.word	0x20000024
 8007d28:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d2c:	f7fa ff3e 	bl	8002bac <HAL_GetTick>
 8007d30:	4602      	mov	r2, r0
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	d901      	bls.n	8007d3e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e1bd      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007d3e:	f7ff fc0c 	bl	800755a <LL_RCC_LSI1_IsReady>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d0f1      	beq.n	8007d2c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007d48:	f7ff fc2a 	bl	80075a0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007d4c:	e008      	b.n	8007d60 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007d4e:	f7fa ff2d 	bl	8002bac <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d901      	bls.n	8007d60 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e1ac      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007d60:	f7ff fc2f 	bl	80075c2 <LL_RCC_LSI2_IsReady>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f1      	bne.n	8007d4e <HAL_RCC_OscConfig+0x36e>
 8007d6a:	e027      	b.n	8007dbc <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007d6c:	f7ff fc18 	bl	80075a0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d70:	f7fa ff1c 	bl	8002bac <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007d78:	f7fa ff18 	bl	8002bac <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b03      	cmp	r3, #3
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e197      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007d8a:	f7ff fc1a 	bl	80075c2 <LL_RCC_LSI2_IsReady>
 8007d8e:	4603      	mov	r3, r0
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d1f1      	bne.n	8007d78 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007d94:	f7ff fbd0 	bl	8007538 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d98:	f7fa ff08 	bl	8002bac <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007da0:	f7fa ff04 	bl	8002bac <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e183      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007db2:	f7ff fbd2 	bl	800755a <LL_RCC_LSI1_IsReady>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1f1      	bne.n	8007da0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 0304 	and.w	r3, r3, #4
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d05b      	beq.n	8007e80 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8008068 <HAL_RCC_OscConfig+0x688>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d114      	bne.n	8007dfe <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007dd4:	f7ff fa60 	bl	8007298 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dd8:	f7fa fee8 	bl	8002bac <HAL_GetTick>
 8007ddc:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007dde:	e008      	b.n	8007df2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007de0:	f7fa fee4 	bl	8002bac <HAL_GetTick>
 8007de4:	4602      	mov	r2, r0
 8007de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de8:	1ad3      	subs	r3, r2, r3
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d901      	bls.n	8007df2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007dee:	2303      	movs	r3, #3
 8007df0:	e163      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007df2:	4b9d      	ldr	r3, [pc, #628]	@ (8008068 <HAL_RCC_OscConfig+0x688>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d0f0      	beq.n	8007de0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d102      	bne.n	8007e0c <HAL_RCC_OscConfig+0x42c>
 8007e06:	f7ff fb30 	bl	800746a <LL_RCC_LSE_Enable>
 8007e0a:	e00c      	b.n	8007e26 <HAL_RCC_OscConfig+0x446>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	2b05      	cmp	r3, #5
 8007e12:	d104      	bne.n	8007e1e <HAL_RCC_OscConfig+0x43e>
 8007e14:	f7ff fb4b 	bl	80074ae <LL_RCC_LSE_EnableBypass>
 8007e18:	f7ff fb27 	bl	800746a <LL_RCC_LSE_Enable>
 8007e1c:	e003      	b.n	8007e26 <HAL_RCC_OscConfig+0x446>
 8007e1e:	f7ff fb35 	bl	800748c <LL_RCC_LSE_Disable>
 8007e22:	f7ff fb55 	bl	80074d0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	689b      	ldr	r3, [r3, #8]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d014      	beq.n	8007e58 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e2e:	f7fa febd 	bl	8002bac <HAL_GetTick>
 8007e32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007e34:	e00a      	b.n	8007e4c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e36:	f7fa feb9 	bl	8002bac <HAL_GetTick>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e3e:	1ad3      	subs	r3, r2, r3
 8007e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d901      	bls.n	8007e4c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e136      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007e4c:	f7ff fb51 	bl	80074f2 <LL_RCC_LSE_IsReady>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d0ef      	beq.n	8007e36 <HAL_RCC_OscConfig+0x456>
 8007e56:	e013      	b.n	8007e80 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e58:	f7fa fea8 	bl	8002bac <HAL_GetTick>
 8007e5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e5e:	e00a      	b.n	8007e76 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e60:	f7fa fea4 	bl	8002bac <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d901      	bls.n	8007e76 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e121      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e76:	f7ff fb3c 	bl	80074f2 <LL_RCC_LSE_IsReady>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1ef      	bne.n	8007e60 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d02c      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d014      	beq.n	8007ebe <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e94:	f7ff fab5 	bl	8007402 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e98:	f7fa fe88 	bl	8002bac <HAL_GetTick>
 8007e9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007e9e:	e008      	b.n	8007eb2 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007ea0:	f7fa fe84 	bl	8002bac <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	d901      	bls.n	8007eb2 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007eae:	2303      	movs	r3, #3
 8007eb0:	e103      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007eb2:	f7ff fac8 	bl	8007446 <LL_RCC_HSI48_IsReady>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d0f1      	beq.n	8007ea0 <HAL_RCC_OscConfig+0x4c0>
 8007ebc:	e013      	b.n	8007ee6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ebe:	f7ff fab1 	bl	8007424 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ec2:	f7fa fe73 	bl	8002bac <HAL_GetTick>
 8007ec6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007ec8:	e008      	b.n	8007edc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007eca:	f7fa fe6f 	bl	8002bac <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	d901      	bls.n	8007edc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007ed8:	2303      	movs	r3, #3
 8007eda:	e0ee      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007edc:	f7ff fab3 	bl	8007446 <LL_RCC_HSI48_IsReady>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1f1      	bne.n	8007eca <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 80e4 	beq.w	80080b8 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ef0:	f7ff fc11 	bl	8007716 <LL_RCC_GetSysClkSource>
 8007ef4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007ef6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007efa:	68db      	ldr	r3, [r3, #12]
 8007efc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f02:	2b02      	cmp	r3, #2
 8007f04:	f040 80b4 	bne.w	8008070 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f003 0203 	and.w	r2, r3, #3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d123      	bne.n	8007f5e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d11c      	bne.n	8007f5e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d114      	bne.n	8007f5e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	d10d      	bne.n	8007f5e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d106      	bne.n	8007f5e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d05d      	beq.n	800801a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	2b0c      	cmp	r3, #12
 8007f62:	d058      	beq.n	8008016 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d001      	beq.n	8007f76 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e0a1      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f76:	f7ff fc84 	bl	8007882 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f7a:	f7fa fe17 	bl	8002bac <HAL_GetTick>
 8007f7e:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f80:	e008      	b.n	8007f94 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f82:	f7fa fe13 	bl	8002bac <HAL_GetTick>
 8007f86:	4602      	mov	r2, r0
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d901      	bls.n	8007f94 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e092      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1ef      	bne.n	8007f82 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	4b30      	ldr	r3, [pc, #192]	@ (800806c <HAL_RCC_OscConfig+0x68c>)
 8007faa:	4013      	ands	r3, r2
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007fb0:	687a      	ldr	r2, [r7, #4]
 8007fb2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007fb4:	4311      	orrs	r1, r2
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007fba:	0212      	lsls	r2, r2, #8
 8007fbc:	4311      	orrs	r1, r2
 8007fbe:	687a      	ldr	r2, [r7, #4]
 8007fc0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007fc2:	4311      	orrs	r1, r2
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007fc8:	4311      	orrs	r1, r2
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007fd8:	f7ff fc44 	bl	8007864 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fe0:	68db      	ldr	r3, [r3, #12]
 8007fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007fec:	f7fa fdde 	bl	8002bac <HAL_GetTick>
 8007ff0:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ff2:	e008      	b.n	8008006 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ff4:	f7fa fdda 	bl	8002bac <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	d901      	bls.n	8008006 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008002:	2303      	movs	r3, #3
 8008004:	e059      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008006:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d0ef      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008014:	e050      	b.n	80080b8 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e04f      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800801a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008024:	2b00      	cmp	r3, #0
 8008026:	d147      	bne.n	80080b8 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008028:	f7ff fc1c 	bl	8007864 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800802c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800803a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800803c:	f7fa fdb6 	bl	8002bac <HAL_GetTick>
 8008040:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008042:	e008      	b.n	8008056 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008044:	f7fa fdb2 	bl	8002bac <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	2b02      	cmp	r3, #2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e031      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008056:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0ef      	beq.n	8008044 <HAL_RCC_OscConfig+0x664>
 8008064:	e028      	b.n	80080b8 <HAL_RCC_OscConfig+0x6d8>
 8008066:	bf00      	nop
 8008068:	58000400 	.word	0x58000400
 800806c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	2b0c      	cmp	r3, #12
 8008074:	d01e      	beq.n	80080b4 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008076:	f7ff fc04 	bl	8007882 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800807a:	f7fa fd97 	bl	8002bac <HAL_GetTick>
 800807e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008080:	e008      	b.n	8008094 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008082:	f7fa fd93 	bl	8002bac <HAL_GetTick>
 8008086:	4602      	mov	r2, r0
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	1ad3      	subs	r3, r2, r3
 800808c:	2b02      	cmp	r3, #2
 800808e:	d901      	bls.n	8008094 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008090:	2303      	movs	r3, #3
 8008092:	e012      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008094:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ef      	bne.n	8008082 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80080a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <HAL_RCC_OscConfig+0x6e4>)
 80080ae:	4013      	ands	r3, r2
 80080b0:	60cb      	str	r3, [r1, #12]
 80080b2:	e001      	b.n	80080b8 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	e000      	b.n	80080ba <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 80080b8:	2300      	movs	r3, #0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3734      	adds	r7, #52	@ 0x34
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd90      	pop	{r4, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	eefefffc 	.word	0xeefefffc

080080c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d101      	bne.n	80080dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	e12d      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80080dc:	4b98      	ldr	r3, [pc, #608]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d91b      	bls.n	8008122 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ea:	4b95      	ldr	r3, [pc, #596]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f023 0207 	bic.w	r2, r3, #7
 80080f2:	4993      	ldr	r1, [pc, #588]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080fa:	f7fa fd57 	bl	8002bac <HAL_GetTick>
 80080fe:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008100:	e008      	b.n	8008114 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008102:	f7fa fd53 	bl	8002bac <HAL_GetTick>
 8008106:	4602      	mov	r2, r0
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	1ad3      	subs	r3, r2, r3
 800810c:	2b02      	cmp	r3, #2
 800810e:	d901      	bls.n	8008114 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008110:	2303      	movs	r3, #3
 8008112:	e111      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008114:	4b8a      	ldr	r3, [pc, #552]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f003 0307 	and.w	r3, r3, #7
 800811c:	683a      	ldr	r2, [r7, #0]
 800811e:	429a      	cmp	r2, r3
 8008120:	d1ef      	bne.n	8008102 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d016      	beq.n	800815c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff fafb 	bl	800772e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008138:	f7fa fd38 	bl	8002bac <HAL_GetTick>
 800813c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800813e:	e008      	b.n	8008152 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008140:	f7fa fd34 	bl	8002bac <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d901      	bls.n	8008152 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800814e:	2303      	movs	r3, #3
 8008150:	e0f2      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8008152:	f7ff fbe8 	bl	8007926 <LL_RCC_IsActiveFlag_HPRE>
 8008156:	4603      	mov	r3, r0
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f1      	beq.n	8008140 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0320 	and.w	r3, r3, #32
 8008164:	2b00      	cmp	r3, #0
 8008166:	d016      	beq.n	8008196 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff faf2 	bl	8007756 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008172:	f7fa fd1b 	bl	8002bac <HAL_GetTick>
 8008176:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008178:	e008      	b.n	800818c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800817a:	f7fa fd17 	bl	8002bac <HAL_GetTick>
 800817e:	4602      	mov	r2, r0
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	1ad3      	subs	r3, r2, r3
 8008184:	2b02      	cmp	r3, #2
 8008186:	d901      	bls.n	800818c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008188:	2303      	movs	r3, #3
 800818a:	e0d5      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800818c:	f7ff fbdd 	bl	800794a <LL_RCC_IsActiveFlag_C2HPRE>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d0f1      	beq.n	800817a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d016      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	699b      	ldr	r3, [r3, #24]
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7ff faeb 	bl	8007782 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081ac:	f7fa fcfe 	bl	8002bac <HAL_GetTick>
 80081b0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80081b2:	e008      	b.n	80081c6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081b4:	f7fa fcfa 	bl	8002bac <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d901      	bls.n	80081c6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e0b8      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80081c6:	f7ff fbd3 	bl	8007970 <LL_RCC_IsActiveFlag_SHDHPRE>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0f1      	beq.n	80081b4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0304 	and.w	r3, r3, #4
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d016      	beq.n	800820a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	68db      	ldr	r3, [r3, #12]
 80081e0:	4618      	mov	r0, r3
 80081e2:	f7ff fae5 	bl	80077b0 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081e6:	f7fa fce1 	bl	8002bac <HAL_GetTick>
 80081ea:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081ee:	f7fa fcdd 	bl	8002bac <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e09b      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008200:	f7ff fbc9 	bl	8007996 <LL_RCC_IsActiveFlag_PPRE1>
 8008204:	4603      	mov	r3, r0
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0f1      	beq.n	80081ee <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	2b00      	cmp	r3, #0
 8008214:	d017      	beq.n	8008246 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	691b      	ldr	r3, [r3, #16]
 800821a:	00db      	lsls	r3, r3, #3
 800821c:	4618      	mov	r0, r3
 800821e:	f7ff fadb 	bl	80077d8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008222:	f7fa fcc3 	bl	8002bac <HAL_GetTick>
 8008226:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008228:	e008      	b.n	800823c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800822a:	f7fa fcbf 	bl	8002bac <HAL_GetTick>
 800822e:	4602      	mov	r2, r0
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	1ad3      	subs	r3, r2, r3
 8008234:	2b02      	cmp	r3, #2
 8008236:	d901      	bls.n	800823c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e07d      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800823c:	f7ff fbbd 	bl	80079ba <LL_RCC_IsActiveFlag_PPRE2>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0f1      	beq.n	800822a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d043      	beq.n	80082da <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	685b      	ldr	r3, [r3, #4]
 8008256:	2b02      	cmp	r3, #2
 8008258:	d106      	bne.n	8008268 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800825a:	f7ff f87b 	bl	8007354 <LL_RCC_HSE_IsReady>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11e      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e067      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2b03      	cmp	r3, #3
 800826e:	d106      	bne.n	800827e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008270:	f7ff fb16 	bl	80078a0 <LL_RCC_PLL_IsReady>
 8008274:	4603      	mov	r3, r0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d113      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800827a:	2301      	movs	r3, #1
 800827c:	e05c      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8008286:	f7ff f9e3 	bl	8007650 <LL_RCC_MSI_IsReady>
 800828a:	4603      	mov	r3, r0
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e051      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8008294:	f7ff f88e 	bl	80073b4 <LL_RCC_HSI_IsReady>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d101      	bne.n	80082a2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e04a      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	4618      	mov	r0, r3
 80082a8:	f7ff fa21 	bl	80076ee <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ac:	f7fa fc7e 	bl	8002bac <HAL_GetTick>
 80082b0:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082b2:	e00a      	b.n	80082ca <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082b4:	f7fa fc7a 	bl	8002bac <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d901      	bls.n	80082ca <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80082c6:	2303      	movs	r3, #3
 80082c8:	e036      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082ca:	f7ff fa24 	bl	8007716 <LL_RCC_GetSysClkSource>
 80082ce:	4602      	mov	r2, r0
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d1ec      	bne.n	80082b4 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082da:	4b19      	ldr	r3, [pc, #100]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0307 	and.w	r3, r3, #7
 80082e2:	683a      	ldr	r2, [r7, #0]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d21b      	bcs.n	8008320 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082e8:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f023 0207 	bic.w	r2, r3, #7
 80082f0:	4913      	ldr	r1, [pc, #76]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f8:	f7fa fc58 	bl	8002bac <HAL_GetTick>
 80082fc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082fe:	e008      	b.n	8008312 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008300:	f7fa fc54 	bl	8002bac <HAL_GetTick>
 8008304:	4602      	mov	r2, r0
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	1ad3      	subs	r3, r2, r3
 800830a:	2b02      	cmp	r3, #2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e012      	b.n	8008338 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008312:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <HAL_RCC_ClockConfig+0x278>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0307 	and.w	r3, r3, #7
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d1ef      	bne.n	8008300 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008320:	f000 f87e 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8008324:	4603      	mov	r3, r0
 8008326:	4a07      	ldr	r2, [pc, #28]	@ (8008344 <HAL_RCC_ClockConfig+0x27c>)
 8008328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800832a:	f7fa fc4b 	bl	8002bc4 <HAL_GetTickPrio>
 800832e:	4603      	mov	r3, r0
 8008330:	4618      	mov	r0, r3
 8008332:	f7fa fbed 	bl	8002b10 <HAL_InitTick>
 8008336:	4603      	mov	r3, r0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	58004000 	.word	0x58004000
 8008344:	20000024 	.word	0x20000024

08008348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008348:	b590      	push	{r4, r7, lr}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800834e:	f7ff f9e2 	bl	8007716 <LL_RCC_GetSysClkSource>
 8008352:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10a      	bne.n	8008370 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800835a:	f7ff f99e 	bl	800769a <LL_RCC_MSI_GetRange>
 800835e:	4603      	mov	r3, r0
 8008360:	091b      	lsrs	r3, r3, #4
 8008362:	f003 030f 	and.w	r3, r3, #15
 8008366:	4a2b      	ldr	r2, [pc, #172]	@ (8008414 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e04b      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2b04      	cmp	r3, #4
 8008374:	d102      	bne.n	800837c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008376:	4b28      	ldr	r3, [pc, #160]	@ (8008418 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008378:	60fb      	str	r3, [r7, #12]
 800837a:	e045      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2b08      	cmp	r3, #8
 8008380:	d10a      	bne.n	8008398 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008382:	f7fe ffb7 	bl	80072f4 <LL_RCC_HSE_IsEnabledDiv2>
 8008386:	4603      	mov	r3, r0
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800838c:	4b22      	ldr	r3, [pc, #136]	@ (8008418 <HAL_RCC_GetSysClockFreq+0xd0>)
 800838e:	60fb      	str	r3, [r7, #12]
 8008390:	e03a      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8008392:	4b22      	ldr	r3, [pc, #136]	@ (800841c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e037      	b.n	8008408 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008398:	f7ff fab9 	bl	800790e <LL_RCC_PLL_GetMainSource>
 800839c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	2b02      	cmp	r3, #2
 80083a2:	d003      	beq.n	80083ac <HAL_RCC_GetSysClockFreq+0x64>
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d003      	beq.n	80083b2 <HAL_RCC_GetSysClockFreq+0x6a>
 80083aa:	e00d      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80083ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008418 <HAL_RCC_GetSysClockFreq+0xd0>)
 80083ae:	60bb      	str	r3, [r7, #8]
        break;
 80083b0:	e015      	b.n	80083de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80083b2:	f7fe ff9f 	bl	80072f4 <LL_RCC_HSE_IsEnabledDiv2>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d102      	bne.n	80083c2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80083bc:	4b16      	ldr	r3, [pc, #88]	@ (8008418 <HAL_RCC_GetSysClockFreq+0xd0>)
 80083be:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80083c0:	e00d      	b.n	80083de <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 80083c2:	4b16      	ldr	r3, [pc, #88]	@ (800841c <HAL_RCC_GetSysClockFreq+0xd4>)
 80083c4:	60bb      	str	r3, [r7, #8]
        break;
 80083c6:	e00a      	b.n	80083de <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80083c8:	f7ff f967 	bl	800769a <LL_RCC_MSI_GetRange>
 80083cc:	4603      	mov	r3, r0
 80083ce:	091b      	lsrs	r3, r3, #4
 80083d0:	f003 030f 	and.w	r3, r3, #15
 80083d4:	4a0f      	ldr	r2, [pc, #60]	@ (8008414 <HAL_RCC_GetSysClockFreq+0xcc>)
 80083d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083da:	60bb      	str	r3, [r7, #8]
        break;
 80083dc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80083de:	f7ff fa71 	bl	80078c4 <LL_RCC_PLL_GetN>
 80083e2:	4602      	mov	r2, r0
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	fb03 f402 	mul.w	r4, r3, r2
 80083ea:	f7ff fa84 	bl	80078f6 <LL_RCC_PLL_GetDivider>
 80083ee:	4603      	mov	r3, r0
 80083f0:	091b      	lsrs	r3, r3, #4
 80083f2:	3301      	adds	r3, #1
 80083f4:	fbb4 f4f3 	udiv	r4, r4, r3
 80083f8:	f7ff fa71 	bl	80078de <LL_RCC_PLL_GetR>
 80083fc:	4603      	mov	r3, r0
 80083fe:	0f5b      	lsrs	r3, r3, #29
 8008400:	3301      	adds	r3, #1
 8008402:	fbb4 f3f3 	udiv	r3, r4, r3
 8008406:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008408:	68fb      	ldr	r3, [r7, #12]
}
 800840a:	4618      	mov	r0, r3
 800840c:	3714      	adds	r7, #20
 800840e:	46bd      	mov	sp, r7
 8008410:	bd90      	pop	{r4, r7, pc}
 8008412:	bf00      	nop
 8008414:	08012f0c 	.word	0x08012f0c
 8008418:	00f42400 	.word	0x00f42400
 800841c:	01e84800 	.word	0x01e84800

08008420 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008420:	b598      	push	{r3, r4, r7, lr}
 8008422:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008424:	f7ff ff90 	bl	8008348 <HAL_RCC_GetSysClockFreq>
 8008428:	4604      	mov	r4, r0
 800842a:	f7ff f9e9 	bl	8007800 <LL_RCC_GetAHBPrescaler>
 800842e:	4603      	mov	r3, r0
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	f003 030f 	and.w	r3, r3, #15
 8008436:	4a03      	ldr	r2, [pc, #12]	@ (8008444 <HAL_RCC_GetHCLKFreq+0x24>)
 8008438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800843c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008440:	4618      	mov	r0, r3
 8008442:	bd98      	pop	{r3, r4, r7, pc}
 8008444:	08012eac 	.word	0x08012eac

08008448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008448:	b598      	push	{r3, r4, r7, lr}
 800844a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800844c:	f7ff ffe8 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 8008450:	4604      	mov	r4, r0
 8008452:	f7ff f9ef 	bl	8007834 <LL_RCC_GetAPB1Prescaler>
 8008456:	4603      	mov	r3, r0
 8008458:	0a1b      	lsrs	r3, r3, #8
 800845a:	f003 0307 	and.w	r3, r3, #7
 800845e:	4a04      	ldr	r2, [pc, #16]	@ (8008470 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008464:	f003 031f 	and.w	r3, r3, #31
 8008468:	fa24 f303 	lsr.w	r3, r4, r3
}
 800846c:	4618      	mov	r0, r3
 800846e:	bd98      	pop	{r3, r4, r7, pc}
 8008470:	08012eec 	.word	0x08012eec

08008474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008474:	b598      	push	{r3, r4, r7, lr}
 8008476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008478:	f7ff ffd2 	bl	8008420 <HAL_RCC_GetHCLKFreq>
 800847c:	4604      	mov	r4, r0
 800847e:	f7ff f9e5 	bl	800784c <LL_RCC_GetAPB2Prescaler>
 8008482:	4603      	mov	r3, r0
 8008484:	0adb      	lsrs	r3, r3, #11
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	4a04      	ldr	r2, [pc, #16]	@ (800849c <HAL_RCC_GetPCLK2Freq+0x28>)
 800848c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008490:	f003 031f 	and.w	r3, r3, #31
 8008494:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008498:	4618      	mov	r0, r3
 800849a:	bd98      	pop	{r3, r4, r7, pc}
 800849c:	08012eec 	.word	0x08012eec

080084a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80084a0:	b590      	push	{r4, r7, lr}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2bb0      	cmp	r3, #176	@ 0xb0
 80084ac:	d903      	bls.n	80084b6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80084ae:	4b15      	ldr	r3, [pc, #84]	@ (8008504 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80084b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e007      	b.n	80084c6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	f003 030f 	and.w	r3, r3, #15
 80084be:	4a11      	ldr	r2, [pc, #68]	@ (8008504 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80084c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80084c6:	f7ff f9a7 	bl	8007818 <LL_RCC_GetAHB4Prescaler>
 80084ca:	4603      	mov	r3, r0
 80084cc:	091b      	lsrs	r3, r3, #4
 80084ce:	f003 030f 	and.w	r3, r3, #15
 80084d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008508 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80084d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	fbb2 f3f3 	udiv	r3, r2, r3
 80084de:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	4a0a      	ldr	r2, [pc, #40]	@ (800850c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80084e4:	fba2 2303 	umull	r2, r3, r2, r3
 80084e8:	0c9c      	lsrs	r4, r3, #18
 80084ea:	f7fe fee5 	bl	80072b8 <HAL_PWREx_GetVoltageRange>
 80084ee:	4603      	mov	r3, r0
 80084f0:	4619      	mov	r1, r3
 80084f2:	4620      	mov	r0, r4
 80084f4:	f000 f80c 	bl	8008510 <RCC_SetFlashLatency>
 80084f8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd90      	pop	{r4, r7, pc}
 8008502:	bf00      	nop
 8008504:	08012f0c 	.word	0x08012f0c
 8008508:	08012eac 	.word	0x08012eac
 800850c:	431bde83 	.word	0x431bde83

08008510 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008510:	b590      	push	{r4, r7, lr}
 8008512:	b093      	sub	sp, #76	@ 0x4c
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800851a:	4b37      	ldr	r3, [pc, #220]	@ (80085f8 <RCC_SetFlashLatency+0xe8>)
 800851c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8008520:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008522:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008526:	4a35      	ldr	r2, [pc, #212]	@ (80085fc <RCC_SetFlashLatency+0xec>)
 8008528:	f107 031c 	add.w	r3, r7, #28
 800852c:	ca07      	ldmia	r2, {r0, r1, r2}
 800852e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008532:	4b33      	ldr	r3, [pc, #204]	@ (8008600 <RCC_SetFlashLatency+0xf0>)
 8008534:	f107 040c 	add.w	r4, r7, #12
 8008538:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800853a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800853e:	2300      	movs	r3, #0
 8008540:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008548:	d11a      	bne.n	8008580 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800854a:	2300      	movs	r3, #0
 800854c:	643b      	str	r3, [r7, #64]	@ 0x40
 800854e:	e013      	b.n	8008578 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8008550:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	3348      	adds	r3, #72	@ 0x48
 8008556:	443b      	add	r3, r7
 8008558:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	429a      	cmp	r2, r3
 8008560:	d807      	bhi.n	8008572 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	3348      	adds	r3, #72	@ 0x48
 8008568:	443b      	add	r3, r7
 800856a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800856e:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008570:	e020      	b.n	80085b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8008572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008574:	3301      	adds	r3, #1
 8008576:	643b      	str	r3, [r7, #64]	@ 0x40
 8008578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800857a:	2b03      	cmp	r3, #3
 800857c:	d9e8      	bls.n	8008550 <RCC_SetFlashLatency+0x40>
 800857e:	e019      	b.n	80085b4 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008580:	2300      	movs	r3, #0
 8008582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008584:	e013      	b.n	80085ae <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8008586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	3348      	adds	r3, #72	@ 0x48
 800858c:	443b      	add	r3, r7
 800858e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	429a      	cmp	r2, r3
 8008596:	d807      	bhi.n	80085a8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	3348      	adds	r3, #72	@ 0x48
 800859e:	443b      	add	r3, r7
 80085a0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80085a4:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 80085a6:	e005      	b.n	80085b4 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80085a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085aa:	3301      	adds	r3, #1
 80085ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80085ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d9e8      	bls.n	8008586 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 80085b4:	4b13      	ldr	r3, [pc, #76]	@ (8008604 <RCC_SetFlashLatency+0xf4>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f023 0207 	bic.w	r2, r3, #7
 80085bc:	4911      	ldr	r1, [pc, #68]	@ (8008604 <RCC_SetFlashLatency+0xf4>)
 80085be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80085c0:	4313      	orrs	r3, r2
 80085c2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085c4:	f7fa faf2 	bl	8002bac <HAL_GetTick>
 80085c8:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80085ca:	e008      	b.n	80085de <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80085cc:	f7fa faee 	bl	8002bac <HAL_GetTick>
 80085d0:	4602      	mov	r2, r0
 80085d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d4:	1ad3      	subs	r3, r2, r3
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d901      	bls.n	80085de <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e007      	b.n	80085ee <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80085de:	4b09      	ldr	r3, [pc, #36]	@ (8008604 <RCC_SetFlashLatency+0xf4>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0307 	and.w	r3, r3, #7
 80085e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1ef      	bne.n	80085cc <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	374c      	adds	r7, #76	@ 0x4c
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd90      	pop	{r4, r7, pc}
 80085f6:	bf00      	nop
 80085f8:	08012cac 	.word	0x08012cac
 80085fc:	08012cbc 	.word	0x08012cbc
 8008600:	08012cc8 	.word	0x08012cc8
 8008604:	58004000 	.word	0x58004000

08008608 <LL_RCC_LSE_IsEnabled>:
{
 8008608:	b480      	push	{r7}
 800860a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800860c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008610:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008614:	f003 0301 	and.w	r3, r3, #1
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <LL_RCC_LSE_IsEnabled+0x18>
 800861c:	2301      	movs	r3, #1
 800861e:	e000      	b.n	8008622 <LL_RCC_LSE_IsEnabled+0x1a>
 8008620:	2300      	movs	r3, #0
}
 8008622:	4618      	mov	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <LL_RCC_LSE_IsReady>:
{
 800862c:	b480      	push	{r7}
 800862e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008638:	f003 0302 	and.w	r3, r3, #2
 800863c:	2b02      	cmp	r3, #2
 800863e:	d101      	bne.n	8008644 <LL_RCC_LSE_IsReady+0x18>
 8008640:	2301      	movs	r3, #1
 8008642:	e000      	b.n	8008646 <LL_RCC_LSE_IsReady+0x1a>
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <LL_RCC_MSI_EnablePLLMode>:
{
 8008650:	b480      	push	{r7}
 8008652:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8008654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800865e:	f043 0304 	orr.w	r3, r3, #4
 8008662:	6013      	str	r3, [r2, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <LL_RCC_SetRFWKPClockSource>:
{
 800866e:	b480      	push	{r7}
 8008670:	b083      	sub	sp, #12
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8008676:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800867a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800867e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008682:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800868e:	bf00      	nop
 8008690:	370c      	adds	r7, #12
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr

0800869a <LL_RCC_SetSMPSClockSource>:
{
 800869a:	b480      	push	{r7}
 800869c:	b083      	sub	sp, #12
 800869e:	af00      	add	r7, sp, #0
 80086a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80086a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a8:	f023 0203 	bic.w	r2, r3, #3
 80086ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80086b6:	bf00      	nop
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <LL_RCC_SetSMPSPrescaler>:
{
 80086c2:	b480      	push	{r7}
 80086c4:	b083      	sub	sp, #12
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80086ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80086d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	4313      	orrs	r3, r2
 80086dc:	624b      	str	r3, [r1, #36]	@ 0x24
}
 80086de:	bf00      	nop
 80086e0:	370c      	adds	r7, #12
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <LL_RCC_SetUSARTClockSource>:
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80086f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086fa:	f023 0203 	bic.w	r2, r3, #3
 80086fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4313      	orrs	r3, r2
 8008706:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800870a:	bf00      	nop
 800870c:	370c      	adds	r7, #12
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr

08008716 <LL_RCC_SetLPUARTClockSource>:
{
 8008716:	b480      	push	{r7}
 8008718:	b083      	sub	sp, #12
 800871a:	af00      	add	r7, sp, #0
 800871c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800871e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008726:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800872a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008736:	bf00      	nop
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <LL_RCC_SetI2CClockSource>:
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800874a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800874e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	091b      	lsrs	r3, r3, #4
 8008756:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800875a:	43db      	mvns	r3, r3
 800875c:	401a      	ands	r2, r3
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	011b      	lsls	r3, r3, #4
 8008762:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8008766:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008770:	bf00      	nop
 8008772:	370c      	adds	r7, #12
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_RCC_SetLPTIMClockSource>:
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8008784:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008788:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	0c1b      	lsrs	r3, r3, #16
 8008790:	041b      	lsls	r3, r3, #16
 8008792:	43db      	mvns	r3, r3
 8008794:	401a      	ands	r2, r3
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	041b      	lsls	r3, r3, #16
 800879a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800879e:	4313      	orrs	r3, r2
 80087a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <LL_RCC_SetSAIClockSource>:
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80087b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087c0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80087c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <LL_RCC_SetRNGClockSource>:
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80087e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087ec:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80087f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	4313      	orrs	r3, r2
 80087f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <LL_RCC_SetCLK48ClockSource>:
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008810:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008818:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800881c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	4313      	orrs	r3, r2
 8008824:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <LL_RCC_SetUSBClockSource>:
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b082      	sub	sp, #8
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f7ff ffe3 	bl	8008808 <LL_RCC_SetCLK48ClockSource>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <LL_RCC_SetADCClockSource>:
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008852:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800885a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800885e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4313      	orrs	r3, r2
 8008866:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <LL_RCC_SetRTCClockSource>:
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800887e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008886:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800888a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4313      	orrs	r3, r2
 8008892:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <LL_RCC_GetRTCClockSource>:
{
 80088a2:	b480      	push	{r7}
 80088a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80088a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <LL_RCC_ForceBackupDomainReset>:
{
 80088bc:	b480      	push	{r7}
 80088be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80088c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80088d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80088d4:	bf00      	nop
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <LL_RCC_ReleaseBackupDomainReset>:
{
 80088de:	b480      	push	{r7}
 80088e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80088e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80088f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80088f6:	bf00      	nop
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <LL_RCC_PLLSAI1_Enable>:
{
 8008900:	b480      	push	{r7}
 8008902:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008904:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800890e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008912:	6013      	str	r3, [r2, #0]
}
 8008914:	bf00      	nop
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr

0800891e <LL_RCC_PLLSAI1_Disable>:
{
 800891e:	b480      	push	{r7}
 8008920:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008922:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800892c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008930:	6013      	str	r3, [r2, #0]
}
 8008932:	bf00      	nop
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <LL_RCC_PLLSAI1_IsReady>:
{
 800893c:	b480      	push	{r7}
 800893e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800894a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800894e:	d101      	bne.n	8008954 <LL_RCC_PLLSAI1_IsReady+0x18>
 8008950:	2301      	movs	r3, #1
 8008952:	e000      	b.n	8008956 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b088      	sub	sp, #32
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008968:	2300      	movs	r3, #0
 800896a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800896c:	2300      	movs	r3, #0
 800896e:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d034      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008980:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008984:	d021      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008986:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800898a:	d81b      	bhi.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800898c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008990:	d01d      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008992:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008996:	d815      	bhi.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800899c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089a0:	d110      	bne.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 80089a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089a6:	68db      	ldr	r3, [r3, #12]
 80089a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089b0:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 80089b2:	e00d      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3304      	adds	r3, #4
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f94d 	bl	8008c58 <RCCEx_PLLSAI1_ConfigNP>
 80089be:	4603      	mov	r3, r0
 80089c0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80089c2:	e005      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	77fb      	strb	r3, [r7, #31]
        break;
 80089c8:	e002      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80089ca:	bf00      	nop
 80089cc:	e000      	b.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 80089ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089d0:	7ffb      	ldrb	r3, [r7, #31]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d105      	bne.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089da:	4618      	mov	r0, r3
 80089dc:	f7ff fee8 	bl	80087b0 <LL_RCC_SetSAIClockSource>
 80089e0:	e001      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e2:	7ffb      	ldrb	r3, [r7, #31]
 80089e4:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d046      	beq.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 80089f2:	f7ff ff56 	bl	80088a2 <LL_RCC_GetRTCClockSource>
 80089f6:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d03c      	beq.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008a02:	f7fe fc49 	bl	8007298 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008a06:	69bb      	ldr	r3, [r7, #24]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d105      	bne.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7ff ff30 	bl	8008876 <LL_RCC_SetRTCClockSource>
 8008a16:	e02e      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008a18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a20:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008a22:	f7ff ff4b 	bl	80088bc <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008a26:	f7ff ff5a 	bl	80088de <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008a38:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008a42:	f7ff fde1 	bl	8008608 <LL_RCC_LSE_IsEnabled>
 8008a46:	4603      	mov	r3, r0
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d114      	bne.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008a4c:	f7fa f8ae 	bl	8002bac <HAL_GetTick>
 8008a50:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008a52:	e00b      	b.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a54:	f7fa f8aa 	bl	8002bac <HAL_GetTick>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	693b      	ldr	r3, [r7, #16]
 8008a5c:	1ad3      	subs	r3, r2, r3
 8008a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d902      	bls.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008a66:	2303      	movs	r3, #3
 8008a68:	77fb      	strb	r3, [r7, #31]
              break;
 8008a6a:	e004      	b.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008a6c:	f7ff fdde 	bl	800862c <LL_RCC_LSE_IsReady>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b01      	cmp	r3, #1
 8008a74:	d1ee      	bne.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008a76:	7ffb      	ldrb	r3, [r7, #31]
 8008a78:	77bb      	strb	r3, [r7, #30]
 8008a7a:	e001      	b.n	8008a80 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a7c:	7ffb      	ldrb	r3, [r7, #31]
 8008a7e:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0301 	and.w	r3, r3, #1
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d004      	beq.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	699b      	ldr	r3, [r3, #24]
 8008a90:	4618      	mov	r0, r3
 8008a92:	f7ff fe2a 	bl	80086ea <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d004      	beq.n	8008aac <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	69db      	ldr	r3, [r3, #28]
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7ff fe35 	bl	8008716 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0310 	and.w	r3, r3, #16
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d004      	beq.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7ff fe5d 	bl	800877c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d004      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fe52 	bl	800877c <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f003 0304 	and.w	r3, r3, #4
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d004      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff fe2a 	bl	8008742 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 0308 	and.w	r3, r3, #8
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d004      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008afe:	4618      	mov	r0, r3
 8008b00:	f7ff fe1f 	bl	8008742 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d022      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7ff fe8d 	bl	8008834 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008b22:	d107      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008b24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b32:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008b38:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b3c:	d10b      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3304      	adds	r3, #4
 8008b42:	4618      	mov	r0, r3
 8008b44:	f000 f8e3 	bl	8008d0e <RCCEx_PLLSAI1_ConfigNQ>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008b4c:	7ffb      	ldrb	r3, [r7, #31]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008b52:	7ffb      	ldrb	r3, [r7, #31]
 8008b54:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d02b      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b6a:	d008      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b74:	d003      	beq.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7ff fe2a 	bl	80087dc <LL_RCC_SetRNGClockSource>
 8008b88:	e00a      	b.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b92:	60fb      	str	r3, [r7, #12]
 8008b94:	2000      	movs	r0, #0
 8008b96:	f7ff fe21 	bl	80087dc <LL_RCC_SetRNGClockSource>
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f7ff fe34 	bl	8008808 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008ba8:	d107      	bne.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008bb4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008bb8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d022      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fe3d 	bl	800884a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008bd8:	d107      	bne.n	8008bea <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008bda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008be8:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008bf2:	d10b      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	3304      	adds	r3, #4
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	f000 f8e3 	bl	8008dc4 <RCCEx_PLLSAI1_ConfigNR>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008c02:	7ffb      	ldrb	r3, [r7, #31]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008c08:	7ffb      	ldrb	r3, [r7, #31]
 8008c0a:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d004      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7ff fd26 	bl	800866e <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7ff fd45 	bl	80086c2 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7ff fd2c 	bl	800869a <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008c42:	7fbb      	ldrb	r3, [r7, #30]
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3720      	adds	r7, #32
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008c50:	f7ff fcfe 	bl	8008650 <LL_RCC_MSI_EnablePLLMode>
}
 8008c54:	bf00      	nop
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c60:	2300      	movs	r3, #0
 8008c62:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008c64:	f7ff fe5b 	bl	800891e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c68:	f7f9 ffa0 	bl	8002bac <HAL_GetTick>
 8008c6c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008c6e:	e009      	b.n	8008c84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c70:	f7f9 ff9c 	bl	8002bac <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d902      	bls.n	8008c84 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e004      	b.n	8008c8e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008c84:	f7ff fe5a 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008c8e:	7bfb      	ldrb	r3, [r7, #15]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d137      	bne.n	8008d04 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c98:	691b      	ldr	r3, [r3, #16]
 8008c9a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008cac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008cc2:	f7ff fe1d 	bl	8008900 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc6:	f7f9 ff71 	bl	8002bac <HAL_GetTick>
 8008cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ccc:	e009      	b.n	8008ce2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008cce:	f7f9 ff6d 	bl	8002bac <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d902      	bls.n	8008ce2 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	73fb      	strb	r3, [r7, #15]
        break;
 8008ce0:	e004      	b.n	8008cec <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ce2:	f7ff fe2b 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d1f0      	bne.n	8008cce <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d108      	bne.n	8008d04 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008cf2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	691b      	ldr	r3, [r3, #16]
 8008cfc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d00:	4313      	orrs	r3, r2
 8008d02:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d06:	4618      	mov	r0, r3
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b084      	sub	sp, #16
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008d1a:	f7ff fe00 	bl	800891e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d1e:	f7f9 ff45 	bl	8002bac <HAL_GetTick>
 8008d22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d24:	e009      	b.n	8008d3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d26:	f7f9 ff41 	bl	8002bac <HAL_GetTick>
 8008d2a:	4602      	mov	r2, r0
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d902      	bls.n	8008d3a <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008d34:	2303      	movs	r3, #3
 8008d36:	73fb      	strb	r3, [r7, #15]
      break;
 8008d38:	e004      	b.n	8008d44 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d3a:	f7ff fdff 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d1f0      	bne.n	8008d26 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008d44:	7bfb      	ldrb	r3, [r7, #15]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d137      	bne.n	8008dba <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d4e:	691b      	ldr	r3, [r3, #16]
 8008d50:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
 8008d5a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d74:	4313      	orrs	r3, r2
 8008d76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008d78:	f7ff fdc2 	bl	8008900 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d7c:	f7f9 ff16 	bl	8002bac <HAL_GetTick>
 8008d80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d82:	e009      	b.n	8008d98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d84:	f7f9 ff12 	bl	8002bac <HAL_GetTick>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	1ad3      	subs	r3, r2, r3
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d902      	bls.n	8008d98 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008d92:	2303      	movs	r3, #3
 8008d94:	73fb      	strb	r3, [r7, #15]
        break;
 8008d96:	e004      	b.n	8008da2 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d98:	f7ff fdd0 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d1f0      	bne.n	8008d84 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d108      	bne.n	8008dba <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dac:	691a      	ldr	r2, [r3, #16]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
 8008db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008db6:	4313      	orrs	r3, r2
 8008db8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3710      	adds	r7, #16
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}

08008dc4 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008dd0:	f7ff fda5 	bl	800891e <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008dd4:	f7f9 feea 	bl	8002bac <HAL_GetTick>
 8008dd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008dda:	e009      	b.n	8008df0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ddc:	f7f9 fee6 	bl	8002bac <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d902      	bls.n	8008df0 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	73fb      	strb	r3, [r7, #15]
      break;
 8008dee:	e004      	b.n	8008dfa <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008df0:	f7ff fda4 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008df4:	4603      	mov	r3, r0
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d1f0      	bne.n	8008ddc <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008dfa:	7bfb      	ldrb	r3, [r7, #15]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d137      	bne.n	8008e70 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	021b      	lsls	r3, r3, #8
 8008e10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e14:	4313      	orrs	r3, r2
 8008e16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008e2e:	f7ff fd67 	bl	8008900 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008e32:	f7f9 febb 	bl	8002bac <HAL_GetTick>
 8008e36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e38:	e009      	b.n	8008e4e <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e3a:	f7f9 feb7 	bl	8002bac <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b02      	cmp	r3, #2
 8008e46:	d902      	bls.n	8008e4e <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	73fb      	strb	r3, [r7, #15]
        break;
 8008e4c:	e004      	b.n	8008e58 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008e4e:	f7ff fd75 	bl	800893c <LL_RCC_PLLSAI1_IsReady>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d1f0      	bne.n	8008e3a <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008e58:	7bfb      	ldrb	r3, [r7, #15]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d108      	bne.n	8008e70 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008e62:	691a      	ldr	r2, [r3, #16]
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3710      	adds	r7, #16
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd80      	pop	{r7, pc}
	...

08008e7c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e09f      	b.n	8008fce <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d106      	bne.n	8008ea8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f7f9 fc24 	bl	80026f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008eb0:	4b49      	ldr	r3, [pc, #292]	@ (8008fd8 <HAL_RTC_Init+0x15c>)
 8008eb2:	68db      	ldr	r3, [r3, #12]
 8008eb4:	f003 0310 	and.w	r3, r3, #16
 8008eb8:	2b10      	cmp	r3, #16
 8008eba:	d07e      	beq.n	8008fba <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	22ca      	movs	r2, #202	@ 0xca
 8008ec2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2253      	movs	r2, #83	@ 0x53
 8008eca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f8ab 	bl	8009028 <RTC_EnterInitMode>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00a      	beq.n	8008eee <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	22ff      	movs	r2, #255	@ 0xff
 8008ede:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2204      	movs	r2, #4
 8008ee4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008ee8:	2301      	movs	r3, #1
 8008eea:	73fb      	strb	r3, [r7, #15]
 8008eec:	e067      	b.n	8008fbe <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	687a      	ldr	r2, [r7, #4]
 8008ef6:	6812      	ldr	r2, [r2, #0]
 8008ef8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008efc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008f00:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	6899      	ldr	r1, [r3, #8]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	685a      	ldr	r2, [r3, #4]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	431a      	orrs	r2, r3
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	68d2      	ldr	r2, [r2, #12]
 8008f28:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	6919      	ldr	r1, [r3, #16]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	689b      	ldr	r3, [r3, #8]
 8008f34:	041a      	lsls	r2, r3, #16
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	430a      	orrs	r2, r1
 8008f3c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68da      	ldr	r2, [r3, #12]
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f4c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f022 0203 	bic.w	r2, r2, #3
 8008f5c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	69da      	ldr	r2, [r3, #28]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	695b      	ldr	r3, [r3, #20]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	f003 0320 	and.w	r3, r3, #32
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d113      	bne.n	8008fac <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f829 	bl	8008fdc <HAL_RTC_WaitForSynchro>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00d      	beq.n	8008fac <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	22ff      	movs	r2, #255	@ 0xff
 8008f96:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2204      	movs	r2, #4
 8008f9c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	e010      	b.n	8008fce <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	22ff      	movs	r2, #255	@ 0xff
 8008fb2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
 8008fb8:	e001      	b.n	8008fbe <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008fba:	2300      	movs	r3, #0
 8008fbc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d103      	bne.n	8008fcc <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3710      	adds	r7, #16
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	40002800 	.word	0x40002800

08008fdc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	68da      	ldr	r2, [r3, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008ff2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008ff4:	f7f9 fdda 	bl	8002bac <HAL_GetTick>
 8008ff8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ffa:	e009      	b.n	8009010 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ffc:	f7f9 fdd6 	bl	8002bac <HAL_GetTick>
 8009000:	4602      	mov	r2, r0
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	1ad3      	subs	r3, r2, r3
 8009006:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800900a:	d901      	bls.n	8009010 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800900c:	2303      	movs	r3, #3
 800900e:	e007      	b.n	8009020 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0320 	and.w	r3, r3, #32
 800901a:	2b00      	cmp	r3, #0
 800901c:	d0ee      	beq.n	8008ffc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800901e:	2300      	movs	r3, #0
}
 8009020:	4618      	mov	r0, r3
 8009022:	3710      	adds	r7, #16
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b084      	sub	sp, #16
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68db      	ldr	r3, [r3, #12]
 8009036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	d119      	bne.n	8009072 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009046:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8009048:	f7f9 fdb0 	bl	8002bac <HAL_GetTick>
 800904c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800904e:	e009      	b.n	8009064 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009050:	f7f9 fdac 	bl	8002bac <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800905e:	d901      	bls.n	8009064 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8009060:	2303      	movs	r3, #3
 8009062:	e007      	b.n	8009074 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0ee      	beq.n	8009050 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3710      	adds	r7, #16
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <LL_RCC_GetUSARTClockSource>:
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8009084:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009088:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4013      	ands	r3, r2
}
 8009090:	4618      	mov	r0, r3
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <LL_RCC_GetLPUARTClockSource>:
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80090a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090a8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4013      	ands	r3, r2
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d101      	bne.n	80090ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090ca:	2301      	movs	r3, #1
 80090cc:	e042      	b.n	8009154 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7f9 fb33 	bl	800274c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2224      	movs	r2, #36	@ 0x24
 80090ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f022 0201 	bic.w	r2, r2, #1
 80090fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fd94 	bl	8009c34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 fb69 	bl	80097e4 <UART_SetConfig>
 8009112:	4603      	mov	r3, r0
 8009114:	2b01      	cmp	r3, #1
 8009116:	d101      	bne.n	800911c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	e01b      	b.n	8009154 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800912a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800913a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0201 	orr.w	r2, r2, #1
 800914a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fe13 	bl	8009d78 <UART_CheckIdleState>
 8009152:	4603      	mov	r3, r0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b0ba      	sub	sp, #232	@ 0xe8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	69db      	ldr	r3, [r3, #28]
 800916a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009182:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009186:	f640 030f 	movw	r3, #2063	@ 0x80f
 800918a:	4013      	ands	r3, r2
 800918c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009190:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009194:	2b00      	cmp	r3, #0
 8009196:	d11b      	bne.n	80091d0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800919c:	f003 0320 	and.w	r3, r3, #32
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d015      	beq.n	80091d0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80091a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091a8:	f003 0320 	and.w	r3, r3, #32
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d105      	bne.n	80091bc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80091b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d009      	beq.n	80091d0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 82e3 	beq.w	800978c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	4798      	blx	r3
      }
      return;
 80091ce:	e2dd      	b.n	800978c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80091d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 8123 	beq.w	8009420 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80091da:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80091de:	4b8d      	ldr	r3, [pc, #564]	@ (8009414 <HAL_UART_IRQHandler+0x2b8>)
 80091e0:	4013      	ands	r3, r2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80091e6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80091ea:	4b8b      	ldr	r3, [pc, #556]	@ (8009418 <HAL_UART_IRQHandler+0x2bc>)
 80091ec:	4013      	ands	r3, r2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f000 8116 	beq.w	8009420 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80091f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d011      	beq.n	8009224 <HAL_UART_IRQHandler+0xc8>
 8009200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009208:	2b00      	cmp	r3, #0
 800920a:	d00b      	beq.n	8009224 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2201      	movs	r2, #1
 8009212:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800921a:	f043 0201 	orr.w	r2, r3, #1
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009228:	f003 0302 	and.w	r3, r3, #2
 800922c:	2b00      	cmp	r3, #0
 800922e:	d011      	beq.n	8009254 <HAL_UART_IRQHandler+0xf8>
 8009230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2202      	movs	r2, #2
 8009242:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924a:	f043 0204 	orr.w	r2, r3, #4
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d011      	beq.n	8009284 <HAL_UART_IRQHandler+0x128>
 8009260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2204      	movs	r2, #4
 8009272:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800927a:	f043 0202 	orr.w	r2, r3, #2
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009288:	f003 0308 	and.w	r3, r3, #8
 800928c:	2b00      	cmp	r3, #0
 800928e:	d017      	beq.n	80092c0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009294:	f003 0320 	and.w	r3, r3, #32
 8009298:	2b00      	cmp	r3, #0
 800929a:	d105      	bne.n	80092a8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800929c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80092a0:	4b5c      	ldr	r3, [pc, #368]	@ (8009414 <HAL_UART_IRQHandler+0x2b8>)
 80092a2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00b      	beq.n	80092c0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	2208      	movs	r2, #8
 80092ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092b6:	f043 0208 	orr.w	r2, r3, #8
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80092c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d012      	beq.n	80092f2 <HAL_UART_IRQHandler+0x196>
 80092cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00c      	beq.n	80092f2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80092e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092e8:	f043 0220 	orr.w	r2, r3, #32
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f000 8249 	beq.w	8009790 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b00      	cmp	r3, #0
 8009308:	d013      	beq.n	8009332 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800930a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800930e:	f003 0320 	and.w	r3, r3, #32
 8009312:	2b00      	cmp	r3, #0
 8009314:	d105      	bne.n	8009322 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800931a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009326:	2b00      	cmp	r3, #0
 8009328:	d003      	beq.n	8009332 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009338:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	689b      	ldr	r3, [r3, #8]
 8009342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009346:	2b40      	cmp	r3, #64	@ 0x40
 8009348:	d005      	beq.n	8009356 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800934a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800934e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009352:	2b00      	cmp	r3, #0
 8009354:	d054      	beq.n	8009400 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 fe25 	bl	8009fa6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009366:	2b40      	cmp	r3, #64	@ 0x40
 8009368:	d146      	bne.n	80093f8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3308      	adds	r3, #8
 8009370:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009374:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009380:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009384:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009388:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3308      	adds	r3, #8
 8009392:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009396:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800939a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800939e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d1d9      	bne.n	800936a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d017      	beq.n	80093f0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093c6:	4a15      	ldr	r2, [pc, #84]	@ (800941c <HAL_UART_IRQHandler+0x2c0>)
 80093c8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7f9 fdfb 	bl	8002fcc <HAL_DMA_Abort_IT>
 80093d6:	4603      	mov	r3, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d019      	beq.n	8009410 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80093ea:	4610      	mov	r0, r2
 80093ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ee:	e00f      	b.n	8009410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f9e1 	bl	80097b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f6:	e00b      	b.n	8009410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f9dd 	bl	80097b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fe:	e007      	b.n	8009410 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 f9d9 	bl	80097b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800940e:	e1bf      	b.n	8009790 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009410:	bf00      	nop
    return;
 8009412:	e1bd      	b.n	8009790 <HAL_UART_IRQHandler+0x634>
 8009414:	10000001 	.word	0x10000001
 8009418:	04000120 	.word	0x04000120
 800941c:	0800a073 	.word	0x0800a073

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009424:	2b01      	cmp	r3, #1
 8009426:	f040 8153 	bne.w	80096d0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800942a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800942e:	f003 0310 	and.w	r3, r3, #16
 8009432:	2b00      	cmp	r3, #0
 8009434:	f000 814c 	beq.w	80096d0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800943c:	f003 0310 	and.w	r3, r3, #16
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8145 	beq.w	80096d0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2210      	movs	r2, #16
 800944c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009458:	2b40      	cmp	r3, #64	@ 0x40
 800945a:	f040 80bb 	bne.w	80095d4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800946c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 818f 	beq.w	8009794 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800947c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009480:	429a      	cmp	r2, r3
 8009482:	f080 8187 	bcs.w	8009794 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800948c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 0320 	and.w	r3, r3, #32
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f040 8087 	bne.w	80095b2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	461a      	mov	r2, r3
 80094ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80094ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80094d2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80094da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80094e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d1da      	bne.n	80094a4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3308      	adds	r3, #8
 80094f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094f8:	e853 3f00 	ldrex	r3, [r3]
 80094fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009500:	f023 0301 	bic.w	r3, r3, #1
 8009504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	3308      	adds	r3, #8
 800950e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009512:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009516:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800951a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800951e:	e841 2300 	strex	r3, r2, [r1]
 8009522:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1e1      	bne.n	80094ee <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3308      	adds	r3, #8
 8009530:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009534:	e853 3f00 	ldrex	r3, [r3]
 8009538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800953a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	3308      	adds	r3, #8
 800954a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800954e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009556:	e841 2300 	strex	r3, r2, [r1]
 800955a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800955c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1e3      	bne.n	800952a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2220      	movs	r2, #32
 8009566:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009578:	e853 3f00 	ldrex	r3, [r3]
 800957c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800957e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009580:	f023 0310 	bic.w	r3, r3, #16
 8009584:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	461a      	mov	r2, r3
 800958e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009592:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009594:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009596:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009598:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800959a:	e841 2300 	strex	r3, r2, [r1]
 800959e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80095a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d1e4      	bne.n	8009570 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7f9 fcae 	bl	8002f0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2202      	movs	r2, #2
 80095b6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f8fd 	bl	80097cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80095d2:	e0df      	b.n	8009794 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 80d1 	beq.w	8009798 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80095f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	f000 80cc 	beq.w	8009798 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800960e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009610:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009614:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	461a      	mov	r2, r3
 800961e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009622:	647b      	str	r3, [r7, #68]	@ 0x44
 8009624:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009626:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009628:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800962a:	e841 2300 	strex	r3, r2, [r1]
 800962e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009632:	2b00      	cmp	r3, #0
 8009634:	d1e4      	bne.n	8009600 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	623b      	str	r3, [r7, #32]
   return(result);
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	3308      	adds	r3, #8
 800965a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800965e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009660:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800966c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e1      	bne.n	8009636 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	e853 3f00 	ldrex	r3, [r3]
 8009692:	60fb      	str	r3, [r7, #12]
   return(result);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0310 	bic.w	r3, r3, #16
 800969a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80096a8:	61fb      	str	r3, [r7, #28]
 80096aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ac:	69b9      	ldr	r1, [r7, #24]
 80096ae:	69fa      	ldr	r2, [r7, #28]
 80096b0:	e841 2300 	strex	r3, r2, [r1]
 80096b4:	617b      	str	r3, [r7, #20]
   return(result);
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1e4      	bne.n	8009686 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096c6:	4619      	mov	r1, r3
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	f000 f87f 	bl	80097cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80096ce:	e063      	b.n	8009798 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80096d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d00e      	beq.n	80096fa <HAL_UART_IRQHandler+0x59e>
 80096dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d008      	beq.n	80096fa <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80096f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 fcfe 	bl	800a0f4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80096f8:	e051      	b.n	800979e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80096fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009702:	2b00      	cmp	r3, #0
 8009704:	d014      	beq.n	8009730 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009706:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800970a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800970e:	2b00      	cmp	r3, #0
 8009710:	d105      	bne.n	800971e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009716:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800971a:	2b00      	cmp	r3, #0
 800971c:	d008      	beq.n	8009730 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009722:	2b00      	cmp	r3, #0
 8009724:	d03a      	beq.n	800979c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800972a:	6878      	ldr	r0, [r7, #4]
 800972c:	4798      	blx	r3
    }
    return;
 800972e:	e035      	b.n	800979c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009734:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d009      	beq.n	8009750 <HAL_UART_IRQHandler+0x5f4>
 800973c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	d003      	beq.n	8009750 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 fca8 	bl	800a09e <UART_EndTransmit_IT>
    return;
 800974e:	e026      	b.n	800979e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009754:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <HAL_UART_IRQHandler+0x614>
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009760:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009764:	2b00      	cmp	r3, #0
 8009766:	d003      	beq.n	8009770 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f000 fcd7 	bl	800a11c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800976e:	e016      	b.n	800979e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009778:	2b00      	cmp	r3, #0
 800977a:	d010      	beq.n	800979e <HAL_UART_IRQHandler+0x642>
 800977c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009780:	2b00      	cmp	r3, #0
 8009782:	da0c      	bge.n	800979e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009784:	6878      	ldr	r0, [r7, #4]
 8009786:	f000 fcbf 	bl	800a108 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800978a:	e008      	b.n	800979e <HAL_UART_IRQHandler+0x642>
      return;
 800978c:	bf00      	nop
 800978e:	e006      	b.n	800979e <HAL_UART_IRQHandler+0x642>
    return;
 8009790:	bf00      	nop
 8009792:	e004      	b.n	800979e <HAL_UART_IRQHandler+0x642>
      return;
 8009794:	bf00      	nop
 8009796:	e002      	b.n	800979e <HAL_UART_IRQHandler+0x642>
      return;
 8009798:	bf00      	nop
 800979a:	e000      	b.n	800979e <HAL_UART_IRQHandler+0x642>
    return;
 800979c:	bf00      	nop
  }
}
 800979e:	37e8      	adds	r7, #232	@ 0xe8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097e8:	b08c      	sub	sp, #48	@ 0x30
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	689a      	ldr	r2, [r3, #8]
 80097f8:	697b      	ldr	r3, [r7, #20]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	431a      	orrs	r2, r3
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	695b      	ldr	r3, [r3, #20]
 8009802:	431a      	orrs	r2, r3
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	69db      	ldr	r3, [r3, #28]
 8009808:	4313      	orrs	r3, r2
 800980a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	4baf      	ldr	r3, [pc, #700]	@ (8009ad0 <UART_SetConfig+0x2ec>)
 8009814:	4013      	ands	r3, r2
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	6812      	ldr	r2, [r2, #0]
 800981a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800981c:	430b      	orrs	r3, r1
 800981e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	68da      	ldr	r2, [r3, #12]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	430a      	orrs	r2, r1
 8009834:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4aa4      	ldr	r2, [pc, #656]	@ (8009ad4 <UART_SetConfig+0x2f0>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d004      	beq.n	8009850 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	6a1b      	ldr	r3, [r3, #32]
 800984a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800984c:	4313      	orrs	r3, r2
 800984e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689b      	ldr	r3, [r3, #8]
 8009856:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800985a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	6812      	ldr	r2, [r2, #0]
 8009862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009864:	430b      	orrs	r3, r1
 8009866:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	f023 010f 	bic.w	r1, r3, #15
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	430a      	orrs	r2, r1
 800987c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a95      	ldr	r2, [pc, #596]	@ (8009ad8 <UART_SetConfig+0x2f4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d125      	bne.n	80098d4 <UART_SetConfig+0xf0>
 8009888:	2003      	movs	r0, #3
 800988a:	f7ff fbf7 	bl	800907c <LL_RCC_GetUSARTClockSource>
 800988e:	4603      	mov	r3, r0
 8009890:	2b03      	cmp	r3, #3
 8009892:	d81b      	bhi.n	80098cc <UART_SetConfig+0xe8>
 8009894:	a201      	add	r2, pc, #4	@ (adr r2, 800989c <UART_SetConfig+0xb8>)
 8009896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800989a:	bf00      	nop
 800989c:	080098ad 	.word	0x080098ad
 80098a0:	080098bd 	.word	0x080098bd
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098c5 	.word	0x080098c5
 80098ac:	2301      	movs	r3, #1
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b2:	e042      	b.n	800993a <UART_SetConfig+0x156>
 80098b4:	2302      	movs	r3, #2
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ba:	e03e      	b.n	800993a <UART_SetConfig+0x156>
 80098bc:	2304      	movs	r3, #4
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e03a      	b.n	800993a <UART_SetConfig+0x156>
 80098c4:	2308      	movs	r3, #8
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e036      	b.n	800993a <UART_SetConfig+0x156>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d2:	e032      	b.n	800993a <UART_SetConfig+0x156>
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a7e      	ldr	r2, [pc, #504]	@ (8009ad4 <UART_SetConfig+0x2f0>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d12a      	bne.n	8009934 <UART_SetConfig+0x150>
 80098de:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80098e2:	f7ff fbdb 	bl	800909c <LL_RCC_GetLPUARTClockSource>
 80098e6:	4603      	mov	r3, r0
 80098e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098ec:	d01a      	beq.n	8009924 <UART_SetConfig+0x140>
 80098ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098f2:	d81b      	bhi.n	800992c <UART_SetConfig+0x148>
 80098f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098f8:	d00c      	beq.n	8009914 <UART_SetConfig+0x130>
 80098fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80098fe:	d815      	bhi.n	800992c <UART_SetConfig+0x148>
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <UART_SetConfig+0x128>
 8009904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009908:	d008      	beq.n	800991c <UART_SetConfig+0x138>
 800990a:	e00f      	b.n	800992c <UART_SetConfig+0x148>
 800990c:	2300      	movs	r3, #0
 800990e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009912:	e012      	b.n	800993a <UART_SetConfig+0x156>
 8009914:	2302      	movs	r3, #2
 8009916:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800991a:	e00e      	b.n	800993a <UART_SetConfig+0x156>
 800991c:	2304      	movs	r3, #4
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009922:	e00a      	b.n	800993a <UART_SetConfig+0x156>
 8009924:	2308      	movs	r3, #8
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992a:	e006      	b.n	800993a <UART_SetConfig+0x156>
 800992c:	2310      	movs	r3, #16
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009932:	e002      	b.n	800993a <UART_SetConfig+0x156>
 8009934:	2310      	movs	r3, #16
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a65      	ldr	r2, [pc, #404]	@ (8009ad4 <UART_SetConfig+0x2f0>)
 8009940:	4293      	cmp	r3, r2
 8009942:	f040 8097 	bne.w	8009a74 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009946:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800994a:	2b08      	cmp	r3, #8
 800994c:	d823      	bhi.n	8009996 <UART_SetConfig+0x1b2>
 800994e:	a201      	add	r2, pc, #4	@ (adr r2, 8009954 <UART_SetConfig+0x170>)
 8009950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009954:	08009979 	.word	0x08009979
 8009958:	08009997 	.word	0x08009997
 800995c:	08009981 	.word	0x08009981
 8009960:	08009997 	.word	0x08009997
 8009964:	08009987 	.word	0x08009987
 8009968:	08009997 	.word	0x08009997
 800996c:	08009997 	.word	0x08009997
 8009970:	08009997 	.word	0x08009997
 8009974:	0800998f 	.word	0x0800998f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009978:	f7fe fd66 	bl	8008448 <HAL_RCC_GetPCLK1Freq>
 800997c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800997e:	e010      	b.n	80099a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009980:	4b56      	ldr	r3, [pc, #344]	@ (8009adc <UART_SetConfig+0x2f8>)
 8009982:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009984:	e00d      	b.n	80099a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009986:	f7fe fcdf 	bl	8008348 <HAL_RCC_GetSysClockFreq>
 800998a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800998c:	e009      	b.n	80099a2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800998e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009992:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009994:	e005      	b.n	80099a2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800999a:	2301      	movs	r3, #1
 800999c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 812b 	beq.w	8009c00 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ae:	4a4c      	ldr	r2, [pc, #304]	@ (8009ae0 <UART_SetConfig+0x2fc>)
 80099b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099b4:	461a      	mov	r2, r3
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	685a      	ldr	r2, [r3, #4]
 80099c2:	4613      	mov	r3, r2
 80099c4:	005b      	lsls	r3, r3, #1
 80099c6:	4413      	add	r3, r2
 80099c8:	69ba      	ldr	r2, [r7, #24]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d305      	bcc.n	80099da <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099d4:	69ba      	ldr	r2, [r7, #24]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d903      	bls.n	80099e2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80099e0:	e10e      	b.n	8009c00 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80099e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e4:	2200      	movs	r2, #0
 80099e6:	60bb      	str	r3, [r7, #8]
 80099e8:	60fa      	str	r2, [r7, #12]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ee:	4a3c      	ldr	r2, [pc, #240]	@ (8009ae0 <UART_SetConfig+0x2fc>)
 80099f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	2200      	movs	r2, #0
 80099f8:	603b      	str	r3, [r7, #0]
 80099fa:	607a      	str	r2, [r7, #4]
 80099fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a00:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a04:	f7f6 ffe2 	bl	80009cc <__aeabi_uldivmod>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	4610      	mov	r0, r2
 8009a0e:	4619      	mov	r1, r3
 8009a10:	f04f 0200 	mov.w	r2, #0
 8009a14:	f04f 0300 	mov.w	r3, #0
 8009a18:	020b      	lsls	r3, r1, #8
 8009a1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a1e:	0202      	lsls	r2, r0, #8
 8009a20:	6979      	ldr	r1, [r7, #20]
 8009a22:	6849      	ldr	r1, [r1, #4]
 8009a24:	0849      	lsrs	r1, r1, #1
 8009a26:	2000      	movs	r0, #0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	4605      	mov	r5, r0
 8009a2c:	eb12 0804 	adds.w	r8, r2, r4
 8009a30:	eb43 0905 	adc.w	r9, r3, r5
 8009a34:	697b      	ldr	r3, [r7, #20]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	469a      	mov	sl, r3
 8009a3c:	4693      	mov	fp, r2
 8009a3e:	4652      	mov	r2, sl
 8009a40:	465b      	mov	r3, fp
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 ffc1 	bl	80009cc <__aeabi_uldivmod>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	460b      	mov	r3, r1
 8009a4e:	4613      	mov	r3, r2
 8009a50:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a52:	6a3b      	ldr	r3, [r7, #32]
 8009a54:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a58:	d308      	bcc.n	8009a6c <UART_SetConfig+0x288>
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a60:	d204      	bcs.n	8009a6c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6a3a      	ldr	r2, [r7, #32]
 8009a68:	60da      	str	r2, [r3, #12]
 8009a6a:	e0c9      	b.n	8009c00 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a72:	e0c5      	b.n	8009c00 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a7c:	d16d      	bne.n	8009b5a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009a7e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a82:	3b01      	subs	r3, #1
 8009a84:	2b07      	cmp	r3, #7
 8009a86:	d82d      	bhi.n	8009ae4 <UART_SetConfig+0x300>
 8009a88:	a201      	add	r2, pc, #4	@ (adr r2, 8009a90 <UART_SetConfig+0x2ac>)
 8009a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8e:	bf00      	nop
 8009a90:	08009ab1 	.word	0x08009ab1
 8009a94:	08009ab9 	.word	0x08009ab9
 8009a98:	08009ae5 	.word	0x08009ae5
 8009a9c:	08009abf 	.word	0x08009abf
 8009aa0:	08009ae5 	.word	0x08009ae5
 8009aa4:	08009ae5 	.word	0x08009ae5
 8009aa8:	08009ae5 	.word	0x08009ae5
 8009aac:	08009ac7 	.word	0x08009ac7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ab0:	f7fe fce0 	bl	8008474 <HAL_RCC_GetPCLK2Freq>
 8009ab4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ab6:	e01b      	b.n	8009af0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ab8:	4b08      	ldr	r3, [pc, #32]	@ (8009adc <UART_SetConfig+0x2f8>)
 8009aba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009abc:	e018      	b.n	8009af0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009abe:	f7fe fc43 	bl	8008348 <HAL_RCC_GetSysClockFreq>
 8009ac2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ac4:	e014      	b.n	8009af0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009aca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009acc:	e010      	b.n	8009af0 <UART_SetConfig+0x30c>
 8009ace:	bf00      	nop
 8009ad0:	cfff69f3 	.word	0xcfff69f3
 8009ad4:	40008000 	.word	0x40008000
 8009ad8:	40013800 	.word	0x40013800
 8009adc:	00f42400 	.word	0x00f42400
 8009ae0:	08012f4c 	.word	0x08012f4c
      default:
        pclk = 0U;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009ae8:	2301      	movs	r3, #1
 8009aea:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009aee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 8084 	beq.w	8009c00 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009afc:	4a4b      	ldr	r2, [pc, #300]	@ (8009c2c <UART_SetConfig+0x448>)
 8009afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b02:	461a      	mov	r2, r3
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b0a:	005a      	lsls	r2, r3, #1
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	085b      	lsrs	r3, r3, #1
 8009b12:	441a      	add	r2, r3
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	685b      	ldr	r3, [r3, #4]
 8009b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b1c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b1e:	6a3b      	ldr	r3, [r7, #32]
 8009b20:	2b0f      	cmp	r3, #15
 8009b22:	d916      	bls.n	8009b52 <UART_SetConfig+0x36e>
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b2a:	d212      	bcs.n	8009b52 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	f023 030f 	bic.w	r3, r3, #15
 8009b34:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b36:	6a3b      	ldr	r3, [r7, #32]
 8009b38:	085b      	lsrs	r3, r3, #1
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	f003 0307 	and.w	r3, r3, #7
 8009b40:	b29a      	uxth	r2, r3
 8009b42:	8bfb      	ldrh	r3, [r7, #30]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	8bfa      	ldrh	r2, [r7, #30]
 8009b4e:	60da      	str	r2, [r3, #12]
 8009b50:	e056      	b.n	8009c00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b52:	2301      	movs	r3, #1
 8009b54:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b58:	e052      	b.n	8009c00 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	2b07      	cmp	r3, #7
 8009b62:	d822      	bhi.n	8009baa <UART_SetConfig+0x3c6>
 8009b64:	a201      	add	r2, pc, #4	@ (adr r2, 8009b6c <UART_SetConfig+0x388>)
 8009b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b6a:	bf00      	nop
 8009b6c:	08009b8d 	.word	0x08009b8d
 8009b70:	08009b95 	.word	0x08009b95
 8009b74:	08009bab 	.word	0x08009bab
 8009b78:	08009b9b 	.word	0x08009b9b
 8009b7c:	08009bab 	.word	0x08009bab
 8009b80:	08009bab 	.word	0x08009bab
 8009b84:	08009bab 	.word	0x08009bab
 8009b88:	08009ba3 	.word	0x08009ba3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b8c:	f7fe fc72 	bl	8008474 <HAL_RCC_GetPCLK2Freq>
 8009b90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b92:	e010      	b.n	8009bb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b94:	4b26      	ldr	r3, [pc, #152]	@ (8009c30 <UART_SetConfig+0x44c>)
 8009b96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b98:	e00d      	b.n	8009bb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b9a:	f7fe fbd5 	bl	8008348 <HAL_RCC_GetSysClockFreq>
 8009b9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ba0:	e009      	b.n	8009bb6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ba2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009ba6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009ba8:	e005      	b.n	8009bb6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009bb4:	bf00      	nop
    }

    if (pclk != 0U)
 8009bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d021      	beq.n	8009c00 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bc0:	4a1a      	ldr	r2, [pc, #104]	@ (8009c2c <UART_SetConfig+0x448>)
 8009bc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bca:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	085b      	lsrs	r3, r3, #1
 8009bd4:	441a      	add	r2, r3
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	685b      	ldr	r3, [r3, #4]
 8009bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bde:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009be0:	6a3b      	ldr	r3, [r7, #32]
 8009be2:	2b0f      	cmp	r3, #15
 8009be4:	d909      	bls.n	8009bfa <UART_SetConfig+0x416>
 8009be6:	6a3b      	ldr	r3, [r7, #32]
 8009be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009bec:	d205      	bcs.n	8009bfa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	b29a      	uxth	r2, r3
 8009bf2:	697b      	ldr	r3, [r7, #20]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	60da      	str	r2, [r3, #12]
 8009bf8:	e002      	b.n	8009c00 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c08:	697b      	ldr	r3, [r7, #20]
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2200      	movs	r2, #0
 8009c14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c1c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3730      	adds	r7, #48	@ 0x30
 8009c24:	46bd      	mov	sp, r7
 8009c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c2a:	bf00      	nop
 8009c2c:	08012f4c 	.word	0x08012f4c
 8009c30:	00f42400 	.word	0x00f42400

08009c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c34:	b480      	push	{r7}
 8009c36:	b083      	sub	sp, #12
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d00a      	beq.n	8009c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	430a      	orrs	r2, r1
 8009c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c84:	f003 0302 	and.w	r3, r3, #2
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d00a      	beq.n	8009ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca6:	f003 0304 	and.w	r3, r3, #4
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d00a      	beq.n	8009cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cc8:	f003 0310 	and.w	r3, r3, #16
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00a      	beq.n	8009ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	430a      	orrs	r2, r1
 8009ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cea:	f003 0320 	and.w	r3, r3, #32
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	430a      	orrs	r2, r1
 8009d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d01a      	beq.n	8009d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	685b      	ldr	r3, [r3, #4]
 8009d1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	430a      	orrs	r2, r1
 8009d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d32:	d10a      	bne.n	8009d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	685b      	ldr	r3, [r3, #4]
 8009d3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	430a      	orrs	r2, r1
 8009d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00a      	beq.n	8009d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	605a      	str	r2, [r3, #4]
  }
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b098      	sub	sp, #96	@ 0x60
 8009d7c:	af02      	add	r7, sp, #8
 8009d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d88:	f7f8 ff10 	bl	8002bac <HAL_GetTick>
 8009d8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0308 	and.w	r3, r3, #8
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d12f      	bne.n	8009dfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009da4:	2200      	movs	r2, #0
 8009da6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f88e 	bl	8009ecc <UART_WaitOnFlagUntilTimeout>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d022      	beq.n	8009dfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dbe:	e853 3f00 	ldrex	r3, [r3]
 8009dc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009dc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009dd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009dda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e6      	bne.n	8009db6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2220      	movs	r2, #32
 8009dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009df8:	2303      	movs	r3, #3
 8009dfa:	e063      	b.n	8009ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f003 0304 	and.w	r3, r3, #4
 8009e06:	2b04      	cmp	r3, #4
 8009e08:	d149      	bne.n	8009e9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e0e:	9300      	str	r3, [sp, #0]
 8009e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e12:	2200      	movs	r2, #0
 8009e14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f000 f857 	bl	8009ecc <UART_WaitOnFlagUntilTimeout>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d03c      	beq.n	8009e9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e2c:	e853 3f00 	ldrex	r3, [r3]
 8009e30:	623b      	str	r3, [r7, #32]
   return(result);
 8009e32:	6a3b      	ldr	r3, [r7, #32]
 8009e34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	461a      	mov	r2, r3
 8009e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e4a:	e841 2300 	strex	r3, r2, [r1]
 8009e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d1e6      	bne.n	8009e24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3308      	adds	r3, #8
 8009e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	e853 3f00 	ldrex	r3, [r3]
 8009e64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	3308      	adds	r3, #8
 8009e74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e76:	61fa      	str	r2, [r7, #28]
 8009e78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e7a:	69b9      	ldr	r1, [r7, #24]
 8009e7c:	69fa      	ldr	r2, [r7, #28]
 8009e7e:	e841 2300 	strex	r3, r2, [r1]
 8009e82:	617b      	str	r3, [r7, #20]
   return(result);
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1e5      	bne.n	8009e56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2220      	movs	r2, #32
 8009e8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e012      	b.n	8009ec4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2220      	movs	r2, #32
 8009ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2220      	movs	r2, #32
 8009eaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ec2:	2300      	movs	r3, #0
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3758      	adds	r7, #88	@ 0x58
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}

08009ecc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b084      	sub	sp, #16
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	60f8      	str	r0, [r7, #12]
 8009ed4:	60b9      	str	r1, [r7, #8]
 8009ed6:	603b      	str	r3, [r7, #0]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009edc:	e04f      	b.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ee4:	d04b      	beq.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ee6:	f7f8 fe61 	bl	8002bac <HAL_GetTick>
 8009eea:	4602      	mov	r2, r0
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	69ba      	ldr	r2, [r7, #24]
 8009ef2:	429a      	cmp	r2, r3
 8009ef4:	d302      	bcc.n	8009efc <UART_WaitOnFlagUntilTimeout+0x30>
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d101      	bne.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e04e      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 0304 	and.w	r3, r3, #4
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d037      	beq.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b80      	cmp	r3, #128	@ 0x80
 8009f12:	d034      	beq.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	2b40      	cmp	r3, #64	@ 0x40
 8009f18:	d031      	beq.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	69db      	ldr	r3, [r3, #28]
 8009f20:	f003 0308 	and.w	r3, r3, #8
 8009f24:	2b08      	cmp	r3, #8
 8009f26:	d110      	bne.n	8009f4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2208      	movs	r2, #8
 8009f2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f30:	68f8      	ldr	r0, [r7, #12]
 8009f32:	f000 f838 	bl	8009fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2208      	movs	r2, #8
 8009f3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2200      	movs	r2, #0
 8009f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e029      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f58:	d111      	bne.n	8009f7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f64:	68f8      	ldr	r0, [r7, #12]
 8009f66:	f000 f81e 	bl	8009fa6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2220      	movs	r2, #32
 8009f6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f7a:	2303      	movs	r3, #3
 8009f7c:	e00f      	b.n	8009f9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	69da      	ldr	r2, [r3, #28]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4013      	ands	r3, r2
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	429a      	cmp	r2, r3
 8009f8c:	bf0c      	ite	eq
 8009f8e:	2301      	moveq	r3, #1
 8009f90:	2300      	movne	r3, #0
 8009f92:	b2db      	uxtb	r3, r3
 8009f94:	461a      	mov	r2, r3
 8009f96:	79fb      	ldrb	r3, [r7, #7]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d0a0      	beq.n	8009ede <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f9c:	2300      	movs	r3, #0
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b095      	sub	sp, #84	@ 0x54
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb6:	e853 3f00 	ldrex	r3, [r3]
 8009fba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fbe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009fc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	461a      	mov	r2, r3
 8009fca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009fcc:	643b      	str	r3, [r7, #64]	@ 0x40
 8009fce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009fd2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009fd4:	e841 2300 	strex	r3, r2, [r1]
 8009fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1e6      	bne.n	8009fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fe8:	6a3b      	ldr	r3, [r7, #32]
 8009fea:	e853 3f00 	ldrex	r3, [r3]
 8009fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009ff6:	f023 0301 	bic.w	r3, r3, #1
 8009ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	3308      	adds	r3, #8
 800a002:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a004:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a006:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a008:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a00c:	e841 2300 	strex	r3, r2, [r1]
 800a010:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a014:	2b00      	cmp	r3, #0
 800a016:	d1e3      	bne.n	8009fe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d118      	bne.n	800a052 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	e853 3f00 	ldrex	r3, [r3]
 800a02c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	f023 0310 	bic.w	r3, r3, #16
 800a034:	647b      	str	r3, [r7, #68]	@ 0x44
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	461a      	mov	r2, r3
 800a03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a042:	6979      	ldr	r1, [r7, #20]
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	e841 2300 	strex	r3, r2, [r1]
 800a04a:	613b      	str	r3, [r7, #16]
   return(result);
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d1e6      	bne.n	800a020 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2200      	movs	r2, #0
 800a05e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a066:	bf00      	nop
 800a068:	3754      	adds	r7, #84	@ 0x54
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a07e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2200      	movs	r2, #0
 800a084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	2200      	movs	r2, #0
 800a08c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7ff fb91 	bl	80097b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a096:	bf00      	nop
 800a098:	3710      	adds	r7, #16
 800a09a:	46bd      	mov	sp, r7
 800a09c:	bd80      	pop	{r7, pc}

0800a09e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	b088      	sub	sp, #32
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0ba:	61fb      	str	r3, [r7, #28]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	69fb      	ldr	r3, [r7, #28]
 800a0c4:	61bb      	str	r3, [r7, #24]
 800a0c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6979      	ldr	r1, [r7, #20]
 800a0ca:	69ba      	ldr	r2, [r7, #24]
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e6      	bne.n	800a0a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2220      	movs	r2, #32
 800a0dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fb5c 	bl	80097a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a0ec:	bf00      	nop
 800a0ee:	3720      	adds	r7, #32
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d101      	bne.n	800a146 <HAL_UARTEx_DisableFifoMode+0x16>
 800a142:	2302      	movs	r3, #2
 800a144:	e027      	b.n	800a196 <HAL_UARTEx_DisableFifoMode+0x66>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2224      	movs	r2, #36	@ 0x24
 800a152:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a174:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2220      	movs	r2, #32
 800a188:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2200      	movs	r2, #0
 800a190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a194:	2300      	movs	r3, #0
}
 800a196:	4618      	mov	r0, r3
 800a198:	3714      	adds	r7, #20
 800a19a:	46bd      	mov	sp, r7
 800a19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a0:	4770      	bx	lr

0800a1a2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1b2:	2b01      	cmp	r3, #1
 800a1b4:	d101      	bne.n	800a1ba <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	e02d      	b.n	800a216 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2201      	movs	r2, #1
 800a1be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2224      	movs	r2, #36	@ 0x24
 800a1c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1f6:	6878      	ldr	r0, [r7, #4]
 800a1f8:	f000 f850 	bl	800a29c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2220      	movs	r2, #32
 800a208:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2200      	movs	r2, #0
 800a210:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3710      	adds	r7, #16
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a21e:	b580      	push	{r7, lr}
 800a220:	b084      	sub	sp, #16
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
 800a226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d101      	bne.n	800a236 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a232:	2302      	movs	r3, #2
 800a234:	e02d      	b.n	800a292 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	2201      	movs	r2, #1
 800a23a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2224      	movs	r2, #36	@ 0x24
 800a242:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f022 0201 	bic.w	r2, r2, #1
 800a25c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	430a      	orrs	r2, r1
 800a270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f812 	bl	800a29c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	68fa      	ldr	r2, [r7, #12]
 800a27e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2220      	movs	r2, #32
 800a284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a290:	2300      	movs	r3, #0
}
 800a292:	4618      	mov	r0, r3
 800a294:	3710      	adds	r7, #16
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
	...

0800a29c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d108      	bne.n	800a2be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a2bc:	e031      	b.n	800a322 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a2be:	2308      	movs	r3, #8
 800a2c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	0e5b      	lsrs	r3, r3, #25
 800a2ce:	b2db      	uxtb	r3, r3
 800a2d0:	f003 0307 	and.w	r3, r3, #7
 800a2d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	689b      	ldr	r3, [r3, #8]
 800a2dc:	0f5b      	lsrs	r3, r3, #29
 800a2de:	b2db      	uxtb	r3, r3
 800a2e0:	f003 0307 	and.w	r3, r3, #7
 800a2e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2e6:	7bbb      	ldrb	r3, [r7, #14]
 800a2e8:	7b3a      	ldrb	r2, [r7, #12]
 800a2ea:	4911      	ldr	r1, [pc, #68]	@ (800a330 <UARTEx_SetNbDataToProcess+0x94>)
 800a2ec:	5c8a      	ldrb	r2, [r1, r2]
 800a2ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2f2:	7b3a      	ldrb	r2, [r7, #12]
 800a2f4:	490f      	ldr	r1, [pc, #60]	@ (800a334 <UARTEx_SetNbDataToProcess+0x98>)
 800a2f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	7b7a      	ldrb	r2, [r7, #13]
 800a308:	4909      	ldr	r1, [pc, #36]	@ (800a330 <UARTEx_SetNbDataToProcess+0x94>)
 800a30a:	5c8a      	ldrb	r2, [r1, r2]
 800a30c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a310:	7b7a      	ldrb	r2, [r7, #13]
 800a312:	4908      	ldr	r1, [pc, #32]	@ (800a334 <UARTEx_SetNbDataToProcess+0x98>)
 800a314:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a316:	fb93 f3f2 	sdiv	r3, r3, r2
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a322:	bf00      	nop
 800a324:	3714      	adds	r7, #20
 800a326:	46bd      	mov	sp, r7
 800a328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32c:	4770      	bx	lr
 800a32e:	bf00      	nop
 800a330:	08012f64 	.word	0x08012f64
 800a334:	08012f6c 	.word	0x08012f6c

0800a338 <LL_TIM_SetPrescaler>:
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	683a      	ldr	r2, [r7, #0]
 800a346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <LL_TIM_SetAutoReload>:
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	683a      	ldr	r2, [r7, #0]
 800a362:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a364:	bf00      	nop
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <LL_TIM_SetRepetitionCounter>:
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	683a      	ldr	r2, [r7, #0]
 800a37e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	695b      	ldr	r3, [r3, #20]
 800a398:	f043 0201 	orr.w	r2, r3, #1
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	615a      	str	r2, [r3, #20]
}
 800a3a0:	bf00      	nop
 800a3a2:	370c      	adds	r7, #12
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr

0800a3ac <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b084      	sub	sp, #16
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a27      	ldr	r2, [pc, #156]	@ (800a45c <LL_TIM_Init+0xb0>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d003      	beq.n	800a3cc <LL_TIM_Init+0x20>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ca:	d106      	bne.n	800a3da <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	4a1f      	ldr	r2, [pc, #124]	@ (800a45c <LL_TIM_Init+0xb0>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d00b      	beq.n	800a3fa <LL_TIM_Init+0x4e>
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3e8:	d007      	beq.n	800a3fa <LL_TIM_Init+0x4e>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a460 <LL_TIM_Init+0xb4>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d003      	beq.n	800a3fa <LL_TIM_Init+0x4e>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a464 <LL_TIM_Init+0xb8>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d106      	bne.n	800a408 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	4313      	orrs	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	68fa      	ldr	r2, [r7, #12]
 800a40c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	4619      	mov	r1, r3
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f7ff ff9d 	bl	800a354 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	881b      	ldrh	r3, [r3, #0]
 800a41e:	4619      	mov	r1, r3
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7ff ff89 	bl	800a338 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	4a0c      	ldr	r2, [pc, #48]	@ (800a45c <LL_TIM_Init+0xb0>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d007      	beq.n	800a43e <LL_TIM_Init+0x92>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	4a0b      	ldr	r2, [pc, #44]	@ (800a460 <LL_TIM_Init+0xb4>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d003      	beq.n	800a43e <LL_TIM_Init+0x92>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4a0a      	ldr	r2, [pc, #40]	@ (800a464 <LL_TIM_Init+0xb8>)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	d105      	bne.n	800a44a <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	4619      	mov	r1, r3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff ff93 	bl	800a370 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f7ff ff9e 	bl	800a38c <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800a450:	2300      	movs	r3, #0
}
 800a452:	4618      	mov	r0, r3
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
 800a45a:	bf00      	nop
 800a45c:	40012c00 	.word	0x40012c00
 800a460:	40014400 	.word	0x40014400
 800a464:	40014800 	.word	0x40014800

0800a468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a468:	b480      	push	{r7}
 800a46a:	b085      	sub	sp, #20
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a478:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a47c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	b29a      	uxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a488:	2300      	movs	r3, #0
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3714      	adds	r7, #20
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a49e:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a4a2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	43db      	mvns	r3, r3
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	4013      	ands	r3, r2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3714      	adds	r7, #20
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a4cc:	b480      	push	{r7}
 800a4ce:	b085      	sub	sp, #20
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	60f8      	str	r0, [r7, #12]
 800a4d4:	1d3b      	adds	r3, r7, #4
 800a4d6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a4fa:	2300      	movs	r3, #0
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3714      	adds	r7, #20
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr

0800a508 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a508:	b480      	push	{r7}
 800a50a:	b09d      	sub	sp, #116	@ 0x74
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a512:	2300      	movs	r3, #0
 800a514:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a518:	687a      	ldr	r2, [r7, #4]
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	781b      	ldrb	r3, [r3, #0]
 800a51e:	009b      	lsls	r3, r3, #2
 800a520:	4413      	add	r3, r2
 800a522:	881b      	ldrh	r3, [r3, #0]
 800a524:	b29b      	uxth	r3, r3
 800a526:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a52a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a52e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	78db      	ldrb	r3, [r3, #3]
 800a536:	2b03      	cmp	r3, #3
 800a538:	d81f      	bhi.n	800a57a <USB_ActivateEndpoint+0x72>
 800a53a:	a201      	add	r2, pc, #4	@ (adr r2, 800a540 <USB_ActivateEndpoint+0x38>)
 800a53c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a540:	0800a551 	.word	0x0800a551
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a583 	.word	0x0800a583
 800a54c:	0800a55f 	.word	0x0800a55f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a550:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a554:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a558:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a55c:	e012      	b.n	800a584 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a55e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a562:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a566:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a56a:	e00b      	b.n	800a584 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a56c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a570:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a574:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a578:	e004      	b.n	800a584 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a580:	e000      	b.n	800a584 <USB_ActivateEndpoint+0x7c>
      break;
 800a582:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	441a      	add	r2, r3
 800a58e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a592:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a596:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a59a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a59e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	781b      	ldrb	r3, [r3, #0]
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	4413      	add	r3, r2
 800a5b0:	881b      	ldrh	r3, [r3, #0]
 800a5b2:	b29b      	uxth	r3, r3
 800a5b4:	b21b      	sxth	r3, r3
 800a5b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5be:	b21a      	sxth	r2, r3
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	b21b      	sxth	r3, r3
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	b21b      	sxth	r3, r3
 800a5ca:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a5ce:	687a      	ldr	r2, [r7, #4]
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	009b      	lsls	r3, r3, #2
 800a5d6:	441a      	add	r2, r3
 800a5d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a5dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a5e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a5e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	7b1b      	ldrb	r3, [r3, #12]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	f040 8178 	bne.w	800a8ea <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	785b      	ldrb	r3, [r3, #1]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 8084 	beq.w	800a70c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	61bb      	str	r3, [r7, #24]
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a60e:	b29b      	uxth	r3, r3
 800a610:	461a      	mov	r2, r3
 800a612:	69bb      	ldr	r3, [r7, #24]
 800a614:	4413      	add	r3, r2
 800a616:	61bb      	str	r3, [r7, #24]
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	00da      	lsls	r2, r3, #3
 800a61e:	69bb      	ldr	r3, [r7, #24]
 800a620:	4413      	add	r3, r2
 800a622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a626:	617b      	str	r3, [r7, #20]
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	88db      	ldrh	r3, [r3, #6]
 800a62c:	085b      	lsrs	r3, r3, #1
 800a62e:	b29b      	uxth	r3, r3
 800a630:	005b      	lsls	r3, r3, #1
 800a632:	b29a      	uxth	r2, r3
 800a634:	697b      	ldr	r3, [r7, #20]
 800a636:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	4413      	add	r3, r2
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	827b      	strh	r3, [r7, #18]
 800a646:	8a7b      	ldrh	r3, [r7, #18]
 800a648:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d01b      	beq.n	800a688 <USB_ActivateEndpoint+0x180>
 800a650:	687a      	ldr	r2, [r7, #4]
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	781b      	ldrb	r3, [r3, #0]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4413      	add	r3, r2
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a666:	823b      	strh	r3, [r7, #16]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	441a      	add	r2, r3
 800a672:	8a3b      	ldrh	r3, [r7, #16]
 800a674:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a678:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a67c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a680:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a684:	b29b      	uxth	r3, r3
 800a686:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	78db      	ldrb	r3, [r3, #3]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d020      	beq.n	800a6d2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	781b      	ldrb	r3, [r3, #0]
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	4413      	add	r3, r2
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6a6:	81bb      	strh	r3, [r7, #12]
 800a6a8:	89bb      	ldrh	r3, [r7, #12]
 800a6aa:	f083 0320 	eor.w	r3, r3, #32
 800a6ae:	81bb      	strh	r3, [r7, #12]
 800a6b0:	687a      	ldr	r2, [r7, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	009b      	lsls	r3, r3, #2
 800a6b8:	441a      	add	r2, r3
 800a6ba:	89bb      	ldrh	r3, [r7, #12]
 800a6bc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6c0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a6c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	8013      	strh	r3, [r2, #0]
 800a6d0:	e2d5      	b.n	800ac7e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a6e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a6e8:	81fb      	strh	r3, [r7, #14]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	009b      	lsls	r3, r3, #2
 800a6f2:	441a      	add	r2, r3
 800a6f4:	89fb      	ldrh	r3, [r7, #14]
 800a6f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a6fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a6fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a706:	b29b      	uxth	r3, r3
 800a708:	8013      	strh	r3, [r2, #0]
 800a70a:	e2b8      	b.n	800ac7e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a716:	b29b      	uxth	r3, r3
 800a718:	461a      	mov	r2, r3
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	4413      	add	r3, r2
 800a71e:	633b      	str	r3, [r7, #48]	@ 0x30
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	781b      	ldrb	r3, [r3, #0]
 800a724:	00da      	lsls	r2, r3, #3
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	4413      	add	r3, r2
 800a72a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a72e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	88db      	ldrh	r3, [r3, #6]
 800a734:	085b      	lsrs	r3, r3, #1
 800a736:	b29b      	uxth	r3, r3
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a73e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	461a      	mov	r2, r3
 800a74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a750:	4413      	add	r3, r2
 800a752:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	00da      	lsls	r2, r3, #3
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	4413      	add	r3, r2
 800a75e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a762:	627b      	str	r3, [r7, #36]	@ 0x24
 800a764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a766:	881b      	ldrh	r3, [r3, #0]
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a76e:	b29a      	uxth	r2, r3
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	691b      	ldr	r3, [r3, #16]
 800a778:	2b3e      	cmp	r3, #62	@ 0x3e
 800a77a:	d91d      	bls.n	800a7b8 <USB_ActivateEndpoint+0x2b0>
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	095b      	lsrs	r3, r3, #5
 800a782:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	691b      	ldr	r3, [r3, #16]
 800a788:	f003 031f 	and.w	r3, r3, #31
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d102      	bne.n	800a796 <USB_ActivateEndpoint+0x28e>
 800a790:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a792:	3b01      	subs	r3, #1
 800a794:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a798:	881b      	ldrh	r3, [r3, #0]
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	029b      	lsls	r3, r3, #10
 800a7a2:	b29b      	uxth	r3, r3
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b4:	801a      	strh	r2, [r3, #0]
 800a7b6:	e026      	b.n	800a806 <USB_ActivateEndpoint+0x2fe>
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10a      	bne.n	800a7d6 <USB_ActivateEndpoint+0x2ce>
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c2:	881b      	ldrh	r3, [r3, #0]
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a7ce:	b29a      	uxth	r2, r3
 800a7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7d2:	801a      	strh	r2, [r3, #0]
 800a7d4:	e017      	b.n	800a806 <USB_ActivateEndpoint+0x2fe>
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	691b      	ldr	r3, [r3, #16]
 800a7da:	085b      	lsrs	r3, r3, #1
 800a7dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	691b      	ldr	r3, [r3, #16]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d002      	beq.n	800a7f0 <USB_ActivateEndpoint+0x2e8>
 800a7ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	029b      	lsls	r3, r3, #10
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	b29a      	uxth	r2, r3
 800a802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a804:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a806:	687a      	ldr	r2, [r7, #4]
 800a808:	683b      	ldr	r3, [r7, #0]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a814:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d01b      	beq.n	800a856 <USB_ActivateEndpoint+0x34e>
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	881b      	ldrh	r3, [r3, #0]
 800a82a:	b29b      	uxth	r3, r3
 800a82c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a830:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a834:	843b      	strh	r3, [r7, #32]
 800a836:	687a      	ldr	r2, [r7, #4]
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	441a      	add	r2, r3
 800a840:	8c3b      	ldrh	r3, [r7, #32]
 800a842:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a846:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a84a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a84e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a852:	b29b      	uxth	r3, r3
 800a854:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	781b      	ldrb	r3, [r3, #0]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d124      	bne.n	800a8a8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a85e:	687a      	ldr	r2, [r7, #4]
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	781b      	ldrb	r3, [r3, #0]
 800a864:	009b      	lsls	r3, r3, #2
 800a866:	4413      	add	r3, r2
 800a868:	881b      	ldrh	r3, [r3, #0]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a870:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a874:	83bb      	strh	r3, [r7, #28]
 800a876:	8bbb      	ldrh	r3, [r7, #28]
 800a878:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a87c:	83bb      	strh	r3, [r7, #28]
 800a87e:	8bbb      	ldrh	r3, [r7, #28]
 800a880:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a884:	83bb      	strh	r3, [r7, #28]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	009b      	lsls	r3, r3, #2
 800a88e:	441a      	add	r2, r3
 800a890:	8bbb      	ldrh	r3, [r7, #28]
 800a892:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a896:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a89a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a89e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8a2:	b29b      	uxth	r3, r3
 800a8a4:	8013      	strh	r3, [r2, #0]
 800a8a6:	e1ea      	b.n	800ac7e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	683b      	ldr	r3, [r7, #0]
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	4413      	add	r3, r2
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	b29b      	uxth	r3, r3
 800a8b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a8ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8be:	83fb      	strh	r3, [r7, #30]
 800a8c0:	8bfb      	ldrh	r3, [r7, #30]
 800a8c2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a8c6:	83fb      	strh	r3, [r7, #30]
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	441a      	add	r2, r3
 800a8d2:	8bfb      	ldrh	r3, [r7, #30]
 800a8d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	8013      	strh	r3, [r2, #0]
 800a8e8:	e1c9      	b.n	800ac7e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	78db      	ldrb	r3, [r3, #3]
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d11e      	bne.n	800a930 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	881b      	ldrh	r3, [r3, #0]
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a908:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	441a      	add	r2, r3
 800a916:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a91a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a91e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a922:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a926:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a92a:	b29b      	uxth	r3, r3
 800a92c:	8013      	strh	r3, [r2, #0]
 800a92e:	e01d      	b.n	800a96c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	881b      	ldrh	r3, [r3, #0]
 800a93c:	b29b      	uxth	r3, r3
 800a93e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a942:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a946:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a94a:	687a      	ldr	r2, [r7, #4]
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	009b      	lsls	r3, r3, #2
 800a952:	441a      	add	r2, r3
 800a954:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a958:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a95c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a960:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a968:	b29b      	uxth	r3, r3
 800a96a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a976:	b29b      	uxth	r3, r3
 800a978:	461a      	mov	r2, r3
 800a97a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a97c:	4413      	add	r3, r2
 800a97e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	00da      	lsls	r2, r3, #3
 800a986:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a98e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	891b      	ldrh	r3, [r3, #8]
 800a994:	085b      	lsrs	r3, r3, #1
 800a996:	b29b      	uxth	r3, r3
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a99e:	801a      	strh	r2, [r3, #0]
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9b0:	4413      	add	r3, r2
 800a9b2:	657b      	str	r3, [r7, #84]	@ 0x54
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	00da      	lsls	r2, r3, #3
 800a9ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9bc:	4413      	add	r3, r2
 800a9be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a9c2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	895b      	ldrh	r3, [r3, #10]
 800a9c8:	085b      	lsrs	r3, r3, #1
 800a9ca:	b29b      	uxth	r3, r3
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	b29a      	uxth	r2, r3
 800a9d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a9d2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	785b      	ldrb	r3, [r3, #1]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	f040 8093 	bne.w	800ab04 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	781b      	ldrb	r3, [r3, #0]
 800a9e4:	009b      	lsls	r3, r3, #2
 800a9e6:	4413      	add	r3, r2
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a9ee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a9f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01b      	beq.n	800aa32 <USB_ActivateEndpoint+0x52a>
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	4413      	add	r3, r2
 800aa04:	881b      	ldrh	r3, [r3, #0]
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	441a      	add	r2, r3
 800aa1c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800aa1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aa2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	009b      	lsls	r3, r3, #2
 800aa3a:	4413      	add	r3, r2
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800aa40:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800aa42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d01b      	beq.n	800aa82 <USB_ActivateEndpoint+0x57a>
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29b      	uxth	r3, r3
 800aa58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa60:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	441a      	add	r2, r3
 800aa6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa7a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa7e:	b29b      	uxth	r3, r3
 800aa80:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	781b      	ldrb	r3, [r3, #0]
 800aa88:	009b      	lsls	r3, r3, #2
 800aa8a:	4413      	add	r3, r2
 800aa8c:	881b      	ldrh	r3, [r3, #0]
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa98:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aa9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aa9c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aaa0:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aaa2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aaa4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aaa8:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	781b      	ldrb	r3, [r3, #0]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	441a      	add	r2, r3
 800aab4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aab6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aabe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	781b      	ldrb	r3, [r3, #0]
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4413      	add	r3, r2
 800aad4:	881b      	ldrh	r3, [r3, #0]
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aadc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aae0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800aae2:	687a      	ldr	r2, [r7, #4]
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	441a      	add	r2, r3
 800aaec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aaee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aaf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aaf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aafa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	8013      	strh	r3, [r2, #0]
 800ab02:	e0bc      	b.n	800ac7e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab04:	687a      	ldr	r2, [r7, #4]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	881b      	ldrh	r3, [r3, #0]
 800ab10:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800ab14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800ab18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d01d      	beq.n	800ab5c <USB_ActivateEndpoint+0x654>
 800ab20:	687a      	ldr	r2, [r7, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	4413      	add	r3, r2
 800ab2a:	881b      	ldrh	r3, [r3, #0]
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab36:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	683b      	ldr	r3, [r7, #0]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	441a      	add	r2, r3
 800ab44:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800ab48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ab54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ab6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ab70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01d      	beq.n	800abb4 <USB_ActivateEndpoint+0x6ac>
 800ab78:	687a      	ldr	r2, [r7, #4]
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	781b      	ldrb	r3, [r3, #0]
 800ab7e:	009b      	lsls	r3, r3, #2
 800ab80:	4413      	add	r3, r2
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab8e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	441a      	add	r2, r3
 800ab9c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800aba0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aba4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aba8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	78db      	ldrb	r3, [r3, #3]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d024      	beq.n	800ac06 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	4413      	add	r3, r2
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abd2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800abd6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800abda:	f083 0320 	eor.w	r3, r3, #32
 800abde:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	441a      	add	r2, r3
 800abec:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800abf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abf8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac00:	b29b      	uxth	r3, r3
 800ac02:	8013      	strh	r3, [r2, #0]
 800ac04:	e01d      	b.n	800ac42 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	683b      	ldr	r3, [r7, #0]
 800ac0a:	781b      	ldrb	r3, [r3, #0]
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	881b      	ldrh	r3, [r3, #0]
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac1c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	009b      	lsls	r3, r3, #2
 800ac28:	441a      	add	r2, r3
 800ac2a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800ac2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	683b      	ldr	r3, [r7, #0]
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	009b      	lsls	r3, r3, #2
 800ac4a:	4413      	add	r3, r2
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	b29b      	uxth	r3, r3
 800ac50:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ac54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac58:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	441a      	add	r2, r3
 800ac66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ac7e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3774      	adds	r7, #116	@ 0x74
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop

0800ac90 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b08d      	sub	sp, #52	@ 0x34
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	7b1b      	ldrb	r3, [r3, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f040 808e 	bne.w	800adc0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	785b      	ldrb	r3, [r3, #1]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d044      	beq.n	800ad36 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	4413      	add	r3, r2
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	81bb      	strh	r3, [r7, #12]
 800acba:	89bb      	ldrh	r3, [r7, #12]
 800acbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01b      	beq.n	800acfc <USB_DeactivateEndpoint+0x6c>
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	683b      	ldr	r3, [r7, #0]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	4413      	add	r3, r2
 800acce:	881b      	ldrh	r3, [r3, #0]
 800acd0:	b29b      	uxth	r3, r3
 800acd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acda:	817b      	strh	r3, [r7, #10]
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	009b      	lsls	r3, r3, #2
 800ace4:	441a      	add	r2, r3
 800ace6:	897b      	ldrh	r3, [r7, #10]
 800ace8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acf0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acf4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800acfc:	687a      	ldr	r2, [r7, #4]
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	781b      	ldrb	r3, [r3, #0]
 800ad02:	009b      	lsls	r3, r3, #2
 800ad04:	4413      	add	r3, r2
 800ad06:	881b      	ldrh	r3, [r3, #0]
 800ad08:	b29b      	uxth	r3, r3
 800ad0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad12:	813b      	strh	r3, [r7, #8]
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	441a      	add	r2, r3
 800ad1e:	893b      	ldrh	r3, [r7, #8]
 800ad20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	8013      	strh	r3, [r2, #0]
 800ad34:	e192      	b.n	800b05c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	4413      	add	r3, r2
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	827b      	strh	r3, [r7, #18]
 800ad44:	8a7b      	ldrh	r3, [r7, #18]
 800ad46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d01b      	beq.n	800ad86 <USB_DeactivateEndpoint+0xf6>
 800ad4e:	687a      	ldr	r2, [r7, #4]
 800ad50:	683b      	ldr	r3, [r7, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	881b      	ldrh	r3, [r3, #0]
 800ad5a:	b29b      	uxth	r3, r3
 800ad5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad64:	823b      	strh	r3, [r7, #16]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	009b      	lsls	r3, r3, #2
 800ad6e:	441a      	add	r2, r3
 800ad70:	8a3b      	ldrh	r3, [r7, #16]
 800ad72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad86:	687a      	ldr	r2, [r7, #4]
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	881b      	ldrh	r3, [r3, #0]
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad9c:	81fb      	strh	r3, [r7, #14]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	781b      	ldrb	r3, [r3, #0]
 800ada4:	009b      	lsls	r3, r3, #2
 800ada6:	441a      	add	r2, r3
 800ada8:	89fb      	ldrh	r3, [r7, #14]
 800adaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adb2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adba:	b29b      	uxth	r3, r3
 800adbc:	8013      	strh	r3, [r2, #0]
 800adbe:	e14d      	b.n	800b05c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	785b      	ldrb	r3, [r3, #1]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	f040 80a5 	bne.w	800af14 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	843b      	strh	r3, [r7, #32]
 800add8:	8c3b      	ldrh	r3, [r7, #32]
 800adda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d01b      	beq.n	800ae1a <USB_DeactivateEndpoint+0x18a>
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	881b      	ldrh	r3, [r3, #0]
 800adee:	b29b      	uxth	r3, r3
 800adf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800adf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800adf8:	83fb      	strh	r3, [r7, #30]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	781b      	ldrb	r3, [r3, #0]
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	441a      	add	r2, r3
 800ae04:	8bfb      	ldrh	r3, [r7, #30]
 800ae06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ae12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	4413      	add	r3, r2
 800ae24:	881b      	ldrh	r3, [r3, #0]
 800ae26:	83bb      	strh	r3, [r7, #28]
 800ae28:	8bbb      	ldrh	r3, [r7, #28]
 800ae2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d01b      	beq.n	800ae6a <USB_DeactivateEndpoint+0x1da>
 800ae32:	687a      	ldr	r2, [r7, #4]
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4413      	add	r3, r2
 800ae3c:	881b      	ldrh	r3, [r3, #0]
 800ae3e:	b29b      	uxth	r3, r3
 800ae40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae48:	837b      	strh	r3, [r7, #26]
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	781b      	ldrb	r3, [r3, #0]
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	441a      	add	r2, r3
 800ae54:	8b7b      	ldrh	r3, [r7, #26]
 800ae56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae62:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae6a:	687a      	ldr	r2, [r7, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	009b      	lsls	r3, r3, #2
 800ae72:	4413      	add	r3, r2
 800ae74:	881b      	ldrh	r3, [r3, #0]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae80:	833b      	strh	r3, [r7, #24]
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	441a      	add	r2, r3
 800ae8c:	8b3b      	ldrh	r3, [r7, #24]
 800ae8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae9a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae9e:	b29b      	uxth	r3, r3
 800aea0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aea2:	687a      	ldr	r2, [r7, #4]
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	781b      	ldrb	r3, [r3, #0]
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	4413      	add	r3, r2
 800aeac:	881b      	ldrh	r3, [r3, #0]
 800aeae:	b29b      	uxth	r3, r3
 800aeb0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aeb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeb8:	82fb      	strh	r3, [r7, #22]
 800aeba:	687a      	ldr	r2, [r7, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	441a      	add	r2, r3
 800aec4:	8afb      	ldrh	r3, [r7, #22]
 800aec6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aece:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	881b      	ldrh	r3, [r3, #0]
 800aee6:	b29b      	uxth	r3, r3
 800aee8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aeec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aef0:	82bb      	strh	r3, [r7, #20]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	009b      	lsls	r3, r3, #2
 800aefa:	441a      	add	r2, r3
 800aefc:	8abb      	ldrh	r3, [r7, #20]
 800aefe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af02:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af0e:	b29b      	uxth	r3, r3
 800af10:	8013      	strh	r3, [r2, #0]
 800af12:	e0a3      	b.n	800b05c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800af22:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800af24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d01b      	beq.n	800af64 <USB_DeactivateEndpoint+0x2d4>
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	881b      	ldrh	r3, [r3, #0]
 800af38:	b29b      	uxth	r3, r3
 800af3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af42:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	009b      	lsls	r3, r3, #2
 800af4c:	441a      	add	r2, r3
 800af4e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800af50:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af54:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af60:	b29b      	uxth	r3, r3
 800af62:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	4413      	add	r3, r2
 800af6e:	881b      	ldrh	r3, [r3, #0]
 800af70:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800af72:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01b      	beq.n	800afb4 <USB_DeactivateEndpoint+0x324>
 800af7c:	687a      	ldr	r2, [r7, #4]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af92:	853b      	strh	r3, [r7, #40]	@ 0x28
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	781b      	ldrb	r3, [r3, #0]
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	441a      	add	r2, r3
 800af9e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800afa0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afa4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afa8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800afb4:	687a      	ldr	r2, [r7, #4]
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	4413      	add	r3, r2
 800afbe:	881b      	ldrh	r3, [r3, #0]
 800afc0:	b29b      	uxth	r3, r3
 800afc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afca:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	441a      	add	r2, r3
 800afd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800afd8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afdc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800afe4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afe8:	b29b      	uxth	r3, r3
 800afea:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	781b      	ldrb	r3, [r3, #0]
 800aff2:	009b      	lsls	r3, r3, #2
 800aff4:	4413      	add	r3, r2
 800aff6:	881b      	ldrh	r3, [r3, #0]
 800aff8:	b29b      	uxth	r3, r3
 800affa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800affe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b002:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800b004:	687a      	ldr	r2, [r7, #4]
 800b006:	683b      	ldr	r3, [r7, #0]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	009b      	lsls	r3, r3, #2
 800b00c:	441a      	add	r2, r3
 800b00e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b010:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b014:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b018:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b01c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b020:	b29b      	uxth	r3, r3
 800b022:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	881b      	ldrh	r3, [r3, #0]
 800b030:	b29b      	uxth	r3, r3
 800b032:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b036:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b03a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b03c:	687a      	ldr	r2, [r7, #4]
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	441a      	add	r2, r3
 800b046:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b048:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b04c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b050:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b054:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b058:	b29b      	uxth	r3, r3
 800b05a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b05c:	2300      	movs	r3, #0
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3734      	adds	r7, #52	@ 0x34
 800b062:	46bd      	mov	sp, r7
 800b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b068:	4770      	bx	lr

0800b06a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b0c2      	sub	sp, #264	@ 0x108
 800b06e:	af00      	add	r7, sp, #0
 800b070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b078:	6018      	str	r0, [r3, #0]
 800b07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b082:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b084:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b088:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	785b      	ldrb	r3, [r3, #1]
 800b090:	2b01      	cmp	r3, #1
 800b092:	f040 86b7 	bne.w	800be04 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b09a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	699a      	ldr	r2, [r3, #24]
 800b0a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	691b      	ldr	r3, [r3, #16]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d908      	bls.n	800b0c4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b0b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	691b      	ldr	r3, [r3, #16]
 800b0be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b0c2:	e007      	b.n	800b0d4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b0c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	699b      	ldr	r3, [r3, #24]
 800b0d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b0d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	7b1b      	ldrb	r3, [r3, #12]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d13a      	bne.n	800b15a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b0e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	6959      	ldr	r1, [r3, #20]
 800b0f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	88da      	ldrh	r2, [r3, #6]
 800b0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b100:	b29b      	uxth	r3, r3
 800b102:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b106:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b10a:	6800      	ldr	r0, [r0, #0]
 800b10c:	f001 fc98 	bl	800ca40 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b114:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	613b      	str	r3, [r7, #16]
 800b11c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b120:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	461a      	mov	r2, r3
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	4413      	add	r3, r2
 800b132:	613b      	str	r3, [r7, #16]
 800b134:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b138:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	00da      	lsls	r2, r3, #3
 800b142:	693b      	ldr	r3, [r7, #16]
 800b144:	4413      	add	r3, r2
 800b146:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b150:	b29a      	uxth	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	f000 be1f 	b.w	800bd98 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b15a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b15e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	78db      	ldrb	r3, [r3, #3]
 800b166:	2b02      	cmp	r3, #2
 800b168:	f040 8462 	bne.w	800ba30 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b16c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6a1a      	ldr	r2, [r3, #32]
 800b178:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b17c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	f240 83df 	bls.w	800b948 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b18a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b18e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b198:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	009b      	lsls	r3, r3, #2
 800b1a2:	4413      	add	r3, r2
 800b1a4:	881b      	ldrh	r3, [r3, #0]
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b1ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b1b0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b1b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	781b      	ldrb	r3, [r3, #0]
 800b1ca:	009b      	lsls	r3, r3, #2
 800b1cc:	441a      	add	r2, r3
 800b1ce:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b1d2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b1d6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b1da:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b1de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b1e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	6a1a      	ldr	r2, [r3, #32]
 800b1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f6:	1ad2      	subs	r2, r2, r3
 800b1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b208:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b212:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b226:	2b00      	cmp	r3, #0
 800b228:	f000 81c7 	beq.w	800b5ba <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b230:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	633b      	str	r3, [r7, #48]	@ 0x30
 800b238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	785b      	ldrb	r3, [r3, #1]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d177      	bne.n	800b338 <USB_EPStartXfer+0x2ce>
 800b248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b262:	b29b      	uxth	r3, r3
 800b264:	461a      	mov	r2, r3
 800b266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b268:	4413      	add	r3, r2
 800b26a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b26c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b270:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	00da      	lsls	r2, r3, #3
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b282:	627b      	str	r3, [r7, #36]	@ 0x24
 800b284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b298:	2b3e      	cmp	r3, #62	@ 0x3e
 800b29a:	d921      	bls.n	800b2e0 <USB_EPStartXfer+0x276>
 800b29c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a0:	095b      	lsrs	r3, r3, #5
 800b2a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2aa:	f003 031f 	and.w	r3, r3, #31
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d104      	bne.n	800b2bc <USB_EPStartXfer+0x252>
 800b2b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	029b      	lsls	r3, r3, #10
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2d8:	b29a      	uxth	r2, r3
 800b2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2dc:	801a      	strh	r2, [r3, #0]
 800b2de:	e050      	b.n	800b382 <USB_EPStartXfer+0x318>
 800b2e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d10a      	bne.n	800b2fe <USB_EPStartXfer+0x294>
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ea:	881b      	ldrh	r3, [r3, #0]
 800b2ec:	b29b      	uxth	r3, r3
 800b2ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2f6:	b29a      	uxth	r2, r3
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	801a      	strh	r2, [r3, #0]
 800b2fc:	e041      	b.n	800b382 <USB_EPStartXfer+0x318>
 800b2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b302:	085b      	lsrs	r3, r3, #1
 800b304:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b308:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b30c:	f003 0301 	and.w	r3, r3, #1
 800b310:	2b00      	cmp	r3, #0
 800b312:	d004      	beq.n	800b31e <USB_EPStartXfer+0x2b4>
 800b314:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b318:	3301      	adds	r3, #1
 800b31a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b320:	881b      	ldrh	r3, [r3, #0]
 800b322:	b29a      	uxth	r2, r3
 800b324:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b328:	b29b      	uxth	r3, r3
 800b32a:	029b      	lsls	r3, r3, #10
 800b32c:	b29b      	uxth	r3, r3
 800b32e:	4313      	orrs	r3, r2
 800b330:	b29a      	uxth	r2, r3
 800b332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b334:	801a      	strh	r2, [r3, #0]
 800b336:	e024      	b.n	800b382 <USB_EPStartXfer+0x318>
 800b338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	785b      	ldrb	r3, [r3, #1]
 800b344:	2b01      	cmp	r3, #1
 800b346:	d11c      	bne.n	800b382 <USB_EPStartXfer+0x318>
 800b348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b356:	b29b      	uxth	r3, r3
 800b358:	461a      	mov	r2, r3
 800b35a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35c:	4413      	add	r3, r2
 800b35e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	00da      	lsls	r2, r3, #3
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	4413      	add	r3, r2
 800b372:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b376:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b37c:	b29a      	uxth	r2, r3
 800b37e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b380:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b382:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b386:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	895b      	ldrh	r3, [r3, #10]
 800b38e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	6959      	ldr	r1, [r3, #20]
 800b39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b3a8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b3ac:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b3b0:	6800      	ldr	r0, [r0, #0]
 800b3b2:	f001 fb45 	bl	800ca40 <USB_WritePMA>
            ep->xfer_buff += len;
 800b3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	695a      	ldr	r2, [r3, #20]
 800b3c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b3c6:	441a      	add	r2, r3
 800b3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	6a1a      	ldr	r2, [r3, #32]
 800b3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d90f      	bls.n	800b410 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b3f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	6a1a      	ldr	r2, [r3, #32]
 800b3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b400:	1ad2      	subs	r2, r2, r3
 800b402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	621a      	str	r2, [r3, #32]
 800b40e:	e00e      	b.n	800b42e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b414:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b420:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b424:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2200      	movs	r2, #0
 800b42c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b42e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d177      	bne.n	800b52e <USB_EPStartXfer+0x4c4>
 800b43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b442:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	61bb      	str	r3, [r7, #24]
 800b44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b44e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b458:	b29b      	uxth	r3, r3
 800b45a:	461a      	mov	r2, r3
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	4413      	add	r3, r2
 800b460:	61bb      	str	r3, [r7, #24]
 800b462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	00da      	lsls	r2, r3, #3
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	4413      	add	r3, r2
 800b474:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	881b      	ldrh	r3, [r3, #0]
 800b47e:	b29b      	uxth	r3, r3
 800b480:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b484:	b29a      	uxth	r2, r3
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	801a      	strh	r2, [r3, #0]
 800b48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b48e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b490:	d921      	bls.n	800b4d6 <USB_EPStartXfer+0x46c>
 800b492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b496:	095b      	lsrs	r3, r3, #5
 800b498:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b49c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4a0:	f003 031f 	and.w	r3, r3, #31
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d104      	bne.n	800b4b2 <USB_EPStartXfer+0x448>
 800b4a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	881b      	ldrh	r3, [r3, #0]
 800b4b6:	b29a      	uxth	r2, r3
 800b4b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	029b      	lsls	r3, r3, #10
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	4313      	orrs	r3, r2
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	697b      	ldr	r3, [r7, #20]
 800b4d2:	801a      	strh	r2, [r3, #0]
 800b4d4:	e056      	b.n	800b584 <USB_EPStartXfer+0x51a>
 800b4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d10a      	bne.n	800b4f4 <USB_EPStartXfer+0x48a>
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	881b      	ldrh	r3, [r3, #0]
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	801a      	strh	r2, [r3, #0]
 800b4f2:	e047      	b.n	800b584 <USB_EPStartXfer+0x51a>
 800b4f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b4f8:	085b      	lsrs	r3, r3, #1
 800b4fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b4fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b502:	f003 0301 	and.w	r3, r3, #1
 800b506:	2b00      	cmp	r3, #0
 800b508:	d004      	beq.n	800b514 <USB_EPStartXfer+0x4aa>
 800b50a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b50e:	3301      	adds	r3, #1
 800b510:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b514:	697b      	ldr	r3, [r7, #20]
 800b516:	881b      	ldrh	r3, [r3, #0]
 800b518:	b29a      	uxth	r2, r3
 800b51a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b51e:	b29b      	uxth	r3, r3
 800b520:	029b      	lsls	r3, r3, #10
 800b522:	b29b      	uxth	r3, r3
 800b524:	4313      	orrs	r3, r2
 800b526:	b29a      	uxth	r2, r3
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	801a      	strh	r2, [r3, #0]
 800b52c:	e02a      	b.n	800b584 <USB_EPStartXfer+0x51a>
 800b52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	785b      	ldrb	r3, [r3, #1]
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d122      	bne.n	800b584 <USB_EPStartXfer+0x51a>
 800b53e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b542:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	623b      	str	r3, [r7, #32]
 800b54a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b54e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b558:	b29b      	uxth	r3, r3
 800b55a:	461a      	mov	r2, r3
 800b55c:	6a3b      	ldr	r3, [r7, #32]
 800b55e:	4413      	add	r3, r2
 800b560:	623b      	str	r3, [r7, #32]
 800b562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b566:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	00da      	lsls	r2, r3, #3
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	4413      	add	r3, r2
 800b574:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b578:	61fb      	str	r3, [r7, #28]
 800b57a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b57e:	b29a      	uxth	r2, r3
 800b580:	69fb      	ldr	r3, [r7, #28]
 800b582:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	891b      	ldrh	r3, [r3, #8]
 800b590:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b594:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b598:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6959      	ldr	r1, [r3, #20]
 800b5a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5a4:	b29b      	uxth	r3, r3
 800b5a6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b5aa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b5ae:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b5b2:	6800      	ldr	r0, [r0, #0]
 800b5b4:	f001 fa44 	bl	800ca40 <USB_WritePMA>
 800b5b8:	e3ee      	b.n	800bd98 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b5ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	785b      	ldrb	r3, [r3, #1]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d177      	bne.n	800b6ba <USB_EPStartXfer+0x650>
 800b5ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5ea:	4413      	add	r3, r2
 800b5ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b5ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	781b      	ldrb	r3, [r3, #0]
 800b5fa:	00da      	lsls	r2, r3, #3
 800b5fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b5fe:	4413      	add	r3, r2
 800b600:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b604:	647b      	str	r3, [r7, #68]	@ 0x44
 800b606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b608:	881b      	ldrh	r3, [r3, #0]
 800b60a:	b29b      	uxth	r3, r3
 800b60c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b610:	b29a      	uxth	r2, r3
 800b612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b61c:	d921      	bls.n	800b662 <USB_EPStartXfer+0x5f8>
 800b61e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b622:	095b      	lsrs	r3, r3, #5
 800b624:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b62c:	f003 031f 	and.w	r3, r3, #31
 800b630:	2b00      	cmp	r3, #0
 800b632:	d104      	bne.n	800b63e <USB_EPStartXfer+0x5d4>
 800b634:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b638:	3b01      	subs	r3, #1
 800b63a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b63e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b640:	881b      	ldrh	r3, [r3, #0]
 800b642:	b29a      	uxth	r2, r3
 800b644:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b648:	b29b      	uxth	r3, r3
 800b64a:	029b      	lsls	r3, r3, #10
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	4313      	orrs	r3, r2
 800b650:	b29b      	uxth	r3, r3
 800b652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b65a:	b29a      	uxth	r2, r3
 800b65c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b65e:	801a      	strh	r2, [r3, #0]
 800b660:	e056      	b.n	800b710 <USB_EPStartXfer+0x6a6>
 800b662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10a      	bne.n	800b680 <USB_EPStartXfer+0x616>
 800b66a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b66c:	881b      	ldrh	r3, [r3, #0]
 800b66e:	b29b      	uxth	r3, r3
 800b670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b678:	b29a      	uxth	r2, r3
 800b67a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b67c:	801a      	strh	r2, [r3, #0]
 800b67e:	e047      	b.n	800b710 <USB_EPStartXfer+0x6a6>
 800b680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b684:	085b      	lsrs	r3, r3, #1
 800b686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b68a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b68e:	f003 0301 	and.w	r3, r3, #1
 800b692:	2b00      	cmp	r3, #0
 800b694:	d004      	beq.n	800b6a0 <USB_EPStartXfer+0x636>
 800b696:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b69a:	3301      	adds	r3, #1
 800b69c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b6a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b6aa:	b29b      	uxth	r3, r3
 800b6ac:	029b      	lsls	r3, r3, #10
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	b29a      	uxth	r2, r3
 800b6b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b6b6:	801a      	strh	r2, [r3, #0]
 800b6b8:	e02a      	b.n	800b710 <USB_EPStartXfer+0x6a6>
 800b6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	785b      	ldrb	r3, [r3, #1]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	d122      	bne.n	800b710 <USB_EPStartXfer+0x6a6>
 800b6ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6ea:	4413      	add	r3, r2
 800b6ec:	653b      	str	r3, [r7, #80]	@ 0x50
 800b6ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	781b      	ldrb	r3, [r3, #0]
 800b6fa:	00da      	lsls	r2, r3, #3
 800b6fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b6fe:	4413      	add	r3, r2
 800b700:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b704:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b70e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b710:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b714:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	891b      	ldrh	r3, [r3, #8]
 800b71c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6959      	ldr	r1, [r3, #20]
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b730:	b29b      	uxth	r3, r3
 800b732:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b736:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b73a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b73e:	6800      	ldr	r0, [r0, #0]
 800b740:	f001 f97e 	bl	800ca40 <USB_WritePMA>
            ep->xfer_buff += len;
 800b744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	695a      	ldr	r2, [r3, #20]
 800b750:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b754:	441a      	add	r2, r3
 800b756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b75a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b766:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	6a1a      	ldr	r2, [r3, #32]
 800b76e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b772:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	691b      	ldr	r3, [r3, #16]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d90f      	bls.n	800b79e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b77e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b782:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	6a1a      	ldr	r2, [r3, #32]
 800b78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b78e:	1ad2      	subs	r2, r2, r3
 800b790:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b794:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	621a      	str	r2, [r3, #32]
 800b79c:	e00e      	b.n	800b7bc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b79e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	6a1b      	ldr	r3, [r3, #32]
 800b7aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b7ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b7bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b7c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	785b      	ldrb	r3, [r3, #1]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d177      	bne.n	800b8c8 <USB_EPStartXfer+0x85e>
 800b7d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f8:	4413      	add	r3, r2
 800b7fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b7fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	00da      	lsls	r2, r3, #3
 800b80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80c:	4413      	add	r3, r2
 800b80e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b812:	637b      	str	r3, [r7, #52]	@ 0x34
 800b814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b816:	881b      	ldrh	r3, [r3, #0]
 800b818:	b29b      	uxth	r3, r3
 800b81a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b828:	2b3e      	cmp	r3, #62	@ 0x3e
 800b82a:	d921      	bls.n	800b870 <USB_EPStartXfer+0x806>
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b830:	095b      	lsrs	r3, r3, #5
 800b832:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b836:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b83a:	f003 031f 	and.w	r3, r3, #31
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d104      	bne.n	800b84c <USB_EPStartXfer+0x7e2>
 800b842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b846:	3b01      	subs	r3, #1
 800b848:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b84c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b84e:	881b      	ldrh	r3, [r3, #0]
 800b850:	b29a      	uxth	r2, r3
 800b852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b856:	b29b      	uxth	r3, r3
 800b858:	029b      	lsls	r3, r3, #10
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	4313      	orrs	r3, r2
 800b85e:	b29b      	uxth	r3, r3
 800b860:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b864:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b868:	b29a      	uxth	r2, r3
 800b86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b86c:	801a      	strh	r2, [r3, #0]
 800b86e:	e050      	b.n	800b912 <USB_EPStartXfer+0x8a8>
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <USB_EPStartXfer+0x824>
 800b878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b87a:	881b      	ldrh	r3, [r3, #0]
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b886:	b29a      	uxth	r2, r3
 800b888:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b88a:	801a      	strh	r2, [r3, #0]
 800b88c:	e041      	b.n	800b912 <USB_EPStartXfer+0x8a8>
 800b88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b892:	085b      	lsrs	r3, r3, #1
 800b894:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d004      	beq.n	800b8ae <USB_EPStartXfer+0x844>
 800b8a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b8ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8b0:	881b      	ldrh	r3, [r3, #0]
 800b8b2:	b29a      	uxth	r2, r3
 800b8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	029b      	lsls	r3, r3, #10
 800b8bc:	b29b      	uxth	r3, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c4:	801a      	strh	r2, [r3, #0]
 800b8c6:	e024      	b.n	800b912 <USB_EPStartXfer+0x8a8>
 800b8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	d11c      	bne.n	800b912 <USB_EPStartXfer+0x8a8>
 800b8d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ec:	4413      	add	r3, r2
 800b8ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	781b      	ldrb	r3, [r3, #0]
 800b8fc:	00da      	lsls	r2, r3, #3
 800b8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b900:	4413      	add	r3, r2
 800b902:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b90c:	b29a      	uxth	r2, r3
 800b90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b910:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	895b      	ldrh	r3, [r3, #10]
 800b91e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6959      	ldr	r1, [r3, #20]
 800b92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b932:	b29b      	uxth	r3, r3
 800b934:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b938:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b93c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b940:	6800      	ldr	r0, [r0, #0]
 800b942:	f001 f87d 	bl	800ca40 <USB_WritePMA>
 800b946:	e227      	b.n	800bd98 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b966:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	4413      	add	r3, r2
 800b972:	881b      	ldrh	r3, [r3, #0]
 800b974:	b29b      	uxth	r3, r3
 800b976:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b97a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b97e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b98a:	681a      	ldr	r2, [r3, #0]
 800b98c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	441a      	add	r2, r3
 800b99c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b9a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b9b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9d4:	4413      	add	r3, r2
 800b9d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b9d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	00da      	lsls	r2, r3, #3
 800b9e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b9ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9f8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b9fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	891b      	ldrh	r3, [r3, #8]
 800ba06:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ba0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	6959      	ldr	r1, [r3, #20]
 800ba16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ba20:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ba24:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ba28:	6800      	ldr	r0, [r0, #0]
 800ba2a:	f001 f809 	bl	800ca40 <USB_WritePMA>
 800ba2e:	e1b3      	b.n	800bd98 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ba30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	6a1a      	ldr	r2, [r3, #32]
 800ba3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ba4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba56:	681a      	ldr	r2, [r3, #0]
 800ba58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	4413      	add	r3, r2
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	f000 80c6 	beq.w	800bc02 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba7a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	785b      	ldrb	r3, [r3, #1]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d177      	bne.n	800bb82 <USB_EPStartXfer+0xb18>
 800ba92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baa2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800baac:	b29b      	uxth	r3, r3
 800baae:	461a      	mov	r2, r3
 800bab0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bab2:	4413      	add	r3, r2
 800bab4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800baba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	781b      	ldrb	r3, [r3, #0]
 800bac2:	00da      	lsls	r2, r3, #3
 800bac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bac6:	4413      	add	r3, r2
 800bac8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bacc:	667b      	str	r3, [r7, #100]	@ 0x64
 800bace:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bad0:	881b      	ldrh	r3, [r3, #0]
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bad8:	b29a      	uxth	r2, r3
 800bada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800badc:	801a      	strh	r2, [r3, #0]
 800bade:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae2:	2b3e      	cmp	r3, #62	@ 0x3e
 800bae4:	d921      	bls.n	800bb2a <USB_EPStartXfer+0xac0>
 800bae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baea:	095b      	lsrs	r3, r3, #5
 800baec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800baf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baf4:	f003 031f 	and.w	r3, r3, #31
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d104      	bne.n	800bb06 <USB_EPStartXfer+0xa9c>
 800bafc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb00:	3b01      	subs	r3, #1
 800bb02:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb08:	881b      	ldrh	r3, [r3, #0]
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb10:	b29b      	uxth	r3, r3
 800bb12:	029b      	lsls	r3, r3, #10
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	4313      	orrs	r3, r2
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb22:	b29a      	uxth	r2, r3
 800bb24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb26:	801a      	strh	r2, [r3, #0]
 800bb28:	e050      	b.n	800bbcc <USB_EPStartXfer+0xb62>
 800bb2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d10a      	bne.n	800bb48 <USB_EPStartXfer+0xade>
 800bb32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb44:	801a      	strh	r2, [r3, #0]
 800bb46:	e041      	b.n	800bbcc <USB_EPStartXfer+0xb62>
 800bb48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb4c:	085b      	lsrs	r3, r3, #1
 800bb4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb56:	f003 0301 	and.w	r3, r3, #1
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d004      	beq.n	800bb68 <USB_EPStartXfer+0xafe>
 800bb5e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb62:	3301      	adds	r3, #1
 800bb64:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb6a:	881b      	ldrh	r3, [r3, #0]
 800bb6c:	b29a      	uxth	r2, r3
 800bb6e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb72:	b29b      	uxth	r3, r3
 800bb74:	029b      	lsls	r3, r3, #10
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb7e:	801a      	strh	r2, [r3, #0]
 800bb80:	e024      	b.n	800bbcc <USB_EPStartXfer+0xb62>
 800bb82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	785b      	ldrb	r3, [r3, #1]
 800bb8e:	2b01      	cmp	r3, #1
 800bb90:	d11c      	bne.n	800bbcc <USB_EPStartXfer+0xb62>
 800bb92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	461a      	mov	r2, r3
 800bba4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bba6:	4413      	add	r3, r2
 800bba8:	673b      	str	r3, [r7, #112]	@ 0x70
 800bbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	00da      	lsls	r2, r3, #3
 800bbb8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bbba:	4413      	add	r3, r2
 800bbbc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bbc0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bbc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bbcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	895b      	ldrh	r3, [r3, #10]
 800bbd8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bbdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	6959      	ldr	r1, [r3, #20]
 800bbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbec:	b29b      	uxth	r3, r3
 800bbee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bbf2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bbf6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bbfa:	6800      	ldr	r0, [r0, #0]
 800bbfc:	f000 ff20 	bl	800ca40 <USB_WritePMA>
 800bc00:	e0ca      	b.n	800bd98 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bc02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	785b      	ldrb	r3, [r3, #1]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d177      	bne.n	800bd02 <USB_EPStartXfer+0xc98>
 800bc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc22:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	461a      	mov	r2, r3
 800bc30:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc32:	4413      	add	r3, r2
 800bc34:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bc36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	00da      	lsls	r2, r3, #3
 800bc44:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bc46:	4413      	add	r3, r2
 800bc48:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bc4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bc4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	b29b      	uxth	r3, r3
 800bc54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc5c:	801a      	strh	r2, [r3, #0]
 800bc5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc62:	2b3e      	cmp	r3, #62	@ 0x3e
 800bc64:	d921      	bls.n	800bcaa <USB_EPStartXfer+0xc40>
 800bc66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6a:	095b      	lsrs	r3, r3, #5
 800bc6c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc74:	f003 031f 	and.w	r3, r3, #31
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <USB_EPStartXfer+0xc1c>
 800bc7c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc80:	3b01      	subs	r3, #1
 800bc82:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc88:	881b      	ldrh	r3, [r3, #0]
 800bc8a:	b29a      	uxth	r2, r3
 800bc8c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	029b      	lsls	r3, r3, #10
 800bc94:	b29b      	uxth	r3, r3
 800bc96:	4313      	orrs	r3, r2
 800bc98:	b29b      	uxth	r3, r3
 800bc9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bca6:	801a      	strh	r2, [r3, #0]
 800bca8:	e05c      	b.n	800bd64 <USB_EPStartXfer+0xcfa>
 800bcaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10a      	bne.n	800bcc8 <USB_EPStartXfer+0xc5e>
 800bcb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcb4:	881b      	ldrh	r3, [r3, #0]
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bcbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcc4:	801a      	strh	r2, [r3, #0]
 800bcc6:	e04d      	b.n	800bd64 <USB_EPStartXfer+0xcfa>
 800bcc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bccc:	085b      	lsrs	r3, r3, #1
 800bcce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bcd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d004      	beq.n	800bce8 <USB_EPStartXfer+0xc7e>
 800bcde:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bce2:	3301      	adds	r3, #1
 800bce4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bce8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcea:	881b      	ldrh	r3, [r3, #0]
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	029b      	lsls	r3, r3, #10
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	4313      	orrs	r3, r2
 800bcfa:	b29a      	uxth	r2, r3
 800bcfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bcfe:	801a      	strh	r2, [r3, #0]
 800bd00:	e030      	b.n	800bd64 <USB_EPStartXfer+0xcfa>
 800bd02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	d128      	bne.n	800bd64 <USB_EPStartXfer+0xcfa>
 800bd12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	461a      	mov	r2, r3
 800bd32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd36:	4413      	add	r3, r2
 800bd38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bd3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	781b      	ldrb	r3, [r3, #0]
 800bd48:	00da      	lsls	r2, r3, #3
 800bd4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bd4e:	4413      	add	r3, r2
 800bd50:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bd54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bd58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bd62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bd64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	891b      	ldrh	r3, [r3, #8]
 800bd70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	6959      	ldr	r1, [r3, #20]
 800bd80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd84:	b29b      	uxth	r3, r3
 800bd86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd92:	6800      	ldr	r0, [r0, #0]
 800bd94:	f000 fe54 	bl	800ca40 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	009b      	lsls	r3, r3, #2
 800bdb0:	4413      	add	r3, r2
 800bdb2:	881b      	ldrh	r3, [r3, #0]
 800bdb4:	b29b      	uxth	r3, r3
 800bdb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bdba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bdbe:	817b      	strh	r3, [r7, #10]
 800bdc0:	897b      	ldrh	r3, [r7, #10]
 800bdc2:	f083 0310 	eor.w	r3, r3, #16
 800bdc6:	817b      	strh	r3, [r7, #10]
 800bdc8:	897b      	ldrh	r3, [r7, #10]
 800bdca:	f083 0320 	eor.w	r3, r3, #32
 800bdce:	817b      	strh	r3, [r7, #10]
 800bdd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	441a      	add	r2, r3
 800bdea:	897b      	ldrh	r3, [r7, #10]
 800bdec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bdf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bdf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bdf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdfc:	b29b      	uxth	r3, r3
 800bdfe:	8013      	strh	r3, [r2, #0]
 800be00:	f000 bcde 	b.w	800c7c0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800be04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	7b1b      	ldrb	r3, [r3, #12]
 800be10:	2b00      	cmp	r3, #0
 800be12:	f040 80bb 	bne.w	800bf8c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800be16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	699a      	ldr	r2, [r3, #24]
 800be22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d917      	bls.n	800be62 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800be32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800be42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	699a      	ldr	r2, [r3, #24]
 800be4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be52:	1ad2      	subs	r2, r2, r3
 800be54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	619a      	str	r2, [r3, #24]
 800be60:	e00e      	b.n	800be80 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800be62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	699b      	ldr	r3, [r3, #24]
 800be6e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800be72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	2200      	movs	r2, #0
 800be7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	461a      	mov	r2, r3
 800bea0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bea4:	4413      	add	r3, r2
 800bea6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800beaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800beae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	00da      	lsls	r2, r3, #3
 800beb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800bebc:	4413      	add	r3, r2
 800bebe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bec2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800bec6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800beca:	881b      	ldrh	r3, [r3, #0]
 800becc:	b29b      	uxth	r3, r3
 800bece:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bed2:	b29a      	uxth	r2, r3
 800bed4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bed8:	801a      	strh	r2, [r3, #0]
 800beda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bede:	2b3e      	cmp	r3, #62	@ 0x3e
 800bee0:	d924      	bls.n	800bf2c <USB_EPStartXfer+0xec2>
 800bee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bee6:	095b      	lsrs	r3, r3, #5
 800bee8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800beec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef0:	f003 031f 	and.w	r3, r3, #31
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d104      	bne.n	800bf02 <USB_EPStartXfer+0xe98>
 800bef8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800befc:	3b01      	subs	r3, #1
 800befe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	b29a      	uxth	r2, r3
 800bf0a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf0e:	b29b      	uxth	r3, r3
 800bf10:	029b      	lsls	r3, r3, #10
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	4313      	orrs	r3, r2
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf26:	801a      	strh	r2, [r3, #0]
 800bf28:	f000 bc10 	b.w	800c74c <USB_EPStartXfer+0x16e2>
 800bf2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10c      	bne.n	800bf4e <USB_EPStartXfer+0xee4>
 800bf34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf38:	881b      	ldrh	r3, [r3, #0]
 800bf3a:	b29b      	uxth	r3, r3
 800bf3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bf40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bf44:	b29a      	uxth	r2, r3
 800bf46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf4a:	801a      	strh	r2, [r3, #0]
 800bf4c:	e3fe      	b.n	800c74c <USB_EPStartXfer+0x16e2>
 800bf4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf52:	085b      	lsrs	r3, r3, #1
 800bf54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bf5c:	f003 0301 	and.w	r3, r3, #1
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <USB_EPStartXfer+0xf04>
 800bf64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf68:	3301      	adds	r3, #1
 800bf6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf72:	881b      	ldrh	r3, [r3, #0]
 800bf74:	b29a      	uxth	r2, r3
 800bf76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	029b      	lsls	r3, r3, #10
 800bf7e:	b29b      	uxth	r3, r3
 800bf80:	4313      	orrs	r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	e3df      	b.n	800c74c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bf8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	78db      	ldrb	r3, [r3, #3]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	f040 8218 	bne.w	800c3ce <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	785b      	ldrb	r3, [r3, #1]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	f040 809d 	bne.w	800c0ea <USB_EPStartXfer+0x1080>
 800bfb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	461a      	mov	r2, r3
 800bfd0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfd4:	4413      	add	r3, r2
 800bfd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bfda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	00da      	lsls	r2, r3, #3
 800bfe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bfec:	4413      	add	r3, r2
 800bfee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bffa:	881b      	ldrh	r3, [r3, #0]
 800bffc:	b29b      	uxth	r3, r3
 800bffe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c002:	b29a      	uxth	r2, r3
 800c004:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	2b3e      	cmp	r3, #62	@ 0x3e
 800c018:	d92b      	bls.n	800c072 <USB_EPStartXfer+0x1008>
 800c01a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c01e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	095b      	lsrs	r3, r3, #5
 800c028:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c02c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c030:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	f003 031f 	and.w	r3, r3, #31
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d104      	bne.n	800c04a <USB_EPStartXfer+0xfe0>
 800c040:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c044:	3b01      	subs	r3, #1
 800c046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c04a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c04e:	881b      	ldrh	r3, [r3, #0]
 800c050:	b29a      	uxth	r2, r3
 800c052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c056:	b29b      	uxth	r3, r3
 800c058:	029b      	lsls	r3, r3, #10
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	4313      	orrs	r3, r2
 800c05e:	b29b      	uxth	r3, r3
 800c060:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c064:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c068:	b29a      	uxth	r2, r3
 800c06a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c06e:	801a      	strh	r2, [r3, #0]
 800c070:	e070      	b.n	800c154 <USB_EPStartXfer+0x10ea>
 800c072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d10c      	bne.n	800c09c <USB_EPStartXfer+0x1032>
 800c082:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c086:	881b      	ldrh	r3, [r3, #0]
 800c088:	b29b      	uxth	r3, r3
 800c08a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c08e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c092:	b29a      	uxth	r2, r3
 800c094:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c098:	801a      	strh	r2, [r3, #0]
 800c09a:	e05b      	b.n	800c154 <USB_EPStartXfer+0x10ea>
 800c09c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	691b      	ldr	r3, [r3, #16]
 800c0a8:	085b      	lsrs	r3, r3, #1
 800c0aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c0ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <USB_EPStartXfer+0x1062>
 800c0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c0cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0d0:	881b      	ldrh	r3, [r3, #0]
 800c0d2:	b29a      	uxth	r2, r3
 800c0d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c0d8:	b29b      	uxth	r3, r3
 800c0da:	029b      	lsls	r3, r3, #10
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	b29a      	uxth	r2, r3
 800c0e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c0e6:	801a      	strh	r2, [r3, #0]
 800c0e8:	e034      	b.n	800c154 <USB_EPStartXfer+0x10ea>
 800c0ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d12c      	bne.n	800c154 <USB_EPStartXfer+0x10ea>
 800c0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c108:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c10c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c116:	b29b      	uxth	r3, r3
 800c118:	461a      	mov	r2, r3
 800c11a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c11e:	4413      	add	r3, r2
 800c120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c124:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c128:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	00da      	lsls	r2, r3, #3
 800c132:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c136:	4413      	add	r3, r2
 800c138:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c13c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c140:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c144:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c152:	801a      	strh	r2, [r3, #0]
 800c154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c158:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	785b      	ldrb	r3, [r3, #1]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	f040 809d 	bne.w	800c2ae <USB_EPStartXfer+0x1244>
 800c174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c178:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c190:	b29b      	uxth	r3, r3
 800c192:	461a      	mov	r2, r3
 800c194:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c198:	4413      	add	r3, r2
 800c19a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	00da      	lsls	r2, r3, #3
 800c1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c1b0:	4413      	add	r3, r2
 800c1b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c1b6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c1ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1be:	881b      	ldrh	r3, [r3, #0]
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c1c6:	b29a      	uxth	r2, r3
 800c1c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1cc:	801a      	strh	r2, [r3, #0]
 800c1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	2b3e      	cmp	r3, #62	@ 0x3e
 800c1dc:	d92b      	bls.n	800c236 <USB_EPStartXfer+0x11cc>
 800c1de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	095b      	lsrs	r3, r3, #5
 800c1ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	691b      	ldr	r3, [r3, #16]
 800c1fc:	f003 031f 	and.w	r3, r3, #31
 800c200:	2b00      	cmp	r3, #0
 800c202:	d104      	bne.n	800c20e <USB_EPStartXfer+0x11a4>
 800c204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c208:	3b01      	subs	r3, #1
 800c20a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c20e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c212:	881b      	ldrh	r3, [r3, #0]
 800c214:	b29a      	uxth	r2, r3
 800c216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c21a:	b29b      	uxth	r3, r3
 800c21c:	029b      	lsls	r3, r3, #10
 800c21e:	b29b      	uxth	r3, r3
 800c220:	4313      	orrs	r3, r2
 800c222:	b29b      	uxth	r3, r3
 800c224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c22c:	b29a      	uxth	r2, r3
 800c22e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c232:	801a      	strh	r2, [r3, #0]
 800c234:	e069      	b.n	800c30a <USB_EPStartXfer+0x12a0>
 800c236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	691b      	ldr	r3, [r3, #16]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d10c      	bne.n	800c260 <USB_EPStartXfer+0x11f6>
 800c246:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	b29b      	uxth	r3, r3
 800c24e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c252:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c256:	b29a      	uxth	r2, r3
 800c258:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c25c:	801a      	strh	r2, [r3, #0]
 800c25e:	e054      	b.n	800c30a <USB_EPStartXfer+0x12a0>
 800c260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	691b      	ldr	r3, [r3, #16]
 800c26c:	085b      	lsrs	r3, r3, #1
 800c26e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	691b      	ldr	r3, [r3, #16]
 800c27e:	f003 0301 	and.w	r3, r3, #1
 800c282:	2b00      	cmp	r3, #0
 800c284:	d004      	beq.n	800c290 <USB_EPStartXfer+0x1226>
 800c286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c28a:	3301      	adds	r3, #1
 800c28c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c290:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c294:	881b      	ldrh	r3, [r3, #0]
 800c296:	b29a      	uxth	r2, r3
 800c298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c29c:	b29b      	uxth	r3, r3
 800c29e:	029b      	lsls	r3, r3, #10
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b29a      	uxth	r2, r3
 800c2a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c2aa:	801a      	strh	r2, [r3, #0]
 800c2ac:	e02d      	b.n	800c30a <USB_EPStartXfer+0x12a0>
 800c2ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	785b      	ldrb	r3, [r3, #1]
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	d125      	bne.n	800c30a <USB_EPStartXfer+0x12a0>
 800c2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c2cc:	b29b      	uxth	r3, r3
 800c2ce:	461a      	mov	r2, r3
 800c2d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	781b      	ldrb	r3, [r3, #0]
 800c2e6:	00da      	lsls	r2, r3, #3
 800c2e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c2f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c2f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	b29a      	uxth	r2, r3
 800c304:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c308:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c30a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c30e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	69db      	ldr	r3, [r3, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	f000 8218 	beq.w	800c74c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c320:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c32a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c33c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c340:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c344:	2b00      	cmp	r3, #0
 800c346:	d005      	beq.n	800c354 <USB_EPStartXfer+0x12ea>
 800c348:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c34c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c350:	2b00      	cmp	r3, #0
 800c352:	d10d      	bne.n	800c370 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c354:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c358:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f040 81f5 	bne.w	800c74c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c362:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	f040 81ee 	bne.w	800c74c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c374:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	781b      	ldrb	r3, [r3, #0]
 800c386:	009b      	lsls	r3, r3, #2
 800c388:	4413      	add	r3, r2
 800c38a:	881b      	ldrh	r3, [r3, #0]
 800c38c:	b29b      	uxth	r3, r3
 800c38e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c392:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c396:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c39e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3a2:	681a      	ldr	r2, [r3, #0]
 800c3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	441a      	add	r2, r3
 800c3b4:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c3b8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c3bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c3c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c3c4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c3c8:	b29b      	uxth	r3, r3
 800c3ca:	8013      	strh	r3, [r2, #0]
 800c3cc:	e1be      	b.n	800c74c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c3ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	78db      	ldrb	r3, [r3, #3]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	f040 81b4 	bne.w	800c748 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	699a      	ldr	r2, [r3, #24]
 800c3ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	691b      	ldr	r3, [r3, #16]
 800c3f8:	429a      	cmp	r2, r3
 800c3fa:	d917      	bls.n	800c42c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c3fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c400:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	691b      	ldr	r3, [r3, #16]
 800c408:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	699a      	ldr	r2, [r3, #24]
 800c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c41c:	1ad2      	subs	r2, r2, r3
 800c41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	619a      	str	r2, [r3, #24]
 800c42a:	e00e      	b.n	800c44a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	699b      	ldr	r3, [r3, #24]
 800c438:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c440:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	2200      	movs	r2, #0
 800c448:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c44a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c44e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	2b00      	cmp	r3, #0
 800c458:	f040 8085 	bne.w	800c566 <USB_EPStartXfer+0x14fc>
 800c45c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c460:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c46a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c46e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c478:	b29b      	uxth	r3, r3
 800c47a:	461a      	mov	r2, r3
 800c47c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c480:	4413      	add	r3, r2
 800c482:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	00da      	lsls	r2, r3, #3
 800c494:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c498:	4413      	add	r3, r2
 800c49a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c49e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c4a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4a6:	881b      	ldrh	r3, [r3, #0]
 800c4a8:	b29b      	uxth	r3, r3
 800c4aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c4ae:	b29a      	uxth	r2, r3
 800c4b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4b4:	801a      	strh	r2, [r3, #0]
 800c4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800c4bc:	d923      	bls.n	800c506 <USB_EPStartXfer+0x149c>
 800c4be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c2:	095b      	lsrs	r3, r3, #5
 800c4c4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4cc:	f003 031f 	and.w	r3, r3, #31
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d104      	bne.n	800c4de <USB_EPStartXfer+0x1474>
 800c4d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4e2:	881b      	ldrh	r3, [r3, #0]
 800c4e4:	b29a      	uxth	r2, r3
 800c4e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4ea:	b29b      	uxth	r3, r3
 800c4ec:	029b      	lsls	r3, r3, #10
 800c4ee:	b29b      	uxth	r3, r3
 800c4f0:	4313      	orrs	r3, r2
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4fc:	b29a      	uxth	r2, r3
 800c4fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c502:	801a      	strh	r2, [r3, #0]
 800c504:	e060      	b.n	800c5c8 <USB_EPStartXfer+0x155e>
 800c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10c      	bne.n	800c528 <USB_EPStartXfer+0x14be>
 800c50e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c512:	881b      	ldrh	r3, [r3, #0]
 800c514:	b29b      	uxth	r3, r3
 800c516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c51a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c51e:	b29a      	uxth	r2, r3
 800c520:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c524:	801a      	strh	r2, [r3, #0]
 800c526:	e04f      	b.n	800c5c8 <USB_EPStartXfer+0x155e>
 800c528:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c52c:	085b      	lsrs	r3, r3, #1
 800c52e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c536:	f003 0301 	and.w	r3, r3, #1
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d004      	beq.n	800c548 <USB_EPStartXfer+0x14de>
 800c53e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c542:	3301      	adds	r3, #1
 800c544:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c54c:	881b      	ldrh	r3, [r3, #0]
 800c54e:	b29a      	uxth	r2, r3
 800c550:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c554:	b29b      	uxth	r3, r3
 800c556:	029b      	lsls	r3, r3, #10
 800c558:	b29b      	uxth	r3, r3
 800c55a:	4313      	orrs	r3, r2
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c562:	801a      	strh	r2, [r3, #0]
 800c564:	e030      	b.n	800c5c8 <USB_EPStartXfer+0x155e>
 800c566:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c56a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	785b      	ldrb	r3, [r3, #1]
 800c572:	2b01      	cmp	r3, #1
 800c574:	d128      	bne.n	800c5c8 <USB_EPStartXfer+0x155e>
 800c576:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c57a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c588:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c592:	b29b      	uxth	r3, r3
 800c594:	461a      	mov	r2, r3
 800c596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c59a:	4413      	add	r3, r2
 800c59c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c5a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	781b      	ldrb	r3, [r3, #0]
 800c5ac:	00da      	lsls	r2, r3, #3
 800c5ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c5bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5c0:	b29a      	uxth	r2, r3
 800c5c2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c5c6:	801a      	strh	r2, [r3, #0]
 800c5c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c5d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	785b      	ldrb	r3, [r3, #1]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	f040 8085 	bne.w	800c6f2 <USB_EPStartXfer+0x1688>
 800c5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c5f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c604:	b29b      	uxth	r3, r3
 800c606:	461a      	mov	r2, r3
 800c608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c60c:	4413      	add	r3, r2
 800c60e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c616:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	00da      	lsls	r2, r3, #3
 800c620:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c624:	4413      	add	r3, r2
 800c626:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c62a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c62e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c632:	881b      	ldrh	r3, [r3, #0]
 800c634:	b29b      	uxth	r3, r3
 800c636:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c63a:	b29a      	uxth	r2, r3
 800c63c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c640:	801a      	strh	r2, [r3, #0]
 800c642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c646:	2b3e      	cmp	r3, #62	@ 0x3e
 800c648:	d923      	bls.n	800c692 <USB_EPStartXfer+0x1628>
 800c64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c64e:	095b      	lsrs	r3, r3, #5
 800c650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c658:	f003 031f 	and.w	r3, r3, #31
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d104      	bne.n	800c66a <USB_EPStartXfer+0x1600>
 800c660:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c664:	3b01      	subs	r3, #1
 800c666:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c66a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c66e:	881b      	ldrh	r3, [r3, #0]
 800c670:	b29a      	uxth	r2, r3
 800c672:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c676:	b29b      	uxth	r3, r3
 800c678:	029b      	lsls	r3, r3, #10
 800c67a:	b29b      	uxth	r3, r3
 800c67c:	4313      	orrs	r3, r2
 800c67e:	b29b      	uxth	r3, r3
 800c680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c688:	b29a      	uxth	r2, r3
 800c68a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c68e:	801a      	strh	r2, [r3, #0]
 800c690:	e05c      	b.n	800c74c <USB_EPStartXfer+0x16e2>
 800c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c696:	2b00      	cmp	r3, #0
 800c698:	d10c      	bne.n	800c6b4 <USB_EPStartXfer+0x164a>
 800c69a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c69e:	881b      	ldrh	r3, [r3, #0]
 800c6a0:	b29b      	uxth	r3, r3
 800c6a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c6a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c6aa:	b29a      	uxth	r2, r3
 800c6ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6b0:	801a      	strh	r2, [r3, #0]
 800c6b2:	e04b      	b.n	800c74c <USB_EPStartXfer+0x16e2>
 800c6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6b8:	085b      	lsrs	r3, r3, #1
 800c6ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6c2:	f003 0301 	and.w	r3, r3, #1
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d004      	beq.n	800c6d4 <USB_EPStartXfer+0x166a>
 800c6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c6d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6d8:	881b      	ldrh	r3, [r3, #0]
 800c6da:	b29a      	uxth	r2, r3
 800c6dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c6e0:	b29b      	uxth	r3, r3
 800c6e2:	029b      	lsls	r3, r3, #10
 800c6e4:	b29b      	uxth	r3, r3
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	b29a      	uxth	r2, r3
 800c6ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c6ee:	801a      	strh	r2, [r3, #0]
 800c6f0:	e02c      	b.n	800c74c <USB_EPStartXfer+0x16e2>
 800c6f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d124      	bne.n	800c74c <USB_EPStartXfer+0x16e2>
 800c702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c710:	b29b      	uxth	r3, r3
 800c712:	461a      	mov	r2, r3
 800c714:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c718:	4413      	add	r3, r2
 800c71a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c71e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c722:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	00da      	lsls	r2, r3, #3
 800c72c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c730:	4413      	add	r3, r2
 800c732:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c736:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c73a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c73e:	b29a      	uxth	r2, r3
 800c740:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c744:	801a      	strh	r2, [r3, #0]
 800c746:	e001      	b.n	800c74c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c748:	2301      	movs	r3, #1
 800c74a:	e03a      	b.n	800c7c2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c74c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c750:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c75a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	781b      	ldrb	r3, [r3, #0]
 800c762:	009b      	lsls	r3, r3, #2
 800c764:	4413      	add	r3, r2
 800c766:	881b      	ldrh	r3, [r3, #0]
 800c768:	b29b      	uxth	r3, r3
 800c76a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c772:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c776:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c77a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c77e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c782:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c786:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c78a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c792:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c79c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	781b      	ldrb	r3, [r3, #0]
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	441a      	add	r2, r3
 800c7a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c7ac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7b0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7bc:	b29b      	uxth	r3, r3
 800c7be:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c7c0:	2300      	movs	r3, #0
}
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b085      	sub	sp, #20
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
 800c7d4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	785b      	ldrb	r3, [r3, #1]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d020      	beq.n	800c820 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c7de:	687a      	ldr	r2, [r7, #4]
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	009b      	lsls	r3, r3, #2
 800c7e6:	4413      	add	r3, r2
 800c7e8:	881b      	ldrh	r3, [r3, #0]
 800c7ea:	b29b      	uxth	r3, r3
 800c7ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c7f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7f4:	81bb      	strh	r3, [r7, #12]
 800c7f6:	89bb      	ldrh	r3, [r7, #12]
 800c7f8:	f083 0310 	eor.w	r3, r3, #16
 800c7fc:	81bb      	strh	r3, [r7, #12]
 800c7fe:	687a      	ldr	r2, [r7, #4]
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	009b      	lsls	r3, r3, #2
 800c806:	441a      	add	r2, r3
 800c808:	89bb      	ldrh	r3, [r7, #12]
 800c80a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c80e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c816:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c81a:	b29b      	uxth	r3, r3
 800c81c:	8013      	strh	r3, [r2, #0]
 800c81e:	e01f      	b.n	800c860 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c820:	687a      	ldr	r2, [r7, #4]
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	4413      	add	r3, r2
 800c82a:	881b      	ldrh	r3, [r3, #0]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c836:	81fb      	strh	r3, [r7, #14]
 800c838:	89fb      	ldrh	r3, [r7, #14]
 800c83a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c83e:	81fb      	strh	r3, [r7, #14]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	781b      	ldrb	r3, [r3, #0]
 800c846:	009b      	lsls	r3, r3, #2
 800c848:	441a      	add	r2, r3
 800c84a:	89fb      	ldrh	r3, [r7, #14]
 800c84c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c850:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c854:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c858:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c85c:	b29b      	uxth	r3, r3
 800c85e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c860:	2300      	movs	r3, #0
}
 800c862:	4618      	mov	r0, r3
 800c864:	3714      	adds	r7, #20
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c86e:	b480      	push	{r7}
 800c870:	b087      	sub	sp, #28
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
 800c876:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	7b1b      	ldrb	r3, [r3, #12]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 809d 	bne.w	800c9bc <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	785b      	ldrb	r3, [r3, #1]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d04c      	beq.n	800c924 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	4413      	add	r3, r2
 800c894:	881b      	ldrh	r3, [r3, #0]
 800c896:	823b      	strh	r3, [r7, #16]
 800c898:	8a3b      	ldrh	r3, [r7, #16]
 800c89a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d01b      	beq.n	800c8da <USB_EPClearStall+0x6c>
 800c8a2:	687a      	ldr	r2, [r7, #4]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	4413      	add	r3, r2
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8b8:	81fb      	strh	r3, [r7, #14]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	009b      	lsls	r3, r3, #2
 800c8c2:	441a      	add	r2, r3
 800c8c4:	89fb      	ldrh	r3, [r7, #14]
 800c8c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8d2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c8d6:	b29b      	uxth	r3, r3
 800c8d8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	78db      	ldrb	r3, [r3, #3]
 800c8de:	2b01      	cmp	r3, #1
 800c8e0:	d06c      	beq.n	800c9bc <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	009b      	lsls	r3, r3, #2
 800c8ea:	4413      	add	r3, r2
 800c8ec:	881b      	ldrh	r3, [r3, #0]
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c8f8:	81bb      	strh	r3, [r7, #12]
 800c8fa:	89bb      	ldrh	r3, [r7, #12]
 800c8fc:	f083 0320 	eor.w	r3, r3, #32
 800c900:	81bb      	strh	r3, [r7, #12]
 800c902:	687a      	ldr	r2, [r7, #4]
 800c904:	683b      	ldr	r3, [r7, #0]
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	009b      	lsls	r3, r3, #2
 800c90a:	441a      	add	r2, r3
 800c90c:	89bb      	ldrh	r3, [r7, #12]
 800c90e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c91e:	b29b      	uxth	r3, r3
 800c920:	8013      	strh	r3, [r2, #0]
 800c922:	e04b      	b.n	800c9bc <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	781b      	ldrb	r3, [r3, #0]
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4413      	add	r3, r2
 800c92e:	881b      	ldrh	r3, [r3, #0]
 800c930:	82fb      	strh	r3, [r7, #22]
 800c932:	8afb      	ldrh	r3, [r7, #22]
 800c934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d01b      	beq.n	800c974 <USB_EPClearStall+0x106>
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	881b      	ldrh	r3, [r3, #0]
 800c948:	b29b      	uxth	r3, r3
 800c94a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c94e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c952:	82bb      	strh	r3, [r7, #20]
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	683b      	ldr	r3, [r7, #0]
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	441a      	add	r2, r3
 800c95e:	8abb      	ldrh	r3, [r7, #20]
 800c960:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c964:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c970:	b29b      	uxth	r3, r3
 800c972:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c974:	687a      	ldr	r2, [r7, #4]
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	009b      	lsls	r3, r3, #2
 800c97c:	4413      	add	r3, r2
 800c97e:	881b      	ldrh	r3, [r3, #0]
 800c980:	b29b      	uxth	r3, r3
 800c982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c98a:	827b      	strh	r3, [r7, #18]
 800c98c:	8a7b      	ldrh	r3, [r7, #18]
 800c98e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c992:	827b      	strh	r3, [r7, #18]
 800c994:	8a7b      	ldrh	r3, [r7, #18]
 800c996:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c99a:	827b      	strh	r3, [r7, #18]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	441a      	add	r2, r3
 800c9a6:	8a7b      	ldrh	r3, [r7, #18]
 800c9a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c9ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c9b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c9b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c9b8:	b29b      	uxth	r3, r3
 800c9ba:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	371c      	adds	r7, #28
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr

0800c9ca <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c9ca:	b480      	push	{r7}
 800c9cc:	b083      	sub	sp, #12
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
 800c9d2:	460b      	mov	r3, r1
 800c9d4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c9d6:	78fb      	ldrb	r3, [r7, #3]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d103      	bne.n	800c9e4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2280      	movs	r2, #128	@ 0x80
 800c9e0:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	370c      	adds	r7, #12
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr

0800c9f2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c9f2:	b480      	push	{r7}
 800c9f4:	b083      	sub	sp, #12
 800c9f6:	af00      	add	r7, sp, #0
 800c9f8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ca00:	b29b      	uxth	r3, r3
 800ca02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ca06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ca0a:	b29a      	uxth	r2, r3
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800ca12:	2300      	movs	r3, #0
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	370c      	adds	r7, #12
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1e:	4770      	bx	lr

0800ca20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b085      	sub	sp, #20
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800ca32:	68fb      	ldr	r3, [r7, #12]
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b08b      	sub	sp, #44	@ 0x2c
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	60b9      	str	r1, [r7, #8]
 800ca4a:	4611      	mov	r1, r2
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	460b      	mov	r3, r1
 800ca50:	80fb      	strh	r3, [r7, #6]
 800ca52:	4613      	mov	r3, r2
 800ca54:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ca56:	88bb      	ldrh	r3, [r7, #4]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	085b      	lsrs	r3, r3, #1
 800ca5c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ca62:	68bb      	ldr	r3, [r7, #8]
 800ca64:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ca66:	88fa      	ldrh	r2, [r7, #6]
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca70:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca76:	e01b      	b.n	800cab0 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ca78:	69fb      	ldr	r3, [r7, #28]
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ca7e:	69fb      	ldr	r3, [r7, #28]
 800ca80:	3301      	adds	r3, #1
 800ca82:	781b      	ldrb	r3, [r3, #0]
 800ca84:	021b      	lsls	r3, r3, #8
 800ca86:	b21a      	sxth	r2, r3
 800ca88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	b21b      	sxth	r3, r3
 800ca90:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	8a7a      	ldrh	r2, [r7, #18]
 800ca96:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ca98:	6a3b      	ldr	r3, [r7, #32]
 800ca9a:	3302      	adds	r3, #2
 800ca9c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ca9e:	69fb      	ldr	r3, [r7, #28]
 800caa0:	3301      	adds	r3, #1
 800caa2:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	3301      	adds	r3, #1
 800caa8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800caaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caac:	3b01      	subs	r3, #1
 800caae:	627b      	str	r3, [r7, #36]	@ 0x24
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d1e0      	bne.n	800ca78 <USB_WritePMA+0x38>
  }
}
 800cab6:	bf00      	nop
 800cab8:	bf00      	nop
 800caba:	372c      	adds	r7, #44	@ 0x2c
 800cabc:	46bd      	mov	sp, r7
 800cabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac2:	4770      	bx	lr

0800cac4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b08b      	sub	sp, #44	@ 0x2c
 800cac8:	af00      	add	r7, sp, #0
 800caca:	60f8      	str	r0, [r7, #12]
 800cacc:	60b9      	str	r1, [r7, #8]
 800cace:	4611      	mov	r1, r2
 800cad0:	461a      	mov	r2, r3
 800cad2:	460b      	mov	r3, r1
 800cad4:	80fb      	strh	r3, [r7, #6]
 800cad6:	4613      	mov	r3, r2
 800cad8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800cada:	88bb      	ldrh	r3, [r7, #4]
 800cadc:	085b      	lsrs	r3, r3, #1
 800cade:	b29b      	uxth	r3, r3
 800cae0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800cae6:	68bb      	ldr	r3, [r7, #8]
 800cae8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800caea:	88fa      	ldrh	r2, [r7, #6]
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800caf4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cafa:	e018      	b.n	800cb2e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800cafc:	6a3b      	ldr	r3, [r7, #32]
 800cafe:	881b      	ldrh	r3, [r3, #0]
 800cb00:	b29b      	uxth	r3, r3
 800cb02:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800cb04:	6a3b      	ldr	r3, [r7, #32]
 800cb06:	3302      	adds	r3, #2
 800cb08:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	b2da      	uxtb	r2, r3
 800cb0e:	69fb      	ldr	r3, [r7, #28]
 800cb10:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	3301      	adds	r3, #1
 800cb16:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cb18:	693b      	ldr	r3, [r7, #16]
 800cb1a:	0a1b      	lsrs	r3, r3, #8
 800cb1c:	b2da      	uxtb	r2, r3
 800cb1e:	69fb      	ldr	r3, [r7, #28]
 800cb20:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	3301      	adds	r3, #1
 800cb26:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	3b01      	subs	r3, #1
 800cb2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e3      	bne.n	800cafc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cb34:	88bb      	ldrh	r3, [r7, #4]
 800cb36:	f003 0301 	and.w	r3, r3, #1
 800cb3a:	b29b      	uxth	r3, r3
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d007      	beq.n	800cb50 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cb40:	6a3b      	ldr	r3, [r7, #32]
 800cb42:	881b      	ldrh	r3, [r3, #0]
 800cb44:	b29b      	uxth	r3, r3
 800cb46:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	69fb      	ldr	r3, [r7, #28]
 800cb4e:	701a      	strb	r2, [r3, #0]
  }
}
 800cb50:	bf00      	nop
 800cb52:	372c      	adds	r7, #44	@ 0x2c
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	460b      	mov	r3, r1
 800cb66:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb68:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cb6c:	f005 fcb6 	bl	80124dc <USBD_static_malloc>
 800cb70:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d109      	bne.n	800cb8c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	32b0      	adds	r2, #176	@ 0xb0
 800cb82:	2100      	movs	r1, #0
 800cb84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cb88:	2302      	movs	r3, #2
 800cb8a:	e0d4      	b.n	800cd36 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cb8c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cb90:	2100      	movs	r1, #0
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	f006 f81e 	bl	8012bd4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	32b0      	adds	r2, #176	@ 0xb0
 800cba2:	68f9      	ldr	r1, [r7, #12]
 800cba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	32b0      	adds	r2, #176	@ 0xb0
 800cbb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d138      	bne.n	800cc36 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbc4:	4b5e      	ldr	r3, [pc, #376]	@ (800cd40 <USBD_CDC_Init+0x1e4>)
 800cbc6:	7819      	ldrb	r1, [r3, #0]
 800cbc8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbcc:	2202      	movs	r2, #2
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f005 fb2b 	bl	801222a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbd4:	4b5a      	ldr	r3, [pc, #360]	@ (800cd40 <USBD_CDC_Init+0x1e4>)
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	f003 020f 	and.w	r2, r3, #15
 800cbdc:	6879      	ldr	r1, [r7, #4]
 800cbde:	4613      	mov	r3, r2
 800cbe0:	009b      	lsls	r3, r3, #2
 800cbe2:	4413      	add	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	440b      	add	r3, r1
 800cbe8:	3324      	adds	r3, #36	@ 0x24
 800cbea:	2201      	movs	r2, #1
 800cbec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cbee:	4b55      	ldr	r3, [pc, #340]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cbf0:	7819      	ldrb	r1, [r3, #0]
 800cbf2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cbf6:	2202      	movs	r2, #2
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f005 fb16 	bl	801222a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cbfe:	4b51      	ldr	r3, [pc, #324]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	f003 020f 	and.w	r2, r3, #15
 800cc06:	6879      	ldr	r1, [r7, #4]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	440b      	add	r3, r1
 800cc12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc16:	2201      	movs	r2, #1
 800cc18:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cc1a:	4b4b      	ldr	r3, [pc, #300]	@ (800cd48 <USBD_CDC_Init+0x1ec>)
 800cc1c:	781b      	ldrb	r3, [r3, #0]
 800cc1e:	f003 020f 	and.w	r2, r3, #15
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	440b      	add	r3, r1
 800cc2e:	3326      	adds	r3, #38	@ 0x26
 800cc30:	2210      	movs	r2, #16
 800cc32:	801a      	strh	r2, [r3, #0]
 800cc34:	e035      	b.n	800cca2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cc36:	4b42      	ldr	r3, [pc, #264]	@ (800cd40 <USBD_CDC_Init+0x1e4>)
 800cc38:	7819      	ldrb	r1, [r3, #0]
 800cc3a:	2340      	movs	r3, #64	@ 0x40
 800cc3c:	2202      	movs	r2, #2
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f005 faf3 	bl	801222a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cc44:	4b3e      	ldr	r3, [pc, #248]	@ (800cd40 <USBD_CDC_Init+0x1e4>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	f003 020f 	and.w	r2, r3, #15
 800cc4c:	6879      	ldr	r1, [r7, #4]
 800cc4e:	4613      	mov	r3, r2
 800cc50:	009b      	lsls	r3, r3, #2
 800cc52:	4413      	add	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	440b      	add	r3, r1
 800cc58:	3324      	adds	r3, #36	@ 0x24
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cc5e:	4b39      	ldr	r3, [pc, #228]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cc60:	7819      	ldrb	r1, [r3, #0]
 800cc62:	2340      	movs	r3, #64	@ 0x40
 800cc64:	2202      	movs	r2, #2
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f005 fadf 	bl	801222a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc6c:	4b35      	ldr	r3, [pc, #212]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	f003 020f 	and.w	r2, r3, #15
 800cc74:	6879      	ldr	r1, [r7, #4]
 800cc76:	4613      	mov	r3, r2
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	4413      	add	r3, r2
 800cc7c:	009b      	lsls	r3, r3, #2
 800cc7e:	440b      	add	r3, r1
 800cc80:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc84:	2201      	movs	r2, #1
 800cc86:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc88:	4b2f      	ldr	r3, [pc, #188]	@ (800cd48 <USBD_CDC_Init+0x1ec>)
 800cc8a:	781b      	ldrb	r3, [r3, #0]
 800cc8c:	f003 020f 	and.w	r2, r3, #15
 800cc90:	6879      	ldr	r1, [r7, #4]
 800cc92:	4613      	mov	r3, r2
 800cc94:	009b      	lsls	r3, r3, #2
 800cc96:	4413      	add	r3, r2
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	440b      	add	r3, r1
 800cc9c:	3326      	adds	r3, #38	@ 0x26
 800cc9e:	2210      	movs	r2, #16
 800cca0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cca2:	4b29      	ldr	r3, [pc, #164]	@ (800cd48 <USBD_CDC_Init+0x1ec>)
 800cca4:	7819      	ldrb	r1, [r3, #0]
 800cca6:	2308      	movs	r3, #8
 800cca8:	2203      	movs	r2, #3
 800ccaa:	6878      	ldr	r0, [r7, #4]
 800ccac:	f005 fabd 	bl	801222a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ccb0:	4b25      	ldr	r3, [pc, #148]	@ (800cd48 <USBD_CDC_Init+0x1ec>)
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	f003 020f 	and.w	r2, r3, #15
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	009b      	lsls	r3, r3, #2
 800ccbe:	4413      	add	r3, r2
 800ccc0:	009b      	lsls	r3, r3, #2
 800ccc2:	440b      	add	r3, r1
 800ccc4:	3324      	adds	r3, #36	@ 0x24
 800ccc6:	2201      	movs	r2, #1
 800ccc8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	33b0      	adds	r3, #176	@ 0xb0
 800ccdc:	009b      	lsls	r3, r3, #2
 800ccde:	4413      	add	r3, r2
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	2200      	movs	r2, #0
 800ccea:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d101      	bne.n	800cd04 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cd00:	2302      	movs	r3, #2
 800cd02:	e018      	b.n	800cd36 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7c1b      	ldrb	r3, [r3, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d10a      	bne.n	800cd22 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd0c:	4b0d      	ldr	r3, [pc, #52]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cd0e:	7819      	ldrb	r1, [r3, #0]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f005 fb74 	bl	8012408 <USBD_LL_PrepareReceive>
 800cd20:	e008      	b.n	800cd34 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cd22:	4b08      	ldr	r3, [pc, #32]	@ (800cd44 <USBD_CDC_Init+0x1e8>)
 800cd24:	7819      	ldrb	r1, [r3, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cd2c:	2340      	movs	r3, #64	@ 0x40
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f005 fb6a 	bl	8012408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cd34:	2300      	movs	r3, #0
}
 800cd36:	4618      	mov	r0, r3
 800cd38:	3710      	adds	r7, #16
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	200000b7 	.word	0x200000b7
 800cd44:	200000b8 	.word	0x200000b8
 800cd48:	200000b9 	.word	0x200000b9

0800cd4c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	460b      	mov	r3, r1
 800cd56:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cd58:	4b3a      	ldr	r3, [pc, #232]	@ (800ce44 <USBD_CDC_DeInit+0xf8>)
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	4619      	mov	r1, r3
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f005 fa89 	bl	8012276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cd64:	4b37      	ldr	r3, [pc, #220]	@ (800ce44 <USBD_CDC_DeInit+0xf8>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 020f 	and.w	r2, r3, #15
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	440b      	add	r3, r1
 800cd78:	3324      	adds	r3, #36	@ 0x24
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cd7e:	4b32      	ldr	r3, [pc, #200]	@ (800ce48 <USBD_CDC_DeInit+0xfc>)
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f005 fa76 	bl	8012276 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cd8a:	4b2f      	ldr	r3, [pc, #188]	@ (800ce48 <USBD_CDC_DeInit+0xfc>)
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	f003 020f 	and.w	r2, r3, #15
 800cd92:	6879      	ldr	r1, [r7, #4]
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	440b      	add	r3, r1
 800cd9e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cda2:	2200      	movs	r2, #0
 800cda4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cda6:	4b29      	ldr	r3, [pc, #164]	@ (800ce4c <USBD_CDC_DeInit+0x100>)
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	4619      	mov	r1, r3
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	f005 fa62 	bl	8012276 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cdb2:	4b26      	ldr	r3, [pc, #152]	@ (800ce4c <USBD_CDC_DeInit+0x100>)
 800cdb4:	781b      	ldrb	r3, [r3, #0]
 800cdb6:	f003 020f 	and.w	r2, r3, #15
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	4613      	mov	r3, r2
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	4413      	add	r3, r2
 800cdc2:	009b      	lsls	r3, r3, #2
 800cdc4:	440b      	add	r3, r1
 800cdc6:	3324      	adds	r3, #36	@ 0x24
 800cdc8:	2200      	movs	r2, #0
 800cdca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cdcc:	4b1f      	ldr	r3, [pc, #124]	@ (800ce4c <USBD_CDC_DeInit+0x100>)
 800cdce:	781b      	ldrb	r3, [r3, #0]
 800cdd0:	f003 020f 	and.w	r2, r3, #15
 800cdd4:	6879      	ldr	r1, [r7, #4]
 800cdd6:	4613      	mov	r3, r2
 800cdd8:	009b      	lsls	r3, r3, #2
 800cdda:	4413      	add	r3, r2
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	440b      	add	r3, r1
 800cde0:	3326      	adds	r3, #38	@ 0x26
 800cde2:	2200      	movs	r2, #0
 800cde4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	32b0      	adds	r2, #176	@ 0xb0
 800cdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d01f      	beq.n	800ce38 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	33b0      	adds	r3, #176	@ 0xb0
 800ce02:	009b      	lsls	r3, r3, #2
 800ce04:	4413      	add	r3, r2
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	685b      	ldr	r3, [r3, #4]
 800ce0a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	32b0      	adds	r2, #176	@ 0xb0
 800ce16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f005 fb6c 	bl	80124f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	32b0      	adds	r2, #176	@ 0xb0
 800ce2a:	2100      	movs	r1, #0
 800ce2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3708      	adds	r7, #8
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bd80      	pop	{r7, pc}
 800ce42:	bf00      	nop
 800ce44:	200000b7 	.word	0x200000b7
 800ce48:	200000b8 	.word	0x200000b8
 800ce4c:	200000b9 	.word	0x200000b9

0800ce50 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b086      	sub	sp, #24
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	32b0      	adds	r2, #176	@ 0xb0
 800ce64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce68:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce72:	2300      	movs	r3, #0
 800ce74:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce76:	693b      	ldr	r3, [r7, #16]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ce7c:	2303      	movs	r3, #3
 800ce7e:	e0bf      	b.n	800d000 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	781b      	ldrb	r3, [r3, #0]
 800ce84:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d050      	beq.n	800cf2e <USBD_CDC_Setup+0xde>
 800ce8c:	2b20      	cmp	r3, #32
 800ce8e:	f040 80af 	bne.w	800cff0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	88db      	ldrh	r3, [r3, #6]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d03a      	beq.n	800cf10 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	b25b      	sxtb	r3, r3
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	da1b      	bge.n	800cedc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	33b0      	adds	r3, #176	@ 0xb0
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	4413      	add	r3, r2
 800ceb2:	685b      	ldr	r3, [r3, #4]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	683a      	ldr	r2, [r7, #0]
 800ceb8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ceba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cebc:	683a      	ldr	r2, [r7, #0]
 800cebe:	88d2      	ldrh	r2, [r2, #6]
 800cec0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	88db      	ldrh	r3, [r3, #6]
 800cec6:	2b07      	cmp	r3, #7
 800cec8:	bf28      	it	cs
 800ceca:	2307      	movcs	r3, #7
 800cecc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	89fa      	ldrh	r2, [r7, #14]
 800ced2:	4619      	mov	r1, r3
 800ced4:	6878      	ldr	r0, [r7, #4]
 800ced6:	f001 fd1f 	bl	800e918 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ceda:	e090      	b.n	800cffe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	785a      	ldrb	r2, [r3, #1]
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	88db      	ldrh	r3, [r3, #6]
 800ceea:	2b3f      	cmp	r3, #63	@ 0x3f
 800ceec:	d803      	bhi.n	800cef6 <USBD_CDC_Setup+0xa6>
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	88db      	ldrh	r3, [r3, #6]
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	e000      	b.n	800cef8 <USBD_CDC_Setup+0xa8>
 800cef6:	2240      	movs	r2, #64	@ 0x40
 800cef8:	693b      	ldr	r3, [r7, #16]
 800cefa:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cefe:	6939      	ldr	r1, [r7, #16]
 800cf00:	693b      	ldr	r3, [r7, #16]
 800cf02:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cf06:	461a      	mov	r2, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f001 fd31 	bl	800e970 <USBD_CtlPrepareRx>
      break;
 800cf0e:	e076      	b.n	800cffe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	33b0      	adds	r3, #176	@ 0xb0
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	689b      	ldr	r3, [r3, #8]
 800cf22:	683a      	ldr	r2, [r7, #0]
 800cf24:	7850      	ldrb	r0, [r2, #1]
 800cf26:	2200      	movs	r2, #0
 800cf28:	6839      	ldr	r1, [r7, #0]
 800cf2a:	4798      	blx	r3
      break;
 800cf2c:	e067      	b.n	800cffe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	785b      	ldrb	r3, [r3, #1]
 800cf32:	2b0b      	cmp	r3, #11
 800cf34:	d851      	bhi.n	800cfda <USBD_CDC_Setup+0x18a>
 800cf36:	a201      	add	r2, pc, #4	@ (adr r2, 800cf3c <USBD_CDC_Setup+0xec>)
 800cf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf3c:	0800cf6d 	.word	0x0800cf6d
 800cf40:	0800cfe9 	.word	0x0800cfe9
 800cf44:	0800cfdb 	.word	0x0800cfdb
 800cf48:	0800cfdb 	.word	0x0800cfdb
 800cf4c:	0800cfdb 	.word	0x0800cfdb
 800cf50:	0800cfdb 	.word	0x0800cfdb
 800cf54:	0800cfdb 	.word	0x0800cfdb
 800cf58:	0800cfdb 	.word	0x0800cfdb
 800cf5c:	0800cfdb 	.word	0x0800cfdb
 800cf60:	0800cfdb 	.word	0x0800cfdb
 800cf64:	0800cf97 	.word	0x0800cf97
 800cf68:	0800cfc1 	.word	0x0800cfc1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf72:	b2db      	uxtb	r3, r3
 800cf74:	2b03      	cmp	r3, #3
 800cf76:	d107      	bne.n	800cf88 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf78:	f107 030a 	add.w	r3, r7, #10
 800cf7c:	2202      	movs	r2, #2
 800cf7e:	4619      	mov	r1, r3
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f001 fcc9 	bl	800e918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf86:	e032      	b.n	800cfee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f001 fc53 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800cf90:	2303      	movs	r3, #3
 800cf92:	75fb      	strb	r3, [r7, #23]
          break;
 800cf94:	e02b      	b.n	800cfee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d107      	bne.n	800cfb2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cfa2:	f107 030d 	add.w	r3, r7, #13
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	4619      	mov	r1, r3
 800cfaa:	6878      	ldr	r0, [r7, #4]
 800cfac:	f001 fcb4 	bl	800e918 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cfb0:	e01d      	b.n	800cfee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f001 fc3e 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfba:	2303      	movs	r3, #3
 800cfbc:	75fb      	strb	r3, [r7, #23]
          break;
 800cfbe:	e016      	b.n	800cfee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	2b03      	cmp	r3, #3
 800cfca:	d00f      	beq.n	800cfec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cfcc:	6839      	ldr	r1, [r7, #0]
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f001 fc31 	bl	800e836 <USBD_CtlError>
            ret = USBD_FAIL;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cfd8:	e008      	b.n	800cfec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f001 fc2a 	bl	800e836 <USBD_CtlError>
          ret = USBD_FAIL;
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	75fb      	strb	r3, [r7, #23]
          break;
 800cfe6:	e002      	b.n	800cfee <USBD_CDC_Setup+0x19e>
          break;
 800cfe8:	bf00      	nop
 800cfea:	e008      	b.n	800cffe <USBD_CDC_Setup+0x1ae>
          break;
 800cfec:	bf00      	nop
      }
      break;
 800cfee:	e006      	b.n	800cffe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f001 fc1f 	bl	800e836 <USBD_CtlError>
      ret = USBD_FAIL;
 800cff8:	2303      	movs	r3, #3
 800cffa:	75fb      	strb	r3, [r7, #23]
      break;
 800cffc:	bf00      	nop
  }

  return (uint8_t)ret;
 800cffe:	7dfb      	ldrb	r3, [r7, #23]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3718      	adds	r7, #24
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	460b      	mov	r3, r1
 800d012:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d01a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	32b0      	adds	r2, #176	@ 0xb0
 800d026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d101      	bne.n	800d032 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d02e:	2303      	movs	r3, #3
 800d030:	e065      	b.n	800d0fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	32b0      	adds	r2, #176	@ 0xb0
 800d03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d040:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d042:	78fb      	ldrb	r3, [r7, #3]
 800d044:	f003 020f 	and.w	r2, r3, #15
 800d048:	6879      	ldr	r1, [r7, #4]
 800d04a:	4613      	mov	r3, r2
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	440b      	add	r3, r1
 800d054:	3318      	adds	r3, #24
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d02f      	beq.n	800d0bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d05c:	78fb      	ldrb	r3, [r7, #3]
 800d05e:	f003 020f 	and.w	r2, r3, #15
 800d062:	6879      	ldr	r1, [r7, #4]
 800d064:	4613      	mov	r3, r2
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	440b      	add	r3, r1
 800d06e:	3318      	adds	r3, #24
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	78fb      	ldrb	r3, [r7, #3]
 800d074:	f003 010f 	and.w	r1, r3, #15
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	460b      	mov	r3, r1
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	440b      	add	r3, r1
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	4403      	add	r3, r0
 800d084:	3320      	adds	r3, #32
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	fbb2 f1f3 	udiv	r1, r2, r3
 800d08c:	fb01 f303 	mul.w	r3, r1, r3
 800d090:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d092:	2b00      	cmp	r3, #0
 800d094:	d112      	bne.n	800d0bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	f003 020f 	and.w	r2, r3, #15
 800d09c:	6879      	ldr	r1, [r7, #4]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	4413      	add	r3, r2
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	440b      	add	r3, r1
 800d0a8:	3318      	adds	r3, #24
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d0ae:	78f9      	ldrb	r1, [r7, #3]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f005 f986 	bl	80123c6 <USBD_LL_Transmit>
 800d0ba:	e01f      	b.n	800d0fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	2200      	movs	r2, #0
 800d0c0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0ca:	687a      	ldr	r2, [r7, #4]
 800d0cc:	33b0      	adds	r3, #176	@ 0xb0
 800d0ce:	009b      	lsls	r3, r3, #2
 800d0d0:	4413      	add	r3, r2
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d010      	beq.n	800d0fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	33b0      	adds	r3, #176	@ 0xb0
 800d0e4:	009b      	lsls	r3, r3, #2
 800d0e6:	4413      	add	r3, r2
 800d0e8:	685b      	ldr	r3, [r3, #4]
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d0f2:	68ba      	ldr	r2, [r7, #8]
 800d0f4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d0fc:	2300      	movs	r3, #0
}
 800d0fe:	4618      	mov	r0, r3
 800d100:	3710      	adds	r7, #16
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}

0800d106 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d106:	b580      	push	{r7, lr}
 800d108:	b084      	sub	sp, #16
 800d10a:	af00      	add	r7, sp, #0
 800d10c:	6078      	str	r0, [r7, #4]
 800d10e:	460b      	mov	r3, r1
 800d110:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	32b0      	adds	r2, #176	@ 0xb0
 800d11c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d120:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	32b0      	adds	r2, #176	@ 0xb0
 800d12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d101      	bne.n	800d138 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d134:	2303      	movs	r3, #3
 800d136:	e01a      	b.n	800d16e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d138:	78fb      	ldrb	r3, [r7, #3]
 800d13a:	4619      	mov	r1, r3
 800d13c:	6878      	ldr	r0, [r7, #4]
 800d13e:	f005 f984 	bl	801244a <USBD_LL_GetRxDataSize>
 800d142:	4602      	mov	r2, r0
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d150:	687a      	ldr	r2, [r7, #4]
 800d152:	33b0      	adds	r3, #176	@ 0xb0
 800d154:	009b      	lsls	r3, r3, #2
 800d156:	4413      	add	r3, r2
 800d158:	685b      	ldr	r3, [r3, #4]
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	68fa      	ldr	r2, [r7, #12]
 800d15e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d162:	68fa      	ldr	r2, [r7, #12]
 800d164:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d168:	4611      	mov	r1, r2
 800d16a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d16c:	2300      	movs	r3, #0
}
 800d16e:	4618      	mov	r0, r3
 800d170:	3710      	adds	r7, #16
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}

0800d176 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d176:	b580      	push	{r7, lr}
 800d178:	b084      	sub	sp, #16
 800d17a:	af00      	add	r7, sp, #0
 800d17c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	32b0      	adds	r2, #176	@ 0xb0
 800d188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d18c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d101      	bne.n	800d198 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d194:	2303      	movs	r3, #3
 800d196:	e024      	b.n	800d1e2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d19e:	687a      	ldr	r2, [r7, #4]
 800d1a0:	33b0      	adds	r3, #176	@ 0xb0
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	4413      	add	r3, r2
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d019      	beq.n	800d1e0 <USBD_CDC_EP0_RxReady+0x6a>
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d1b2:	2bff      	cmp	r3, #255	@ 0xff
 800d1b4:	d014      	beq.n	800d1e0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1bc:	687a      	ldr	r2, [r7, #4]
 800d1be:	33b0      	adds	r3, #176	@ 0xb0
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	685b      	ldr	r3, [r3, #4]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	68fa      	ldr	r2, [r7, #12]
 800d1ca:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d1ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d1d0:	68fa      	ldr	r2, [r7, #12]
 800d1d2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d1d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	22ff      	movs	r2, #255	@ 0xff
 800d1dc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d1e0:	2300      	movs	r3, #0
}
 800d1e2:	4618      	mov	r0, r3
 800d1e4:	3710      	adds	r7, #16
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	bd80      	pop	{r7, pc}
	...

0800d1ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1f4:	2182      	movs	r1, #130	@ 0x82
 800d1f6:	4818      	ldr	r0, [pc, #96]	@ (800d258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1f8:	f000 fcbd 	bl	800db76 <USBD_GetEpDesc>
 800d1fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d1fe:	2101      	movs	r1, #1
 800d200:	4815      	ldr	r0, [pc, #84]	@ (800d258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d202:	f000 fcb8 	bl	800db76 <USBD_GetEpDesc>
 800d206:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d208:	2181      	movs	r1, #129	@ 0x81
 800d20a:	4813      	ldr	r0, [pc, #76]	@ (800d258 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d20c:	f000 fcb3 	bl	800db76 <USBD_GetEpDesc>
 800d210:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d212:	697b      	ldr	r3, [r7, #20]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d218:	697b      	ldr	r3, [r7, #20]
 800d21a:	2210      	movs	r2, #16
 800d21c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d21e:	693b      	ldr	r3, [r7, #16]
 800d220:	2b00      	cmp	r3, #0
 800d222:	d006      	beq.n	800d232 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	2200      	movs	r2, #0
 800d228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d22c:	711a      	strb	r2, [r3, #4]
 800d22e:	2200      	movs	r2, #0
 800d230:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d006      	beq.n	800d246 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	2200      	movs	r2, #0
 800d23c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d240:	711a      	strb	r2, [r3, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2243      	movs	r2, #67	@ 0x43
 800d24a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d24c:	4b02      	ldr	r3, [pc, #8]	@ (800d258 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}
 800d256:	bf00      	nop
 800d258:	20000074 	.word	0x20000074

0800d25c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b086      	sub	sp, #24
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d264:	2182      	movs	r1, #130	@ 0x82
 800d266:	4818      	ldr	r0, [pc, #96]	@ (800d2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d268:	f000 fc85 	bl	800db76 <USBD_GetEpDesc>
 800d26c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d26e:	2101      	movs	r1, #1
 800d270:	4815      	ldr	r0, [pc, #84]	@ (800d2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d272:	f000 fc80 	bl	800db76 <USBD_GetEpDesc>
 800d276:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d278:	2181      	movs	r1, #129	@ 0x81
 800d27a:	4813      	ldr	r0, [pc, #76]	@ (800d2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d27c:	f000 fc7b 	bl	800db76 <USBD_GetEpDesc>
 800d280:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	2210      	movs	r2, #16
 800d28c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d006      	beq.n	800d2a2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	2200      	movs	r2, #0
 800d298:	711a      	strb	r2, [r3, #4]
 800d29a:	2200      	movs	r2, #0
 800d29c:	f042 0202 	orr.w	r2, r2, #2
 800d2a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d006      	beq.n	800d2b6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	711a      	strb	r2, [r3, #4]
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	f042 0202 	orr.w	r2, r2, #2
 800d2b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2243      	movs	r2, #67	@ 0x43
 800d2ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2bc:	4b02      	ldr	r3, [pc, #8]	@ (800d2c8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d2be:	4618      	mov	r0, r3
 800d2c0:	3718      	adds	r7, #24
 800d2c2:	46bd      	mov	sp, r7
 800d2c4:	bd80      	pop	{r7, pc}
 800d2c6:	bf00      	nop
 800d2c8:	20000074 	.word	0x20000074

0800d2cc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d2d4:	2182      	movs	r1, #130	@ 0x82
 800d2d6:	4818      	ldr	r0, [pc, #96]	@ (800d338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2d8:	f000 fc4d 	bl	800db76 <USBD_GetEpDesc>
 800d2dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d2de:	2101      	movs	r1, #1
 800d2e0:	4815      	ldr	r0, [pc, #84]	@ (800d338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2e2:	f000 fc48 	bl	800db76 <USBD_GetEpDesc>
 800d2e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d2e8:	2181      	movs	r1, #129	@ 0x81
 800d2ea:	4813      	ldr	r0, [pc, #76]	@ (800d338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d2ec:	f000 fc43 	bl	800db76 <USBD_GetEpDesc>
 800d2f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d002      	beq.n	800d2fe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	2210      	movs	r2, #16
 800d2fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d006      	beq.n	800d312 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	2200      	movs	r2, #0
 800d308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d30c:	711a      	strb	r2, [r3, #4]
 800d30e:	2200      	movs	r2, #0
 800d310:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d006      	beq.n	800d326 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d320:	711a      	strb	r2, [r3, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2243      	movs	r2, #67	@ 0x43
 800d32a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d32c:	4b02      	ldr	r3, [pc, #8]	@ (800d338 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d32e:	4618      	mov	r0, r3
 800d330:	3718      	adds	r7, #24
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	20000074 	.word	0x20000074

0800d33c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d33c:	b480      	push	{r7}
 800d33e:	b083      	sub	sp, #12
 800d340:	af00      	add	r7, sp, #0
 800d342:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	220a      	movs	r2, #10
 800d348:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d34a:	4b03      	ldr	r3, [pc, #12]	@ (800d358 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	20000030 	.word	0x20000030

0800d35c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d35c:	b480      	push	{r7}
 800d35e:	b083      	sub	sp, #12
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d101      	bne.n	800d370 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e009      	b.n	800d384 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d376:	687a      	ldr	r2, [r7, #4]
 800d378:	33b0      	adds	r3, #176	@ 0xb0
 800d37a:	009b      	lsls	r3, r3, #2
 800d37c:	4413      	add	r3, r2
 800d37e:	683a      	ldr	r2, [r7, #0]
 800d380:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d390:	b480      	push	{r7}
 800d392:	b087      	sub	sp, #28
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	32b0      	adds	r2, #176	@ 0xb0
 800d3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3aa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d101      	bne.n	800d3b6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d3b2:	2303      	movs	r3, #3
 800d3b4:	e008      	b.n	800d3c8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	68ba      	ldr	r2, [r7, #8]
 800d3ba:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	371c      	adds	r7, #28
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d2:	4770      	bx	lr

0800d3d4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	32b0      	adds	r2, #176	@ 0xb0
 800d3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d101      	bne.n	800d3f8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d3f4:	2303      	movs	r3, #3
 800d3f6:	e004      	b.n	800d402 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3714      	adds	r7, #20
 800d406:	46bd      	mov	sp, r7
 800d408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40c:	4770      	bx	lr
	...

0800d410 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	32b0      	adds	r2, #176	@ 0xb0
 800d422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d426:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d428:	2301      	movs	r3, #1
 800d42a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d101      	bne.n	800d436 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d432:	2303      	movs	r3, #3
 800d434:	e025      	b.n	800d482 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d436:	68bb      	ldr	r3, [r7, #8]
 800d438:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d11f      	bne.n	800d480 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	2201      	movs	r2, #1
 800d444:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d448:	4b10      	ldr	r3, [pc, #64]	@ (800d48c <USBD_CDC_TransmitPacket+0x7c>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	f003 020f 	and.w	r2, r3, #15
 800d450:	68bb      	ldr	r3, [r7, #8]
 800d452:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	4613      	mov	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4413      	add	r3, r2
 800d45e:	009b      	lsls	r3, r3, #2
 800d460:	4403      	add	r3, r0
 800d462:	3318      	adds	r3, #24
 800d464:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d466:	4b09      	ldr	r3, [pc, #36]	@ (800d48c <USBD_CDC_TransmitPacket+0x7c>)
 800d468:	7819      	ldrb	r1, [r3, #0]
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f004 ffa5 	bl	80123c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d47c:	2300      	movs	r3, #0
 800d47e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d480:	7bfb      	ldrb	r3, [r7, #15]
}
 800d482:	4618      	mov	r0, r3
 800d484:	3710      	adds	r7, #16
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}
 800d48a:	bf00      	nop
 800d48c:	200000b7 	.word	0x200000b7

0800d490 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d490:	b580      	push	{r7, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	af00      	add	r7, sp, #0
 800d496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	32b0      	adds	r2, #176	@ 0xb0
 800d4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4a6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	32b0      	adds	r2, #176	@ 0xb0
 800d4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e018      	b.n	800d4f0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	7c1b      	ldrb	r3, [r3, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10a      	bne.n	800d4dc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4c6:	4b0c      	ldr	r3, [pc, #48]	@ (800d4f8 <USBD_CDC_ReceivePacket+0x68>)
 800d4c8:	7819      	ldrb	r1, [r3, #0]
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f004 ff97 	bl	8012408 <USBD_LL_PrepareReceive>
 800d4da:	e008      	b.n	800d4ee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d4dc:	4b06      	ldr	r3, [pc, #24]	@ (800d4f8 <USBD_CDC_ReceivePacket+0x68>)
 800d4de:	7819      	ldrb	r1, [r3, #0]
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d4e6:	2340      	movs	r3, #64	@ 0x40
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f004 ff8d 	bl	8012408 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	200000b8 	.word	0x200000b8

0800d4fc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b086      	sub	sp, #24
 800d500:	af00      	add	r7, sp, #0
 800d502:	60f8      	str	r0, [r7, #12]
 800d504:	60b9      	str	r1, [r7, #8]
 800d506:	4613      	mov	r3, r2
 800d508:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d510:	2303      	movs	r3, #3
 800d512:	e01f      	b.n	800d554 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	2200      	movs	r2, #0
 800d520:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2200      	movs	r2, #0
 800d528:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d52c:	68bb      	ldr	r3, [r7, #8]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d003      	beq.n	800d53a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	68ba      	ldr	r2, [r7, #8]
 800d536:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2201      	movs	r2, #1
 800d53e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	79fa      	ldrb	r2, [r7, #7]
 800d546:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f004 fdf1 	bl	8012130 <USBD_LL_Init>
 800d54e:	4603      	mov	r3, r0
 800d550:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d552:	7dfb      	ldrb	r3, [r7, #23]
}
 800d554:	4618      	mov	r0, r3
 800d556:	3718      	adds	r7, #24
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}

0800d55c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d566:	2300      	movs	r3, #0
 800d568:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d101      	bne.n	800d574 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d570:	2303      	movs	r3, #3
 800d572:	e025      	b.n	800d5c0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	683a      	ldr	r2, [r7, #0]
 800d578:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	32ae      	adds	r2, #174	@ 0xae
 800d586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00f      	beq.n	800d5b0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	32ae      	adds	r2, #174	@ 0xae
 800d59a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d5a0:	f107 020e 	add.w	r2, r7, #14
 800d5a4:	4610      	mov	r0, r2
 800d5a6:	4798      	blx	r3
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d5be:	2300      	movs	r3, #0
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3710      	adds	r7, #16
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}

0800d5c8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f004 fe0f 	bl	80121f4 <USBD_LL_Start>
 800d5d6:	4603      	mov	r3, r0
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3708      	adds	r7, #8
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d5e8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	370c      	adds	r7, #12
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr

0800d5f6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5f6:	b580      	push	{r7, lr}
 800d5f8:	b084      	sub	sp, #16
 800d5fa:	af00      	add	r7, sp, #0
 800d5fc:	6078      	str	r0, [r7, #4]
 800d5fe:	460b      	mov	r3, r1
 800d600:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d009      	beq.n	800d624 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	78fa      	ldrb	r2, [r7, #3]
 800d61a:	4611      	mov	r1, r2
 800d61c:	6878      	ldr	r0, [r7, #4]
 800d61e:	4798      	blx	r3
 800d620:	4603      	mov	r3, r0
 800d622:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d624:	7bfb      	ldrb	r3, [r7, #15]
}
 800d626:	4618      	mov	r0, r3
 800d628:	3710      	adds	r7, #16
 800d62a:	46bd      	mov	sp, r7
 800d62c:	bd80      	pop	{r7, pc}

0800d62e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d62e:	b580      	push	{r7, lr}
 800d630:	b084      	sub	sp, #16
 800d632:	af00      	add	r7, sp, #0
 800d634:	6078      	str	r0, [r7, #4]
 800d636:	460b      	mov	r3, r1
 800d638:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d63a:	2300      	movs	r3, #0
 800d63c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	78fa      	ldrb	r2, [r7, #3]
 800d648:	4611      	mov	r1, r2
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	4798      	blx	r3
 800d64e:	4603      	mov	r3, r0
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d654:	2303      	movs	r3, #3
 800d656:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d658:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b084      	sub	sp, #16
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	4618      	mov	r0, r3
 800d676:	f001 f8a4 	bl	800e7c2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2201      	movs	r2, #1
 800d67e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d688:	461a      	mov	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d696:	f003 031f 	and.w	r3, r3, #31
 800d69a:	2b02      	cmp	r3, #2
 800d69c:	d01a      	beq.n	800d6d4 <USBD_LL_SetupStage+0x72>
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d822      	bhi.n	800d6e8 <USBD_LL_SetupStage+0x86>
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <USBD_LL_SetupStage+0x4a>
 800d6a6:	2b01      	cmp	r3, #1
 800d6a8:	d00a      	beq.n	800d6c0 <USBD_LL_SetupStage+0x5e>
 800d6aa:	e01d      	b.n	800d6e8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6b2:	4619      	mov	r1, r3
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 fad1 	bl	800dc5c <USBD_StdDevReq>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800d6be:	e020      	b.n	800d702 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6c6:	4619      	mov	r1, r3
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 fb39 	bl	800dd40 <USBD_StdItfReq>
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800d6d2:	e016      	b.n	800d702 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d6da:	4619      	mov	r1, r3
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fb9b 	bl	800de18 <USBD_StdEPReq>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800d6e6:	e00c      	b.n	800d702 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d6ee:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f004 fddc 	bl	80122b4 <USBD_LL_StallEP>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d700:	bf00      	nop
  }

  return ret;
 800d702:	7bfb      	ldrb	r3, [r7, #15]
}
 800d704:	4618      	mov	r0, r3
 800d706:	3710      	adds	r7, #16
 800d708:	46bd      	mov	sp, r7
 800d70a:	bd80      	pop	{r7, pc}

0800d70c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	460b      	mov	r3, r1
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d71a:	2300      	movs	r3, #0
 800d71c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d71e:	7afb      	ldrb	r3, [r7, #11]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d16e      	bne.n	800d802 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d72a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d732:	2b03      	cmp	r3, #3
 800d734:	f040 8098 	bne.w	800d868 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	689a      	ldr	r2, [r3, #8]
 800d73c:	693b      	ldr	r3, [r7, #16]
 800d73e:	68db      	ldr	r3, [r3, #12]
 800d740:	429a      	cmp	r2, r3
 800d742:	d913      	bls.n	800d76c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	689a      	ldr	r2, [r3, #8]
 800d748:	693b      	ldr	r3, [r7, #16]
 800d74a:	68db      	ldr	r3, [r3, #12]
 800d74c:	1ad2      	subs	r2, r2, r3
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d752:	693b      	ldr	r3, [r7, #16]
 800d754:	68da      	ldr	r2, [r3, #12]
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	689b      	ldr	r3, [r3, #8]
 800d75a:	4293      	cmp	r3, r2
 800d75c:	bf28      	it	cs
 800d75e:	4613      	movcs	r3, r2
 800d760:	461a      	mov	r2, r3
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f001 f920 	bl	800e9aa <USBD_CtlContinueRx>
 800d76a:	e07d      	b.n	800d868 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d772:	f003 031f 	and.w	r3, r3, #31
 800d776:	2b02      	cmp	r3, #2
 800d778:	d014      	beq.n	800d7a4 <USBD_LL_DataOutStage+0x98>
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d81d      	bhi.n	800d7ba <USBD_LL_DataOutStage+0xae>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d002      	beq.n	800d788 <USBD_LL_DataOutStage+0x7c>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d003      	beq.n	800d78e <USBD_LL_DataOutStage+0x82>
 800d786:	e018      	b.n	800d7ba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d788:	2300      	movs	r3, #0
 800d78a:	75bb      	strb	r3, [r7, #22]
            break;
 800d78c:	e018      	b.n	800d7c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d794:	b2db      	uxtb	r3, r3
 800d796:	4619      	mov	r1, r3
 800d798:	68f8      	ldr	r0, [r7, #12]
 800d79a:	f000 f9d2 	bl	800db42 <USBD_CoreFindIF>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	75bb      	strb	r3, [r7, #22]
            break;
 800d7a2:	e00d      	b.n	800d7c0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d7aa:	b2db      	uxtb	r3, r3
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f000 f9d4 	bl	800db5c <USBD_CoreFindEP>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	75bb      	strb	r3, [r7, #22]
            break;
 800d7b8:	e002      	b.n	800d7c0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	75bb      	strb	r3, [r7, #22]
            break;
 800d7be:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d7c0:	7dbb      	ldrb	r3, [r7, #22]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d119      	bne.n	800d7fa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d113      	bne.n	800d7fa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d7d2:	7dba      	ldrb	r2, [r7, #22]
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	32ae      	adds	r2, #174	@ 0xae
 800d7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7dc:	691b      	ldr	r3, [r3, #16]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00b      	beq.n	800d7fa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d7e2:	7dba      	ldrb	r2, [r7, #22]
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d7ea:	7dba      	ldrb	r2, [r7, #22]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	32ae      	adds	r2, #174	@ 0xae
 800d7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	68f8      	ldr	r0, [r7, #12]
 800d7f8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d7fa:	68f8      	ldr	r0, [r7, #12]
 800d7fc:	f001 f8e6 	bl	800e9cc <USBD_CtlSendStatus>
 800d800:	e032      	b.n	800d868 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d802:	7afb      	ldrb	r3, [r7, #11]
 800d804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	4619      	mov	r1, r3
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f000 f9a5 	bl	800db5c <USBD_CoreFindEP>
 800d812:	4603      	mov	r3, r0
 800d814:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d816:	7dbb      	ldrb	r3, [r7, #22]
 800d818:	2bff      	cmp	r3, #255	@ 0xff
 800d81a:	d025      	beq.n	800d868 <USBD_LL_DataOutStage+0x15c>
 800d81c:	7dbb      	ldrb	r3, [r7, #22]
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d122      	bne.n	800d868 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	2b03      	cmp	r3, #3
 800d82c:	d117      	bne.n	800d85e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d82e:	7dba      	ldrb	r2, [r7, #22]
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	32ae      	adds	r2, #174	@ 0xae
 800d834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d838:	699b      	ldr	r3, [r3, #24]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d00f      	beq.n	800d85e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d83e:	7dba      	ldrb	r2, [r7, #22]
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d846:	7dba      	ldrb	r2, [r7, #22]
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	32ae      	adds	r2, #174	@ 0xae
 800d84c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	7afa      	ldrb	r2, [r7, #11]
 800d854:	4611      	mov	r1, r2
 800d856:	68f8      	ldr	r0, [r7, #12]
 800d858:	4798      	blx	r3
 800d85a:	4603      	mov	r3, r0
 800d85c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d85e:	7dfb      	ldrb	r3, [r7, #23]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d864:	7dfb      	ldrb	r3, [r7, #23]
 800d866:	e000      	b.n	800d86a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	b086      	sub	sp, #24
 800d876:	af00      	add	r7, sp, #0
 800d878:	60f8      	str	r0, [r7, #12]
 800d87a:	460b      	mov	r3, r1
 800d87c:	607a      	str	r2, [r7, #4]
 800d87e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d880:	7afb      	ldrb	r3, [r7, #11]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d16f      	bne.n	800d966 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	3314      	adds	r3, #20
 800d88a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d892:	2b02      	cmp	r3, #2
 800d894:	d15a      	bne.n	800d94c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	689a      	ldr	r2, [r3, #8]
 800d89a:	693b      	ldr	r3, [r7, #16]
 800d89c:	68db      	ldr	r3, [r3, #12]
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d914      	bls.n	800d8cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	689a      	ldr	r2, [r3, #8]
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	1ad2      	subs	r2, r2, r3
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d8b0:	693b      	ldr	r3, [r7, #16]
 800d8b2:	689b      	ldr	r3, [r3, #8]
 800d8b4:	461a      	mov	r2, r3
 800d8b6:	6879      	ldr	r1, [r7, #4]
 800d8b8:	68f8      	ldr	r0, [r7, #12]
 800d8ba:	f001 f848 	bl	800e94e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8be:	2300      	movs	r3, #0
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	68f8      	ldr	r0, [r7, #12]
 800d8c6:	f004 fd9f 	bl	8012408 <USBD_LL_PrepareReceive>
 800d8ca:	e03f      	b.n	800d94c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	68da      	ldr	r2, [r3, #12]
 800d8d0:	693b      	ldr	r3, [r7, #16]
 800d8d2:	689b      	ldr	r3, [r3, #8]
 800d8d4:	429a      	cmp	r2, r3
 800d8d6:	d11c      	bne.n	800d912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	685a      	ldr	r2, [r3, #4]
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d8e0:	429a      	cmp	r2, r3
 800d8e2:	d316      	bcc.n	800d912 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d8e4:	693b      	ldr	r3, [r7, #16]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d8ee:	429a      	cmp	r2, r3
 800d8f0:	d20f      	bcs.n	800d912 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	2100      	movs	r1, #0
 800d8f6:	68f8      	ldr	r0, [r7, #12]
 800d8f8:	f001 f829 	bl	800e94e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	2200      	movs	r2, #0
 800d900:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d904:	2300      	movs	r3, #0
 800d906:	2200      	movs	r2, #0
 800d908:	2100      	movs	r1, #0
 800d90a:	68f8      	ldr	r0, [r7, #12]
 800d90c:	f004 fd7c 	bl	8012408 <USBD_LL_PrepareReceive>
 800d910:	e01c      	b.n	800d94c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d10f      	bne.n	800d93e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d009      	beq.n	800d93e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	2200      	movs	r2, #0
 800d92e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d938:	68db      	ldr	r3, [r3, #12]
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d93e:	2180      	movs	r1, #128	@ 0x80
 800d940:	68f8      	ldr	r0, [r7, #12]
 800d942:	f004 fcb7 	bl	80122b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f001 f853 	bl	800e9f2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d952:	2b00      	cmp	r3, #0
 800d954:	d03a      	beq.n	800d9cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff fe42 	bl	800d5e0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2200      	movs	r2, #0
 800d960:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d964:	e032      	b.n	800d9cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d966:	7afb      	ldrb	r3, [r7, #11]
 800d968:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	4619      	mov	r1, r3
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f000 f8f3 	bl	800db5c <USBD_CoreFindEP>
 800d976:	4603      	mov	r3, r0
 800d978:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d97a:	7dfb      	ldrb	r3, [r7, #23]
 800d97c:	2bff      	cmp	r3, #255	@ 0xff
 800d97e:	d025      	beq.n	800d9cc <USBD_LL_DataInStage+0x15a>
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d122      	bne.n	800d9cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d11c      	bne.n	800d9cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d992:	7dfa      	ldrb	r2, [r7, #23]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	32ae      	adds	r2, #174	@ 0xae
 800d998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d014      	beq.n	800d9cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d9a2:	7dfa      	ldrb	r2, [r7, #23]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d9aa:	7dfa      	ldrb	r2, [r7, #23]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	32ae      	adds	r2, #174	@ 0xae
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	7afa      	ldrb	r2, [r7, #11]
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	4798      	blx	r3
 800d9be:	4603      	mov	r3, r0
 800d9c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d9c2:	7dbb      	ldrb	r3, [r7, #22]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d001      	beq.n	800d9cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d9c8:	7dbb      	ldrb	r3, [r7, #22]
 800d9ca:	e000      	b.n	800d9ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d9cc:	2300      	movs	r3, #0
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3718      	adds	r7, #24
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b084      	sub	sp, #16
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9de:	2300      	movs	r3, #0
 800d9e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	2201      	movs	r2, #1
 800d9e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d014      	beq.n	800da3c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da18:	685b      	ldr	r3, [r3, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00e      	beq.n	800da3c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	6852      	ldr	r2, [r2, #4]
 800da2a:	b2d2      	uxtb	r2, r2
 800da2c:	4611      	mov	r1, r2
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	4798      	blx	r3
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d001      	beq.n	800da3c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800da38:	2303      	movs	r3, #3
 800da3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da3c:	2340      	movs	r3, #64	@ 0x40
 800da3e:	2200      	movs	r2, #0
 800da40:	2100      	movs	r1, #0
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f004 fbf1 	bl	801222a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2201      	movs	r2, #1
 800da4c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	2240      	movs	r2, #64	@ 0x40
 800da54:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da58:	2340      	movs	r3, #64	@ 0x40
 800da5a:	2200      	movs	r2, #0
 800da5c:	2180      	movs	r1, #128	@ 0x80
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f004 fbe3 	bl	801222a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2240      	movs	r2, #64	@ 0x40
 800da6e:	621a      	str	r2, [r3, #32]

  return ret;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}

0800da7a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da7a:	b480      	push	{r7}
 800da7c:	b083      	sub	sp, #12
 800da7e:	af00      	add	r7, sp, #0
 800da80:	6078      	str	r0, [r7, #4]
 800da82:	460b      	mov	r3, r1
 800da84:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	78fa      	ldrb	r2, [r7, #3]
 800da8a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b04      	cmp	r3, #4
 800daac:	d006      	beq.n	800dabc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dab4:	b2da      	uxtb	r2, r3
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2204      	movs	r2, #4
 800dac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dae0:	b2db      	uxtb	r3, r3
 800dae2:	2b04      	cmp	r3, #4
 800dae4:	d106      	bne.n	800daf4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800daec:	b2da      	uxtb	r2, r3
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800daf4:	2300      	movs	r3, #0
}
 800daf6:	4618      	mov	r0, r3
 800daf8:	370c      	adds	r7, #12
 800dafa:	46bd      	mov	sp, r7
 800dafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db00:	4770      	bx	lr

0800db02 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b03      	cmp	r3, #3
 800db14:	d110      	bne.n	800db38 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00b      	beq.n	800db38 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db26:	69db      	ldr	r3, [r3, #28]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d005      	beq.n	800db38 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800db38:	2300      	movs	r3, #0
}
 800db3a:	4618      	mov	r0, r3
 800db3c:	3708      	adds	r7, #8
 800db3e:	46bd      	mov	sp, r7
 800db40:	bd80      	pop	{r7, pc}

0800db42 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db42:	b480      	push	{r7}
 800db44:	b083      	sub	sp, #12
 800db46:	af00      	add	r7, sp, #0
 800db48:	6078      	str	r0, [r7, #4]
 800db4a:	460b      	mov	r3, r1
 800db4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr

0800db5c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b083      	sub	sp, #12
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
 800db64:	460b      	mov	r3, r1
 800db66:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db68:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	370c      	adds	r7, #12
 800db6e:	46bd      	mov	sp, r7
 800db70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db74:	4770      	bx	lr

0800db76 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db76:	b580      	push	{r7, lr}
 800db78:	b086      	sub	sp, #24
 800db7a:	af00      	add	r7, sp, #0
 800db7c:	6078      	str	r0, [r7, #4]
 800db7e:	460b      	mov	r3, r1
 800db80:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	885b      	ldrh	r3, [r3, #2]
 800db92:	b29b      	uxth	r3, r3
 800db94:	68fa      	ldr	r2, [r7, #12]
 800db96:	7812      	ldrb	r2, [r2, #0]
 800db98:	4293      	cmp	r3, r2
 800db9a:	d91f      	bls.n	800dbdc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dba2:	e013      	b.n	800dbcc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dba4:	f107 030a 	add.w	r3, r7, #10
 800dba8:	4619      	mov	r1, r3
 800dbaa:	6978      	ldr	r0, [r7, #20]
 800dbac:	f000 f81b 	bl	800dbe6 <USBD_GetNextDesc>
 800dbb0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	785b      	ldrb	r3, [r3, #1]
 800dbb6:	2b05      	cmp	r3, #5
 800dbb8:	d108      	bne.n	800dbcc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dbbe:	693b      	ldr	r3, [r7, #16]
 800dbc0:	789b      	ldrb	r3, [r3, #2]
 800dbc2:	78fa      	ldrb	r2, [r7, #3]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d008      	beq.n	800dbda <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	885b      	ldrh	r3, [r3, #2]
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	897b      	ldrh	r3, [r7, #10]
 800dbd4:	429a      	cmp	r2, r3
 800dbd6:	d8e5      	bhi.n	800dba4 <USBD_GetEpDesc+0x2e>
 800dbd8:	e000      	b.n	800dbdc <USBD_GetEpDesc+0x66>
          break;
 800dbda:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dbdc:	693b      	ldr	r3, [r7, #16]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dbe6:	b480      	push	{r7}
 800dbe8:	b085      	sub	sp, #20
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	68fa      	ldr	r2, [r7, #12]
 800dbfa:	7812      	ldrb	r2, [r2, #0]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	b29a      	uxth	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	781b      	ldrb	r3, [r3, #0]
 800dc08:	461a      	mov	r2, r3
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4413      	add	r3, r2
 800dc0e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dc10:	68fb      	ldr	r3, [r7, #12]
}
 800dc12:	4618      	mov	r0, r3
 800dc14:	3714      	adds	r7, #20
 800dc16:	46bd      	mov	sp, r7
 800dc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1c:	4770      	bx	lr

0800dc1e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dc1e:	b480      	push	{r7}
 800dc20:	b087      	sub	sp, #28
 800dc22:	af00      	add	r7, sp, #0
 800dc24:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	3301      	adds	r3, #1
 800dc34:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dc36:	697b      	ldr	r3, [r7, #20]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dc3c:	8a3b      	ldrh	r3, [r7, #16]
 800dc3e:	021b      	lsls	r3, r3, #8
 800dc40:	b21a      	sxth	r2, r3
 800dc42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dc46:	4313      	orrs	r3, r2
 800dc48:	b21b      	sxth	r3, r3
 800dc4a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dc4c:	89fb      	ldrh	r3, [r7, #14]
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	371c      	adds	r7, #28
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr
	...

0800dc5c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc66:	2300      	movs	r3, #0
 800dc68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc72:	2b40      	cmp	r3, #64	@ 0x40
 800dc74:	d005      	beq.n	800dc82 <USBD_StdDevReq+0x26>
 800dc76:	2b40      	cmp	r3, #64	@ 0x40
 800dc78:	d857      	bhi.n	800dd2a <USBD_StdDevReq+0xce>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00f      	beq.n	800dc9e <USBD_StdDevReq+0x42>
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	d153      	bne.n	800dd2a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	32ae      	adds	r2, #174	@ 0xae
 800dc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	4798      	blx	r3
 800dc98:	4603      	mov	r3, r0
 800dc9a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc9c:	e04a      	b.n	800dd34 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	785b      	ldrb	r3, [r3, #1]
 800dca2:	2b09      	cmp	r3, #9
 800dca4:	d83b      	bhi.n	800dd1e <USBD_StdDevReq+0xc2>
 800dca6:	a201      	add	r2, pc, #4	@ (adr r2, 800dcac <USBD_StdDevReq+0x50>)
 800dca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcac:	0800dd01 	.word	0x0800dd01
 800dcb0:	0800dd15 	.word	0x0800dd15
 800dcb4:	0800dd1f 	.word	0x0800dd1f
 800dcb8:	0800dd0b 	.word	0x0800dd0b
 800dcbc:	0800dd1f 	.word	0x0800dd1f
 800dcc0:	0800dcdf 	.word	0x0800dcdf
 800dcc4:	0800dcd5 	.word	0x0800dcd5
 800dcc8:	0800dd1f 	.word	0x0800dd1f
 800dccc:	0800dcf7 	.word	0x0800dcf7
 800dcd0:	0800dce9 	.word	0x0800dce9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fa3c 	bl	800e154 <USBD_GetDescriptor>
          break;
 800dcdc:	e024      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dcde:	6839      	ldr	r1, [r7, #0]
 800dce0:	6878      	ldr	r0, [r7, #4]
 800dce2:	f000 fbcb 	bl	800e47c <USBD_SetAddress>
          break;
 800dce6:	e01f      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fc0a 	bl	800e504 <USBD_SetConfig>
 800dcf0:	4603      	mov	r3, r0
 800dcf2:	73fb      	strb	r3, [r7, #15]
          break;
 800dcf4:	e018      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dcf6:	6839      	ldr	r1, [r7, #0]
 800dcf8:	6878      	ldr	r0, [r7, #4]
 800dcfa:	f000 fcad 	bl	800e658 <USBD_GetConfig>
          break;
 800dcfe:	e013      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dd00:	6839      	ldr	r1, [r7, #0]
 800dd02:	6878      	ldr	r0, [r7, #4]
 800dd04:	f000 fcde 	bl	800e6c4 <USBD_GetStatus>
          break;
 800dd08:	e00e      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dd0a:	6839      	ldr	r1, [r7, #0]
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f000 fd0d 	bl	800e72c <USBD_SetFeature>
          break;
 800dd12:	e009      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dd14:	6839      	ldr	r1, [r7, #0]
 800dd16:	6878      	ldr	r0, [r7, #4]
 800dd18:	f000 fd31 	bl	800e77e <USBD_ClrFeature>
          break;
 800dd1c:	e004      	b.n	800dd28 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dd1e:	6839      	ldr	r1, [r7, #0]
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f000 fd88 	bl	800e836 <USBD_CtlError>
          break;
 800dd26:	bf00      	nop
      }
      break;
 800dd28:	e004      	b.n	800dd34 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dd2a:	6839      	ldr	r1, [r7, #0]
 800dd2c:	6878      	ldr	r0, [r7, #4]
 800dd2e:	f000 fd82 	bl	800e836 <USBD_CtlError>
      break;
 800dd32:	bf00      	nop
  }

  return ret;
 800dd34:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd36:	4618      	mov	r0, r3
 800dd38:	3710      	adds	r7, #16
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop

0800dd40 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b084      	sub	sp, #16
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]
 800dd48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	781b      	ldrb	r3, [r3, #0]
 800dd52:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dd56:	2b40      	cmp	r3, #64	@ 0x40
 800dd58:	d005      	beq.n	800dd66 <USBD_StdItfReq+0x26>
 800dd5a:	2b40      	cmp	r3, #64	@ 0x40
 800dd5c:	d852      	bhi.n	800de04 <USBD_StdItfReq+0xc4>
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d001      	beq.n	800dd66 <USBD_StdItfReq+0x26>
 800dd62:	2b20      	cmp	r3, #32
 800dd64:	d14e      	bne.n	800de04 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	3b01      	subs	r3, #1
 800dd70:	2b02      	cmp	r3, #2
 800dd72:	d840      	bhi.n	800ddf6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	889b      	ldrh	r3, [r3, #4]
 800dd78:	b2db      	uxtb	r3, r3
 800dd7a:	2b01      	cmp	r3, #1
 800dd7c:	d836      	bhi.n	800ddec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	889b      	ldrh	r3, [r3, #4]
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	4619      	mov	r1, r3
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f7ff fedb 	bl	800db42 <USBD_CoreFindIF>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd90:	7bbb      	ldrb	r3, [r7, #14]
 800dd92:	2bff      	cmp	r3, #255	@ 0xff
 800dd94:	d01d      	beq.n	800ddd2 <USBD_StdItfReq+0x92>
 800dd96:	7bbb      	ldrb	r3, [r7, #14]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d11a      	bne.n	800ddd2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd9c:	7bba      	ldrb	r2, [r7, #14]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	32ae      	adds	r2, #174	@ 0xae
 800dda2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00f      	beq.n	800ddcc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ddac:	7bba      	ldrb	r2, [r7, #14]
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ddb4:	7bba      	ldrb	r2, [r7, #14]
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	32ae      	adds	r2, #174	@ 0xae
 800ddba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddbe:	689b      	ldr	r3, [r3, #8]
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	4798      	blx	r3
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddca:	e004      	b.n	800ddd6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ddd0:	e001      	b.n	800ddd6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	88db      	ldrh	r3, [r3, #6]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d110      	bne.n	800de00 <USBD_StdItfReq+0xc0>
 800ddde:	7bfb      	ldrb	r3, [r7, #15]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d10d      	bne.n	800de00 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f000 fdf1 	bl	800e9cc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ddea:	e009      	b.n	800de00 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fd21 	bl	800e836 <USBD_CtlError>
          break;
 800ddf4:	e004      	b.n	800de00 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ddf6:	6839      	ldr	r1, [r7, #0]
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 fd1c 	bl	800e836 <USBD_CtlError>
          break;
 800ddfe:	e000      	b.n	800de02 <USBD_StdItfReq+0xc2>
          break;
 800de00:	bf00      	nop
      }
      break;
 800de02:	e004      	b.n	800de0e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 fd15 	bl	800e836 <USBD_CtlError>
      break;
 800de0c:	bf00      	nop
  }

  return ret;
 800de0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800de10:	4618      	mov	r0, r3
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800de22:	2300      	movs	r3, #0
 800de24:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	889b      	ldrh	r3, [r3, #4]
 800de2a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	781b      	ldrb	r3, [r3, #0]
 800de30:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800de34:	2b40      	cmp	r3, #64	@ 0x40
 800de36:	d007      	beq.n	800de48 <USBD_StdEPReq+0x30>
 800de38:	2b40      	cmp	r3, #64	@ 0x40
 800de3a:	f200 817f 	bhi.w	800e13c <USBD_StdEPReq+0x324>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d02a      	beq.n	800de98 <USBD_StdEPReq+0x80>
 800de42:	2b20      	cmp	r3, #32
 800de44:	f040 817a 	bne.w	800e13c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800de48:	7bbb      	ldrb	r3, [r7, #14]
 800de4a:	4619      	mov	r1, r3
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f7ff fe85 	bl	800db5c <USBD_CoreFindEP>
 800de52:	4603      	mov	r3, r0
 800de54:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800de56:	7b7b      	ldrb	r3, [r7, #13]
 800de58:	2bff      	cmp	r3, #255	@ 0xff
 800de5a:	f000 8174 	beq.w	800e146 <USBD_StdEPReq+0x32e>
 800de5e:	7b7b      	ldrb	r3, [r7, #13]
 800de60:	2b00      	cmp	r3, #0
 800de62:	f040 8170 	bne.w	800e146 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800de66:	7b7a      	ldrb	r2, [r7, #13]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de6e:	7b7a      	ldrb	r2, [r7, #13]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	32ae      	adds	r2, #174	@ 0xae
 800de74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de78:	689b      	ldr	r3, [r3, #8]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	f000 8163 	beq.w	800e146 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de80:	7b7a      	ldrb	r2, [r7, #13]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	32ae      	adds	r2, #174	@ 0xae
 800de86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	6839      	ldr	r1, [r7, #0]
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	4798      	blx	r3
 800de92:	4603      	mov	r3, r0
 800de94:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de96:	e156      	b.n	800e146 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	785b      	ldrb	r3, [r3, #1]
 800de9c:	2b03      	cmp	r3, #3
 800de9e:	d008      	beq.n	800deb2 <USBD_StdEPReq+0x9a>
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	f300 8145 	bgt.w	800e130 <USBD_StdEPReq+0x318>
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	f000 809b 	beq.w	800dfe2 <USBD_StdEPReq+0x1ca>
 800deac:	2b01      	cmp	r3, #1
 800deae:	d03c      	beq.n	800df2a <USBD_StdEPReq+0x112>
 800deb0:	e13e      	b.n	800e130 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	2b02      	cmp	r3, #2
 800debc:	d002      	beq.n	800dec4 <USBD_StdEPReq+0xac>
 800debe:	2b03      	cmp	r3, #3
 800dec0:	d016      	beq.n	800def0 <USBD_StdEPReq+0xd8>
 800dec2:	e02c      	b.n	800df1e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dec4:	7bbb      	ldrb	r3, [r7, #14]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d00d      	beq.n	800dee6 <USBD_StdEPReq+0xce>
 800deca:	7bbb      	ldrb	r3, [r7, #14]
 800decc:	2b80      	cmp	r3, #128	@ 0x80
 800dece:	d00a      	beq.n	800dee6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ded0:	7bbb      	ldrb	r3, [r7, #14]
 800ded2:	4619      	mov	r1, r3
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f004 f9ed 	bl	80122b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deda:	2180      	movs	r1, #128	@ 0x80
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f004 f9e9 	bl	80122b4 <USBD_LL_StallEP>
 800dee2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dee4:	e020      	b.n	800df28 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dee6:	6839      	ldr	r1, [r7, #0]
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 fca4 	bl	800e836 <USBD_CtlError>
              break;
 800deee:	e01b      	b.n	800df28 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	885b      	ldrh	r3, [r3, #2]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d10e      	bne.n	800df16 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800def8:	7bbb      	ldrb	r3, [r7, #14]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d00b      	beq.n	800df16 <USBD_StdEPReq+0xfe>
 800defe:	7bbb      	ldrb	r3, [r7, #14]
 800df00:	2b80      	cmp	r3, #128	@ 0x80
 800df02:	d008      	beq.n	800df16 <USBD_StdEPReq+0xfe>
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	88db      	ldrh	r3, [r3, #6]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d104      	bne.n	800df16 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800df0c:	7bbb      	ldrb	r3, [r7, #14]
 800df0e:	4619      	mov	r1, r3
 800df10:	6878      	ldr	r0, [r7, #4]
 800df12:	f004 f9cf 	bl	80122b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f000 fd58 	bl	800e9cc <USBD_CtlSendStatus>

              break;
 800df1c:	e004      	b.n	800df28 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800df1e:	6839      	ldr	r1, [r7, #0]
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 fc88 	bl	800e836 <USBD_CtlError>
              break;
 800df26:	bf00      	nop
          }
          break;
 800df28:	e107      	b.n	800e13a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df30:	b2db      	uxtb	r3, r3
 800df32:	2b02      	cmp	r3, #2
 800df34:	d002      	beq.n	800df3c <USBD_StdEPReq+0x124>
 800df36:	2b03      	cmp	r3, #3
 800df38:	d016      	beq.n	800df68 <USBD_StdEPReq+0x150>
 800df3a:	e04b      	b.n	800dfd4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00d      	beq.n	800df5e <USBD_StdEPReq+0x146>
 800df42:	7bbb      	ldrb	r3, [r7, #14]
 800df44:	2b80      	cmp	r3, #128	@ 0x80
 800df46:	d00a      	beq.n	800df5e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800df48:	7bbb      	ldrb	r3, [r7, #14]
 800df4a:	4619      	mov	r1, r3
 800df4c:	6878      	ldr	r0, [r7, #4]
 800df4e:	f004 f9b1 	bl	80122b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800df52:	2180      	movs	r1, #128	@ 0x80
 800df54:	6878      	ldr	r0, [r7, #4]
 800df56:	f004 f9ad 	bl	80122b4 <USBD_LL_StallEP>
 800df5a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800df5c:	e040      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800df5e:	6839      	ldr	r1, [r7, #0]
 800df60:	6878      	ldr	r0, [r7, #4]
 800df62:	f000 fc68 	bl	800e836 <USBD_CtlError>
              break;
 800df66:	e03b      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	885b      	ldrh	r3, [r3, #2]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d136      	bne.n	800dfde <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df70:	7bbb      	ldrb	r3, [r7, #14]
 800df72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df76:	2b00      	cmp	r3, #0
 800df78:	d004      	beq.n	800df84 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df7a:	7bbb      	ldrb	r3, [r7, #14]
 800df7c:	4619      	mov	r1, r3
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f004 f9b7 	bl	80122f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fd21 	bl	800e9cc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f7ff fde4 	bl	800db5c <USBD_CoreFindEP>
 800df94:	4603      	mov	r3, r0
 800df96:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df98:	7b7b      	ldrb	r3, [r7, #13]
 800df9a:	2bff      	cmp	r3, #255	@ 0xff
 800df9c:	d01f      	beq.n	800dfde <USBD_StdEPReq+0x1c6>
 800df9e:	7b7b      	ldrb	r3, [r7, #13]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d11c      	bne.n	800dfde <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dfa4:	7b7a      	ldrb	r2, [r7, #13]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dfac:	7b7a      	ldrb	r2, [r7, #13]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	32ae      	adds	r2, #174	@ 0xae
 800dfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfb6:	689b      	ldr	r3, [r3, #8]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d010      	beq.n	800dfde <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dfbc:	7b7a      	ldrb	r2, [r7, #13]
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	32ae      	adds	r2, #174	@ 0xae
 800dfc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dfc6:	689b      	ldr	r3, [r3, #8]
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	4798      	blx	r3
 800dfce:	4603      	mov	r3, r0
 800dfd0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dfd2:	e004      	b.n	800dfde <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 fc2d 	bl	800e836 <USBD_CtlError>
              break;
 800dfdc:	e000      	b.n	800dfe0 <USBD_StdEPReq+0x1c8>
              break;
 800dfde:	bf00      	nop
          }
          break;
 800dfe0:	e0ab      	b.n	800e13a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	2b02      	cmp	r3, #2
 800dfec:	d002      	beq.n	800dff4 <USBD_StdEPReq+0x1dc>
 800dfee:	2b03      	cmp	r3, #3
 800dff0:	d032      	beq.n	800e058 <USBD_StdEPReq+0x240>
 800dff2:	e097      	b.n	800e124 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d007      	beq.n	800e00a <USBD_StdEPReq+0x1f2>
 800dffa:	7bbb      	ldrb	r3, [r7, #14]
 800dffc:	2b80      	cmp	r3, #128	@ 0x80
 800dffe:	d004      	beq.n	800e00a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e000:	6839      	ldr	r1, [r7, #0]
 800e002:	6878      	ldr	r0, [r7, #4]
 800e004:	f000 fc17 	bl	800e836 <USBD_CtlError>
                break;
 800e008:	e091      	b.n	800e12e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e00a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	da0b      	bge.n	800e02a <USBD_StdEPReq+0x212>
 800e012:	7bbb      	ldrb	r3, [r7, #14]
 800e014:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e018:	4613      	mov	r3, r2
 800e01a:	009b      	lsls	r3, r3, #2
 800e01c:	4413      	add	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	3310      	adds	r3, #16
 800e022:	687a      	ldr	r2, [r7, #4]
 800e024:	4413      	add	r3, r2
 800e026:	3304      	adds	r3, #4
 800e028:	e00b      	b.n	800e042 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e02a:	7bbb      	ldrb	r3, [r7, #14]
 800e02c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e030:	4613      	mov	r3, r2
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	4413      	add	r3, r2
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e03c:	687a      	ldr	r2, [r7, #4]
 800e03e:	4413      	add	r3, r2
 800e040:	3304      	adds	r3, #4
 800e042:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	2200      	movs	r2, #0
 800e048:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2202      	movs	r2, #2
 800e04e:	4619      	mov	r1, r3
 800e050:	6878      	ldr	r0, [r7, #4]
 800e052:	f000 fc61 	bl	800e918 <USBD_CtlSendData>
              break;
 800e056:	e06a      	b.n	800e12e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e058:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	da11      	bge.n	800e084 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e060:	7bbb      	ldrb	r3, [r7, #14]
 800e062:	f003 020f 	and.w	r2, r3, #15
 800e066:	6879      	ldr	r1, [r7, #4]
 800e068:	4613      	mov	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	440b      	add	r3, r1
 800e072:	3324      	adds	r3, #36	@ 0x24
 800e074:	881b      	ldrh	r3, [r3, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d117      	bne.n	800e0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e07a:	6839      	ldr	r1, [r7, #0]
 800e07c:	6878      	ldr	r0, [r7, #4]
 800e07e:	f000 fbda 	bl	800e836 <USBD_CtlError>
                  break;
 800e082:	e054      	b.n	800e12e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e084:	7bbb      	ldrb	r3, [r7, #14]
 800e086:	f003 020f 	and.w	r2, r3, #15
 800e08a:	6879      	ldr	r1, [r7, #4]
 800e08c:	4613      	mov	r3, r2
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	009b      	lsls	r3, r3, #2
 800e094:	440b      	add	r3, r1
 800e096:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e09a:	881b      	ldrh	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d104      	bne.n	800e0aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fbc7 	bl	800e836 <USBD_CtlError>
                  break;
 800e0a8:	e041      	b.n	800e12e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	da0b      	bge.n	800e0ca <USBD_StdEPReq+0x2b2>
 800e0b2:	7bbb      	ldrb	r3, [r7, #14]
 800e0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e0b8:	4613      	mov	r3, r2
 800e0ba:	009b      	lsls	r3, r3, #2
 800e0bc:	4413      	add	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	3310      	adds	r3, #16
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	4413      	add	r3, r2
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	e00b      	b.n	800e0e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e0ca:	7bbb      	ldrb	r3, [r7, #14]
 800e0cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e0dc:	687a      	ldr	r2, [r7, #4]
 800e0de:	4413      	add	r3, r2
 800e0e0:	3304      	adds	r3, #4
 800e0e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e0e4:	7bbb      	ldrb	r3, [r7, #14]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d002      	beq.n	800e0f0 <USBD_StdEPReq+0x2d8>
 800e0ea:	7bbb      	ldrb	r3, [r7, #14]
 800e0ec:	2b80      	cmp	r3, #128	@ 0x80
 800e0ee:	d103      	bne.n	800e0f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	601a      	str	r2, [r3, #0]
 800e0f6:	e00e      	b.n	800e116 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f004 f917 	bl	8012330 <USBD_LL_IsStallEP>
 800e102:	4603      	mov	r3, r0
 800e104:	2b00      	cmp	r3, #0
 800e106:	d003      	beq.n	800e110 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	2201      	movs	r2, #1
 800e10c:	601a      	str	r2, [r3, #0]
 800e10e:	e002      	b.n	800e116 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	2202      	movs	r2, #2
 800e11a:	4619      	mov	r1, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f000 fbfb 	bl	800e918 <USBD_CtlSendData>
              break;
 800e122:	e004      	b.n	800e12e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e124:	6839      	ldr	r1, [r7, #0]
 800e126:	6878      	ldr	r0, [r7, #4]
 800e128:	f000 fb85 	bl	800e836 <USBD_CtlError>
              break;
 800e12c:	bf00      	nop
          }
          break;
 800e12e:	e004      	b.n	800e13a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e130:	6839      	ldr	r1, [r7, #0]
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 fb7f 	bl	800e836 <USBD_CtlError>
          break;
 800e138:	bf00      	nop
      }
      break;
 800e13a:	e005      	b.n	800e148 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fb79 	bl	800e836 <USBD_CtlError>
      break;
 800e144:	e000      	b.n	800e148 <USBD_StdEPReq+0x330>
      break;
 800e146:	bf00      	nop
  }

  return ret;
 800e148:	7bfb      	ldrb	r3, [r7, #15]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
	...

0800e154 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e154:	b580      	push	{r7, lr}
 800e156:	b084      	sub	sp, #16
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e15e:	2300      	movs	r3, #0
 800e160:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e162:	2300      	movs	r3, #0
 800e164:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e166:	2300      	movs	r3, #0
 800e168:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e16a:	683b      	ldr	r3, [r7, #0]
 800e16c:	885b      	ldrh	r3, [r3, #2]
 800e16e:	0a1b      	lsrs	r3, r3, #8
 800e170:	b29b      	uxth	r3, r3
 800e172:	3b01      	subs	r3, #1
 800e174:	2b0e      	cmp	r3, #14
 800e176:	f200 8152 	bhi.w	800e41e <USBD_GetDescriptor+0x2ca>
 800e17a:	a201      	add	r2, pc, #4	@ (adr r2, 800e180 <USBD_GetDescriptor+0x2c>)
 800e17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e180:	0800e1f1 	.word	0x0800e1f1
 800e184:	0800e209 	.word	0x0800e209
 800e188:	0800e249 	.word	0x0800e249
 800e18c:	0800e41f 	.word	0x0800e41f
 800e190:	0800e41f 	.word	0x0800e41f
 800e194:	0800e3bf 	.word	0x0800e3bf
 800e198:	0800e3eb 	.word	0x0800e3eb
 800e19c:	0800e41f 	.word	0x0800e41f
 800e1a0:	0800e41f 	.word	0x0800e41f
 800e1a4:	0800e41f 	.word	0x0800e41f
 800e1a8:	0800e41f 	.word	0x0800e41f
 800e1ac:	0800e41f 	.word	0x0800e41f
 800e1b0:	0800e41f 	.word	0x0800e41f
 800e1b4:	0800e41f 	.word	0x0800e41f
 800e1b8:	0800e1bd 	.word	0x0800e1bd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1c2:	69db      	ldr	r3, [r3, #28]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d00b      	beq.n	800e1e0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1ce:	69db      	ldr	r3, [r3, #28]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	7c12      	ldrb	r2, [r2, #16]
 800e1d4:	f107 0108 	add.w	r1, r7, #8
 800e1d8:	4610      	mov	r0, r2
 800e1da:	4798      	blx	r3
 800e1dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1de:	e126      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb27 	bl	800e836 <USBD_CtlError>
        err++;
 800e1e8:	7afb      	ldrb	r3, [r7, #11]
 800e1ea:	3301      	adds	r3, #1
 800e1ec:	72fb      	strb	r3, [r7, #11]
      break;
 800e1ee:	e11e      	b.n	800e42e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
      break;
 800e206:	e112      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	7c1b      	ldrb	r3, [r3, #16]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d10d      	bne.n	800e22c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e218:	f107 0208 	add.w	r2, r7, #8
 800e21c:	4610      	mov	r0, r2
 800e21e:	4798      	blx	r3
 800e220:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	3301      	adds	r3, #1
 800e226:	2202      	movs	r2, #2
 800e228:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e22a:	e100      	b.n	800e42e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e234:	f107 0208 	add.w	r2, r7, #8
 800e238:	4610      	mov	r0, r2
 800e23a:	4798      	blx	r3
 800e23c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	2202      	movs	r2, #2
 800e244:	701a      	strb	r2, [r3, #0]
      break;
 800e246:	e0f2      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	885b      	ldrh	r3, [r3, #2]
 800e24c:	b2db      	uxtb	r3, r3
 800e24e:	2b05      	cmp	r3, #5
 800e250:	f200 80ac 	bhi.w	800e3ac <USBD_GetDescriptor+0x258>
 800e254:	a201      	add	r2, pc, #4	@ (adr r2, 800e25c <USBD_GetDescriptor+0x108>)
 800e256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25a:	bf00      	nop
 800e25c:	0800e275 	.word	0x0800e275
 800e260:	0800e2a9 	.word	0x0800e2a9
 800e264:	0800e2dd 	.word	0x0800e2dd
 800e268:	0800e311 	.word	0x0800e311
 800e26c:	0800e345 	.word	0x0800e345
 800e270:	0800e379 	.word	0x0800e379
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e27a:	685b      	ldr	r3, [r3, #4]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	7c12      	ldrb	r2, [r2, #16]
 800e28c:	f107 0108 	add.w	r1, r7, #8
 800e290:	4610      	mov	r0, r2
 800e292:	4798      	blx	r3
 800e294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e296:	e091      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 facb 	bl	800e836 <USBD_CtlError>
            err++;
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a6:	e089      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00b      	beq.n	800e2cc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ba:	689b      	ldr	r3, [r3, #8]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	7c12      	ldrb	r2, [r2, #16]
 800e2c0:	f107 0108 	add.w	r1, r7, #8
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
 800e2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ca:	e077      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fab1 	bl	800e836 <USBD_CtlError>
            err++;
 800e2d4:	7afb      	ldrb	r3, [r7, #11]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2da:	e06f      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2e2:	68db      	ldr	r3, [r3, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ee:	68db      	ldr	r3, [r3, #12]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	7c12      	ldrb	r2, [r2, #16]
 800e2f4:	f107 0108 	add.w	r1, r7, #8
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fe:	e05d      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fa97 	bl	800e836 <USBD_CtlError>
            err++;
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	3301      	adds	r3, #1
 800e30c:	72fb      	strb	r3, [r7, #11]
          break;
 800e30e:	e055      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e322:	691b      	ldr	r3, [r3, #16]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	7c12      	ldrb	r2, [r2, #16]
 800e328:	f107 0108 	add.w	r1, r7, #8
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
 800e330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e332:	e043      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fa7d 	bl	800e836 <USBD_CtlError>
            err++;
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	3301      	adds	r3, #1
 800e340:	72fb      	strb	r3, [r7, #11]
          break;
 800e342:	e03b      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e34a:	695b      	ldr	r3, [r3, #20]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00b      	beq.n	800e368 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e356:	695b      	ldr	r3, [r3, #20]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	7c12      	ldrb	r2, [r2, #16]
 800e35c:	f107 0108 	add.w	r1, r7, #8
 800e360:	4610      	mov	r0, r2
 800e362:	4798      	blx	r3
 800e364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e366:	e029      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e368:	6839      	ldr	r1, [r7, #0]
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fa63 	bl	800e836 <USBD_CtlError>
            err++;
 800e370:	7afb      	ldrb	r3, [r7, #11]
 800e372:	3301      	adds	r3, #1
 800e374:	72fb      	strb	r3, [r7, #11]
          break;
 800e376:	e021      	b.n	800e3bc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e37e:	699b      	ldr	r3, [r3, #24]
 800e380:	2b00      	cmp	r3, #0
 800e382:	d00b      	beq.n	800e39c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e38a:	699b      	ldr	r3, [r3, #24]
 800e38c:	687a      	ldr	r2, [r7, #4]
 800e38e:	7c12      	ldrb	r2, [r2, #16]
 800e390:	f107 0108 	add.w	r1, r7, #8
 800e394:	4610      	mov	r0, r2
 800e396:	4798      	blx	r3
 800e398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e39a:	e00f      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e39c:	6839      	ldr	r1, [r7, #0]
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 fa49 	bl	800e836 <USBD_CtlError>
            err++;
 800e3a4:	7afb      	ldrb	r3, [r7, #11]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e3aa:	e007      	b.n	800e3bc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e3ac:	6839      	ldr	r1, [r7, #0]
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 fa41 	bl	800e836 <USBD_CtlError>
          err++;
 800e3b4:	7afb      	ldrb	r3, [r7, #11]
 800e3b6:	3301      	adds	r3, #1
 800e3b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e3ba:	bf00      	nop
      }
      break;
 800e3bc:	e037      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	7c1b      	ldrb	r3, [r3, #16]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d109      	bne.n	800e3da <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e3ce:	f107 0208 	add.w	r2, r7, #8
 800e3d2:	4610      	mov	r0, r2
 800e3d4:	4798      	blx	r3
 800e3d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3d8:	e029      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3da:	6839      	ldr	r1, [r7, #0]
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 fa2a 	bl	800e836 <USBD_CtlError>
        err++;
 800e3e2:	7afb      	ldrb	r3, [r7, #11]
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	72fb      	strb	r3, [r7, #11]
      break;
 800e3e8:	e021      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	7c1b      	ldrb	r3, [r3, #16]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d10d      	bne.n	800e40e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e3f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e3fa:	f107 0208 	add.w	r2, r7, #8
 800e3fe:	4610      	mov	r0, r2
 800e400:	4798      	blx	r3
 800e402:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	3301      	adds	r3, #1
 800e408:	2207      	movs	r2, #7
 800e40a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e40c:	e00f      	b.n	800e42e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f000 fa10 	bl	800e836 <USBD_CtlError>
        err++;
 800e416:	7afb      	ldrb	r3, [r7, #11]
 800e418:	3301      	adds	r3, #1
 800e41a:	72fb      	strb	r3, [r7, #11]
      break;
 800e41c:	e007      	b.n	800e42e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fa08 	bl	800e836 <USBD_CtlError>
      err++;
 800e426:	7afb      	ldrb	r3, [r7, #11]
 800e428:	3301      	adds	r3, #1
 800e42a:	72fb      	strb	r3, [r7, #11]
      break;
 800e42c:	bf00      	nop
  }

  if (err != 0U)
 800e42e:	7afb      	ldrb	r3, [r7, #11]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d11e      	bne.n	800e472 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	88db      	ldrh	r3, [r3, #6]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d016      	beq.n	800e46a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e43c:	893b      	ldrh	r3, [r7, #8]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d00e      	beq.n	800e460 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	88da      	ldrh	r2, [r3, #6]
 800e446:	893b      	ldrh	r3, [r7, #8]
 800e448:	4293      	cmp	r3, r2
 800e44a:	bf28      	it	cs
 800e44c:	4613      	movcs	r3, r2
 800e44e:	b29b      	uxth	r3, r3
 800e450:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e452:	893b      	ldrh	r3, [r7, #8]
 800e454:	461a      	mov	r2, r3
 800e456:	68f9      	ldr	r1, [r7, #12]
 800e458:	6878      	ldr	r0, [r7, #4]
 800e45a:	f000 fa5d 	bl	800e918 <USBD_CtlSendData>
 800e45e:	e009      	b.n	800e474 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e460:	6839      	ldr	r1, [r7, #0]
 800e462:	6878      	ldr	r0, [r7, #4]
 800e464:	f000 f9e7 	bl	800e836 <USBD_CtlError>
 800e468:	e004      	b.n	800e474 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 faae 	bl	800e9cc <USBD_CtlSendStatus>
 800e470:	e000      	b.n	800e474 <USBD_GetDescriptor+0x320>
    return;
 800e472:	bf00      	nop
  }
}
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop

0800e47c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b084      	sub	sp, #16
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	889b      	ldrh	r3, [r3, #4]
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d131      	bne.n	800e4f2 <USBD_SetAddress+0x76>
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	88db      	ldrh	r3, [r3, #6]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d12d      	bne.n	800e4f2 <USBD_SetAddress+0x76>
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e49c:	d829      	bhi.n	800e4f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e49e:	683b      	ldr	r3, [r7, #0]
 800e4a0:	885b      	ldrh	r3, [r3, #2]
 800e4a2:	b2db      	uxtb	r3, r3
 800e4a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e4a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b03      	cmp	r3, #3
 800e4b4:	d104      	bne.n	800e4c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f9bc 	bl	800e836 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4be:	e01d      	b.n	800e4fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	7bfa      	ldrb	r2, [r7, #15]
 800e4c4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e4c8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f003 ff5b 	bl	8012388 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f000 fa7a 	bl	800e9cc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e4d8:	7bfb      	ldrb	r3, [r7, #15]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d004      	beq.n	800e4e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4e6:	e009      	b.n	800e4fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e4f0:	e004      	b.n	800e4fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e4f2:	6839      	ldr	r1, [r7, #0]
 800e4f4:	6878      	ldr	r0, [r7, #4]
 800e4f6:	f000 f99e 	bl	800e836 <USBD_CtlError>
  }
}
 800e4fa:	bf00      	nop
 800e4fc:	bf00      	nop
 800e4fe:	3710      	adds	r7, #16
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b084      	sub	sp, #16
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e50e:	2300      	movs	r3, #0
 800e510:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	885b      	ldrh	r3, [r3, #2]
 800e516:	b2da      	uxtb	r2, r3
 800e518:	4b4e      	ldr	r3, [pc, #312]	@ (800e654 <USBD_SetConfig+0x150>)
 800e51a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e51c:	4b4d      	ldr	r3, [pc, #308]	@ (800e654 <USBD_SetConfig+0x150>)
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b01      	cmp	r3, #1
 800e522:	d905      	bls.n	800e530 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e524:	6839      	ldr	r1, [r7, #0]
 800e526:	6878      	ldr	r0, [r7, #4]
 800e528:	f000 f985 	bl	800e836 <USBD_CtlError>
    return USBD_FAIL;
 800e52c:	2303      	movs	r3, #3
 800e52e:	e08c      	b.n	800e64a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e536:	b2db      	uxtb	r3, r3
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d002      	beq.n	800e542 <USBD_SetConfig+0x3e>
 800e53c:	2b03      	cmp	r3, #3
 800e53e:	d029      	beq.n	800e594 <USBD_SetConfig+0x90>
 800e540:	e075      	b.n	800e62e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e542:	4b44      	ldr	r3, [pc, #272]	@ (800e654 <USBD_SetConfig+0x150>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d020      	beq.n	800e58c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e54a:	4b42      	ldr	r3, [pc, #264]	@ (800e654 <USBD_SetConfig+0x150>)
 800e54c:	781b      	ldrb	r3, [r3, #0]
 800e54e:	461a      	mov	r2, r3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e554:	4b3f      	ldr	r3, [pc, #252]	@ (800e654 <USBD_SetConfig+0x150>)
 800e556:	781b      	ldrb	r3, [r3, #0]
 800e558:	4619      	mov	r1, r3
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7ff f84b 	bl	800d5f6 <USBD_SetClassConfig>
 800e560:	4603      	mov	r3, r0
 800e562:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e564:	7bfb      	ldrb	r3, [r7, #15]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d008      	beq.n	800e57c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e56a:	6839      	ldr	r1, [r7, #0]
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 f962 	bl	800e836 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2202      	movs	r2, #2
 800e576:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e57a:	e065      	b.n	800e648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 fa25 	bl	800e9cc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2203      	movs	r2, #3
 800e586:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e58a:	e05d      	b.n	800e648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa1d 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e592:	e059      	b.n	800e648 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e594:	4b2f      	ldr	r3, [pc, #188]	@ (800e654 <USBD_SetConfig+0x150>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d112      	bne.n	800e5c2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2202      	movs	r2, #2
 800e5a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e5a4:	4b2b      	ldr	r3, [pc, #172]	@ (800e654 <USBD_SetConfig+0x150>)
 800e5a6:	781b      	ldrb	r3, [r3, #0]
 800e5a8:	461a      	mov	r2, r3
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ae:	4b29      	ldr	r3, [pc, #164]	@ (800e654 <USBD_SetConfig+0x150>)
 800e5b0:	781b      	ldrb	r3, [r3, #0]
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff f83a 	bl	800d62e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e5ba:	6878      	ldr	r0, [r7, #4]
 800e5bc:	f000 fa06 	bl	800e9cc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e5c0:	e042      	b.n	800e648 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e5c2:	4b24      	ldr	r3, [pc, #144]	@ (800e654 <USBD_SetConfig+0x150>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	685b      	ldr	r3, [r3, #4]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d02a      	beq.n	800e626 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	685b      	ldr	r3, [r3, #4]
 800e5d4:	b2db      	uxtb	r3, r3
 800e5d6:	4619      	mov	r1, r3
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff f828 	bl	800d62e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e5de:	4b1d      	ldr	r3, [pc, #116]	@ (800e654 <USBD_SetConfig+0x150>)
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	461a      	mov	r2, r3
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e5e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e654 <USBD_SetConfig+0x150>)
 800e5ea:	781b      	ldrb	r3, [r3, #0]
 800e5ec:	4619      	mov	r1, r3
 800e5ee:	6878      	ldr	r0, [r7, #4]
 800e5f0:	f7ff f801 	bl	800d5f6 <USBD_SetClassConfig>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d00f      	beq.n	800e61e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e5fe:	6839      	ldr	r1, [r7, #0]
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f000 f918 	bl	800e836 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	b2db      	uxtb	r3, r3
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7ff f80d 	bl	800d62e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2202      	movs	r2, #2
 800e618:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e61c:	e014      	b.n	800e648 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e61e:	6878      	ldr	r0, [r7, #4]
 800e620:	f000 f9d4 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e624:	e010      	b.n	800e648 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 f9d0 	bl	800e9cc <USBD_CtlSendStatus>
      break;
 800e62c:	e00c      	b.n	800e648 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e62e:	6839      	ldr	r1, [r7, #0]
 800e630:	6878      	ldr	r0, [r7, #4]
 800e632:	f000 f900 	bl	800e836 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e636:	4b07      	ldr	r3, [pc, #28]	@ (800e654 <USBD_SetConfig+0x150>)
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	4619      	mov	r1, r3
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7fe fff6 	bl	800d62e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e642:	2303      	movs	r3, #3
 800e644:	73fb      	strb	r3, [r7, #15]
      break;
 800e646:	bf00      	nop
  }

  return ret;
 800e648:	7bfb      	ldrb	r3, [r7, #15]
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20000408 	.word	0x20000408

0800e658 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b082      	sub	sp, #8
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	88db      	ldrh	r3, [r3, #6]
 800e666:	2b01      	cmp	r3, #1
 800e668:	d004      	beq.n	800e674 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e66a:	6839      	ldr	r1, [r7, #0]
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f000 f8e2 	bl	800e836 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e672:	e023      	b.n	800e6bc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e67a:	b2db      	uxtb	r3, r3
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	dc02      	bgt.n	800e686 <USBD_GetConfig+0x2e>
 800e680:	2b00      	cmp	r3, #0
 800e682:	dc03      	bgt.n	800e68c <USBD_GetConfig+0x34>
 800e684:	e015      	b.n	800e6b2 <USBD_GetConfig+0x5a>
 800e686:	2b03      	cmp	r3, #3
 800e688:	d00b      	beq.n	800e6a2 <USBD_GetConfig+0x4a>
 800e68a:	e012      	b.n	800e6b2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	2200      	movs	r2, #0
 800e690:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3308      	adds	r3, #8
 800e696:	2201      	movs	r2, #1
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f93c 	bl	800e918 <USBD_CtlSendData>
        break;
 800e6a0:	e00c      	b.n	800e6bc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	3304      	adds	r3, #4
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f934 	bl	800e918 <USBD_CtlSendData>
        break;
 800e6b0:	e004      	b.n	800e6bc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 f8be 	bl	800e836 <USBD_CtlError>
        break;
 800e6ba:	bf00      	nop
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6d4:	b2db      	uxtb	r3, r3
 800e6d6:	3b01      	subs	r3, #1
 800e6d8:	2b02      	cmp	r3, #2
 800e6da:	d81e      	bhi.n	800e71a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	88db      	ldrh	r3, [r3, #6]
 800e6e0:	2b02      	cmp	r3, #2
 800e6e2:	d004      	beq.n	800e6ee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e6e4:	6839      	ldr	r1, [r7, #0]
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f000 f8a5 	bl	800e836 <USBD_CtlError>
        break;
 800e6ec:	e01a      	b.n	800e724 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	2201      	movs	r2, #1
 800e6f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d005      	beq.n	800e70a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	68db      	ldr	r3, [r3, #12]
 800e702:	f043 0202 	orr.w	r2, r3, #2
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	330c      	adds	r3, #12
 800e70e:	2202      	movs	r2, #2
 800e710:	4619      	mov	r1, r3
 800e712:	6878      	ldr	r0, [r7, #4]
 800e714:	f000 f900 	bl	800e918 <USBD_CtlSendData>
      break;
 800e718:	e004      	b.n	800e724 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f88a 	bl	800e836 <USBD_CtlError>
      break;
 800e722:	bf00      	nop
  }
}
 800e724:	bf00      	nop
 800e726:	3708      	adds	r7, #8
 800e728:	46bd      	mov	sp, r7
 800e72a:	bd80      	pop	{r7, pc}

0800e72c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
 800e734:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	885b      	ldrh	r3, [r3, #2]
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	d107      	bne.n	800e74e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2201      	movs	r2, #1
 800e742:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 f940 	bl	800e9cc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e74c:	e013      	b.n	800e776 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	885b      	ldrh	r3, [r3, #2]
 800e752:	2b02      	cmp	r3, #2
 800e754:	d10b      	bne.n	800e76e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e756:	683b      	ldr	r3, [r7, #0]
 800e758:	889b      	ldrh	r3, [r3, #4]
 800e75a:	0a1b      	lsrs	r3, r3, #8
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	b2da      	uxtb	r2, r3
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f000 f930 	bl	800e9cc <USBD_CtlSendStatus>
}
 800e76c:	e003      	b.n	800e776 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 f860 	bl	800e836 <USBD_CtlError>
}
 800e776:	bf00      	nop
 800e778:	3708      	adds	r7, #8
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b082      	sub	sp, #8
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e78e:	b2db      	uxtb	r3, r3
 800e790:	3b01      	subs	r3, #1
 800e792:	2b02      	cmp	r3, #2
 800e794:	d80b      	bhi.n	800e7ae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e796:	683b      	ldr	r3, [r7, #0]
 800e798:	885b      	ldrh	r3, [r3, #2]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d10c      	bne.n	800e7b8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e7a6:	6878      	ldr	r0, [r7, #4]
 800e7a8:	f000 f910 	bl	800e9cc <USBD_CtlSendStatus>
      }
      break;
 800e7ac:	e004      	b.n	800e7b8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f840 	bl	800e836 <USBD_CtlError>
      break;
 800e7b6:	e000      	b.n	800e7ba <USBD_ClrFeature+0x3c>
      break;
 800e7b8:	bf00      	nop
  }
}
 800e7ba:	bf00      	nop
 800e7bc:	3708      	adds	r7, #8
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	6078      	str	r0, [r7, #4]
 800e7ca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	781a      	ldrb	r2, [r3, #0]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	781a      	ldrb	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e7ec:	68f8      	ldr	r0, [r7, #12]
 800e7ee:	f7ff fa16 	bl	800dc1e <SWAPBYTE>
 800e7f2:	4603      	mov	r3, r0
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	3301      	adds	r3, #1
 800e804:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	f7ff fa09 	bl	800dc1e <SWAPBYTE>
 800e80c:	4603      	mov	r3, r0
 800e80e:	461a      	mov	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	3301      	adds	r3, #1
 800e818:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	3301      	adds	r3, #1
 800e81e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e820:	68f8      	ldr	r0, [r7, #12]
 800e822:	f7ff f9fc 	bl	800dc1e <SWAPBYTE>
 800e826:	4603      	mov	r3, r0
 800e828:	461a      	mov	r2, r3
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	80da      	strh	r2, [r3, #6]
}
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b082      	sub	sp, #8
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e840:	2180      	movs	r1, #128	@ 0x80
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f003 fd36 	bl	80122b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e848:	2100      	movs	r1, #0
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f003 fd32 	bl	80122b4 <USBD_LL_StallEP>
}
 800e850:	bf00      	nop
 800e852:	3708      	adds	r7, #8
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b086      	sub	sp, #24
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e864:	2300      	movs	r3, #0
 800e866:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d036      	beq.n	800e8dc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e872:	6938      	ldr	r0, [r7, #16]
 800e874:	f000 f836 	bl	800e8e4 <USBD_GetLen>
 800e878:	4603      	mov	r3, r0
 800e87a:	3301      	adds	r3, #1
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	005b      	lsls	r3, r3, #1
 800e880:	b29a      	uxth	r2, r3
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e886:	7dfb      	ldrb	r3, [r7, #23]
 800e888:	68ba      	ldr	r2, [r7, #8]
 800e88a:	4413      	add	r3, r2
 800e88c:	687a      	ldr	r2, [r7, #4]
 800e88e:	7812      	ldrb	r2, [r2, #0]
 800e890:	701a      	strb	r2, [r3, #0]
  idx++;
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	3301      	adds	r3, #1
 800e896:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	68ba      	ldr	r2, [r7, #8]
 800e89c:	4413      	add	r3, r2
 800e89e:	2203      	movs	r2, #3
 800e8a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800e8a2:	7dfb      	ldrb	r3, [r7, #23]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e8a8:	e013      	b.n	800e8d2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	68ba      	ldr	r2, [r7, #8]
 800e8ae:	4413      	add	r3, r2
 800e8b0:	693a      	ldr	r2, [r7, #16]
 800e8b2:	7812      	ldrb	r2, [r2, #0]
 800e8b4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	3301      	adds	r3, #1
 800e8ba:	613b      	str	r3, [r7, #16]
    idx++;
 800e8bc:	7dfb      	ldrb	r3, [r7, #23]
 800e8be:	3301      	adds	r3, #1
 800e8c0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e8c2:	7dfb      	ldrb	r3, [r7, #23]
 800e8c4:	68ba      	ldr	r2, [r7, #8]
 800e8c6:	4413      	add	r3, r2
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	701a      	strb	r2, [r3, #0]
    idx++;
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
 800e8ce:	3301      	adds	r3, #1
 800e8d0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e8d2:	693b      	ldr	r3, [r7, #16]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d1e7      	bne.n	800e8aa <USBD_GetString+0x52>
 800e8da:	e000      	b.n	800e8de <USBD_GetString+0x86>
    return;
 800e8dc:	bf00      	nop
  }
}
 800e8de:	3718      	adds	r7, #24
 800e8e0:	46bd      	mov	sp, r7
 800e8e2:	bd80      	pop	{r7, pc}

0800e8e4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e8f4:	e005      	b.n	800e902 <USBD_GetLen+0x1e>
  {
    len++;
 800e8f6:	7bfb      	ldrb	r3, [r7, #15]
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	3301      	adds	r3, #1
 800e900:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d1f5      	bne.n	800e8f6 <USBD_GetLen+0x12>
  }

  return len;
 800e90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3714      	adds	r7, #20
 800e910:	46bd      	mov	sp, r7
 800e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e916:	4770      	bx	lr

0800e918 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	b084      	sub	sp, #16
 800e91c:	af00      	add	r7, sp, #0
 800e91e:	60f8      	str	r0, [r7, #12]
 800e920:	60b9      	str	r1, [r7, #8]
 800e922:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	2202      	movs	r2, #2
 800e928:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	687a      	ldr	r2, [r7, #4]
 800e936:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	2100      	movs	r1, #0
 800e93e:	68f8      	ldr	r0, [r7, #12]
 800e940:	f003 fd41 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
 800e944:	2300      	movs	r3, #0
}
 800e946:	4618      	mov	r0, r3
 800e948:	3710      	adds	r7, #16
 800e94a:	46bd      	mov	sp, r7
 800e94c:	bd80      	pop	{r7, pc}

0800e94e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e94e:	b580      	push	{r7, lr}
 800e950:	b084      	sub	sp, #16
 800e952:	af00      	add	r7, sp, #0
 800e954:	60f8      	str	r0, [r7, #12]
 800e956:	60b9      	str	r1, [r7, #8]
 800e958:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	68ba      	ldr	r2, [r7, #8]
 800e95e:	2100      	movs	r1, #0
 800e960:	68f8      	ldr	r0, [r7, #12]
 800e962:	f003 fd30 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
 800e966:	2300      	movs	r3, #0
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b084      	sub	sp, #16
 800e974:	af00      	add	r7, sp, #0
 800e976:	60f8      	str	r0, [r7, #12]
 800e978:	60b9      	str	r1, [r7, #8]
 800e97a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	2203      	movs	r2, #3
 800e980:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	687a      	ldr	r2, [r7, #4]
 800e988:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	68ba      	ldr	r2, [r7, #8]
 800e998:	2100      	movs	r1, #0
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f003 fd34 	bl	8012408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	60f8      	str	r0, [r7, #12]
 800e9b2:	60b9      	str	r1, [r7, #8]
 800e9b4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	68ba      	ldr	r2, [r7, #8]
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f003 fd23 	bl	8012408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3710      	adds	r7, #16
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2204      	movs	r2, #4
 800e9d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e9dc:	2300      	movs	r3, #0
 800e9de:	2200      	movs	r2, #0
 800e9e0:	2100      	movs	r1, #0
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f003 fcef 	bl	80123c6 <USBD_LL_Transmit>

  return USBD_OK;
 800e9e8:	2300      	movs	r3, #0
}
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	3708      	adds	r7, #8
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bd80      	pop	{r7, pc}

0800e9f2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e9f2:	b580      	push	{r7, lr}
 800e9f4:	b082      	sub	sp, #8
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	2205      	movs	r2, #5
 800e9fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ea02:	2300      	movs	r3, #0
 800ea04:	2200      	movs	r2, #0
 800ea06:	2100      	movs	r1, #0
 800ea08:	6878      	ldr	r0, [r7, #4]
 800ea0a:	f003 fcfd 	bl	8012408 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ea0e:	2300      	movs	r3, #0
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3708      	adds	r7, #8
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b088      	sub	sp, #32
 800ea1c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ea22:	f107 0308 	add.w	r3, r7, #8
 800ea26:	2218      	movs	r2, #24
 800ea28:	2100      	movs	r1, #0
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f001 f92d 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ea30:	233f      	movs	r3, #63	@ 0x3f
 800ea32:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800ea34:	2381      	movs	r3, #129	@ 0x81
 800ea36:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800ea38:	1dfb      	adds	r3, r7, #7
 800ea3a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ea40:	f107 0308 	add.w	r3, r7, #8
 800ea44:	2100      	movs	r1, #0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f001 fba8 	bl	801019c <hci_send_req>
 800ea4c:	4603      	mov	r3, r0
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	da01      	bge.n	800ea56 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800ea52:	23ff      	movs	r3, #255	@ 0xff
 800ea54:	e000      	b.n	800ea58 <aci_gap_set_non_discoverable+0x40>
  return status;
 800ea56:	79fb      	ldrb	r3, [r7, #7]
}
 800ea58:	4618      	mov	r0, r3
 800ea5a:	3720      	adds	r7, #32
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800ea60:	b5b0      	push	{r4, r5, r7, lr}
 800ea62:	b0ce      	sub	sp, #312	@ 0x138
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	4605      	mov	r5, r0
 800ea68:	460c      	mov	r4, r1
 800ea6a:	4610      	mov	r0, r2
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea72:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ea76:	462a      	mov	r2, r5
 800ea78:	701a      	strb	r2, [r3, #0]
 800ea7a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea7e:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ea82:	4622      	mov	r2, r4
 800ea84:	801a      	strh	r2, [r3, #0]
 800ea86:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea8a:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800ea8e:	4602      	mov	r2, r0
 800ea90:	801a      	strh	r2, [r3, #0]
 800ea92:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea96:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ea9a:	460a      	mov	r2, r1
 800ea9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ea9e:	f107 0310 	add.w	r3, r7, #16
 800eaa2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800eaa6:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800eaaa:	3308      	adds	r3, #8
 800eaac:	f107 0210 	add.w	r2, r7, #16
 800eab0:	4413      	add	r3, r2
 800eab2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800eab6:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eaba:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800eabe:	4413      	add	r3, r2
 800eac0:	3309      	adds	r3, #9
 800eac2:	f107 0210 	add.w	r2, r7, #16
 800eac6:	4413      	add	r3, r2
 800eac8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800eacc:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ead0:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ead4:	2200      	movs	r2, #0
 800ead6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ead8:	2300      	movs	r3, #0
 800eada:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800eade:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eae2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eae6:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800eaea:	7812      	ldrb	r2, [r2, #0]
 800eaec:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800eaee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800eaf8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eafc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eb00:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800eb04:	8812      	ldrh	r2, [r2, #0]
 800eb06:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800eb0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb0e:	3302      	adds	r3, #2
 800eb10:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800eb14:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb18:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eb1c:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800eb20:	8812      	ldrh	r2, [r2, #0]
 800eb22:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800eb26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb2a:	3302      	adds	r3, #2
 800eb2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800eb30:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb34:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eb38:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800eb3c:	7812      	ldrb	r2, [r2, #0]
 800eb3e:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800eb40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb44:	3301      	adds	r3, #1
 800eb46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800eb4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb4e:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800eb52:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eb54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb58:	3301      	adds	r3, #1
 800eb5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800eb5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb62:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eb66:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800eb68:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb6c:	3301      	adds	r3, #1
 800eb6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800eb72:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb76:	3308      	adds	r3, #8
 800eb78:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eb7c:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800eb80:	4618      	mov	r0, r3
 800eb82:	f001 f872 	bl	800fc6a <Osal_MemCpy>
    index_input += Local_Name_Length;
 800eb86:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800eb8a:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eb8e:	4413      	add	r3, r2
 800eb90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800eb94:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eb98:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800eb9c:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800eb9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eba2:	3301      	adds	r3, #1
 800eba4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800eba8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800ebac:	3301      	adds	r3, #1
 800ebae:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800ebb2:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f001 f857 	bl	800fc6a <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800ebbc:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ebc0:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800ebc4:	4413      	add	r3, r2
 800ebc6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800ebca:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ebce:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800ebd2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800ebd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebd8:	3302      	adds	r3, #2
 800ebda:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800ebde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ebe2:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800ebe6:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800ebe8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebec:	3302      	adds	r3, #2
 800ebee:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ebf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebf6:	2218      	movs	r2, #24
 800ebf8:	2100      	movs	r1, #0
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f001 f845 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec00:	233f      	movs	r3, #63	@ 0x3f
 800ec02:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800ec06:	2383      	movs	r3, #131	@ 0x83
 800ec08:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ec0c:	f107 0310 	add.w	r3, r7, #16
 800ec10:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ec14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec18:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ec1c:	f107 030f 	add.w	r3, r7, #15
 800ec20:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ec24:	2301      	movs	r3, #1
 800ec26:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec2a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec2e:	2100      	movs	r1, #0
 800ec30:	4618      	mov	r0, r3
 800ec32:	f001 fab3 	bl	801019c <hci_send_req>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	da01      	bge.n	800ec40 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ec3c:	23ff      	movs	r3, #255	@ 0xff
 800ec3e:	e004      	b.n	800ec4a <aci_gap_set_discoverable+0x1ea>
  return status;
 800ec40:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ec44:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ec48:	781b      	ldrb	r3, [r3, #0]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800ec50:	46bd      	mov	sp, r7
 800ec52:	bdb0      	pop	{r4, r5, r7, pc}

0800ec54 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b0cc      	sub	sp, #304	@ 0x130
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	4602      	mov	r2, r0
 800ec5c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec60:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ec64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ec66:	f107 0310 	add.w	r3, r7, #16
 800ec6a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ec6e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec72:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ec76:	2200      	movs	r2, #0
 800ec78:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800ec80:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec84:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ec88:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ec8c:	7812      	ldrb	r2, [r2, #0]
 800ec8e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ec90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec94:	3301      	adds	r3, #1
 800ec96:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec9a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec9e:	2218      	movs	r2, #24
 800eca0:	2100      	movs	r1, #0
 800eca2:	4618      	mov	r0, r3
 800eca4:	f000 fff1 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800eca8:	233f      	movs	r3, #63	@ 0x3f
 800ecaa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ecae:	2385      	movs	r3, #133	@ 0x85
 800ecb0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ecb4:	f107 0310 	add.w	r3, r7, #16
 800ecb8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ecbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecc0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ecc4:	f107 030f 	add.w	r3, r7, #15
 800ecc8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eccc:	2301      	movs	r3, #1
 800ecce:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ecd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ecd6:	2100      	movs	r1, #0
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f001 fa5f 	bl	801019c <hci_send_req>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	da01      	bge.n	800ece8 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ece4:	23ff      	movs	r3, #255	@ 0xff
 800ece6:	e004      	b.n	800ecf2 <aci_gap_set_io_capability+0x9e>
  return status;
 800ece8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecec:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ecf0:	781b      	ldrb	r3, [r3, #0]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}

0800ecfc <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ecfc:	b5b0      	push	{r4, r5, r7, lr}
 800ecfe:	b0cc      	sub	sp, #304	@ 0x130
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	4605      	mov	r5, r0
 800ed04:	460c      	mov	r4, r1
 800ed06:	4610      	mov	r0, r2
 800ed08:	4619      	mov	r1, r3
 800ed0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed0e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ed12:	462a      	mov	r2, r5
 800ed14:	701a      	strb	r2, [r3, #0]
 800ed16:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed1a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ed1e:	4622      	mov	r2, r4
 800ed20:	701a      	strb	r2, [r3, #0]
 800ed22:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed26:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	701a      	strb	r2, [r3, #0]
 800ed2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed32:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ed36:	460a      	mov	r2, r1
 800ed38:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ed3a:	f107 0310 	add.w	r3, r7, #16
 800ed3e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ed42:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ed46:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ed54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed5c:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ed60:	7812      	ldrb	r2, [r2, #0]
 800ed62:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ed64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed68:	3301      	adds	r3, #1
 800ed6a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800ed6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed72:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed76:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ed7a:	7812      	ldrb	r2, [r2, #0]
 800ed7c:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ed7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed82:	3301      	adds	r3, #1
 800ed84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800ed88:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed8c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed90:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ed94:	7812      	ldrb	r2, [r2, #0]
 800ed96:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ed98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800eda2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eda6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800edaa:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800edae:	7812      	ldrb	r2, [r2, #0]
 800edb0:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800edb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edb6:	3301      	adds	r3, #1
 800edb8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800edbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800edc0:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800edc4:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800edc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edca:	3301      	adds	r3, #1
 800edcc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800edd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800edd4:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800edd8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800edda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edde:	3301      	adds	r3, #1
 800ede0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ede4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ede8:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800edec:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800edee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edf2:	3301      	adds	r3, #1
 800edf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800edf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800edfc:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800ee00:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ee04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee08:	3304      	adds	r3, #4
 800ee0a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800ee0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee12:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800ee16:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800ee18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee1c:	3301      	adds	r3, #1
 800ee1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ee22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee26:	2218      	movs	r2, #24
 800ee28:	2100      	movs	r1, #0
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 ff2d 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800ee30:	233f      	movs	r3, #63	@ 0x3f
 800ee32:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800ee36:	2386      	movs	r3, #134	@ 0x86
 800ee38:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ee3c:	f107 0310 	add.w	r3, r7, #16
 800ee40:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ee44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee48:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ee4c:	f107 030f 	add.w	r3, r7, #15
 800ee50:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ee54:	2301      	movs	r3, #1
 800ee56:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ee5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee5e:	2100      	movs	r1, #0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f001 f99b 	bl	801019c <hci_send_req>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	da01      	bge.n	800ee70 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800ee6c:	23ff      	movs	r3, #255	@ 0xff
 800ee6e:	e004      	b.n	800ee7a <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800ee70:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee74:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ee78:	781b      	ldrb	r3, [r3, #0]
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bdb0      	pop	{r4, r5, r7, pc}

0800ee84 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b0cc      	sub	sp, #304	@ 0x130
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	4602      	mov	r2, r0
 800ee8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee90:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ee94:	6019      	str	r1, [r3, #0]
 800ee96:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee9a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ee9e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800eea0:	f107 0310 	add.w	r3, r7, #16
 800eea4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800eea8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eeac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800eeba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eebe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eec2:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800eec6:	8812      	ldrh	r2, [r2, #0]
 800eec8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800eeca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eece:	3302      	adds	r3, #2
 800eed0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800eed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eed8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eedc:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800eee0:	6812      	ldr	r2, [r2, #0]
 800eee2:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800eee6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eeea:	3304      	adds	r3, #4
 800eeec:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eef0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eef4:	2218      	movs	r2, #24
 800eef6:	2100      	movs	r1, #0
 800eef8:	4618      	mov	r0, r3
 800eefa:	f000 fec6 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800eefe:	233f      	movs	r3, #63	@ 0x3f
 800ef00:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800ef04:	2388      	movs	r3, #136	@ 0x88
 800ef06:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ef0a:	f107 0310 	add.w	r3, r7, #16
 800ef0e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ef12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ef1a:	f107 030f 	add.w	r3, r7, #15
 800ef1e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ef22:	2301      	movs	r3, #1
 800ef24:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ef28:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef2c:	2100      	movs	r1, #0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f001 f934 	bl	801019c <hci_send_req>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	da01      	bge.n	800ef3e <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800ef3a:	23ff      	movs	r3, #255	@ 0xff
 800ef3c:	e004      	b.n	800ef48 <aci_gap_pass_key_resp+0xc4>
  return status;
 800ef3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef42:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ef46:	781b      	ldrb	r3, [r3, #0]
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800ef52:	b590      	push	{r4, r7, lr}
 800ef54:	b0cd      	sub	sp, #308	@ 0x134
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef62:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ef66:	6013      	str	r3, [r2, #0]
 800ef68:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef6c:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ef70:	4622      	mov	r2, r4
 800ef72:	701a      	strb	r2, [r3, #0]
 800ef74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef78:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	701a      	strb	r2, [r3, #0]
 800ef80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef84:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ef88:	460a      	mov	r2, r1
 800ef8a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ef8c:	f107 0310 	add.w	r3, r7, #16
 800ef90:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ef94:	f107 0308 	add.w	r3, r7, #8
 800ef98:	2207      	movs	r2, #7
 800ef9a:	2100      	movs	r1, #0
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f000 fe74 	bl	800fc8a <Osal_MemSet>
  int index_input = 0;
 800efa2:	2300      	movs	r3, #0
 800efa4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800efa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efb0:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800efb4:	7812      	ldrb	r2, [r2, #0]
 800efb6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800efb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efbc:	3301      	adds	r3, #1
 800efbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800efc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efc6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800efce:	7812      	ldrb	r2, [r2, #0]
 800efd0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800efd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efd6:	3301      	adds	r3, #1
 800efd8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800efdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800efe0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800efe4:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800efe8:	7812      	ldrb	r2, [r2, #0]
 800efea:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800efec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eff0:	3301      	adds	r3, #1
 800eff2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eff6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800effa:	2218      	movs	r2, #24
 800effc:	2100      	movs	r1, #0
 800effe:	4618      	mov	r0, r3
 800f000:	f000 fe43 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f004:	233f      	movs	r3, #63	@ 0x3f
 800f006:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800f00a:	238a      	movs	r3, #138	@ 0x8a
 800f00c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f010:	f107 0310 	add.w	r3, r7, #16
 800f014:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f018:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f01c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f020:	f107 0308 	add.w	r3, r7, #8
 800f024:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f028:	2307      	movs	r3, #7
 800f02a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f02e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f032:	2100      	movs	r1, #0
 800f034:	4618      	mov	r0, r3
 800f036:	f001 f8b1 	bl	801019c <hci_send_req>
 800f03a:	4603      	mov	r3, r0
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	da01      	bge.n	800f044 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800f040:	23ff      	movs	r3, #255	@ 0xff
 800f042:	e02e      	b.n	800f0a2 <aci_gap_init+0x150>
  if ( resp.Status )
 800f044:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f048:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f04c:	781b      	ldrb	r3, [r3, #0]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d005      	beq.n	800f05e <aci_gap_init+0x10c>
    return resp.Status;
 800f052:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f056:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	e021      	b.n	800f0a2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800f05e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f062:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f066:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f06a:	b29a      	uxth	r2, r3
 800f06c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f070:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f078:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f07c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f080:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f084:	b29a      	uxth	r2, r3
 800f086:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f08a:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f08c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f090:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f094:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f098:	b29a      	uxth	r2, r3
 800f09a:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f09e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f0a0:	2300      	movs	r3, #0
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bd90      	pop	{r4, r7, pc}

0800f0ac <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f0ac:	b580      	push	{r7, lr}
 800f0ae:	b0cc      	sub	sp, #304	@ 0x130
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	4602      	mov	r2, r0
 800f0b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0b8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f0bc:	6019      	str	r1, [r3, #0]
 800f0be:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0c2:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f0c6:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f0c8:	f107 0310 	add.w	r3, r7, #16
 800f0cc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f0d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f0d8:	2200      	movs	r2, #0
 800f0da:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f0e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f0e6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f0ea:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f0ee:	7812      	ldrb	r2, [r2, #0]
 800f0f0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f0f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0f6:	3301      	adds	r3, #1
 800f0f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f0fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f100:	1c58      	adds	r0, r3, #1
 800f102:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f106:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f10a:	781a      	ldrb	r2, [r3, #0]
 800f10c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f110:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f114:	6819      	ldr	r1, [r3, #0]
 800f116:	f000 fda8 	bl	800fc6a <Osal_MemCpy>
  index_input += AdvDataLen;
 800f11a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f11e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f122:	781b      	ldrb	r3, [r3, #0]
 800f124:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f128:	4413      	add	r3, r2
 800f12a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f12e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f132:	2218      	movs	r2, #24
 800f134:	2100      	movs	r1, #0
 800f136:	4618      	mov	r0, r3
 800f138:	f000 fda7 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f13c:	233f      	movs	r3, #63	@ 0x3f
 800f13e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800f142:	238e      	movs	r3, #142	@ 0x8e
 800f144:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f148:	f107 0310 	add.w	r3, r7, #16
 800f14c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f154:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f158:	f107 030f 	add.w	r3, r7, #15
 800f15c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f160:	2301      	movs	r3, #1
 800f162:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f166:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f16a:	2100      	movs	r1, #0
 800f16c:	4618      	mov	r0, r3
 800f16e:	f001 f815 	bl	801019c <hci_send_req>
 800f172:	4603      	mov	r3, r0
 800f174:	2b00      	cmp	r3, #0
 800f176:	da01      	bge.n	800f17c <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f178:	23ff      	movs	r3, #255	@ 0xff
 800f17a:	e004      	b.n	800f186 <aci_gap_update_adv_data+0xda>
  return status;
 800f17c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f180:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f184:	781b      	ldrb	r3, [r3, #0]
}
 800f186:	4618      	mov	r0, r3
 800f188:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b088      	sub	sp, #32
 800f194:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f19a:	f107 0308 	add.w	r3, r7, #8
 800f19e:	2218      	movs	r2, #24
 800f1a0:	2100      	movs	r1, #0
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f000 fd71 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1a8:	233f      	movs	r3, #63	@ 0x3f
 800f1aa:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f1ac:	2392      	movs	r3, #146	@ 0x92
 800f1ae:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f1b0:	1dfb      	adds	r3, r7, #7
 800f1b2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f1b8:	f107 0308 	add.w	r3, r7, #8
 800f1bc:	2100      	movs	r1, #0
 800f1be:	4618      	mov	r0, r3
 800f1c0:	f000 ffec 	bl	801019c <hci_send_req>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	da01      	bge.n	800f1ce <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f1ca:	23ff      	movs	r3, #255	@ 0xff
 800f1cc:	e000      	b.n	800f1d0 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800f1ce:	79fb      	ldrb	r3, [r7, #7]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b0cc      	sub	sp, #304	@ 0x130
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	4602      	mov	r2, r0
 800f1e0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1e4:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f1e8:	801a      	strh	r2, [r3, #0]
 800f1ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f1ee:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f1f2:	460a      	mov	r2, r1
 800f1f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f1f6:	f107 0310 	add.w	r3, r7, #16
 800f1fa:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f1fe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f202:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f206:	2200      	movs	r2, #0
 800f208:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f20a:	2300      	movs	r3, #0
 800f20c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f210:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f214:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f218:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f21c:	8812      	ldrh	r2, [r2, #0]
 800f21e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f220:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f224:	3302      	adds	r3, #2
 800f226:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f22a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f22e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f232:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f236:	7812      	ldrb	r2, [r2, #0]
 800f238:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f23a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f23e:	3301      	adds	r3, #1
 800f240:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f244:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f248:	2218      	movs	r2, #24
 800f24a:	2100      	movs	r1, #0
 800f24c:	4618      	mov	r0, r3
 800f24e:	f000 fd1c 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f252:	233f      	movs	r3, #63	@ 0x3f
 800f254:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800f258:	23a5      	movs	r3, #165	@ 0xa5
 800f25a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f25e:	f107 0310 	add.w	r3, r7, #16
 800f262:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f266:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f26a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f26e:	f107 030f 	add.w	r3, r7, #15
 800f272:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f276:	2301      	movs	r3, #1
 800f278:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f27c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f280:	2100      	movs	r1, #0
 800f282:	4618      	mov	r0, r3
 800f284:	f000 ff8a 	bl	801019c <hci_send_req>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	da01      	bge.n	800f292 <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f28e:	23ff      	movs	r3, #255	@ 0xff
 800f290:	e004      	b.n	800f29c <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f292:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f296:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f29a:	781b      	ldrb	r3, [r3, #0]
}
 800f29c:	4618      	mov	r0, r3
 800f29e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f2a2:	46bd      	mov	sp, r7
 800f2a4:	bd80      	pop	{r7, pc}

0800f2a6 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f2a6:	b580      	push	{r7, lr}
 800f2a8:	b088      	sub	sp, #32
 800f2aa:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f2b0:	f107 0308 	add.w	r3, r7, #8
 800f2b4:	2218      	movs	r2, #24
 800f2b6:	2100      	movs	r1, #0
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f000 fce6 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f2be:	233f      	movs	r3, #63	@ 0x3f
 800f2c0:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f2c2:	f240 1301 	movw	r3, #257	@ 0x101
 800f2c6:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f2c8:	1dfb      	adds	r3, r7, #7
 800f2ca:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f2d0:	f107 0308 	add.w	r3, r7, #8
 800f2d4:	2100      	movs	r1, #0
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f000 ff60 	bl	801019c <hci_send_req>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	da01      	bge.n	800f2e6 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f2e2:	23ff      	movs	r3, #255	@ 0xff
 800f2e4:	e000      	b.n	800f2e8 <aci_gatt_init+0x42>
  return status;
 800f2e6:	79fb      	ldrb	r3, [r7, #7]
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3720      	adds	r7, #32
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	bd80      	pop	{r7, pc}

0800f2f0 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f2f0:	b590      	push	{r4, r7, lr}
 800f2f2:	b0cf      	sub	sp, #316	@ 0x13c
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800f2fc:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800f300:	6001      	str	r1, [r0, #0]
 800f302:	4610      	mov	r0, r2
 800f304:	4619      	mov	r1, r3
 800f306:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f30a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f30e:	4622      	mov	r2, r4
 800f310:	701a      	strb	r2, [r3, #0]
 800f312:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f316:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f31a:	4602      	mov	r2, r0
 800f31c:	701a      	strb	r2, [r3, #0]
 800f31e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f322:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f326:	460a      	mov	r2, r1
 800f328:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f32a:	f107 0310 	add.w	r3, r7, #16
 800f32e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f332:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f336:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f33a:	781b      	ldrb	r3, [r3, #0]
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d00a      	beq.n	800f356 <aci_gatt_add_service+0x66>
 800f340:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f344:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	2b02      	cmp	r3, #2
 800f34c:	d101      	bne.n	800f352 <aci_gatt_add_service+0x62>
 800f34e:	2311      	movs	r3, #17
 800f350:	e002      	b.n	800f358 <aci_gatt_add_service+0x68>
 800f352:	2301      	movs	r3, #1
 800f354:	e000      	b.n	800f358 <aci_gatt_add_service+0x68>
 800f356:	2303      	movs	r3, #3
 800f358:	f107 0210 	add.w	r2, r7, #16
 800f35c:	4413      	add	r3, r2
 800f35e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f362:	f107 030c 	add.w	r3, r7, #12
 800f366:	2203      	movs	r2, #3
 800f368:	2100      	movs	r1, #0
 800f36a:	4618      	mov	r0, r3
 800f36c:	f000 fc8d 	bl	800fc8a <Osal_MemSet>
  int index_input = 0;
 800f370:	2300      	movs	r3, #0
 800f372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f376:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f37a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f37e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f382:	7812      	ldrb	r2, [r2, #0]
 800f384:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f38a:	3301      	adds	r3, #1
 800f38c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f390:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f394:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f398:	781b      	ldrb	r3, [r3, #0]
 800f39a:	2b01      	cmp	r3, #1
 800f39c:	d002      	beq.n	800f3a4 <aci_gatt_add_service+0xb4>
 800f39e:	2b02      	cmp	r3, #2
 800f3a0:	d004      	beq.n	800f3ac <aci_gatt_add_service+0xbc>
 800f3a2:	e007      	b.n	800f3b4 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f3a4:	2302      	movs	r3, #2
 800f3a6:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f3aa:	e005      	b.n	800f3b8 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f3ac:	2310      	movs	r3, #16
 800f3ae:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f3b2:	e001      	b.n	800f3b8 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f3b4:	2397      	movs	r3, #151	@ 0x97
 800f3b6:	e06c      	b.n	800f492 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f3b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f3bc:	1c58      	adds	r0, r3, #1
 800f3be:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800f3c2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f3c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f3ca:	6819      	ldr	r1, [r3, #0]
 800f3cc:	f000 fc4d 	bl	800fc6a <Osal_MemCpy>
    index_input += size;
 800f3d0:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f3d4:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f3d8:	4413      	add	r3, r2
 800f3da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800f3de:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f3e2:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f3e6:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f3ea:	7812      	ldrb	r2, [r2, #0]
 800f3ec:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f3ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f3f2:	3301      	adds	r3, #1
 800f3f4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f3f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f3fc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f400:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f404:	7812      	ldrb	r2, [r2, #0]
 800f406:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f408:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f40c:	3301      	adds	r3, #1
 800f40e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f412:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f416:	2218      	movs	r2, #24
 800f418:	2100      	movs	r1, #0
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 fc35 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f420:	233f      	movs	r3, #63	@ 0x3f
 800f422:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800f426:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800f42a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f42e:	f107 0310 	add.w	r3, r7, #16
 800f432:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f436:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f43a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f43e:	f107 030c 	add.w	r3, r7, #12
 800f442:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f446:	2303      	movs	r3, #3
 800f448:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f44c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f450:	2100      	movs	r1, #0
 800f452:	4618      	mov	r0, r3
 800f454:	f000 fea2 	bl	801019c <hci_send_req>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	da01      	bge.n	800f462 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f45e:	23ff      	movs	r3, #255	@ 0xff
 800f460:	e017      	b.n	800f492 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f462:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f466:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d005      	beq.n	800f47c <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f470:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f474:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f478:	781b      	ldrb	r3, [r3, #0]
 800f47a:	e00a      	b.n	800f492 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f47c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f480:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f484:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f488:	b29a      	uxth	r2, r3
 800f48a:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f48e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f490:	2300      	movs	r3, #0
}
 800f492:	4618      	mov	r0, r3
 800f494:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd90      	pop	{r4, r7, pc}

0800f49c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f49c:	b590      	push	{r4, r7, lr}
 800f49e:	b0d1      	sub	sp, #324	@ 0x144
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	4604      	mov	r4, r0
 800f4a4:	4608      	mov	r0, r1
 800f4a6:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800f4aa:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800f4ae:	600a      	str	r2, [r1, #0]
 800f4b0:	4619      	mov	r1, r3
 800f4b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4b6:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f4ba:	4622      	mov	r2, r4
 800f4bc:	801a      	strh	r2, [r3, #0]
 800f4be:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4c2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	701a      	strb	r2, [r3, #0]
 800f4ca:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4ce:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f4d2:	460a      	mov	r2, r1
 800f4d4:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f4d6:	f107 0318 	add.w	r3, r7, #24
 800f4da:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f4de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4e2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d00a      	beq.n	800f502 <aci_gatt_add_char+0x66>
 800f4ec:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4f0:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	d101      	bne.n	800f4fe <aci_gatt_add_char+0x62>
 800f4fa:	2313      	movs	r3, #19
 800f4fc:	e002      	b.n	800f504 <aci_gatt_add_char+0x68>
 800f4fe:	2303      	movs	r3, #3
 800f500:	e000      	b.n	800f504 <aci_gatt_add_char+0x68>
 800f502:	2305      	movs	r3, #5
 800f504:	f107 0218 	add.w	r2, r7, #24
 800f508:	4413      	add	r3, r2
 800f50a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f50e:	f107 0314 	add.w	r3, r7, #20
 800f512:	2203      	movs	r2, #3
 800f514:	2100      	movs	r1, #0
 800f516:	4618      	mov	r0, r3
 800f518:	f000 fbb7 	bl	800fc8a <Osal_MemSet>
  int index_input = 0;
 800f51c:	2300      	movs	r3, #0
 800f51e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800f522:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f526:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f52a:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f52e:	8812      	ldrh	r2, [r2, #0]
 800f530:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f532:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f536:	3302      	adds	r3, #2
 800f538:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f53c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f540:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f544:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f548:	7812      	ldrb	r2, [r2, #0]
 800f54a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f54c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f550:	3301      	adds	r3, #1
 800f552:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f556:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f55a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d002      	beq.n	800f56a <aci_gatt_add_char+0xce>
 800f564:	2b02      	cmp	r3, #2
 800f566:	d004      	beq.n	800f572 <aci_gatt_add_char+0xd6>
 800f568:	e007      	b.n	800f57a <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f56a:	2302      	movs	r3, #2
 800f56c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f570:	e005      	b.n	800f57e <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f572:	2310      	movs	r3, #16
 800f574:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f578:	e001      	b.n	800f57e <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f57a:	2397      	movs	r3, #151	@ 0x97
 800f57c:	e091      	b.n	800f6a2 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f57e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f582:	1cd8      	adds	r0, r3, #3
 800f584:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800f588:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f58c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f590:	6819      	ldr	r1, [r3, #0]
 800f592:	f000 fb6a 	bl	800fc6a <Osal_MemCpy>
    index_input += size;
 800f596:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800f59a:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800f59e:	4413      	add	r3, r2
 800f5a0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f5a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5a8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f5ac:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800f5b0:	8812      	ldrh	r2, [r2, #0]
 800f5b2:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f5b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5b8:	3302      	adds	r3, #2
 800f5ba:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f5be:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5c2:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f5c6:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f5c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5cc:	3301      	adds	r3, #1
 800f5ce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f5d2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5d6:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f5da:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f5dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5e0:	3301      	adds	r3, #1
 800f5e2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f5e6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5ea:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f5ee:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f5f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f5fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5fe:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800f602:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f604:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f608:	3301      	adds	r3, #1
 800f60a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f60e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f612:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800f616:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f618:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f61c:	3301      	adds	r3, #1
 800f61e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f622:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f626:	2218      	movs	r2, #24
 800f628:	2100      	movs	r1, #0
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 fb2d 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f630:	233f      	movs	r3, #63	@ 0x3f
 800f632:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800f636:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f63a:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800f63e:	f107 0318 	add.w	r3, r7, #24
 800f642:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800f646:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f64a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800f64e:	f107 0314 	add.w	r3, r7, #20
 800f652:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800f656:	2303      	movs	r3, #3
 800f658:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f65c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f000 fd9a 	bl	801019c <hci_send_req>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	da01      	bge.n	800f672 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f66e:	23ff      	movs	r3, #255	@ 0xff
 800f670:	e017      	b.n	800f6a2 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f672:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f676:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d005      	beq.n	800f68c <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f680:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f684:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f688:	781b      	ldrb	r3, [r3, #0]
 800f68a:	e00a      	b.n	800f6a2 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800f68c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f690:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f694:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f698:	b29a      	uxth	r2, r3
 800f69a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f69e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd90      	pop	{r4, r7, pc}

0800f6ac <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800f6ac:	b5b0      	push	{r4, r5, r7, lr}
 800f6ae:	b0cc      	sub	sp, #304	@ 0x130
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4605      	mov	r5, r0
 800f6b4:	460c      	mov	r4, r1
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6be:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f6c2:	462a      	mov	r2, r5
 800f6c4:	801a      	strh	r2, [r3, #0]
 800f6c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6ca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f6ce:	4622      	mov	r2, r4
 800f6d0:	801a      	strh	r2, [r3, #0]
 800f6d2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6d6:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800f6da:	4602      	mov	r2, r0
 800f6dc:	701a      	strb	r2, [r3, #0]
 800f6de:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6e2:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f6e6:	460a      	mov	r2, r1
 800f6e8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f6ea:	f107 0310 	add.w	r3, r7, #16
 800f6ee:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f6f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f6f6:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f6fe:	2300      	movs	r3, #0
 800f700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800f704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f708:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f70c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f710:	8812      	ldrh	r2, [r2, #0]
 800f712:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f718:	3302      	adds	r3, #2
 800f71a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800f71e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f722:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f726:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f72a:	8812      	ldrh	r2, [r2, #0]
 800f72c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f72e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f732:	3302      	adds	r3, #2
 800f734:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800f738:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f73c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f740:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800f744:	7812      	ldrb	r2, [r2, #0]
 800f746:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f74c:	3301      	adds	r3, #1
 800f74e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800f752:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f756:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f75a:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800f75e:	7812      	ldrb	r2, [r2, #0]
 800f760:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f762:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f766:	3301      	adds	r3, #1
 800f768:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800f76c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f770:	1d98      	adds	r0, r3, #6
 800f772:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f776:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	461a      	mov	r2, r3
 800f77e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f782:	f000 fa72 	bl	800fc6a <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f786:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f78a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f794:	4413      	add	r3, r2
 800f796:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f79a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f79e:	2218      	movs	r2, #24
 800f7a0:	2100      	movs	r1, #0
 800f7a2:	4618      	mov	r0, r3
 800f7a4:	f000 fa71 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7a8:	233f      	movs	r3, #63	@ 0x3f
 800f7aa:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f7ae:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f7b2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f7b6:	f107 0310 	add.w	r3, r7, #16
 800f7ba:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f7be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f7c2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f7c6:	f107 030f 	add.w	r3, r7, #15
 800f7ca:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f7d4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7d8:	2100      	movs	r1, #0
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f000 fcde 	bl	801019c <hci_send_req>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	da01      	bge.n	800f7ea <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f7e6:	23ff      	movs	r3, #255	@ 0xff
 800f7e8:	e004      	b.n	800f7f4 <aci_gatt_update_char_value+0x148>
  return status;
 800f7ea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7ee:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f7f2:	781b      	ldrb	r3, [r3, #0]
}
 800f7f4:	4618      	mov	r0, r3
 800f7f6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bdb0      	pop	{r4, r5, r7, pc}

0800f7fe <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b0cc      	sub	sp, #304	@ 0x130
 800f802:	af00      	add	r7, sp, #0
 800f804:	4602      	mov	r2, r0
 800f806:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f80a:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f80e:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800f810:	f107 0310 	add.w	r3, r7, #16
 800f814:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f818:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f81c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f820:	2200      	movs	r2, #0
 800f822:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f824:	2300      	movs	r3, #0
 800f826:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f82a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f82e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f832:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f836:	8812      	ldrh	r2, [r2, #0]
 800f838:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f83a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f83e:	3302      	adds	r3, #2
 800f840:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f844:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f848:	2218      	movs	r2, #24
 800f84a:	2100      	movs	r1, #0
 800f84c:	4618      	mov	r0, r3
 800f84e:	f000 fa1c 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f852:	233f      	movs	r3, #63	@ 0x3f
 800f854:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800f858:	f240 1325 	movw	r3, #293	@ 0x125
 800f85c:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f860:	f107 0310 	add.w	r3, r7, #16
 800f864:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f868:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f86c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f870:	f107 030f 	add.w	r3, r7, #15
 800f874:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f878:	2301      	movs	r3, #1
 800f87a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f87e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f882:	2100      	movs	r1, #0
 800f884:	4618      	mov	r0, r3
 800f886:	f000 fc89 	bl	801019c <hci_send_req>
 800f88a:	4603      	mov	r3, r0
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	da01      	bge.n	800f894 <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800f890:	23ff      	movs	r3, #255	@ 0xff
 800f892:	e004      	b.n	800f89e <aci_gatt_confirm_indication+0xa0>
  return status;
 800f894:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f898:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f89c:	781b      	ldrb	r3, [r3, #0]
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}

0800f8a8 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b0cc      	sub	sp, #304	@ 0x130
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8bc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	701a      	strb	r2, [r3, #0]
 800f8c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f8cc:	460a      	mov	r2, r1
 800f8ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f8d0:	f107 0310 	add.w	r3, r7, #16
 800f8d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f8d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800f8ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f8f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f8f6:	7812      	ldrb	r2, [r2, #0]
 800f8f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f8fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8fe:	3301      	adds	r3, #1
 800f900:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800f904:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f908:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f90c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f910:	7812      	ldrb	r2, [r2, #0]
 800f912:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f914:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f918:	3301      	adds	r3, #1
 800f91a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f91e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f922:	1c98      	adds	r0, r3, #2
 800f924:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f928:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f92c:	781a      	ldrb	r2, [r3, #0]
 800f92e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f932:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f936:	6819      	ldr	r1, [r3, #0]
 800f938:	f000 f997 	bl	800fc6a <Osal_MemCpy>
  index_input += Length;
 800f93c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f940:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f944:	781b      	ldrb	r3, [r3, #0]
 800f946:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f94a:	4413      	add	r3, r2
 800f94c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f950:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f954:	2218      	movs	r2, #24
 800f956:	2100      	movs	r1, #0
 800f958:	4618      	mov	r0, r3
 800f95a:	f000 f996 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800f95e:	233f      	movs	r3, #63	@ 0x3f
 800f960:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f964:	230c      	movs	r3, #12
 800f966:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f96a:	f107 0310 	add.w	r3, r7, #16
 800f96e:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f972:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f976:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f97a:	f107 030f 	add.w	r3, r7, #15
 800f97e:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f982:	2301      	movs	r3, #1
 800f984:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f988:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f98c:	2100      	movs	r1, #0
 800f98e:	4618      	mov	r0, r3
 800f990:	f000 fc04 	bl	801019c <hci_send_req>
 800f994:	4603      	mov	r3, r0
 800f996:	2b00      	cmp	r3, #0
 800f998:	da01      	bge.n	800f99e <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f99a:	23ff      	movs	r3, #255	@ 0xff
 800f99c:	e004      	b.n	800f9a8 <aci_hal_write_config_data+0x100>
  return status;
 800f99e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9a2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9a6:	781b      	ldrb	r3, [r3, #0]
}
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	bd80      	pop	{r7, pc}

0800f9b2 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f9b2:	b580      	push	{r7, lr}
 800f9b4:	b0cc      	sub	sp, #304	@ 0x130
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	4602      	mov	r2, r0
 800f9ba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9be:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f9c2:	701a      	strb	r2, [r3, #0]
 800f9c4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9c8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f9cc:	460a      	mov	r2, r1
 800f9ce:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f9d0:	f107 0310 	add.w	r3, r7, #16
 800f9d4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f9d8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f9dc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800f9ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f9ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f9f2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f9f6:	7812      	ldrb	r2, [r2, #0]
 800f9f8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f9fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9fe:	3301      	adds	r3, #1
 800fa00:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800fa04:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa08:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fa0c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fa10:	7812      	ldrb	r2, [r2, #0]
 800fa12:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fa14:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa18:	3301      	adds	r3, #1
 800fa1a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa1e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa22:	2218      	movs	r2, #24
 800fa24:	2100      	movs	r1, #0
 800fa26:	4618      	mov	r0, r3
 800fa28:	f000 f92f 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa2c:	233f      	movs	r3, #63	@ 0x3f
 800fa2e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800fa32:	230f      	movs	r3, #15
 800fa34:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fa38:	f107 0310 	add.w	r3, r7, #16
 800fa3c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fa40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa44:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fa48:	f107 030f 	add.w	r3, r7, #15
 800fa4c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fa50:	2301      	movs	r3, #1
 800fa52:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f000 fb9d 	bl	801019c <hci_send_req>
 800fa62:	4603      	mov	r3, r0
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	da01      	bge.n	800fa6c <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fa68:	23ff      	movs	r3, #255	@ 0xff
 800fa6a:	e004      	b.n	800fa76 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fa6c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa70:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa74:	781b      	ldrb	r3, [r3, #0]
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	bd80      	pop	{r7, pc}

0800fa80 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b0cc      	sub	sp, #304	@ 0x130
 800fa84:	af00      	add	r7, sp, #0
 800fa86:	4602      	mov	r2, r0
 800fa88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fa90:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fa92:	f107 0310 	add.w	r3, r7, #16
 800fa96:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fa9a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa9e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800faa2:	2200      	movs	r2, #0
 800faa4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800faa6:	2300      	movs	r3, #0
 800faa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800faac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fab0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fab4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fab8:	8812      	ldrh	r2, [r2, #0]
 800faba:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fac0:	3302      	adds	r3, #2
 800fac2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fac6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800faca:	2218      	movs	r2, #24
 800facc:	2100      	movs	r1, #0
 800face:	4618      	mov	r0, r3
 800fad0:	f000 f8db 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x3f;
 800fad4:	233f      	movs	r3, #63	@ 0x3f
 800fad6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800fada:	2318      	movs	r3, #24
 800fadc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fae0:	f107 0310 	add.w	r3, r7, #16
 800fae4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800faec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800faf0:	f107 030f 	add.w	r3, r7, #15
 800faf4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800faf8:	2301      	movs	r3, #1
 800fafa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fafe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fb02:	2100      	movs	r1, #0
 800fb04:	4618      	mov	r0, r3
 800fb06:	f000 fb49 	bl	801019c <hci_send_req>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	da01      	bge.n	800fb14 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800fb10:	23ff      	movs	r3, #255	@ 0xff
 800fb12:	e004      	b.n	800fb1e <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800fb14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb18:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb1c:	781b      	ldrb	r3, [r3, #0]
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b088      	sub	sp, #32
 800fb2c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fb32:	f107 0308 	add.w	r3, r7, #8
 800fb36:	2218      	movs	r2, #24
 800fb38:	2100      	movs	r1, #0
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f000 f8a5 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x03;
 800fb40:	2303      	movs	r3, #3
 800fb42:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fb44:	2303      	movs	r3, #3
 800fb46:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fb48:	1dfb      	adds	r3, r7, #7
 800fb4a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fb50:	f107 0308 	add.w	r3, r7, #8
 800fb54:	2100      	movs	r1, #0
 800fb56:	4618      	mov	r0, r3
 800fb58:	f000 fb20 	bl	801019c <hci_send_req>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	da01      	bge.n	800fb66 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fb62:	23ff      	movs	r3, #255	@ 0xff
 800fb64:	e000      	b.n	800fb68 <hci_reset+0x40>
  return status;
 800fb66:	79fb      	ldrb	r3, [r7, #7]
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	3720      	adds	r7, #32
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	bd80      	pop	{r7, pc}

0800fb70 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fb70:	b590      	push	{r4, r7, lr}
 800fb72:	b0cd      	sub	sp, #308	@ 0x134
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	4604      	mov	r4, r0
 800fb78:	4608      	mov	r0, r1
 800fb7a:	4611      	mov	r1, r2
 800fb7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb80:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb84:	4622      	mov	r2, r4
 800fb86:	701a      	strb	r2, [r3, #0]
 800fb88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb8c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb90:	4602      	mov	r2, r0
 800fb92:	701a      	strb	r2, [r3, #0]
 800fb94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb98:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fb9c:	460a      	mov	r2, r1
 800fb9e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fba0:	f107 0310 	add.w	r3, r7, #16
 800fba4:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fba8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbac:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fbb0:	2200      	movs	r2, #0
 800fbb2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fbba:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbbe:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbc2:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fbc6:	7812      	ldrb	r2, [r2, #0]
 800fbc8:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fbca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbce:	3301      	adds	r3, #1
 800fbd0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800fbd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbd8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbdc:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fbe0:	7812      	ldrb	r2, [r2, #0]
 800fbe2:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fbe4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbe8:	3301      	adds	r3, #1
 800fbea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fbee:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fbf2:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fbf6:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fbfa:	7812      	ldrb	r2, [r2, #0]
 800fbfc:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fbfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc02:	3301      	adds	r3, #1
 800fc04:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fc08:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc0c:	2218      	movs	r2, #24
 800fc0e:	2100      	movs	r1, #0
 800fc10:	4618      	mov	r0, r3
 800fc12:	f000 f83a 	bl	800fc8a <Osal_MemSet>
  rq.ogf = 0x08;
 800fc16:	2308      	movs	r3, #8
 800fc18:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800fc1c:	2331      	movs	r3, #49	@ 0x31
 800fc1e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fc22:	f107 0310 	add.w	r3, r7, #16
 800fc26:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fc2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fc2e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fc32:	f107 030f 	add.w	r3, r7, #15
 800fc36:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fc3a:	2301      	movs	r3, #1
 800fc3c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fc40:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fc44:	2100      	movs	r1, #0
 800fc46:	4618      	mov	r0, r3
 800fc48:	f000 faa8 	bl	801019c <hci_send_req>
 800fc4c:	4603      	mov	r3, r0
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	da01      	bge.n	800fc56 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800fc52:	23ff      	movs	r3, #255	@ 0xff
 800fc54:	e004      	b.n	800fc60 <hci_le_set_default_phy+0xf0>
  return status;
 800fc56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fc5a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fc5e:	781b      	ldrb	r3, [r3, #0]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd90      	pop	{r4, r7, pc}

0800fc6a <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800fc6a:	b580      	push	{r7, lr}
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	af00      	add	r7, sp, #0
 800fc70:	60f8      	str	r0, [r7, #12]
 800fc72:	60b9      	str	r1, [r7, #8]
 800fc74:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	68b9      	ldr	r1, [r7, #8]
 800fc7a:	68f8      	ldr	r0, [r7, #12]
 800fc7c:	f002 ffee 	bl	8012c5c <memcpy>
 800fc80:	4603      	mov	r3, r0
}
 800fc82:	4618      	mov	r0, r3
 800fc84:	3710      	adds	r7, #16
 800fc86:	46bd      	mov	sp, r7
 800fc88:	bd80      	pop	{r7, pc}

0800fc8a <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800fc8a:	b580      	push	{r7, lr}
 800fc8c:	b084      	sub	sp, #16
 800fc8e:	af00      	add	r7, sp, #0
 800fc90:	60f8      	str	r0, [r7, #12]
 800fc92:	60b9      	str	r1, [r7, #8]
 800fc94:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800fc96:	687a      	ldr	r2, [r7, #4]
 800fc98:	68b9      	ldr	r1, [r7, #8]
 800fc9a:	68f8      	ldr	r0, [r7, #12]
 800fc9c:	f002 ff9a 	bl	8012bd4 <memset>
 800fca0:	4603      	mov	r3, r0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}

0800fcaa <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800fcaa:	b480      	push	{r7}
 800fcac:	af00      	add	r7, sp, #0
  return;
 800fcae:	bf00      	nop
}
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800fcb8:	b480      	push	{r7}
 800fcba:	af00      	add	r7, sp, #0
  return;
 800fcbc:	bf00      	nop
}
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc4:	4770      	bx	lr

0800fcc6 <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800fcc6:	b480      	push	{r7}
 800fcc8:	af00      	add	r7, sp, #0
  return;
 800fcca:	bf00      	nop
}
 800fccc:	46bd      	mov	sp, r7
 800fcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd2:	4770      	bx	lr

0800fcd4 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	af00      	add	r7, sp, #0
  return;
 800fcd8:	bf00      	nop
}
 800fcda:	46bd      	mov	sp, r7
 800fcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce0:	4770      	bx	lr

0800fce2 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800fce2:	b480      	push	{r7}
 800fce4:	af00      	add	r7, sp, #0
  return;
 800fce6:	bf00      	nop
}
 800fce8:	46bd      	mov	sp, r7
 800fcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcee:	4770      	bx	lr

0800fcf0 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fcf0:	b480      	push	{r7}
 800fcf2:	af00      	add	r7, sp, #0
  return;
 800fcf4:	bf00      	nop
}
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800fcfe:	b480      	push	{r7}
 800fd00:	af00      	add	r7, sp, #0
  return;
 800fd02:	bf00      	nop
}
 800fd04:	46bd      	mov	sp, r7
 800fd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd0a:	4770      	bx	lr

0800fd0c <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800fd0c:	b480      	push	{r7}
 800fd0e:	af00      	add	r7, sp, #0
  return;
 800fd10:	bf00      	nop
}
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800fd1a:	b480      	push	{r7}
 800fd1c:	af00      	add	r7, sp, #0
  return;
 800fd1e:	bf00      	nop
}
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr

0800fd28 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800fd28:	b480      	push	{r7}
 800fd2a:	af00      	add	r7, sp, #0
  return;
 800fd2c:	bf00      	nop
}
 800fd2e:	46bd      	mov	sp, r7
 800fd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd34:	4770      	bx	lr

0800fd36 <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800fd36:	b480      	push	{r7}
 800fd38:	af00      	add	r7, sp, #0
  return;
 800fd3a:	bf00      	nop
}
 800fd3c:	46bd      	mov	sp, r7
 800fd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd42:	4770      	bx	lr

0800fd44 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800fd44:	b480      	push	{r7}
 800fd46:	af00      	add	r7, sp, #0
  return;
 800fd48:	bf00      	nop
}
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr

0800fd52 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800fd52:	b480      	push	{r7}
 800fd54:	af00      	add	r7, sp, #0
  return;
 800fd56:	bf00      	nop
}
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5e:	4770      	bx	lr

0800fd60 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800fd60:	b480      	push	{r7}
 800fd62:	af00      	add	r7, sp, #0
  return;
 800fd64:	bf00      	nop
}
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800fd6e:	b480      	push	{r7}
 800fd70:	af00      	add	r7, sp, #0
  return;
 800fd72:	bf00      	nop
}
 800fd74:	46bd      	mov	sp, r7
 800fd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7a:	4770      	bx	lr

0800fd7c <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	af00      	add	r7, sp, #0
  return;
 800fd80:	bf00      	nop
}
 800fd82:	46bd      	mov	sp, r7
 800fd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd88:	4770      	bx	lr

0800fd8a <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800fd8a:	b480      	push	{r7}
 800fd8c:	af00      	add	r7, sp, #0
  return;
 800fd8e:	bf00      	nop
}
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800fd9c:	4b04      	ldr	r3, [pc, #16]	@ (800fdb0 <SVCCTL_Init+0x18>)
 800fd9e:	2200      	movs	r2, #0
 800fda0:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800fda2:	4b04      	ldr	r3, [pc, #16]	@ (800fdb4 <SVCCTL_Init+0x1c>)
 800fda4:	2200      	movs	r2, #0
 800fda6:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800fda8:	f000 f806 	bl	800fdb8 <SVCCTL_SvcInit>

  return;
 800fdac:	bf00      	nop
}
 800fdae:	bd80      	pop	{r7, pc}
 800fdb0:	2000018c 	.word	0x2000018c
 800fdb4:	200001ac 	.word	0x200001ac

0800fdb8 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800fdb8:	b580      	push	{r7, lr}
 800fdba:	af00      	add	r7, sp, #0
  BAS_Init();
 800fdbc:	f7ff ff75 	bl	800fcaa <BAS_Init>

  BLS_Init();
 800fdc0:	f7ff ff7a 	bl	800fcb8 <BLS_Init>

  CRS_STM_Init();
 800fdc4:	f7ff ff7f 	bl	800fcc6 <CRS_STM_Init>

  DIS_Init();
 800fdc8:	f7ff ff84 	bl	800fcd4 <DIS_Init>

  EDS_STM_Init();
 800fdcc:	f7ff ff89 	bl	800fce2 <EDS_STM_Init>

  HIDS_Init();
 800fdd0:	f7ff ff8e 	bl	800fcf0 <HIDS_Init>

  HRS_Init();
 800fdd4:	f7ff ff93 	bl	800fcfe <HRS_Init>

  HTS_Init();
 800fdd8:	f7ff ff98 	bl	800fd0c <HTS_Init>

  IAS_Init();
 800fddc:	f7ff ff9d 	bl	800fd1a <IAS_Init>

  LLS_Init();
 800fde0:	f7ff ffa2 	bl	800fd28 <LLS_Init>

  TPS_Init();
 800fde4:	f7ff ffa7 	bl	800fd36 <TPS_Init>

  MOTENV_STM_Init();
 800fde8:	f7ff ffac 	bl	800fd44 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800fdec:	f7ff ffb1 	bl	800fd52 <P2PS_STM_Init>

  ZDD_STM_Init();
 800fdf0:	f7ff ffb6 	bl	800fd60 <ZDD_STM_Init>

  OTAS_STM_Init();
 800fdf4:	f7ff ffbb 	bl	800fd6e <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800fdf8:	f7ff ffc7 	bl	800fd8a <BVOPUS_STM_Init>

  MESH_Init();
 800fdfc:	f7ff ffbe 	bl	800fd7c <MESH_Init>

  SVCCTL_InitCustomSvc();
 800fe00:	f001 fb5a 	bl	80114b8 <SVCCTL_InitCustomSvc>
  
  return;
 800fe04:	bf00      	nop
}
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800fe10:	4b09      	ldr	r3, [pc, #36]	@ (800fe38 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe12:	7f1b      	ldrb	r3, [r3, #28]
 800fe14:	4619      	mov	r1, r3
 800fe16:	4a08      	ldr	r2, [pc, #32]	@ (800fe38 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800fe1e:	4b06      	ldr	r3, [pc, #24]	@ (800fe38 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe20:	7f1b      	ldrb	r3, [r3, #28]
 800fe22:	3301      	adds	r3, #1
 800fe24:	b2da      	uxtb	r2, r3
 800fe26:	4b04      	ldr	r3, [pc, #16]	@ (800fe38 <SVCCTL_RegisterSvcHandler+0x30>)
 800fe28:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800fe2a:	bf00      	nop
}
 800fe2c:	370c      	adds	r7, #12
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe34:	4770      	bx	lr
 800fe36:	bf00      	nop
 800fe38:	2000018c 	.word	0x2000018c

0800fe3c <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	3301      	adds	r3, #1
 800fe48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	781b      	ldrb	r3, [r3, #0]
 800fe52:	2bff      	cmp	r3, #255	@ 0xff
 800fe54:	d125      	bne.n	800fea2 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	3302      	adds	r3, #2
 800fe5a:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	881b      	ldrh	r3, [r3, #0]
 800fe60:	b29b      	uxth	r3, r3
 800fe62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe6a:	d118      	bne.n	800fe9e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	757b      	strb	r3, [r7, #21]
 800fe70:	e00d      	b.n	800fe8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800fe72:	7d7b      	ldrb	r3, [r7, #21]
 800fe74:	4a1a      	ldr	r2, [pc, #104]	@ (800fee0 <SVCCTL_UserEvtRx+0xa4>)
 800fe76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	4798      	blx	r3
 800fe7e:	4603      	mov	r3, r0
 800fe80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800fe82:	7dfb      	ldrb	r3, [r7, #23]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d108      	bne.n	800fe9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fe88:	7d7b      	ldrb	r3, [r7, #21]
 800fe8a:	3301      	adds	r3, #1
 800fe8c:	757b      	strb	r3, [r7, #21]
 800fe8e:	4b14      	ldr	r3, [pc, #80]	@ (800fee0 <SVCCTL_UserEvtRx+0xa4>)
 800fe90:	7f1b      	ldrb	r3, [r3, #28]
 800fe92:	7d7a      	ldrb	r2, [r7, #21]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d3ec      	bcc.n	800fe72 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800fe98:	e002      	b.n	800fea0 <SVCCTL_UserEvtRx+0x64>
              break;
 800fe9a:	bf00      	nop
          break;
 800fe9c:	e000      	b.n	800fea0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800fe9e:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800fea0:	e000      	b.n	800fea4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800fea2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
 800fea6:	2b02      	cmp	r3, #2
 800fea8:	d00f      	beq.n	800feca <SVCCTL_UserEvtRx+0x8e>
 800feaa:	2b02      	cmp	r3, #2
 800feac:	dc10      	bgt.n	800fed0 <SVCCTL_UserEvtRx+0x94>
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d002      	beq.n	800feb8 <SVCCTL_UserEvtRx+0x7c>
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d006      	beq.n	800fec4 <SVCCTL_UserEvtRx+0x88>
 800feb6:	e00b      	b.n	800fed0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800feb8:	6878      	ldr	r0, [r7, #4]
 800feba:	f000 ff85 	bl	8010dc8 <SVCCTL_App_Notification>
 800febe:	4603      	mov	r3, r0
 800fec0:	75bb      	strb	r3, [r7, #22]
      break;
 800fec2:	e008      	b.n	800fed6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fec4:	2301      	movs	r3, #1
 800fec6:	75bb      	strb	r3, [r7, #22]
      break;
 800fec8:	e005      	b.n	800fed6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800feca:	2300      	movs	r3, #0
 800fecc:	75bb      	strb	r3, [r7, #22]
      break;
 800fece:	e002      	b.n	800fed6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fed0:	2301      	movs	r3, #1
 800fed2:	75bb      	strb	r3, [r7, #22]
      break;
 800fed4:	bf00      	nop
  }

  return (return_status);
 800fed6:	7dbb      	ldrb	r3, [r7, #22]
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	2000018c 	.word	0x2000018c

0800fee4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800fee4:	b580      	push	{r7, lr}
 800fee6:	b088      	sub	sp, #32
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800feec:	f107 030c 	add.w	r3, r7, #12
 800fef0:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800fef8:	69fb      	ldr	r3, [r7, #28]
 800fefa:	212e      	movs	r1, #46	@ 0x2e
 800fefc:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800ff00:	f000 fae8 	bl	80104d4 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff04:	69fb      	ldr	r3, [r7, #28]
 800ff06:	330b      	adds	r3, #11
 800ff08:	78db      	ldrb	r3, [r3, #3]
}
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	3720      	adds	r7, #32
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	bd80      	pop	{r7, pc}

0800ff12 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800ff12:	b580      	push	{r7, lr}
 800ff14:	b088      	sub	sp, #32
 800ff16:	af00      	add	r7, sp, #0
 800ff18:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ff1a:	f107 030c 	add.w	r3, r7, #12
 800ff1e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800ff26:	69fb      	ldr	r3, [r7, #28]
 800ff28:	210f      	movs	r1, #15
 800ff2a:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800ff2e:	f000 fad1 	bl	80104d4 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff32:	69fb      	ldr	r3, [r7, #28]
 800ff34:	330b      	adds	r3, #11
 800ff36:	78db      	ldrb	r3, [r3, #3]
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3720      	adds	r7, #32
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b088      	sub	sp, #32
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800ff48:	f107 030c 	add.w	r3, r7, #12
 800ff4c:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800ff4e:	69fb      	ldr	r3, [r7, #28]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	2110      	movs	r1, #16
 800ff54:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800ff58:	f000 fabc 	bl	80104d4 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	330b      	adds	r3, #11
 800ff60:	78db      	ldrb	r3, [r3, #3]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	3720      	adds	r7, #32
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
	...

0800ff6c <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b08b      	sub	sp, #44	@ 0x2c
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ff74:	2300      	movs	r3, #0
 800ff76:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ff78:	2300      	movs	r3, #0
 800ff7a:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ff7c:	2300      	movs	r3, #0
 800ff7e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ff80:	2300      	movs	r3, #0
 800ff82:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ff84:	2300      	movs	r3, #0
 800ff86:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ff88:	2300      	movs	r3, #0
 800ff8a:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ff94:	4b4a      	ldr	r3, [pc, #296]	@ (80100c0 <SHCI_GetWirelessFwInfo+0x154>)
 800ff96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ff9c:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ff9e:	693b      	ldr	r3, [r7, #16]
 800ffa0:	009b      	lsls	r3, r3, #2
 800ffa2:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ffa6:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ffae:	68bb      	ldr	r3, [r7, #8]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	4a44      	ldr	r2, [pc, #272]	@ (80100c4 <SHCI_GetWirelessFwInfo+0x158>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d10f      	bne.n	800ffd8 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	695b      	ldr	r3, [r3, #20]
 800ffbc:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	699b      	ldr	r3, [r3, #24]
 800ffc2:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ffc4:	68bb      	ldr	r3, [r7, #8]
 800ffc6:	69db      	ldr	r3, [r3, #28]
 800ffc8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ffca:	68bb      	ldr	r3, [r7, #8]
 800ffcc:	68db      	ldr	r3, [r3, #12]
 800ffce:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	691b      	ldr	r3, [r3, #16]
 800ffd4:	617b      	str	r3, [r7, #20]
 800ffd6:	e01a      	b.n	801000e <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ffe0:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ffe4:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	691b      	ldr	r3, [r3, #16]
 800ffec:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	695b      	ldr	r3, [r3, #20]
 800fff4:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	699b      	ldr	r3, [r3, #24]
 800fffc:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	685b      	ldr	r3, [r3, #4]
 8010004:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	689b      	ldr	r3, [r3, #8]
 801000c:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 801000e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010010:	0e1b      	lsrs	r3, r3, #24
 8010012:	b2da      	uxtb	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801001a:	0c1b      	lsrs	r3, r3, #16
 801001c:	b2da      	uxtb	r2, r3
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010024:	0a1b      	lsrs	r3, r3, #8
 8010026:	b2da      	uxtb	r2, r3
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 801002c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801002e:	091b      	lsrs	r3, r3, #4
 8010030:	b2db      	uxtb	r3, r3
 8010032:	f003 030f 	and.w	r3, r3, #15
 8010036:	b2da      	uxtb	r2, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 801003c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801003e:	b2db      	uxtb	r3, r3
 8010040:	f003 030f 	and.w	r3, r3, #15
 8010044:	b2da      	uxtb	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	0e1b      	lsrs	r3, r3, #24
 801004e:	b2da      	uxtb	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	0c1b      	lsrs	r3, r3, #16
 8010058:	b2da      	uxtb	r2, r3
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801005e:	6a3b      	ldr	r3, [r7, #32]
 8010060:	0a1b      	lsrs	r3, r3, #8
 8010062:	b2da      	uxtb	r2, r3
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010068:	6a3b      	ldr	r3, [r7, #32]
 801006a:	b2da      	uxtb	r2, r3
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	b2da      	uxtb	r2, r3
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010078:	69bb      	ldr	r3, [r7, #24]
 801007a:	0e1b      	lsrs	r3, r3, #24
 801007c:	b2da      	uxtb	r2, r3
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8010082:	69bb      	ldr	r3, [r7, #24]
 8010084:	0c1b      	lsrs	r3, r3, #16
 8010086:	b2da      	uxtb	r2, r3
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	0a1b      	lsrs	r3, r3, #8
 8010090:	b2da      	uxtb	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8010096:	697b      	ldr	r3, [r7, #20]
 8010098:	0e1b      	lsrs	r3, r3, #24
 801009a:	b2da      	uxtb	r2, r3
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	0c1b      	lsrs	r3, r3, #16
 80100a4:	b2da      	uxtb	r2, r3
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 80100aa:	697b      	ldr	r3, [r7, #20]
 80100ac:	b2da      	uxtb	r2, r3
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 80100b2:	2300      	movs	r3, #0
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	372c      	adds	r7, #44	@ 0x2c
 80100b8:	46bd      	mov	sp, r7
 80100ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100be:	4770      	bx	lr
 80100c0:	58004000 	.word	0x58004000
 80100c4:	a94656b9 	.word	0xa94656b9

080100c8 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
 80100d0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	4a08      	ldr	r2, [pc, #32]	@ (80100f8 <hci_init+0x30>)
 80100d8:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80100da:	4a08      	ldr	r2, [pc, #32]	@ (80100fc <hci_init+0x34>)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80100e0:	4806      	ldr	r0, [pc, #24]	@ (80100fc <hci_init+0x34>)
 80100e2:	f000 f979 	bl	80103d8 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4618      	mov	r0, r3
 80100ec:	f000 f8da 	bl	80102a4 <TlInit>

  return;
 80100f0:	bf00      	nop
}
 80100f2:	3708      	adds	r7, #8
 80100f4:	46bd      	mov	sp, r7
 80100f6:	bd80      	pop	{r7, pc}
 80100f8:	20000434 	.word	0x20000434
 80100fc:	2000040c 	.word	0x2000040c

08010100 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010106:	4822      	ldr	r0, [pc, #136]	@ (8010190 <hci_user_evt_proc+0x90>)
 8010108:	f000 fd32 	bl	8010b70 <LST_is_empty>
 801010c:	4603      	mov	r3, r0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d12b      	bne.n	801016a <hci_user_evt_proc+0x6a>
 8010112:	4b20      	ldr	r3, [pc, #128]	@ (8010194 <hci_user_evt_proc+0x94>)
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d027      	beq.n	801016a <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 801011a:	f107 030c 	add.w	r3, r7, #12
 801011e:	4619      	mov	r1, r3
 8010120:	481b      	ldr	r0, [pc, #108]	@ (8010190 <hci_user_evt_proc+0x90>)
 8010122:	f000 fdb4 	bl	8010c8e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8010126:	4b1c      	ldr	r3, [pc, #112]	@ (8010198 <hci_user_evt_proc+0x98>)
 8010128:	69db      	ldr	r3, [r3, #28]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d00c      	beq.n	8010148 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8010132:	2301      	movs	r3, #1
 8010134:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010136:	4b18      	ldr	r3, [pc, #96]	@ (8010198 <hci_user_evt_proc+0x98>)
 8010138:	69db      	ldr	r3, [r3, #28]
 801013a:	1d3a      	adds	r2, r7, #4
 801013c:	4610      	mov	r0, r2
 801013e:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8010140:	793a      	ldrb	r2, [r7, #4]
 8010142:	4b14      	ldr	r3, [pc, #80]	@ (8010194 <hci_user_evt_proc+0x94>)
 8010144:	701a      	strb	r2, [r3, #0]
 8010146:	e002      	b.n	801014e <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010148:	4b12      	ldr	r3, [pc, #72]	@ (8010194 <hci_user_evt_proc+0x94>)
 801014a:	2201      	movs	r2, #1
 801014c:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 801014e:	4b11      	ldr	r3, [pc, #68]	@ (8010194 <hci_user_evt_proc+0x94>)
 8010150:	781b      	ldrb	r3, [r3, #0]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d004      	beq.n	8010160 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010156:	68fb      	ldr	r3, [r7, #12]
 8010158:	4618      	mov	r0, r3
 801015a:	f000 fc0d 	bl	8010978 <TL_MM_EvtDone>
 801015e:	e004      	b.n	801016a <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	4619      	mov	r1, r3
 8010164:	480a      	ldr	r0, [pc, #40]	@ (8010190 <hci_user_evt_proc+0x90>)
 8010166:	f000 fd25 	bl	8010bb4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801016a:	4809      	ldr	r0, [pc, #36]	@ (8010190 <hci_user_evt_proc+0x90>)
 801016c:	f000 fd00 	bl	8010b70 <LST_is_empty>
 8010170:	4603      	mov	r3, r0
 8010172:	2b00      	cmp	r3, #0
 8010174:	d107      	bne.n	8010186 <hci_user_evt_proc+0x86>
 8010176:	4b07      	ldr	r3, [pc, #28]	@ (8010194 <hci_user_evt_proc+0x94>)
 8010178:	781b      	ldrb	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 801017e:	4804      	ldr	r0, [pc, #16]	@ (8010190 <hci_user_evt_proc+0x90>)
 8010180:	f001 f848 	bl	8011214 <hci_notify_asynch_evt>
  }


  return;
 8010184:	bf00      	nop
 8010186:	bf00      	nop
}
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	200001b4 	.word	0x200001b4
 8010194:	200001c0 	.word	0x200001c0
 8010198:	2000040c 	.word	0x2000040c

0801019c <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	460b      	mov	r3, r1
 80101a6:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 80101a8:	2000      	movs	r0, #0
 80101aa:	f000 f8d1 	bl	8010350 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 80101ae:	2300      	movs	r3, #0
 80101b0:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	885b      	ldrh	r3, [r3, #2]
 80101b6:	b21b      	sxth	r3, r3
 80101b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80101bc:	b21a      	sxth	r2, r3
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	029b      	lsls	r3, r3, #10
 80101c4:	b21b      	sxth	r3, r3
 80101c6:	4313      	orrs	r3, r2
 80101c8:	b21b      	sxth	r3, r3
 80101ca:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 80101cc:	4b33      	ldr	r3, [pc, #204]	@ (801029c <hci_send_req+0x100>)
 80101ce:	2201      	movs	r2, #1
 80101d0:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	68db      	ldr	r3, [r3, #12]
 80101d6:	b2d9      	uxtb	r1, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	689a      	ldr	r2, [r3, #8]
 80101dc:	8bbb      	ldrh	r3, [r7, #28]
 80101de:	4618      	mov	r0, r3
 80101e0:	f000 f890 	bl	8010304 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80101e4:	e04e      	b.n	8010284 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80101e6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80101ea:	f001 f82a 	bl	8011242 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80101ee:	e043      	b.n	8010278 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80101f0:	f107 030c 	add.w	r3, r7, #12
 80101f4:	4619      	mov	r1, r3
 80101f6:	482a      	ldr	r0, [pc, #168]	@ (80102a0 <hci_send_req+0x104>)
 80101f8:	f000 fd49 	bl	8010c8e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80101fc:	68fb      	ldr	r3, [r7, #12]
 80101fe:	7a5b      	ldrb	r3, [r3, #9]
 8010200:	2b0f      	cmp	r3, #15
 8010202:	d114      	bne.n	801022e <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	330b      	adds	r3, #11
 8010208:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	885b      	ldrh	r3, [r3, #2]
 801020e:	b29b      	uxth	r3, r3
 8010210:	8bba      	ldrh	r2, [r7, #28]
 8010212:	429a      	cmp	r2, r3
 8010214:	d104      	bne.n	8010220 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	691b      	ldr	r3, [r3, #16]
 801021a:	693a      	ldr	r2, [r7, #16]
 801021c:	7812      	ldrb	r2, [r2, #0]
 801021e:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8010220:	693b      	ldr	r3, [r7, #16]
 8010222:	785b      	ldrb	r3, [r3, #1]
 8010224:	2b00      	cmp	r3, #0
 8010226:	d027      	beq.n	8010278 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010228:	2301      	movs	r3, #1
 801022a:	77fb      	strb	r3, [r7, #31]
 801022c:	e024      	b.n	8010278 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	330b      	adds	r3, #11
 8010232:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8010234:	69bb      	ldr	r3, [r7, #24]
 8010236:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801023a:	b29b      	uxth	r3, r3
 801023c:	8bba      	ldrh	r2, [r7, #28]
 801023e:	429a      	cmp	r2, r3
 8010240:	d114      	bne.n	801026c <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	7a9b      	ldrb	r3, [r3, #10]
 8010246:	3b03      	subs	r3, #3
 8010248:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	695a      	ldr	r2, [r3, #20]
 801024e:	7dfb      	ldrb	r3, [r7, #23]
 8010250:	429a      	cmp	r2, r3
 8010252:	bfa8      	it	ge
 8010254:	461a      	movge	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	6918      	ldr	r0, [r3, #16]
 801025e:	69bb      	ldr	r3, [r7, #24]
 8010260:	1cd9      	adds	r1, r3, #3
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	695b      	ldr	r3, [r3, #20]
 8010266:	461a      	mov	r2, r3
 8010268:	f002 fcf8 	bl	8012c5c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	2b00      	cmp	r3, #0
 8010272:	d001      	beq.n	8010278 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8010274:	2301      	movs	r3, #1
 8010276:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010278:	4809      	ldr	r0, [pc, #36]	@ (80102a0 <hci_send_req+0x104>)
 801027a:	f000 fc79 	bl	8010b70 <LST_is_empty>
 801027e:	4603      	mov	r3, r0
 8010280:	2b00      	cmp	r3, #0
 8010282:	d0b5      	beq.n	80101f0 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8010284:	7ffb      	ldrb	r3, [r7, #31]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d0ad      	beq.n	80101e6 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 801028a:	2001      	movs	r0, #1
 801028c:	f000 f860 	bl	8010350 <NotifyCmdStatus>

  return 0;
 8010290:	2300      	movs	r3, #0
}
 8010292:	4618      	mov	r0, r3
 8010294:	3720      	adds	r7, #32
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	bf00      	nop
 801029c:	20000438 	.word	0x20000438
 80102a0:	2000042c 	.word	0x2000042c

080102a4 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80102a4:	b580      	push	{r7, lr}
 80102a6:	b086      	sub	sp, #24
 80102a8:	af00      	add	r7, sp, #0
 80102aa:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 80102ac:	480f      	ldr	r0, [pc, #60]	@ (80102ec <TlInit+0x48>)
 80102ae:	f000 fc4f 	bl	8010b50 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 80102b2:	4a0f      	ldr	r2, [pc, #60]	@ (80102f0 <TlInit+0x4c>)
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 80102b8:	480e      	ldr	r0, [pc, #56]	@ (80102f4 <TlInit+0x50>)
 80102ba:	f000 fc49 	bl	8010b50 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80102be:	4b0e      	ldr	r3, [pc, #56]	@ (80102f8 <TlInit+0x54>)
 80102c0:	2201      	movs	r2, #1
 80102c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80102c4:	4b0d      	ldr	r3, [pc, #52]	@ (80102fc <TlInit+0x58>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00a      	beq.n	80102e2 <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80102d0:	4b0b      	ldr	r3, [pc, #44]	@ (8010300 <TlInit+0x5c>)
 80102d2:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80102d4:	4b09      	ldr	r3, [pc, #36]	@ (80102fc <TlInit+0x58>)
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f107 0208 	add.w	r2, r7, #8
 80102dc:	4610      	mov	r0, r2
 80102de:	4798      	blx	r3
  }

  return;
 80102e0:	bf00      	nop
 80102e2:	bf00      	nop
}
 80102e4:	3718      	adds	r7, #24
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	2000042c 	.word	0x2000042c
 80102f0:	200001bc 	.word	0x200001bc
 80102f4:	200001b4 	.word	0x200001b4
 80102f8:	200001c0 	.word	0x200001c0
 80102fc:	2000040c 	.word	0x2000040c
 8010300:	08010391 	.word	0x08010391

08010304 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8010304:	b580      	push	{r7, lr}
 8010306:	b082      	sub	sp, #8
 8010308:	af00      	add	r7, sp, #0
 801030a:	4603      	mov	r3, r0
 801030c:	603a      	str	r2, [r7, #0]
 801030e:	80fb      	strh	r3, [r7, #6]
 8010310:	460b      	mov	r3, r1
 8010312:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8010314:	4b0c      	ldr	r3, [pc, #48]	@ (8010348 <SendCmd+0x44>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	88fa      	ldrh	r2, [r7, #6]
 801031a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 801031e:	4b0a      	ldr	r3, [pc, #40]	@ (8010348 <SendCmd+0x44>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	797a      	ldrb	r2, [r7, #5]
 8010324:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8010326:	4b08      	ldr	r3, [pc, #32]	@ (8010348 <SendCmd+0x44>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	330c      	adds	r3, #12
 801032c:	797a      	ldrb	r2, [r7, #5]
 801032e:	6839      	ldr	r1, [r7, #0]
 8010330:	4618      	mov	r0, r3
 8010332:	f002 fc93 	bl	8012c5c <memcpy>

  hciContext.io.Send(0,0);
 8010336:	4b05      	ldr	r3, [pc, #20]	@ (801034c <SendCmd+0x48>)
 8010338:	691b      	ldr	r3, [r3, #16]
 801033a:	2100      	movs	r1, #0
 801033c:	2000      	movs	r0, #0
 801033e:	4798      	blx	r3

  return;
 8010340:	bf00      	nop
}
 8010342:	3708      	adds	r7, #8
 8010344:	46bd      	mov	sp, r7
 8010346:	bd80      	pop	{r7, pc}
 8010348:	200001bc 	.word	0x200001bc
 801034c:	2000040c 	.word	0x2000040c

08010350 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	4603      	mov	r3, r0
 8010358:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d108      	bne.n	8010372 <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8010360:	4b0a      	ldr	r3, [pc, #40]	@ (801038c <NotifyCmdStatus+0x3c>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b00      	cmp	r3, #0
 8010366:	d00d      	beq.n	8010384 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010368:	4b08      	ldr	r3, [pc, #32]	@ (801038c <NotifyCmdStatus+0x3c>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	2000      	movs	r0, #0
 801036e:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010370:	e008      	b.n	8010384 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8010372:	4b06      	ldr	r3, [pc, #24]	@ (801038c <NotifyCmdStatus+0x3c>)
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d004      	beq.n	8010384 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 801037a:	4b04      	ldr	r3, [pc, #16]	@ (801038c <NotifyCmdStatus+0x3c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	2001      	movs	r0, #1
 8010380:	4798      	blx	r3
  return;
 8010382:	bf00      	nop
 8010384:	bf00      	nop
}
 8010386:	3708      	adds	r7, #8
 8010388:	46bd      	mov	sp, r7
 801038a:	bd80      	pop	{r7, pc}
 801038c:	20000434 	.word	0x20000434

08010390 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	7a5b      	ldrb	r3, [r3, #9]
 801039c:	2b0f      	cmp	r3, #15
 801039e:	d003      	beq.n	80103a8 <TlEvtReceived+0x18>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	7a5b      	ldrb	r3, [r3, #9]
 80103a4:	2b0e      	cmp	r3, #14
 80103a6:	d107      	bne.n	80103b8 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 80103a8:	6879      	ldr	r1, [r7, #4]
 80103aa:	4809      	ldr	r0, [pc, #36]	@ (80103d0 <TlEvtReceived+0x40>)
 80103ac:	f000 fc28 	bl	8010c00 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 80103b0:	2000      	movs	r0, #0
 80103b2:	f000 ff3b 	bl	801122c <hci_cmd_resp_release>
 80103b6:	e006      	b.n	80103c6 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 80103b8:	6879      	ldr	r1, [r7, #4]
 80103ba:	4806      	ldr	r0, [pc, #24]	@ (80103d4 <TlEvtReceived+0x44>)
 80103bc:	f000 fc20 	bl	8010c00 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80103c0:	4804      	ldr	r0, [pc, #16]	@ (80103d4 <TlEvtReceived+0x44>)
 80103c2:	f000 ff27 	bl	8011214 <hci_notify_asynch_evt>
  }

  return;
 80103c6:	bf00      	nop
}
 80103c8:	3708      	adds	r7, #8
 80103ca:	46bd      	mov	sp, r7
 80103cc:	bd80      	pop	{r7, pc}
 80103ce:	bf00      	nop
 80103d0:	2000042c 	.word	0x2000042c
 80103d4:	200001b4 	.word	0x200001b4

080103d8 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 80103d8:	b480      	push	{r7}
 80103da:	b083      	sub	sp, #12
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	4a05      	ldr	r2, [pc, #20]	@ (80103f8 <hci_register_io_bus+0x20>)
 80103e4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	4a04      	ldr	r2, [pc, #16]	@ (80103fc <hci_register_io_bus+0x24>)
 80103ea:	611a      	str	r2, [r3, #16]

  return;
 80103ec:	bf00      	nop
}
 80103ee:	370c      	adds	r7, #12
 80103f0:	46bd      	mov	sp, r7
 80103f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103f6:	4770      	bx	lr
 80103f8:	080106f1 	.word	0x080106f1
 80103fc:	08010759 	.word	0x08010759

08010400 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b082      	sub	sp, #8
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	4a08      	ldr	r2, [pc, #32]	@ (8010430 <shci_init+0x30>)
 8010410:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8010412:	4a08      	ldr	r2, [pc, #32]	@ (8010434 <shci_init+0x34>)
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8010418:	4806      	ldr	r0, [pc, #24]	@ (8010434 <shci_init+0x34>)
 801041a:	f000 f915 	bl	8010648 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	4618      	mov	r0, r3
 8010424:	f000 f898 	bl	8010558 <TlInit>

  return;
 8010428:	bf00      	nop
}
 801042a:	3708      	adds	r7, #8
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}
 8010430:	2000045c 	.word	0x2000045c
 8010434:	2000043c 	.word	0x2000043c

08010438 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b084      	sub	sp, #16
 801043c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801043e:	4822      	ldr	r0, [pc, #136]	@ (80104c8 <shci_user_evt_proc+0x90>)
 8010440:	f000 fb96 	bl	8010b70 <LST_is_empty>
 8010444:	4603      	mov	r3, r0
 8010446:	2b00      	cmp	r3, #0
 8010448:	d12b      	bne.n	80104a2 <shci_user_evt_proc+0x6a>
 801044a:	4b20      	ldr	r3, [pc, #128]	@ (80104cc <shci_user_evt_proc+0x94>)
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	2b00      	cmp	r3, #0
 8010450:	d027      	beq.n	80104a2 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8010452:	f107 030c 	add.w	r3, r7, #12
 8010456:	4619      	mov	r1, r3
 8010458:	481b      	ldr	r0, [pc, #108]	@ (80104c8 <shci_user_evt_proc+0x90>)
 801045a:	f000 fc18 	bl	8010c8e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 801045e:	4b1c      	ldr	r3, [pc, #112]	@ (80104d0 <shci_user_evt_proc+0x98>)
 8010460:	69db      	ldr	r3, [r3, #28]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00c      	beq.n	8010480 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801046a:	2301      	movs	r3, #1
 801046c:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 801046e:	4b18      	ldr	r3, [pc, #96]	@ (80104d0 <shci_user_evt_proc+0x98>)
 8010470:	69db      	ldr	r3, [r3, #28]
 8010472:	1d3a      	adds	r2, r7, #4
 8010474:	4610      	mov	r0, r2
 8010476:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010478:	793a      	ldrb	r2, [r7, #4]
 801047a:	4b14      	ldr	r3, [pc, #80]	@ (80104cc <shci_user_evt_proc+0x94>)
 801047c:	701a      	strb	r2, [r3, #0]
 801047e:	e002      	b.n	8010486 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010480:	4b12      	ldr	r3, [pc, #72]	@ (80104cc <shci_user_evt_proc+0x94>)
 8010482:	2201      	movs	r2, #1
 8010484:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8010486:	4b11      	ldr	r3, [pc, #68]	@ (80104cc <shci_user_evt_proc+0x94>)
 8010488:	781b      	ldrb	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d004      	beq.n	8010498 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	4618      	mov	r0, r3
 8010492:	f000 fa71 	bl	8010978 <TL_MM_EvtDone>
 8010496:	e004      	b.n	80104a2 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	4619      	mov	r1, r3
 801049c:	480a      	ldr	r0, [pc, #40]	@ (80104c8 <shci_user_evt_proc+0x90>)
 801049e:	f000 fb89 	bl	8010bb4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80104a2:	4809      	ldr	r0, [pc, #36]	@ (80104c8 <shci_user_evt_proc+0x90>)
 80104a4:	f000 fb64 	bl	8010b70 <LST_is_empty>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d107      	bne.n	80104be <shci_user_evt_proc+0x86>
 80104ae:	4b07      	ldr	r3, [pc, #28]	@ (80104cc <shci_user_evt_proc+0x94>)
 80104b0:	781b      	ldrb	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d003      	beq.n	80104be <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 80104b6:	4804      	ldr	r0, [pc, #16]	@ (80104c8 <shci_user_evt_proc+0x90>)
 80104b8:	f7f1 fae7 	bl	8001a8a <shci_notify_asynch_evt>
  }


  return;
 80104bc:	bf00      	nop
 80104be:	bf00      	nop
}
 80104c0:	3710      	adds	r7, #16
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}
 80104c6:	bf00      	nop
 80104c8:	200001c4 	.word	0x200001c4
 80104cc:	200001d4 	.word	0x200001d4
 80104d0:	2000043c 	.word	0x2000043c

080104d4 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b084      	sub	sp, #16
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60ba      	str	r2, [r7, #8]
 80104dc:	607b      	str	r3, [r7, #4]
 80104de:	4603      	mov	r3, r0
 80104e0:	81fb      	strh	r3, [r7, #14]
 80104e2:	460b      	mov	r3, r1
 80104e4:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 80104e6:	2000      	movs	r0, #0
 80104e8:	f000 f868 	bl	80105bc <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80104ec:	4b17      	ldr	r3, [pc, #92]	@ (801054c <shci_send+0x78>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	89fa      	ldrh	r2, [r7, #14]
 80104f2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80104f6:	4b15      	ldr	r3, [pc, #84]	@ (801054c <shci_send+0x78>)
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	7b7a      	ldrb	r2, [r7, #13]
 80104fc:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80104fe:	4b13      	ldr	r3, [pc, #76]	@ (801054c <shci_send+0x78>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	330c      	adds	r3, #12
 8010504:	7b7a      	ldrb	r2, [r7, #13]
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	4618      	mov	r0, r3
 801050a:	f002 fba7 	bl	8012c5c <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 801050e:	4b10      	ldr	r3, [pc, #64]	@ (8010550 <shci_send+0x7c>)
 8010510:	2201      	movs	r2, #1
 8010512:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 8010514:	4b0f      	ldr	r3, [pc, #60]	@ (8010554 <shci_send+0x80>)
 8010516:	691b      	ldr	r3, [r3, #16]
 8010518:	2100      	movs	r1, #0
 801051a:	2000      	movs	r0, #0
 801051c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 801051e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8010522:	f7f1 fac9 	bl	8001ab8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	f103 0008 	add.w	r0, r3, #8
 801052c:	4b07      	ldr	r3, [pc, #28]	@ (801054c <shci_send+0x78>)
 801052e:	6819      	ldr	r1, [r3, #0]
 8010530:	4b06      	ldr	r3, [pc, #24]	@ (801054c <shci_send+0x78>)
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	789b      	ldrb	r3, [r3, #2]
 8010536:	3303      	adds	r3, #3
 8010538:	461a      	mov	r2, r3
 801053a:	f002 fb8f 	bl	8012c5c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801053e:	2001      	movs	r0, #1
 8010540:	f000 f83c 	bl	80105bc <Cmd_SetStatus>

  return;
 8010544:	bf00      	nop
}
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	200001d0 	.word	0x200001d0
 8010550:	20000460 	.word	0x20000460
 8010554:	2000043c 	.word	0x2000043c

08010558 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b086      	sub	sp, #24
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8010560:	4a10      	ldr	r2, [pc, #64]	@ (80105a4 <TlInit+0x4c>)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8010566:	4810      	ldr	r0, [pc, #64]	@ (80105a8 <TlInit+0x50>)
 8010568:	f000 faf2 	bl	8010b50 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 801056c:	2001      	movs	r0, #1
 801056e:	f000 f825 	bl	80105bc <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010572:	4b0e      	ldr	r3, [pc, #56]	@ (80105ac <TlInit+0x54>)
 8010574:	2201      	movs	r2, #1
 8010576:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010578:	4b0d      	ldr	r3, [pc, #52]	@ (80105b0 <TlInit+0x58>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d00c      	beq.n	801059a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8010584:	4b0b      	ldr	r3, [pc, #44]	@ (80105b4 <TlInit+0x5c>)
 8010586:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010588:	4b0b      	ldr	r3, [pc, #44]	@ (80105b8 <TlInit+0x60>)
 801058a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 801058c:	4b08      	ldr	r3, [pc, #32]	@ (80105b0 <TlInit+0x58>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	f107 020c 	add.w	r2, r7, #12
 8010594:	4610      	mov	r0, r2
 8010596:	4798      	blx	r3
  }

  return;
 8010598:	bf00      	nop
 801059a:	bf00      	nop
}
 801059c:	3718      	adds	r7, #24
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}
 80105a2:	bf00      	nop
 80105a4:	200001d0 	.word	0x200001d0
 80105a8:	200001c4 	.word	0x200001c4
 80105ac:	200001d4 	.word	0x200001d4
 80105b0:	2000043c 	.word	0x2000043c
 80105b4:	0801060d 	.word	0x0801060d
 80105b8:	08010625 	.word	0x08010625

080105bc <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	4603      	mov	r3, r0
 80105c4:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 80105c6:	79fb      	ldrb	r3, [r7, #7]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d10b      	bne.n	80105e4 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 80105cc:	4b0d      	ldr	r3, [pc, #52]	@ (8010604 <Cmd_SetStatus+0x48>)
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d003      	beq.n	80105dc <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 80105d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010604 <Cmd_SetStatus+0x48>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	2000      	movs	r0, #0
 80105da:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 80105dc:	4b0a      	ldr	r3, [pc, #40]	@ (8010608 <Cmd_SetStatus+0x4c>)
 80105de:	2200      	movs	r2, #0
 80105e0:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 80105e2:	e00b      	b.n	80105fc <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 80105e4:	4b08      	ldr	r3, [pc, #32]	@ (8010608 <Cmd_SetStatus+0x4c>)
 80105e6:	2201      	movs	r2, #1
 80105e8:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 80105ea:	4b06      	ldr	r3, [pc, #24]	@ (8010604 <Cmd_SetStatus+0x48>)
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d004      	beq.n	80105fc <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80105f2:	4b04      	ldr	r3, [pc, #16]	@ (8010604 <Cmd_SetStatus+0x48>)
 80105f4:	681b      	ldr	r3, [r3, #0]
 80105f6:	2001      	movs	r0, #1
 80105f8:	4798      	blx	r3
  return;
 80105fa:	bf00      	nop
 80105fc:	bf00      	nop
}
 80105fe:	3708      	adds	r7, #8
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	2000045c 	.word	0x2000045c
 8010608:	200001cc 	.word	0x200001cc

0801060c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 801060c:	b580      	push	{r7, lr}
 801060e:	b082      	sub	sp, #8
 8010610:	af00      	add	r7, sp, #0
 8010612:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8010614:	2000      	movs	r0, #0
 8010616:	f7f1 fa44 	bl	8001aa2 <shci_cmd_resp_release>

  return;
 801061a:	bf00      	nop
}
 801061c:	3708      	adds	r7, #8
 801061e:	46bd      	mov	sp, r7
 8010620:	bd80      	pop	{r7, pc}
	...

08010624 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b082      	sub	sp, #8
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 801062c:	6879      	ldr	r1, [r7, #4]
 801062e:	4805      	ldr	r0, [pc, #20]	@ (8010644 <TlUserEvtReceived+0x20>)
 8010630:	f000 fae6 	bl	8010c00 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010634:	4803      	ldr	r0, [pc, #12]	@ (8010644 <TlUserEvtReceived+0x20>)
 8010636:	f7f1 fa28 	bl	8001a8a <shci_notify_asynch_evt>

  return;
 801063a:	bf00      	nop
}
 801063c:	3708      	adds	r7, #8
 801063e:	46bd      	mov	sp, r7
 8010640:	bd80      	pop	{r7, pc}
 8010642:	bf00      	nop
 8010644:	200001c4 	.word	0x200001c4

08010648 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4a05      	ldr	r2, [pc, #20]	@ (8010668 <shci_register_io_bus+0x20>)
 8010654:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	4a04      	ldr	r2, [pc, #16]	@ (801066c <shci_register_io_bus+0x24>)
 801065a:	611a      	str	r2, [r3, #16]

  return;
 801065c:	bf00      	nop
}
 801065e:	370c      	adds	r7, #12
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr
 8010668:	08010805 	.word	0x08010805
 801066c:	08010859 	.word	0x08010859

08010670 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010670:	b580      	push	{r7, lr}
 8010672:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8010674:	f001 f94a 	bl	801190c <HW_IPCC_Enable>

  return;
 8010678:	bf00      	nop
}
 801067a:	bd80      	pop	{r7, pc}

0801067c <TL_Init>:


void TL_Init( void )
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010680:	4b10      	ldr	r3, [pc, #64]	@ (80106c4 <TL_Init+0x48>)
 8010682:	4a11      	ldr	r2, [pc, #68]	@ (80106c8 <TL_Init+0x4c>)
 8010684:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8010686:	4b0f      	ldr	r3, [pc, #60]	@ (80106c4 <TL_Init+0x48>)
 8010688:	4a10      	ldr	r2, [pc, #64]	@ (80106cc <TL_Init+0x50>)
 801068a:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 801068c:	4b0d      	ldr	r3, [pc, #52]	@ (80106c4 <TL_Init+0x48>)
 801068e:	4a10      	ldr	r2, [pc, #64]	@ (80106d0 <TL_Init+0x54>)
 8010690:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8010692:	4b0c      	ldr	r3, [pc, #48]	@ (80106c4 <TL_Init+0x48>)
 8010694:	4a0f      	ldr	r2, [pc, #60]	@ (80106d4 <TL_Init+0x58>)
 8010696:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010698:	4b0a      	ldr	r3, [pc, #40]	@ (80106c4 <TL_Init+0x48>)
 801069a:	4a0f      	ldr	r2, [pc, #60]	@ (80106d8 <TL_Init+0x5c>)
 801069c:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 801069e:	4b09      	ldr	r3, [pc, #36]	@ (80106c4 <TL_Init+0x48>)
 80106a0:	4a0e      	ldr	r2, [pc, #56]	@ (80106dc <TL_Init+0x60>)
 80106a2:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80106a4:	4b07      	ldr	r3, [pc, #28]	@ (80106c4 <TL_Init+0x48>)
 80106a6:	4a0e      	ldr	r2, [pc, #56]	@ (80106e0 <TL_Init+0x64>)
 80106a8:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 80106aa:	4b06      	ldr	r3, [pc, #24]	@ (80106c4 <TL_Init+0x48>)
 80106ac:	4a0d      	ldr	r2, [pc, #52]	@ (80106e4 <TL_Init+0x68>)
 80106ae:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 80106b0:	4b04      	ldr	r3, [pc, #16]	@ (80106c4 <TL_Init+0x48>)
 80106b2:	4a0d      	ldr	r2, [pc, #52]	@ (80106e8 <TL_Init+0x6c>)
 80106b4:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 80106b6:	4b03      	ldr	r3, [pc, #12]	@ (80106c4 <TL_Init+0x48>)
 80106b8:	4a0c      	ldr	r2, [pc, #48]	@ (80106ec <TL_Init+0x70>)
 80106ba:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 80106bc:	f001 f93a 	bl	8011934 <HW_IPCC_Init>

  return;
 80106c0:	bf00      	nop
}
 80106c2:	bd80      	pop	{r7, pc}
 80106c4:	20030000 	.word	0x20030000
 80106c8:	20030028 	.word	0x20030028
 80106cc:	20030048 	.word	0x20030048
 80106d0:	20030058 	.word	0x20030058
 80106d4:	20030068 	.word	0x20030068
 80106d8:	20030070 	.word	0x20030070
 80106dc:	20030078 	.word	0x20030078
 80106e0:	20030080 	.word	0x20030080
 80106e4:	2003009c 	.word	0x2003009c
 80106e8:	200300a0 	.word	0x200300a0
 80106ec:	200300ac 	.word	0x200300ac

080106f0 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b084      	sub	sp, #16
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 80106fc:	4811      	ldr	r0, [pc, #68]	@ (8010744 <TL_BLE_Init+0x54>)
 80106fe:	f000 fa27 	bl	8010b50 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8010702:	4b11      	ldr	r3, [pc, #68]	@ (8010748 <TL_BLE_Init+0x58>)
 8010704:	685b      	ldr	r3, [r3, #4]
 8010706:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	689a      	ldr	r2, [r3, #8]
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8010710:	68fb      	ldr	r3, [r7, #12]
 8010712:	68da      	ldr	r2, [r3, #12]
 8010714:	68bb      	ldr	r3, [r7, #8]
 8010716:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	4a0c      	ldr	r2, [pc, #48]	@ (801074c <TL_BLE_Init+0x5c>)
 801071c:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	4a08      	ldr	r2, [pc, #32]	@ (8010744 <TL_BLE_Init+0x54>)
 8010722:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8010724:	f001 f91c 	bl	8011960 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a08      	ldr	r2, [pc, #32]	@ (8010750 <TL_BLE_Init+0x60>)
 801072e:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	685b      	ldr	r3, [r3, #4]
 8010734:	4a07      	ldr	r2, [pc, #28]	@ (8010754 <TL_BLE_Init+0x64>)
 8010736:	6013      	str	r3, [r2, #0]

  return 0;
 8010738:	2300      	movs	r3, #0
}
 801073a:	4618      	mov	r0, r3
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	200300c8 	.word	0x200300c8
 8010748:	20030000 	.word	0x20030000
 801074c:	20030a58 	.word	0x20030a58
 8010750:	2000046c 	.word	0x2000046c
 8010754:	20000470 	.word	0x20000470

08010758 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
 8010760:	460b      	mov	r3, r1
 8010762:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8010764:	4b09      	ldr	r3, [pc, #36]	@ (801078c <TL_BLE_SendCmd+0x34>)
 8010766:	685b      	ldr	r3, [r3, #4]
 8010768:	681b      	ldr	r3, [r3, #0]
 801076a:	2201      	movs	r2, #1
 801076c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 801076e:	4b07      	ldr	r3, [pc, #28]	@ (801078c <TL_BLE_SendCmd+0x34>)
 8010770:	685b      	ldr	r3, [r3, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4619      	mov	r1, r3
 8010776:	2001      	movs	r0, #1
 8010778:	f000 f96c 	bl	8010a54 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 801077c:	f001 f8fa 	bl	8011974 <HW_IPCC_BLE_SendCmd>

  return 0;
 8010780:	2300      	movs	r3, #0
}
 8010782:	4618      	mov	r0, r3
 8010784:	3708      	adds	r7, #8
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	20030000 	.word	0x20030000

08010790 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8010796:	e01c      	b.n	80107d2 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010798:	1d3b      	adds	r3, r7, #4
 801079a:	4619      	mov	r1, r3
 801079c:	4812      	ldr	r0, [pc, #72]	@ (80107e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801079e:	f000 fa76 	bl	8010c8e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	7a5b      	ldrb	r3, [r3, #9]
 80107a6:	2b0f      	cmp	r3, #15
 80107a8:	d003      	beq.n	80107b2 <HW_IPCC_BLE_RxEvtNot+0x22>
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	7a5b      	ldrb	r3, [r3, #9]
 80107ae:	2b0e      	cmp	r3, #14
 80107b0:	d105      	bne.n	80107be <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4619      	mov	r1, r3
 80107b6:	2002      	movs	r0, #2
 80107b8:	f000 f94c 	bl	8010a54 <OutputDbgTrace>
 80107bc:	e004      	b.n	80107c8 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	4619      	mov	r1, r3
 80107c2:	2003      	movs	r0, #3
 80107c4:	f000 f946 	bl	8010a54 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80107c8:	4b08      	ldr	r3, [pc, #32]	@ (80107ec <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	4610      	mov	r0, r2
 80107d0:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80107d2:	4805      	ldr	r0, [pc, #20]	@ (80107e8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80107d4:	f000 f9cc 	bl	8010b70 <LST_is_empty>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d0dc      	beq.n	8010798 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80107de:	bf00      	nop
}
 80107e0:	3708      	adds	r7, #8
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}
 80107e6:	bf00      	nop
 80107e8:	200300c8 	.word	0x200300c8
 80107ec:	2000046c 	.word	0x2000046c

080107f0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80107f4:	4b02      	ldr	r3, [pc, #8]	@ (8010800 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4798      	blx	r3

  return;
 80107fa:	bf00      	nop
}
 80107fc:	bd80      	pop	{r7, pc}
 80107fe:	bf00      	nop
 8010800:	20000470 	.word	0x20000470

08010804 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8010804:	b580      	push	{r7, lr}
 8010806:	b084      	sub	sp, #16
 8010808:	af00      	add	r7, sp, #0
 801080a:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8010810:	480d      	ldr	r0, [pc, #52]	@ (8010848 <TL_SYS_Init+0x44>)
 8010812:	f000 f99d 	bl	8010b50 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8010816:	4b0d      	ldr	r3, [pc, #52]	@ (801084c <TL_SYS_Init+0x48>)
 8010818:	68db      	ldr	r3, [r3, #12]
 801081a:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	689a      	ldr	r2, [r3, #8]
 8010820:	68bb      	ldr	r3, [r7, #8]
 8010822:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8010824:	68bb      	ldr	r3, [r7, #8]
 8010826:	4a08      	ldr	r2, [pc, #32]	@ (8010848 <TL_SYS_Init+0x44>)
 8010828:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801082a:	f001 f8c5 	bl	80119b8 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a07      	ldr	r2, [pc, #28]	@ (8010850 <TL_SYS_Init+0x4c>)
 8010834:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	685b      	ldr	r3, [r3, #4]
 801083a:	4a06      	ldr	r2, [pc, #24]	@ (8010854 <TL_SYS_Init+0x50>)
 801083c:	6013      	str	r3, [r2, #0]

  return 0;
 801083e:	2300      	movs	r3, #0
}
 8010840:	4618      	mov	r0, r3
 8010842:	3710      	adds	r7, #16
 8010844:	46bd      	mov	sp, r7
 8010846:	bd80      	pop	{r7, pc}
 8010848:	200300d0 	.word	0x200300d0
 801084c:	20030000 	.word	0x20030000
 8010850:	20000474 	.word	0x20000474
 8010854:	20000478 	.word	0x20000478

08010858 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8010858:	b580      	push	{r7, lr}
 801085a:	b082      	sub	sp, #8
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
 8010860:	460b      	mov	r3, r1
 8010862:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8010864:	4b09      	ldr	r3, [pc, #36]	@ (801088c <TL_SYS_SendCmd+0x34>)
 8010866:	68db      	ldr	r3, [r3, #12]
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	2210      	movs	r2, #16
 801086c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 801086e:	4b07      	ldr	r3, [pc, #28]	@ (801088c <TL_SYS_SendCmd+0x34>)
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	4619      	mov	r1, r3
 8010876:	2004      	movs	r0, #4
 8010878:	f000 f8ec 	bl	8010a54 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 801087c:	f001 f8a6 	bl	80119cc <HW_IPCC_SYS_SendCmd>

  return 0;
 8010880:	2300      	movs	r3, #0
}
 8010882:	4618      	mov	r0, r3
 8010884:	3708      	adds	r7, #8
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
 801088a:	bf00      	nop
 801088c:	20030000 	.word	0x20030000

08010890 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010890:	b580      	push	{r7, lr}
 8010892:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8010894:	4b07      	ldr	r3, [pc, #28]	@ (80108b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010896:	68db      	ldr	r3, [r3, #12]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4619      	mov	r1, r3
 801089c:	2005      	movs	r0, #5
 801089e:	f000 f8d9 	bl	8010a54 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80108a2:	4b05      	ldr	r3, [pc, #20]	@ (80108b8 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a03      	ldr	r2, [pc, #12]	@ (80108b4 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80108a8:	68d2      	ldr	r2, [r2, #12]
 80108aa:	6812      	ldr	r2, [r2, #0]
 80108ac:	4610      	mov	r0, r2
 80108ae:	4798      	blx	r3

  return;
 80108b0:	bf00      	nop
}
 80108b2:	bd80      	pop	{r7, pc}
 80108b4:	20030000 	.word	0x20030000
 80108b8:	20000474 	.word	0x20000474

080108bc <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80108c2:	e00e      	b.n	80108e2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80108c4:	1d3b      	adds	r3, r7, #4
 80108c6:	4619      	mov	r1, r3
 80108c8:	480b      	ldr	r0, [pc, #44]	@ (80108f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80108ca:	f000 f9e0 	bl	8010c8e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	4619      	mov	r1, r3
 80108d2:	2006      	movs	r0, #6
 80108d4:	f000 f8be 	bl	8010a54 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80108d8:	4b08      	ldr	r3, [pc, #32]	@ (80108fc <HW_IPCC_SYS_EvtNot+0x40>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	687a      	ldr	r2, [r7, #4]
 80108de:	4610      	mov	r0, r2
 80108e0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80108e2:	4805      	ldr	r0, [pc, #20]	@ (80108f8 <HW_IPCC_SYS_EvtNot+0x3c>)
 80108e4:	f000 f944 	bl	8010b70 <LST_is_empty>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d0ea      	beq.n	80108c4 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80108ee:	bf00      	nop
}
 80108f0:	3708      	adds	r7, #8
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	200300d0 	.word	0x200300d0
 80108fc:	20000478 	.word	0x20000478

08010900 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8010908:	4817      	ldr	r0, [pc, #92]	@ (8010968 <TL_MM_Init+0x68>)
 801090a:	f000 f921 	bl	8010b50 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 801090e:	4817      	ldr	r0, [pc, #92]	@ (801096c <TL_MM_Init+0x6c>)
 8010910:	f000 f91e 	bl	8010b50 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8010914:	4b16      	ldr	r3, [pc, #88]	@ (8010970 <TL_MM_Init+0x70>)
 8010916:	691b      	ldr	r3, [r3, #16]
 8010918:	4a16      	ldr	r2, [pc, #88]	@ (8010974 <TL_MM_Init+0x74>)
 801091a:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 801091c:	4b15      	ldr	r3, [pc, #84]	@ (8010974 <TL_MM_Init+0x74>)
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	687a      	ldr	r2, [r7, #4]
 8010922:	6892      	ldr	r2, [r2, #8]
 8010924:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8010926:	4b13      	ldr	r3, [pc, #76]	@ (8010974 <TL_MM_Init+0x74>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	687a      	ldr	r2, [r7, #4]
 801092c:	68d2      	ldr	r2, [r2, #12]
 801092e:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8010930:	4b10      	ldr	r3, [pc, #64]	@ (8010974 <TL_MM_Init+0x74>)
 8010932:	681b      	ldr	r3, [r3, #0]
 8010934:	4a0c      	ldr	r2, [pc, #48]	@ (8010968 <TL_MM_Init+0x68>)
 8010936:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8010938:	4b0e      	ldr	r3, [pc, #56]	@ (8010974 <TL_MM_Init+0x74>)
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	687a      	ldr	r2, [r7, #4]
 801093e:	6812      	ldr	r2, [r2, #0]
 8010940:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8010942:	4b0c      	ldr	r3, [pc, #48]	@ (8010974 <TL_MM_Init+0x74>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	687a      	ldr	r2, [r7, #4]
 8010948:	6852      	ldr	r2, [r2, #4]
 801094a:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 801094c:	4b09      	ldr	r3, [pc, #36]	@ (8010974 <TL_MM_Init+0x74>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	687a      	ldr	r2, [r7, #4]
 8010952:	6912      	ldr	r2, [r2, #16]
 8010954:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8010956:	4b07      	ldr	r3, [pc, #28]	@ (8010974 <TL_MM_Init+0x74>)
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	687a      	ldr	r2, [r7, #4]
 801095c:	6952      	ldr	r2, [r2, #20]
 801095e:	619a      	str	r2, [r3, #24]

  return;
 8010960:	bf00      	nop
}
 8010962:	3708      	adds	r7, #8
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}
 8010968:	200300b8 	.word	0x200300b8
 801096c:	20000464 	.word	0x20000464
 8010970:	20030000 	.word	0x20030000
 8010974:	2000047c 	.word	0x2000047c

08010978 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010980:	6879      	ldr	r1, [r7, #4]
 8010982:	4807      	ldr	r0, [pc, #28]	@ (80109a0 <TL_MM_EvtDone+0x28>)
 8010984:	f000 f93c 	bl	8010c00 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010988:	6879      	ldr	r1, [r7, #4]
 801098a:	2000      	movs	r0, #0
 801098c:	f000 f862 	bl	8010a54 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010990:	4804      	ldr	r0, [pc, #16]	@ (80109a4 <TL_MM_EvtDone+0x2c>)
 8010992:	f001 f841 	bl	8011a18 <HW_IPCC_MM_SendFreeBuf>

  return;
 8010996:	bf00      	nop
}
 8010998:	3708      	adds	r7, #8
 801099a:	46bd      	mov	sp, r7
 801099c:	bd80      	pop	{r7, pc}
 801099e:	bf00      	nop
 80109a0:	20000464 	.word	0x20000464
 80109a4:	080109a9 	.word	0x080109a9

080109a8 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 80109a8:	b580      	push	{r7, lr}
 80109aa:	b082      	sub	sp, #8
 80109ac:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80109ae:	e00c      	b.n	80109ca <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 80109b0:	1d3b      	adds	r3, r7, #4
 80109b2:	4619      	mov	r1, r3
 80109b4:	480a      	ldr	r0, [pc, #40]	@ (80109e0 <SendFreeBuf+0x38>)
 80109b6:	f000 f96a 	bl	8010c8e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80109ba:	4b0a      	ldr	r3, [pc, #40]	@ (80109e4 <SendFreeBuf+0x3c>)
 80109bc:	691b      	ldr	r3, [r3, #16]
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	687a      	ldr	r2, [r7, #4]
 80109c2:	4611      	mov	r1, r2
 80109c4:	4618      	mov	r0, r3
 80109c6:	f000 f91b 	bl	8010c00 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80109ca:	4805      	ldr	r0, [pc, #20]	@ (80109e0 <SendFreeBuf+0x38>)
 80109cc:	f000 f8d0 	bl	8010b70 <LST_is_empty>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d0ec      	beq.n	80109b0 <SendFreeBuf+0x8>
  }

  return;
 80109d6:	bf00      	nop
}
 80109d8:	3708      	adds	r7, #8
 80109da:	46bd      	mov	sp, r7
 80109dc:	bd80      	pop	{r7, pc}
 80109de:	bf00      	nop
 80109e0:	20000464 	.word	0x20000464
 80109e4:	20030000 	.word	0x20030000

080109e8 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80109ec:	4805      	ldr	r0, [pc, #20]	@ (8010a04 <TL_TRACES_Init+0x1c>)
 80109ee:	f000 f8af 	bl	8010b50 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80109f2:	4b05      	ldr	r3, [pc, #20]	@ (8010a08 <TL_TRACES_Init+0x20>)
 80109f4:	695b      	ldr	r3, [r3, #20]
 80109f6:	4a03      	ldr	r2, [pc, #12]	@ (8010a04 <TL_TRACES_Init+0x1c>)
 80109f8:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80109fa:	f001 f843 	bl	8011a84 <HW_IPCC_TRACES_Init>

  return;
 80109fe:	bf00      	nop
}
 8010a00:	bd80      	pop	{r7, pc}
 8010a02:	bf00      	nop
 8010a04:	200300c0 	.word	0x200300c0
 8010a08:	20030000 	.word	0x20030000

08010a0c <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b082      	sub	sp, #8
 8010a10:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010a12:	e008      	b.n	8010a26 <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8010a14:	1d3b      	adds	r3, r7, #4
 8010a16:	4619      	mov	r1, r3
 8010a18:	4808      	ldr	r0, [pc, #32]	@ (8010a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8010a1a:	f000 f938 	bl	8010c8e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	4618      	mov	r0, r3
 8010a22:	f000 f80d 	bl	8010a40 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8010a26:	4805      	ldr	r0, [pc, #20]	@ (8010a3c <HW_IPCC_TRACES_EvtNot+0x30>)
 8010a28:	f000 f8a2 	bl	8010b70 <LST_is_empty>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d0f0      	beq.n	8010a14 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8010a32:	bf00      	nop
}
 8010a34:	3708      	adds	r7, #8
 8010a36:	46bd      	mov	sp, r7
 8010a38:	bd80      	pop	{r7, pc}
 8010a3a:	bf00      	nop
 8010a3c:	200300c0 	.word	0x200300c0

08010a40 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8010a40:	b480      	push	{r7}
 8010a42:	b083      	sub	sp, #12
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8010a48:	bf00      	nop
 8010a4a:	370c      	adds	r7, #12
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a52:	4770      	bx	lr

08010a54 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8010a54:	b480      	push	{r7}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
 8010a5a:	4603      	mov	r3, r0
 8010a5c:	6039      	str	r1, [r7, #0]
 8010a5e:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8010a60:	79fb      	ldrb	r3, [r7, #7]
 8010a62:	2b06      	cmp	r3, #6
 8010a64:	d845      	bhi.n	8010af2 <OutputDbgTrace+0x9e>
 8010a66:	a201      	add	r2, pc, #4	@ (adr r2, 8010a6c <OutputDbgTrace+0x18>)
 8010a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a6c:	08010a89 	.word	0x08010a89
 8010a70:	08010aad 	.word	0x08010aad
 8010a74:	08010ab3 	.word	0x08010ab3
 8010a78:	08010ac7 	.word	0x08010ac7
 8010a7c:	08010ad3 	.word	0x08010ad3
 8010a80:	08010ad9 	.word	0x08010ad9
 8010a84:	08010ae7 	.word	0x08010ae7
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a88:	683b      	ldr	r3, [r7, #0]
 8010a8a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	7a5b      	ldrb	r3, [r3, #9]
 8010a90:	2bff      	cmp	r3, #255	@ 0xff
 8010a92:	d005      	beq.n	8010aa0 <OutputDbgTrace+0x4c>
 8010a94:	2bff      	cmp	r3, #255	@ 0xff
 8010a96:	dc05      	bgt.n	8010aa4 <OutputDbgTrace+0x50>
 8010a98:	2b0e      	cmp	r3, #14
 8010a9a:	d005      	beq.n	8010aa8 <OutputDbgTrace+0x54>
 8010a9c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010a9e:	e001      	b.n	8010aa4 <OutputDbgTrace+0x50>
          break;
 8010aa0:	bf00      	nop
 8010aa2:	e027      	b.n	8010af4 <OutputDbgTrace+0xa0>
          break;
 8010aa4:	bf00      	nop
 8010aa6:	e025      	b.n	8010af4 <OutputDbgTrace+0xa0>
          break;
 8010aa8:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010aaa:	e023      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010ab0:	e020      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	7a5b      	ldrb	r3, [r3, #9]
 8010aba:	2b0e      	cmp	r3, #14
 8010abc:	d001      	beq.n	8010ac2 <OutputDbgTrace+0x6e>
 8010abe:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010ac0:	e000      	b.n	8010ac4 <OutputDbgTrace+0x70>
          break;
 8010ac2:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ac4:	e016      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ac6:	683b      	ldr	r3, [r7, #0]
 8010ac8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	7a5b      	ldrb	r3, [r3, #9]
 8010ace:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ad0:	e010      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010ad6:	e00d      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	7a5b      	ldrb	r3, [r3, #9]
 8010ae0:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010ae2:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010ae4:	e006      	b.n	8010af4 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010ae6:	683b      	ldr	r3, [r7, #0]
 8010ae8:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	7a5b      	ldrb	r3, [r3, #9]
 8010aee:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010af0:	e000      	b.n	8010af4 <OutputDbgTrace+0xa0>

    default:
      break;
 8010af2:	bf00      	nop
  }

  return;
 8010af4:	bf00      	nop
}
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010b00:	b480      	push	{r7}
 8010b02:	b085      	sub	sp, #20
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	4603      	mov	r3, r0
 8010b08:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8010b48 <OTP_Read+0x48>)
 8010b0c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010b0e:	e002      	b.n	8010b16 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	3b08      	subs	r3, #8
 8010b14:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	3307      	adds	r3, #7
 8010b1a:	781b      	ldrb	r3, [r3, #0]
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d003      	beq.n	8010b2a <OTP_Read+0x2a>
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	4a09      	ldr	r2, [pc, #36]	@ (8010b4c <OTP_Read+0x4c>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d1f2      	bne.n	8010b10 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	3307      	adds	r3, #7
 8010b2e:	781b      	ldrb	r3, [r3, #0]
 8010b30:	79fa      	ldrb	r2, [r7, #7]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d001      	beq.n	8010b3a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010b36:	2300      	movs	r3, #0
 8010b38:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
}
 8010b3c:	4618      	mov	r0, r3
 8010b3e:	3714      	adds	r7, #20
 8010b40:	46bd      	mov	sp, r7
 8010b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b46:	4770      	bx	lr
 8010b48:	1fff73f8 	.word	0x1fff73f8
 8010b4c:	1fff7000 	.word	0x1fff7000

08010b50 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b083      	sub	sp, #12
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	687a      	ldr	r2, [r7, #4]
 8010b5c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	687a      	ldr	r2, [r7, #4]
 8010b62:	605a      	str	r2, [r3, #4]
}
 8010b64:	bf00      	nop
 8010b66:	370c      	adds	r7, #12
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b087      	sub	sp, #28
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b78:	f3ef 8310 	mrs	r3, PRIMASK
 8010b7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010b80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b82:	b672      	cpsid	i
}
 8010b84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	687a      	ldr	r2, [r7, #4]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d102      	bne.n	8010b96 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010b90:	2301      	movs	r3, #1
 8010b92:	75fb      	strb	r3, [r7, #23]
 8010b94:	e001      	b.n	8010b9a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010b96:	2300      	movs	r3, #0
 8010b98:	75fb      	strb	r3, [r7, #23]
 8010b9a:	693b      	ldr	r3, [r7, #16]
 8010b9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	f383 8810 	msr	PRIMASK, r3
}
 8010ba4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	371c      	adds	r7, #28
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b087      	sub	sp, #28
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8010bc2:	60fb      	str	r3, [r7, #12]
  return(result);
 8010bc4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010bc6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bc8:	b672      	cpsid	i
}
 8010bca:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681a      	ldr	r2, [r3, #0]
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	687a      	ldr	r2, [r7, #4]
 8010bd8:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	683a      	ldr	r2, [r7, #0]
 8010bde:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010be0:	683b      	ldr	r3, [r7, #0]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	605a      	str	r2, [r3, #4]
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bec:	693b      	ldr	r3, [r7, #16]
 8010bee:	f383 8810 	msr	PRIMASK, r3
}
 8010bf2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010bf4:	bf00      	nop
 8010bf6:	371c      	adds	r7, #28
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bfe:	4770      	bx	lr

08010c00 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010c00:	b480      	push	{r7}
 8010c02:	b087      	sub	sp, #28
 8010c04:	af00      	add	r7, sp, #0
 8010c06:	6078      	str	r0, [r7, #4]
 8010c08:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8010c0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c10:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010c12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c14:	b672      	cpsid	i
}
 8010c16:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010c18:	683b      	ldr	r3, [r7, #0]
 8010c1a:	687a      	ldr	r2, [r7, #4]
 8010c1c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	685a      	ldr	r2, [r3, #4]
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	683a      	ldr	r2, [r7, #0]
 8010c2a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010c2c:	683b      	ldr	r3, [r7, #0]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	683a      	ldr	r2, [r7, #0]
 8010c32:	601a      	str	r2, [r3, #0]
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c38:	693b      	ldr	r3, [r7, #16]
 8010c3a:	f383 8810 	msr	PRIMASK, r3
}
 8010c3e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010c40:	bf00      	nop
 8010c42:	371c      	adds	r7, #28
 8010c44:	46bd      	mov	sp, r7
 8010c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4a:	4770      	bx	lr

08010c4c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010c4c:	b480      	push	{r7}
 8010c4e:	b087      	sub	sp, #28
 8010c50:	af00      	add	r7, sp, #0
 8010c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c54:	f3ef 8310 	mrs	r3, PRIMASK
 8010c58:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c5a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010c5c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c5e:	b672      	cpsid	i
}
 8010c60:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	685b      	ldr	r3, [r3, #4]
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	6812      	ldr	r2, [r2, #0]
 8010c6a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	6852      	ldr	r2, [r2, #4]
 8010c74:	605a      	str	r2, [r3, #4]
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c7a:	693b      	ldr	r3, [r7, #16]
 8010c7c:	f383 8810 	msr	PRIMASK, r3
}
 8010c80:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010c82:	bf00      	nop
 8010c84:	371c      	adds	r7, #28
 8010c86:	46bd      	mov	sp, r7
 8010c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8c:	4770      	bx	lr

08010c8e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010c8e:	b580      	push	{r7, lr}
 8010c90:	b086      	sub	sp, #24
 8010c92:	af00      	add	r7, sp, #0
 8010c94:	6078      	str	r0, [r7, #4]
 8010c96:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c98:	f3ef 8310 	mrs	r3, PRIMASK
 8010c9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c9e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010ca2:	b672      	cpsid	i
}
 8010ca4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681a      	ldr	r2, [r3, #0]
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	681b      	ldr	r3, [r3, #0]
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f7ff ffca 	bl	8010c4c <LST_remove_node>
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	f383 8810 	msr	PRIMASK, r3
}
 8010cc2:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010cc4:	bf00      	nop
 8010cc6:	3718      	adds	r7, #24
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010ccc:	b480      	push	{r7}
 8010cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010cd0:	4b03      	ldr	r3, [pc, #12]	@ (8010ce0 <LL_FLASH_GetUDN+0x14>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
 8010cde:	bf00      	nop
 8010ce0:	1fff7580 	.word	0x1fff7580

08010ce4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010ce8:	4b03      	ldr	r3, [pc, #12]	@ (8010cf8 <LL_FLASH_GetDeviceID+0x14>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	b2db      	uxtb	r3, r3
}
 8010cee:	4618      	mov	r0, r3
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cf6:	4770      	bx	lr
 8010cf8:	1fff7584 	.word	0x1fff7584

08010cfc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010cfc:	b480      	push	{r7}
 8010cfe:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010d00:	4b03      	ldr	r3, [pc, #12]	@ (8010d10 <LL_FLASH_GetSTCompanyID+0x14>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	0a1b      	lsrs	r3, r3, #8
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0e:	4770      	bx	lr
 8010d10:	1fff7584 	.word	0x1fff7584

08010d14 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010d14:	b5b0      	push	{r4, r5, r7, lr}
 8010d16:	b090      	sub	sp, #64	@ 0x40
 8010d18:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010d1a:	2392      	movs	r3, #146	@ 0x92
 8010d1c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010d20:	4b25      	ldr	r3, [pc, #148]	@ (8010db8 <APP_BLE_Init+0xa4>)
 8010d22:	1d3c      	adds	r4, r7, #4
 8010d24:	461d      	mov	r5, r3
 8010d26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010d30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010d32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010d36:	c403      	stmia	r4!, {r0, r1}
 8010d38:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8010d3a:	f000 f913 	bl	8010f64 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8010d3e:	2101      	movs	r1, #1
 8010d40:	2002      	movs	r0, #2
 8010d42:	f001 fc27 	bl	8012594 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010d46:	4a1d      	ldr	r2, [pc, #116]	@ (8010dbc <APP_BLE_Init+0xa8>)
 8010d48:	2100      	movs	r1, #0
 8010d4a:	2002      	movs	r0, #2
 8010d4c:	f001 fd4e 	bl	80127ec <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010d50:	1d3b      	adds	r3, r7, #4
 8010d52:	4618      	mov	r0, r3
 8010d54:	f7ff f8c6 	bl	800fee4 <SHCI_C2_BLE_Init>
 8010d58:	4603      	mov	r3, r0
 8010d5a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8010d5e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d001      	beq.n	8010d6a <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010d66:	f7f1 fb83 	bl	8002470 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8010d6a:	f000 f911 	bl	8010f90 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010d6e:	f7ff f813 	bl	800fd98 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010d72:	4b13      	ldr	r3, [pc, #76]	@ (8010dc0 <APP_BLE_Init+0xac>)
 8010d74:	2200      	movs	r2, #0
 8010d76:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010d7a:	4b11      	ldr	r3, [pc, #68]	@ (8010dc0 <APP_BLE_Init+0xac>)
 8010d7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d80:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8010d82:	4a10      	ldr	r2, [pc, #64]	@ (8010dc4 <APP_BLE_Init+0xb0>)
 8010d84:	2100      	movs	r1, #0
 8010d86:	2001      	movs	r0, #1
 8010d88:	f001 fd30 	bl	80127ec <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8010d8c:	2006      	movs	r0, #6
 8010d8e:	f7fe fe77 	bl	800fa80 <aci_hal_set_radio_activity_mask>
 8010d92:	4603      	mov	r3, r0
 8010d94:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8010d98:	f000 facc 	bl	8011334 <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8010d9c:	4b08      	ldr	r3, [pc, #32]	@ (8010dc0 <APP_BLE_Init+0xac>)
 8010d9e:	2200      	movs	r2, #0
 8010da0:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8010da2:	4b07      	ldr	r3, [pc, #28]	@ (8010dc0 <APP_BLE_Init+0xac>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8010da8:	2001      	movs	r0, #1
 8010daa:	f000 f9a5 	bl	80110f8 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8010dae:	bf00      	nop
}
 8010db0:	3740      	adds	r7, #64	@ 0x40
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bdb0      	pop	{r4, r5, r7, pc}
 8010db6:	bf00      	nop
 8010db8:	08012cd8 	.word	0x08012cd8
 8010dbc:	08010101 	.word	0x08010101
 8010dc0:	20000488 	.word	0x20000488
 8010dc4:	080111e1 	.word	0x080111e1

08010dc8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010dc8:	b580      	push	{r7, lr}
 8010dca:	b08a      	sub	sp, #40	@ 0x28
 8010dcc:	af00      	add	r7, sp, #0
 8010dce:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010dd0:	2392      	movs	r3, #146	@ 0x92
 8010dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010ddc:	6a3b      	ldr	r3, [r7, #32]
 8010dde:	781b      	ldrb	r3, [r3, #0]
 8010de0:	2bff      	cmp	r3, #255	@ 0xff
 8010de2:	d053      	beq.n	8010e8c <SVCCTL_App_Notification+0xc4>
 8010de4:	2bff      	cmp	r3, #255	@ 0xff
 8010de6:	f300 80af 	bgt.w	8010f48 <SVCCTL_App_Notification+0x180>
 8010dea:	2b05      	cmp	r3, #5
 8010dec:	d002      	beq.n	8010df4 <SVCCTL_App_Notification+0x2c>
 8010dee:	2b3e      	cmp	r3, #62	@ 0x3e
 8010df0:	d020      	beq.n	8010e34 <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010df2:	e0a9      	b.n	8010f48 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	3302      	adds	r3, #2
 8010df8:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010e00:	b29a      	uxth	r2, r3
 8010e02:	4b55      	ldr	r3, [pc, #340]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e04:	8adb      	ldrh	r3, [r3, #22]
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d106      	bne.n	8010e18 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010e0a:	4b53      	ldr	r3, [pc, #332]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010e10:	4b51      	ldr	r3, [pc, #324]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e12:	2200      	movs	r2, #0
 8010e14:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8010e18:	2001      	movs	r0, #1
 8010e1a:	f000 f96d 	bl	80110f8 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8010e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e20:	2201      	movs	r2, #1
 8010e22:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010e24:	4b4c      	ldr	r3, [pc, #304]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e26:	8ada      	ldrh	r2, [r3, #22]
 8010e28:	4b4c      	ldr	r3, [pc, #304]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e2a:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8010e2c:	484b      	ldr	r0, [pc, #300]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e2e:	f000 fa6d 	bl	801130c <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8010e32:	e08c      	b.n	8010f4e <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8010e34:	6a3b      	ldr	r3, [r7, #32]
 8010e36:	3302      	adds	r3, #2
 8010e38:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b01      	cmp	r3, #1
 8010e40:	d001      	beq.n	8010e46 <SVCCTL_App_Notification+0x7e>
 8010e42:	2b03      	cmp	r3, #3
          break;
 8010e44:	e021      	b.n	8010e8a <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	3301      	adds	r3, #1
 8010e4a:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010e4c:	4b42      	ldr	r3, [pc, #264]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e4e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010e52:	2b04      	cmp	r3, #4
 8010e54:	d104      	bne.n	8010e60 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8010e56:	4b40      	ldr	r3, [pc, #256]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e58:	2206      	movs	r2, #6
 8010e5a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010e5e:	e003      	b.n	8010e68 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8010e60:	4b3d      	ldr	r3, [pc, #244]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e62:	2205      	movs	r2, #5
 8010e64:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8010e68:	693b      	ldr	r3, [r7, #16]
 8010e6a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010e6e:	b29a      	uxth	r2, r3
 8010e70:	4b39      	ldr	r3, [pc, #228]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e72:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8010e74:	4b39      	ldr	r3, [pc, #228]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e76:	2200      	movs	r2, #0
 8010e78:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010e7a:	4b37      	ldr	r3, [pc, #220]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010e7c:	8ada      	ldrh	r2, [r3, #22]
 8010e7e:	4b37      	ldr	r3, [pc, #220]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e80:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8010e82:	4836      	ldr	r0, [pc, #216]	@ (8010f5c <SVCCTL_App_Notification+0x194>)
 8010e84:	f000 fa42 	bl	801130c <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010e88:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8010e8a:	e060      	b.n	8010f4e <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8010e8c:	6a3b      	ldr	r3, [r7, #32]
 8010e8e:	3302      	adds	r3, #2
 8010e90:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	881b      	ldrh	r3, [r3, #0]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8010e9c:	4293      	cmp	r3, r2
 8010e9e:	d047      	beq.n	8010f30 <SVCCTL_App_Notification+0x168>
 8010ea0:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	dc51      	bgt.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010eac:	d046      	beq.n	8010f3c <SVCCTL_App_Notification+0x174>
 8010eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010eb2:	dc4b      	bgt.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010eb4:	2b04      	cmp	r3, #4
 8010eb6:	d043      	beq.n	8010f40 <SVCCTL_App_Notification+0x178>
 8010eb8:	2b04      	cmp	r3, #4
 8010eba:	db47      	blt.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010ebc:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010ec0:	4293      	cmp	r3, r2
 8010ec2:	dc43      	bgt.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010ec4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ec8:	dd40      	ble.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010eca:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8010ece:	2b09      	cmp	r3, #9
 8010ed0:	d83c      	bhi.n	8010f4c <SVCCTL_App_Notification+0x184>
 8010ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8010ed8 <SVCCTL_App_Notification+0x110>)
 8010ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ed8:	08010f29 	.word	0x08010f29
 8010edc:	08010f01 	.word	0x08010f01
 8010ee0:	08010f4d 	.word	0x08010f4d
 8010ee4:	08010f4d 	.word	0x08010f4d
 8010ee8:	08010f4d 	.word	0x08010f4d
 8010eec:	08010f4d 	.word	0x08010f4d
 8010ef0:	08010f45 	.word	0x08010f45
 8010ef4:	08010f4d 	.word	0x08010f4d
 8010ef8:	08010f15 	.word	0x08010f15
 8010efc:	08010f45 	.word	0x08010f45
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8010f00:	4b15      	ldr	r3, [pc, #84]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010f02:	8adb      	ldrh	r3, [r3, #22]
 8010f04:	4916      	ldr	r1, [pc, #88]	@ (8010f60 <SVCCTL_App_Notification+0x198>)
 8010f06:	4618      	mov	r0, r3
 8010f08:	f7fd ffbc 	bl	800ee84 <aci_gap_pass_key_resp>
 8010f0c:	4603      	mov	r3, r0
 8010f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010f12:	e018      	b.n	8010f46 <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010f14:	4b10      	ldr	r3, [pc, #64]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010f16:	8adb      	ldrh	r3, [r3, #22]
 8010f18:	2101      	movs	r1, #1
 8010f1a:	4618      	mov	r0, r3
 8010f1c:	f7fe f95c 	bl	800f1d8 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010f20:	4603      	mov	r3, r0
 8010f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010f26:	e00e      	b.n	8010f46 <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	3302      	adds	r3, #2
 8010f2c:	61bb      	str	r3, [r7, #24]
          break;
 8010f2e:	e00a      	b.n	8010f46 <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010f30:	4b09      	ldr	r3, [pc, #36]	@ (8010f58 <SVCCTL_App_Notification+0x190>)
 8010f32:	8adb      	ldrh	r3, [r3, #22]
 8010f34:	4618      	mov	r0, r3
 8010f36:	f7fe fc62 	bl	800f7fe <aci_gatt_confirm_indication>
        break;
 8010f3a:	e004      	b.n	8010f46 <SVCCTL_App_Notification+0x17e>
          break;
 8010f3c:	bf00      	nop
 8010f3e:	e005      	b.n	8010f4c <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010f40:	bf00      	nop
 8010f42:	e003      	b.n	8010f4c <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8010f44:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010f46:	e001      	b.n	8010f4c <SVCCTL_App_Notification+0x184>
      break;
 8010f48:	bf00      	nop
 8010f4a:	e000      	b.n	8010f4e <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010f4c:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010f4e:	2301      	movs	r3, #1
}
 8010f50:	4618      	mov	r0, r3
 8010f52:	3728      	adds	r7, #40	@ 0x28
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	20000488 	.word	0x20000488
 8010f5c:	2000050c 	.word	0x2000050c
 8010f60:	0001b207 	.word	0x0001b207

08010f64 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010f6a:	4b06      	ldr	r3, [pc, #24]	@ (8010f84 <Ble_Tl_Init+0x20>)
 8010f6c:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8010f6e:	4b06      	ldr	r3, [pc, #24]	@ (8010f88 <Ble_Tl_Init+0x24>)
 8010f70:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8010f72:	463b      	mov	r3, r7
 8010f74:	4619      	mov	r1, r3
 8010f76:	4805      	ldr	r0, [pc, #20]	@ (8010f8c <Ble_Tl_Init+0x28>)
 8010f78:	f7ff f8a6 	bl	80100c8 <hci_init>

  return;
 8010f7c:	bf00      	nop
}
 8010f7e:	3708      	adds	r7, #8
 8010f80:	46bd      	mov	sp, r7
 8010f82:	bd80      	pop	{r7, pc}
 8010f84:	200300d8 	.word	0x200300d8
 8010f88:	08011291 	.word	0x08011291
 8010f8c:	08011259 	.word	0x08011259

08010f90 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8010f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f92:	b08d      	sub	sp, #52	@ 0x34
 8010f94:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010f96:	2300      	movs	r3, #0
 8010f98:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010f9a:	2392      	movs	r3, #146	@ 0x92
 8010f9c:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8010f9e:	f7fe fdc3 	bl	800fb28 <hci_reset>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010fa6:	f000 f8d7 	bl	8011158 <BleGetBdAddress>
 8010faa:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010fac:	693a      	ldr	r2, [r7, #16]
 8010fae:	2106      	movs	r1, #6
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	f7fe fc79 	bl	800f8a8 <aci_hal_write_config_data>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010fba:	4a4a      	ldr	r2, [pc, #296]	@ (80110e4 <Ble_Hci_Gap_Gatt_Init+0x154>)
 8010fbc:	2110      	movs	r1, #16
 8010fbe:	2018      	movs	r0, #24
 8010fc0:	f7fe fc72 	bl	800f8a8 <aci_hal_write_config_data>
 8010fc4:	4603      	mov	r3, r0
 8010fc6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010fc8:	4a47      	ldr	r2, [pc, #284]	@ (80110e8 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8010fca:	2110      	movs	r1, #16
 8010fcc:	2008      	movs	r0, #8
 8010fce:	f7fe fc6b 	bl	800f8a8 <aci_hal_write_config_data>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8010fd6:	211f      	movs	r1, #31
 8010fd8:	2001      	movs	r0, #1
 8010fda:	f7fe fcea 	bl	800f9b2 <aci_hal_set_tx_power_level>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8010fe2:	f7fe f960 	bl	800f2a6 <aci_gatt_init>
 8010fe6:	4603      	mov	r3, r0
 8010fe8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010fee:	7bfb      	ldrb	r3, [r7, #15]
 8010ff0:	f043 0301 	orr.w	r3, r3, #1
 8010ff4:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8010ff6:	7bfb      	ldrb	r3, [r7, #15]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d01f      	beq.n	801103c <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010ffc:	4b3b      	ldr	r3, [pc, #236]	@ (80110ec <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8010ffe:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8011000:	1dba      	adds	r2, r7, #6
 8011002:	7bf8      	ldrb	r0, [r7, #15]
 8011004:	1cbb      	adds	r3, r7, #2
 8011006:	9301      	str	r3, [sp, #4]
 8011008:	1d3b      	adds	r3, r7, #4
 801100a:	9300      	str	r3, [sp, #0]
 801100c:	4613      	mov	r3, r2
 801100e:	2208      	movs	r2, #8
 8011010:	2100      	movs	r1, #0
 8011012:	f7fd ff9e 	bl	800ef52 <aci_gap_init>
 8011016:	4603      	mov	r3, r0
 8011018:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 801101a:	88fc      	ldrh	r4, [r7, #6]
 801101c:	88bd      	ldrh	r5, [r7, #4]
 801101e:	68b8      	ldr	r0, [r7, #8]
 8011020:	f7ef f8ae 	bl	8000180 <strlen>
 8011024:	4603      	mov	r3, r0
 8011026:	b2da      	uxtb	r2, r3
 8011028:	68bb      	ldr	r3, [r7, #8]
 801102a:	9300      	str	r3, [sp, #0]
 801102c:	4613      	mov	r3, r2
 801102e:	2200      	movs	r2, #0
 8011030:	4629      	mov	r1, r5
 8011032:	4620      	mov	r0, r4
 8011034:	f7fe fb3a 	bl	800f6ac <aci_gatt_update_char_value>
 8011038:	4603      	mov	r3, r0
 801103a:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 801103c:	88f8      	ldrh	r0, [r7, #6]
 801103e:	8879      	ldrh	r1, [r7, #2]
 8011040:	463b      	mov	r3, r7
 8011042:	9300      	str	r3, [sp, #0]
 8011044:	2302      	movs	r3, #2
 8011046:	2200      	movs	r2, #0
 8011048:	f7fe fb30 	bl	800f6ac <aci_gatt_update_char_value>
 801104c:	4603      	mov	r3, r0
 801104e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8011050:	2202      	movs	r2, #2
 8011052:	2102      	movs	r1, #2
 8011054:	2000      	movs	r0, #0
 8011056:	f7fe fd8b 	bl	800fb70 <hci_le_set_default_phy>
 801105a:	4603      	mov	r3, r0
 801105c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 801105e:	4b24      	ldr	r3, [pc, #144]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011060:	2201      	movs	r2, #1
 8011062:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8011064:	4b22      	ldr	r3, [pc, #136]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	4618      	mov	r0, r3
 801106a:	f7fd fdf3 	bl	800ec54 <aci_gap_set_io_capability>
 801106e:	4603      	mov	r3, r0
 8011070:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8011072:	4b1f      	ldr	r3, [pc, #124]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011074:	2201      	movs	r2, #1
 8011076:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8011078:	4b1d      	ldr	r3, [pc, #116]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801107a:	2208      	movs	r2, #8
 801107c:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 801107e:	4b1c      	ldr	r3, [pc, #112]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011080:	2210      	movs	r2, #16
 8011082:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8011084:	4b1a      	ldr	r3, [pc, #104]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011086:	2200      	movs	r2, #0
 8011088:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 801108a:	4b19      	ldr	r3, [pc, #100]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801108c:	4a19      	ldr	r2, [pc, #100]	@ (80110f4 <Ble_Hci_Gap_Gatt_Init+0x164>)
 801108e:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011090:	4b17      	ldr	r3, [pc, #92]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011092:	2200      	movs	r2, #0
 8011094:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8011096:	4b16      	ldr	r3, [pc, #88]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011098:	789c      	ldrb	r4, [r3, #2]
 801109a:	4b15      	ldr	r3, [pc, #84]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801109c:	785d      	ldrb	r5, [r3, #1]
 801109e:	4b14      	ldr	r3, [pc, #80]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80110a0:	791b      	ldrb	r3, [r3, #4]
 80110a2:	4a13      	ldr	r2, [pc, #76]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80110a4:	7952      	ldrb	r2, [r2, #5]
 80110a6:	4912      	ldr	r1, [pc, #72]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80110a8:	78c9      	ldrb	r1, [r1, #3]
 80110aa:	4811      	ldr	r0, [pc, #68]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80110ac:	6880      	ldr	r0, [r0, #8]
 80110ae:	2600      	movs	r6, #0
 80110b0:	9604      	str	r6, [sp, #16]
 80110b2:	9003      	str	r0, [sp, #12]
 80110b4:	9102      	str	r1, [sp, #8]
 80110b6:	9201      	str	r2, [sp, #4]
 80110b8:	9300      	str	r3, [sp, #0]
 80110ba:	2300      	movs	r3, #0
 80110bc:	2201      	movs	r2, #1
 80110be:	4629      	mov	r1, r5
 80110c0:	4620      	mov	r0, r4
 80110c2:	f7fd fe1b 	bl	800ecfc <aci_gap_set_authentication_requirement>
 80110c6:	4603      	mov	r3, r0
 80110c8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 80110ca:	4b09      	ldr	r3, [pc, #36]	@ (80110f0 <Ble_Hci_Gap_Gatt_Init+0x160>)
 80110cc:	789b      	ldrb	r3, [r3, #2]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d003      	beq.n	80110da <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 80110d2:	f7fe f85d 	bl	800f190 <aci_gap_configure_filter_accept_list>
 80110d6:	4603      	mov	r3, r0
 80110d8:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 80110da:	bf00      	nop
 80110dc:	371c      	adds	r7, #28
 80110de:	46bd      	mov	sp, r7
 80110e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80110e2:	bf00      	nop
 80110e4:	08012f7c 	.word	0x08012f7c
 80110e8:	08012f8c 	.word	0x08012f8c
 80110ec:	08012d14 	.word	0x08012d14
 80110f0:	20000488 	.word	0x20000488
 80110f4:	0001b207 	.word	0x0001b207

080110f8 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 80110f8:	b580      	push	{r7, lr}
 80110fa:	b08c      	sub	sp, #48	@ 0x30
 80110fc:	af08      	add	r7, sp, #32
 80110fe:	4603      	mov	r3, r0
 8011100:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011102:	2392      	movs	r3, #146	@ 0x92
 8011104:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 8011106:	4a12      	ldr	r2, [pc, #72]	@ (8011150 <Adv_Request+0x58>)
 8011108:	79fb      	ldrb	r3, [r7, #7]
 801110a:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 801110e:	2300      	movs	r3, #0
 8011110:	9306      	str	r3, [sp, #24]
 8011112:	2300      	movs	r3, #0
 8011114:	9305      	str	r3, [sp, #20]
 8011116:	2300      	movs	r3, #0
 8011118:	9304      	str	r3, [sp, #16]
 801111a:	2300      	movs	r3, #0
 801111c:	9303      	str	r3, [sp, #12]
 801111e:	2300      	movs	r3, #0
 8011120:	9302      	str	r3, [sp, #8]
 8011122:	2300      	movs	r3, #0
 8011124:	9301      	str	r3, [sp, #4]
 8011126:	2300      	movs	r3, #0
 8011128:	9300      	str	r3, [sp, #0]
 801112a:	2300      	movs	r3, #0
 801112c:	22a0      	movs	r2, #160	@ 0xa0
 801112e:	2180      	movs	r1, #128	@ 0x80
 8011130:	2000      	movs	r0, #0
 8011132:	f7fd fc95 	bl	800ea60 <aci_gap_set_discoverable>
 8011136:	4603      	mov	r3, r0
 8011138:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 801113a:	4906      	ldr	r1, [pc, #24]	@ (8011154 <Adv_Request+0x5c>)
 801113c:	200b      	movs	r0, #11
 801113e:	f7fd ffb5 	bl	800f0ac <aci_gap_update_adv_data>
 8011142:	4603      	mov	r3, r0
 8011144:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 8011146:	bf00      	nop
}
 8011148:	3710      	adds	r7, #16
 801114a:	46bd      	mov	sp, r7
 801114c:	bd80      	pop	{r7, pc}
 801114e:	bf00      	nop
 8011150:	20000488 	.word	0x20000488
 8011154:	200000bc 	.word	0x200000bc

08011158 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b086      	sub	sp, #24
 801115c:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 801115e:	f7ff fdb5 	bl	8010ccc <LL_FLASH_GetUDN>
 8011162:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801116a:	d023      	beq.n	80111b4 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 801116c:	f7ff fdc6 	bl	8010cfc <LL_FLASH_GetSTCompanyID>
 8011170:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8011172:	f7ff fdb7 	bl	8010ce4 <LL_FLASH_GetDeviceID>
 8011176:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	b2da      	uxtb	r2, r3
 801117c:	4b16      	ldr	r3, [pc, #88]	@ (80111d8 <BleGetBdAddress+0x80>)
 801117e:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011180:	693b      	ldr	r3, [r7, #16]
 8011182:	0a1b      	lsrs	r3, r3, #8
 8011184:	b2da      	uxtb	r2, r3
 8011186:	4b14      	ldr	r3, [pc, #80]	@ (80111d8 <BleGetBdAddress+0x80>)
 8011188:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	b2da      	uxtb	r2, r3
 801118e:	4b12      	ldr	r3, [pc, #72]	@ (80111d8 <BleGetBdAddress+0x80>)
 8011190:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	b2da      	uxtb	r2, r3
 8011196:	4b10      	ldr	r3, [pc, #64]	@ (80111d8 <BleGetBdAddress+0x80>)
 8011198:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 801119a:	68bb      	ldr	r3, [r7, #8]
 801119c:	0a1b      	lsrs	r3, r3, #8
 801119e:	b2da      	uxtb	r2, r3
 80111a0:	4b0d      	ldr	r3, [pc, #52]	@ (80111d8 <BleGetBdAddress+0x80>)
 80111a2:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	0c1b      	lsrs	r3, r3, #16
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	4b0b      	ldr	r3, [pc, #44]	@ (80111d8 <BleGetBdAddress+0x80>)
 80111ac:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80111ae:	4b0a      	ldr	r3, [pc, #40]	@ (80111d8 <BleGetBdAddress+0x80>)
 80111b0:	617b      	str	r3, [r7, #20]
 80111b2:	e00b      	b.n	80111cc <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80111b4:	2000      	movs	r0, #0
 80111b6:	f7ff fca3 	bl	8010b00 <OTP_Read>
 80111ba:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d002      	beq.n	80111c8 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	617b      	str	r3, [r7, #20]
 80111c6:	e001      	b.n	80111cc <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80111c8:	4b04      	ldr	r3, [pc, #16]	@ (80111dc <BleGetBdAddress+0x84>)
 80111ca:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80111cc:	697b      	ldr	r3, [r7, #20]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3718      	adds	r7, #24
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
 80111d6:	bf00      	nop
 80111d8:	20000480 	.word	0x20000480
 80111dc:	08012f74 	.word	0x08012f74

080111e0 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 80111e6:	4b0a      	ldr	r3, [pc, #40]	@ (8011210 <Adv_Cancel+0x30>)
 80111e8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80111ec:	2b05      	cmp	r3, #5
 80111ee:	d00a      	beq.n	8011206 <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80111f0:	2392      	movs	r3, #146	@ 0x92
 80111f2:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 80111f4:	f7fd fc10 	bl	800ea18 <aci_gap_set_non_discoverable>
 80111f8:	4603      	mov	r3, r0
 80111fa:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 80111fc:	4b04      	ldr	r3, [pc, #16]	@ (8011210 <Adv_Cancel+0x30>)
 80111fe:	2200      	movs	r2, #0
 8011200:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 8011204:	bf00      	nop
 8011206:	bf00      	nop
}
 8011208:	3708      	adds	r7, #8
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}
 801120e:	bf00      	nop
 8011210:	20000488 	.word	0x20000488

08011214 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b082      	sub	sp, #8
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 801121c:	2100      	movs	r1, #0
 801121e:	2002      	movs	r0, #2
 8011220:	f001 fb06 	bl	8012830 <UTIL_SEQ_SetTask>

  return;
 8011224:	bf00      	nop
}
 8011226:	3708      	adds	r7, #8
 8011228:	46bd      	mov	sp, r7
 801122a:	bd80      	pop	{r7, pc}

0801122c <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b082      	sub	sp, #8
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8011234:	2001      	movs	r0, #1
 8011236:	f001 fb67 	bl	8012908 <UTIL_SEQ_SetEvt>

  return;
 801123a:	bf00      	nop
}
 801123c:	3708      	adds	r7, #8
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}

08011242 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8011242:	b580      	push	{r7, lr}
 8011244:	b082      	sub	sp, #8
 8011246:	af00      	add	r7, sp, #0
 8011248:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 801124a:	2001      	movs	r0, #1
 801124c:	f001 fb7c 	bl	8012948 <UTIL_SEQ_WaitEvt>

  return;
 8011250:	bf00      	nop
}
 8011252:	3708      	adds	r7, #8
 8011254:	46bd      	mov	sp, r7
 8011256:	bd80      	pop	{r7, pc}

08011258 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	685b      	ldr	r3, [r3, #4]
 8011268:	3308      	adds	r3, #8
 801126a:	4618      	mov	r0, r3
 801126c:	f7fe fde6 	bl	800fe3c <SVCCTL_UserEvtRx>
 8011270:	4603      	mov	r3, r0
 8011272:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8011274:	7afb      	ldrb	r3, [r7, #11]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d003      	beq.n	8011282 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 801127a:	68fb      	ldr	r3, [r7, #12]
 801127c:	2201      	movs	r2, #1
 801127e:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011280:	e003      	b.n	801128a <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	2200      	movs	r2, #0
 8011286:	701a      	strb	r2, [r3, #0]
  return;
 8011288:	bf00      	nop
}
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}

08011290 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b084      	sub	sp, #16
 8011294:	af00      	add	r7, sp, #0
 8011296:	4603      	mov	r3, r0
 8011298:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 801129a:	79fb      	ldrb	r3, [r7, #7]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d002      	beq.n	80112a6 <BLE_StatusNot+0x16>
 80112a0:	2b01      	cmp	r3, #1
 80112a2:	d006      	beq.n	80112b2 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 80112a4:	e00b      	b.n	80112be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80112a6:	2303      	movs	r3, #3
 80112a8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f001 faec 	bl	8012888 <UTIL_SEQ_PauseTask>
      break;
 80112b0:	e005      	b.n	80112be <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 80112b2:	2303      	movs	r3, #3
 80112b4:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f001 fb06 	bl	80128c8 <UTIL_SEQ_ResumeTask>
      break;
 80112bc:	bf00      	nop
  }

  return;
 80112be:	bf00      	nop
}
 80112c0:	3710      	adds	r7, #16
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd80      	pop	{r7, pc}
	...

080112c8 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 80112c8:	b480      	push	{r7}
 80112ca:	b083      	sub	sp, #12
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	781b      	ldrb	r3, [r3, #0]
 80112d4:	2b06      	cmp	r3, #6
 80112d6:	d811      	bhi.n	80112fc <Custom_STM_App_Notification+0x34>
 80112d8:	a201      	add	r2, pc, #4	@ (adr r2, 80112e0 <Custom_STM_App_Notification+0x18>)
 80112da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112de:	bf00      	nop
 80112e0:	080112fd 	.word	0x080112fd
 80112e4:	080112fd 	.word	0x080112fd
 80112e8:	080112fd 	.word	0x080112fd
 80112ec:	080112fd 	.word	0x080112fd
 80112f0:	080112fd 	.word	0x080112fd
 80112f4:	080112fd 	.word	0x080112fd
 80112f8:	080112fd 	.word	0x080112fd

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 80112fc:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 80112fe:	bf00      	nop
}
 8011300:	370c      	adds	r7, #12
 8011302:	46bd      	mov	sp, r7
 8011304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop

0801130c <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 801130c:	b480      	push	{r7}
 801130e:	b083      	sub	sp, #12
 8011310:	af00      	add	r7, sp, #0
 8011312:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	781b      	ldrb	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d002      	beq.n	8011322 <Custom_APP_Notification+0x16>
 801131c:	2b01      	cmp	r3, #1
 801131e:	d002      	beq.n	8011326 <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 8011320:	e002      	b.n	8011328 <Custom_APP_Notification+0x1c>
      break;
 8011322:	bf00      	nop
 8011324:	e000      	b.n	8011328 <Custom_APP_Notification+0x1c>
      break;
 8011326:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 8011328:	bf00      	nop
}
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 8011334:	b480      	push	{r7}
 8011336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 8011338:	bf00      	nop
}
 801133a:	46bd      	mov	sp, r7
 801133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011340:	4770      	bx	lr
	...

08011344 <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b08c      	sub	sp, #48	@ 0x30
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 801134c:	2300      	movs	r3, #0
 801134e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	3301      	adds	r3, #1
 8011356:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 8011358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801135a:	781b      	ldrb	r3, [r3, #0]
 801135c:	2bff      	cmp	r3, #255	@ 0xff
 801135e:	f040 80a2 	bne.w	80114a6 <Custom_STM_Event_Handler+0x162>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 8011362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011364:	3302      	adds	r3, #2
 8011366:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8011368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	b29b      	uxth	r3, r3
 801136e:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 8011372:	2b1a      	cmp	r3, #26
 8011374:	f200 8093 	bhi.w	801149e <Custom_STM_Event_Handler+0x15a>
 8011378:	a201      	add	r2, pc, #4	@ (adr r2, 8011380 <Custom_STM_Event_Handler+0x3c>)
 801137a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801137e:	bf00      	nop
 8011380:	080113ed 	.word	0x080113ed
 8011384:	0801149f 	.word	0x0801149f
 8011388:	0801149f 	.word	0x0801149f
 801138c:	0801149f 	.word	0x0801149f
 8011390:	0801149f 	.word	0x0801149f
 8011394:	0801149f 	.word	0x0801149f
 8011398:	0801149f 	.word	0x0801149f
 801139c:	0801149f 	.word	0x0801149f
 80113a0:	0801149f 	.word	0x0801149f
 80113a4:	0801149f 	.word	0x0801149f
 80113a8:	0801149f 	.word	0x0801149f
 80113ac:	0801149f 	.word	0x0801149f
 80113b0:	0801149f 	.word	0x0801149f
 80113b4:	0801149f 	.word	0x0801149f
 80113b8:	0801149f 	.word	0x0801149f
 80113bc:	0801149f 	.word	0x0801149f
 80113c0:	0801149f 	.word	0x0801149f
 80113c4:	0801149f 	.word	0x0801149f
 80113c8:	0801149f 	.word	0x0801149f
 80113cc:	0801149f 	.word	0x0801149f
 80113d0:	0801149f 	.word	0x0801149f
 80113d4:	0801149f 	.word	0x0801149f
 80113d8:	0801149f 	.word	0x0801149f
 80113dc:	0801149f 	.word	0x0801149f
 80113e0:	0801149f 	.word	0x0801149f
 80113e4:	0801149f 	.word	0x0801149f
 80113e8:	08011481 	.word	0x08011481
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 80113ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ee:	3302      	adds	r3, #2
 80113f0:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomXHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80113f2:	69fb      	ldr	r3, [r7, #28]
 80113f4:	885b      	ldrh	r3, [r3, #2]
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	461a      	mov	r2, r3
 80113fa:	4b2e      	ldr	r3, [pc, #184]	@ (80114b4 <Custom_STM_Event_Handler+0x170>)
 80113fc:	885b      	ldrh	r3, [r3, #2]
 80113fe:	3302      	adds	r3, #2
 8011400:	429a      	cmp	r2, r3
 8011402:	d119      	bne.n	8011438 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 8011404:	2301      	movs	r3, #1
 8011406:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 801140a:	69fb      	ldr	r3, [r7, #28]
 801140c:	7a1b      	ldrb	r3, [r3, #8]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d002      	beq.n	8011418 <Custom_STM_Event_Handler+0xd4>
 8011412:	2b01      	cmp	r3, #1
 8011414:	d008      	beq.n	8011428 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 8011416:	e032      	b.n	801147e <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_X_NOTIFY_DISABLED_EVT;
 8011418:	2302      	movs	r3, #2
 801141a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801141c:	f107 0308 	add.w	r3, r7, #8
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff ff51 	bl	80112c8 <Custom_STM_App_Notification>
                break;
 8011426:	e02a      	b.n	801147e <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_X_NOTIFY_ENABLED_EVT;
 8011428:	2301      	movs	r3, #1
 801142a:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801142c:	f107 0308 	add.w	r3, r7, #8
 8011430:	4618      	mov	r0, r3
 8011432:	f7ff ff49 	bl	80112c8 <Custom_STM_App_Notification>
                break;
 8011436:	e022      	b.n	801147e <Custom_STM_Event_Handler+0x13a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomXHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomYHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 8011438:	69fb      	ldr	r3, [r7, #28]
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	b29b      	uxth	r3, r3
 801143e:	461a      	mov	r2, r3
 8011440:	4b1c      	ldr	r3, [pc, #112]	@ (80114b4 <Custom_STM_Event_Handler+0x170>)
 8011442:	889b      	ldrh	r3, [r3, #4]
 8011444:	3302      	adds	r3, #2
 8011446:	429a      	cmp	r2, r3
 8011448:	d12b      	bne.n	80114a2 <Custom_STM_Event_Handler+0x15e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801144a:	2301      	movs	r3, #1
 801144c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 8011450:	69fb      	ldr	r3, [r7, #28]
 8011452:	7a1b      	ldrb	r3, [r3, #8]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d002      	beq.n	801145e <Custom_STM_Event_Handler+0x11a>
 8011458:	2b01      	cmp	r3, #1
 801145a:	d008      	beq.n	801146e <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 801145c:	e00f      	b.n	801147e <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_Y_NOTIFY_DISABLED_EVT;
 801145e:	2305      	movs	r3, #5
 8011460:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011462:	f107 0308 	add.w	r3, r7, #8
 8011466:	4618      	mov	r0, r3
 8011468:	f7ff ff2e 	bl	80112c8 <Custom_STM_App_Notification>
                break;
 801146c:	e007      	b.n	801147e <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_Y_NOTIFY_ENABLED_EVT;
 801146e:	2304      	movs	r3, #4
 8011470:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 8011472:	f107 0308 	add.w	r3, r7, #8
 8011476:	4618      	mov	r0, r3
 8011478:	f7ff ff26 	bl	80112c8 <Custom_STM_App_Notification>
                break;
 801147c:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomYHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 801147e:	e010      	b.n	80114a2 <Custom_STM_Event_Handler+0x15e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8011480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011482:	3302      	adds	r3, #2
 8011484:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 8011486:	2306      	movs	r3, #6
 8011488:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 801148a:	6a3b      	ldr	r3, [r7, #32]
 801148c:	881b      	ldrh	r3, [r3, #0]
 801148e:	b29b      	uxth	r3, r3
 8011490:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 8011492:	f107 0308 	add.w	r3, r7, #8
 8011496:	4618      	mov	r0, r3
 8011498:	f7ff ff16 	bl	80112c8 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 801149c:	e002      	b.n	80114a4 <Custom_STM_Event_Handler+0x160>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 801149e:	bf00      	nop
 80114a0:	e002      	b.n	80114a8 <Custom_STM_Event_Handler+0x164>
          break;
 80114a2:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 80114a4:	e000      	b.n	80114a8 <Custom_STM_Event_Handler+0x164>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 80114a6:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 80114a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 80114ac:	4618      	mov	r0, r3
 80114ae:	3730      	adds	r7, #48	@ 0x30
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}
 80114b4:	20000510 	.word	0x20000510

080114b8 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b08c      	sub	sp, #48	@ 0x30
 80114bc:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80114be:	2392      	movs	r3, #146	@ 0x92
 80114c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 80114c2:	4851      	ldr	r0, [pc, #324]	@ (8011608 <SVCCTL_InitCustomSvc+0x150>)
 80114c4:	f7fe fca0 	bl	800fe08 <SVCCTL_RegisterSvcHandler>
   *                              = 7
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 80114c8:	2307      	movs	r3, #7
 80114ca:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SCORE_UUID(uuid.Char_UUID_128);
 80114cc:	238f      	movs	r3, #143	@ 0x8f
 80114ce:	713b      	strb	r3, [r7, #4]
 80114d0:	23e5      	movs	r3, #229	@ 0xe5
 80114d2:	717b      	strb	r3, [r7, #5]
 80114d4:	23b3      	movs	r3, #179	@ 0xb3
 80114d6:	71bb      	strb	r3, [r7, #6]
 80114d8:	23d5      	movs	r3, #213	@ 0xd5
 80114da:	71fb      	strb	r3, [r7, #7]
 80114dc:	232e      	movs	r3, #46	@ 0x2e
 80114de:	723b      	strb	r3, [r7, #8]
 80114e0:	237f      	movs	r3, #127	@ 0x7f
 80114e2:	727b      	strb	r3, [r7, #9]
 80114e4:	234a      	movs	r3, #74	@ 0x4a
 80114e6:	72bb      	strb	r3, [r7, #10]
 80114e8:	2398      	movs	r3, #152	@ 0x98
 80114ea:	72fb      	strb	r3, [r7, #11]
 80114ec:	232a      	movs	r3, #42	@ 0x2a
 80114ee:	733b      	strb	r3, [r7, #12]
 80114f0:	2348      	movs	r3, #72	@ 0x48
 80114f2:	737b      	strb	r3, [r7, #13]
 80114f4:	237a      	movs	r3, #122	@ 0x7a
 80114f6:	73bb      	strb	r3, [r7, #14]
 80114f8:	23cc      	movs	r3, #204	@ 0xcc
 80114fa:	73fb      	strb	r3, [r7, #15]
 80114fc:	2310      	movs	r3, #16
 80114fe:	743b      	strb	r3, [r7, #16]
 8011500:	2300      	movs	r3, #0
 8011502:	747b      	strb	r3, [r7, #17]
 8011504:	2300      	movs	r3, #0
 8011506:	74bb      	strb	r3, [r7, #18]
 8011508:	2300      	movs	r3, #0
 801150a:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 801150c:	7dbb      	ldrb	r3, [r7, #22]
 801150e:	1d39      	adds	r1, r7, #4
 8011510:	4a3e      	ldr	r2, [pc, #248]	@ (801160c <SVCCTL_InitCustomSvc+0x154>)
 8011512:	9200      	str	r2, [sp, #0]
 8011514:	2201      	movs	r2, #1
 8011516:	2002      	movs	r0, #2
 8011518:	f7fd feea 	bl	800f2f0 <aci_gatt_add_service>
 801151c:	4603      	mov	r3, r0
 801151e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  X_position
   */
  COPY_X_POSITION_UUID(uuid.Char_UUID_128);
 8011520:	2319      	movs	r3, #25
 8011522:	713b      	strb	r3, [r7, #4]
 8011524:	23ed      	movs	r3, #237	@ 0xed
 8011526:	717b      	strb	r3, [r7, #5]
 8011528:	2382      	movs	r3, #130	@ 0x82
 801152a:	71bb      	strb	r3, [r7, #6]
 801152c:	23ae      	movs	r3, #174	@ 0xae
 801152e:	71fb      	strb	r3, [r7, #7]
 8011530:	23ed      	movs	r3, #237	@ 0xed
 8011532:	723b      	strb	r3, [r7, #8]
 8011534:	2321      	movs	r3, #33	@ 0x21
 8011536:	727b      	strb	r3, [r7, #9]
 8011538:	234c      	movs	r3, #76	@ 0x4c
 801153a:	72bb      	strb	r3, [r7, #10]
 801153c:	239d      	movs	r3, #157	@ 0x9d
 801153e:	72fb      	strb	r3, [r7, #11]
 8011540:	2341      	movs	r3, #65	@ 0x41
 8011542:	733b      	strb	r3, [r7, #12]
 8011544:	2345      	movs	r3, #69	@ 0x45
 8011546:	737b      	strb	r3, [r7, #13]
 8011548:	2322      	movs	r3, #34	@ 0x22
 801154a:	73bb      	strb	r3, [r7, #14]
 801154c:	238e      	movs	r3, #142	@ 0x8e
 801154e:	73fb      	strb	r3, [r7, #15]
 8011550:	2311      	movs	r3, #17
 8011552:	743b      	strb	r3, [r7, #16]
 8011554:	2300      	movs	r3, #0
 8011556:	747b      	strb	r3, [r7, #17]
 8011558:	2300      	movs	r3, #0
 801155a:	74bb      	strb	r3, [r7, #18]
 801155c:	2300      	movs	r3, #0
 801155e:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomScoreHdle,
 8011560:	4b2a      	ldr	r3, [pc, #168]	@ (801160c <SVCCTL_InitCustomSvc+0x154>)
 8011562:	8818      	ldrh	r0, [r3, #0]
 8011564:	4b2a      	ldr	r3, [pc, #168]	@ (8011610 <SVCCTL_InitCustomSvc+0x158>)
 8011566:	781b      	ldrb	r3, [r3, #0]
 8011568:	4619      	mov	r1, r3
 801156a:	1d3a      	adds	r2, r7, #4
 801156c:	4b29      	ldr	r3, [pc, #164]	@ (8011614 <SVCCTL_InitCustomSvc+0x15c>)
 801156e:	9305      	str	r3, [sp, #20]
 8011570:	2300      	movs	r3, #0
 8011572:	9304      	str	r3, [sp, #16]
 8011574:	2310      	movs	r3, #16
 8011576:	9303      	str	r3, [sp, #12]
 8011578:	2300      	movs	r3, #0
 801157a:	9302      	str	r3, [sp, #8]
 801157c:	2300      	movs	r3, #0
 801157e:	9301      	str	r3, [sp, #4]
 8011580:	2312      	movs	r3, #18
 8011582:	9300      	str	r3, [sp, #0]
 8011584:	460b      	mov	r3, r1
 8011586:	2102      	movs	r1, #2
 8011588:	f7fd ff88 	bl	800f49c <aci_gatt_add_char>
 801158c:	4603      	mov	r3, r0
 801158e:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Y_position
   */
  COPY_Y_POSITION_UUID(uuid.Char_UUID_128);
 8011590:	2319      	movs	r3, #25
 8011592:	713b      	strb	r3, [r7, #4]
 8011594:	23ed      	movs	r3, #237	@ 0xed
 8011596:	717b      	strb	r3, [r7, #5]
 8011598:	2382      	movs	r3, #130	@ 0x82
 801159a:	71bb      	strb	r3, [r7, #6]
 801159c:	23ae      	movs	r3, #174	@ 0xae
 801159e:	71fb      	strb	r3, [r7, #7]
 80115a0:	23ed      	movs	r3, #237	@ 0xed
 80115a2:	723b      	strb	r3, [r7, #8]
 80115a4:	2321      	movs	r3, #33	@ 0x21
 80115a6:	727b      	strb	r3, [r7, #9]
 80115a8:	234c      	movs	r3, #76	@ 0x4c
 80115aa:	72bb      	strb	r3, [r7, #10]
 80115ac:	239d      	movs	r3, #157	@ 0x9d
 80115ae:	72fb      	strb	r3, [r7, #11]
 80115b0:	2341      	movs	r3, #65	@ 0x41
 80115b2:	733b      	strb	r3, [r7, #12]
 80115b4:	2345      	movs	r3, #69	@ 0x45
 80115b6:	737b      	strb	r3, [r7, #13]
 80115b8:	2322      	movs	r3, #34	@ 0x22
 80115ba:	73bb      	strb	r3, [r7, #14]
 80115bc:	238e      	movs	r3, #142	@ 0x8e
 80115be:	73fb      	strb	r3, [r7, #15]
 80115c0:	2312      	movs	r3, #18
 80115c2:	743b      	strb	r3, [r7, #16]
 80115c4:	2300      	movs	r3, #0
 80115c6:	747b      	strb	r3, [r7, #17]
 80115c8:	2300      	movs	r3, #0
 80115ca:	74bb      	strb	r3, [r7, #18]
 80115cc:	2300      	movs	r3, #0
 80115ce:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomScoreHdle,
 80115d0:	4b0e      	ldr	r3, [pc, #56]	@ (801160c <SVCCTL_InitCustomSvc+0x154>)
 80115d2:	8818      	ldrh	r0, [r3, #0]
 80115d4:	4b10      	ldr	r3, [pc, #64]	@ (8011618 <SVCCTL_InitCustomSvc+0x160>)
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	4619      	mov	r1, r3
 80115da:	1d3a      	adds	r2, r7, #4
 80115dc:	4b0f      	ldr	r3, [pc, #60]	@ (801161c <SVCCTL_InitCustomSvc+0x164>)
 80115de:	9305      	str	r3, [sp, #20]
 80115e0:	2300      	movs	r3, #0
 80115e2:	9304      	str	r3, [sp, #16]
 80115e4:	2310      	movs	r3, #16
 80115e6:	9303      	str	r3, [sp, #12]
 80115e8:	2300      	movs	r3, #0
 80115ea:	9302      	str	r3, [sp, #8]
 80115ec:	2300      	movs	r3, #0
 80115ee:	9301      	str	r3, [sp, #4]
 80115f0:	2312      	movs	r3, #18
 80115f2:	9300      	str	r3, [sp, #0]
 80115f4:	460b      	mov	r3, r1
 80115f6:	2102      	movs	r1, #2
 80115f8:	f7fd ff50 	bl	800f49c <aci_gatt_add_char>
 80115fc:	4603      	mov	r3, r0
 80115fe:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011600:	bf00      	nop
}
 8011602:	3718      	adds	r7, #24
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	08011345 	.word	0x08011345
 801160c:	20000510 	.word	0x20000510
 8011610:	200000c7 	.word	0x200000c7
 8011614:	20000512 	.word	0x20000512
 8011618:	200000c8 	.word	0x200000c8
 801161c:	20000514 	.word	0x20000514

08011620 <LL_PWR_EnableBootC2>:
{
 8011620:	b480      	push	{r7}
 8011622:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8011624:	4b05      	ldr	r3, [pc, #20]	@ (801163c <LL_PWR_EnableBootC2+0x1c>)
 8011626:	68db      	ldr	r3, [r3, #12]
 8011628:	4a04      	ldr	r2, [pc, #16]	@ (801163c <LL_PWR_EnableBootC2+0x1c>)
 801162a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801162e:	60d3      	str	r3, [r2, #12]
}
 8011630:	bf00      	nop
 8011632:	46bd      	mov	sp, r7
 8011634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop
 801163c:	58000400 	.word	0x58000400

08011640 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8011640:	b480      	push	{r7}
 8011642:	b083      	sub	sp, #12
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8011648:	4b06      	ldr	r3, [pc, #24]	@ (8011664 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 801164a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801164e:	4905      	ldr	r1, [pc, #20]	@ (8011664 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4313      	orrs	r3, r2
 8011654:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 8011658:	bf00      	nop
 801165a:	370c      	adds	r7, #12
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr
 8011664:	58000800 	.word	0x58000800

08011668 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8011670:	4b05      	ldr	r3, [pc, #20]	@ (8011688 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011672:	6a1a      	ldr	r2, [r3, #32]
 8011674:	4904      	ldr	r1, [pc, #16]	@ (8011688 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	4313      	orrs	r3, r2
 801167a:	620b      	str	r3, [r1, #32]
}
 801167c:	bf00      	nop
 801167e:	370c      	adds	r7, #12
 8011680:	46bd      	mov	sp, r7
 8011682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011686:	4770      	bx	lr
 8011688:	58000800 	.word	0x58000800

0801168c <LL_AHB3_GRP1_EnableClock>:
{
 801168c:	b480      	push	{r7}
 801168e:	b085      	sub	sp, #20
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8011694:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801169a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	4313      	orrs	r3, r2
 80116a2:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80116a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4013      	ands	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80116b0:	68fb      	ldr	r3, [r7, #12]
}
 80116b2:	bf00      	nop
 80116b4:	3714      	adds	r7, #20
 80116b6:	46bd      	mov	sp, r7
 80116b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116bc:	4770      	bx	lr

080116be <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80116be:	b480      	push	{r7}
 80116c0:	b085      	sub	sp, #20
 80116c2:	af00      	add	r7, sp, #0
 80116c4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80116c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80116ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	4313      	orrs	r3, r2
 80116d6:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80116da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80116de:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	4013      	ands	r3, r2
 80116e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80116e8:	68fb      	ldr	r3, [r7, #12]
}
 80116ea:	bf00      	nop
 80116ec:	3714      	adds	r7, #20
 80116ee:	46bd      	mov	sp, r7
 80116f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f4:	4770      	bx	lr

080116f6 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 80116f6:	b480      	push	{r7}
 80116f8:	b083      	sub	sp, #12
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	601a      	str	r2, [r3, #0]
}
 801170a:	bf00      	nop
 801170c:	370c      	adds	r7, #12
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr

08011716 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8011716:	b480      	push	{r7}
 8011718:	b083      	sub	sp, #12
 801171a:	af00      	add	r7, sp, #0
 801171c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	f043 0201 	orr.w	r2, r3, #1
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	601a      	str	r2, [r3, #0]
}
 801172a:	bf00      	nop
 801172c:	370c      	adds	r7, #12
 801172e:	46bd      	mov	sp, r7
 8011730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011734:	4770      	bx	lr

08011736 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011736:	b480      	push	{r7}
 8011738:	b083      	sub	sp, #12
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	685a      	ldr	r2, [r3, #4]
 8011744:	683b      	ldr	r3, [r7, #0]
 8011746:	041b      	lsls	r3, r3, #16
 8011748:	43db      	mvns	r3, r3
 801174a:	401a      	ands	r2, r3
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	605a      	str	r2, [r3, #4]
}
 8011750:	bf00      	nop
 8011752:	370c      	adds	r7, #12
 8011754:	46bd      	mov	sp, r7
 8011756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175a:	4770      	bx	lr

0801175c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801175c:	b480      	push	{r7}
 801175e:	b083      	sub	sp, #12
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	685a      	ldr	r2, [r3, #4]
 801176a:	683b      	ldr	r3, [r7, #0]
 801176c:	041b      	lsls	r3, r3, #16
 801176e:	431a      	orrs	r2, r3
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	605a      	str	r2, [r3, #4]
}
 8011774:	bf00      	nop
 8011776:	370c      	adds	r7, #12
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	4770      	bx	lr

08011780 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011780:	b480      	push	{r7}
 8011782:	b083      	sub	sp, #12
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]
 8011788:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	685a      	ldr	r2, [r3, #4]
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	43db      	mvns	r3, r3
 8011792:	401a      	ands	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	605a      	str	r2, [r3, #4]
}
 8011798:	bf00      	nop
 801179a:	370c      	adds	r7, #12
 801179c:	46bd      	mov	sp, r7
 801179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a2:	4770      	bx	lr

080117a4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80117a4:	b480      	push	{r7}
 80117a6:	b083      	sub	sp, #12
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	683a      	ldr	r2, [r7, #0]
 80117b2:	609a      	str	r2, [r3, #8]
}
 80117b4:	bf00      	nop
 80117b6:	370c      	adds	r7, #12
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80117ca:	683b      	ldr	r3, [r7, #0]
 80117cc:	041a      	lsls	r2, r3, #16
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	609a      	str	r2, [r3, #8]
}
 80117d2:	bf00      	nop
 80117d4:	370c      	adds	r7, #12
 80117d6:	46bd      	mov	sp, r7
 80117d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117dc:	4770      	bx	lr

080117de <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80117de:	b480      	push	{r7}
 80117e0:	b083      	sub	sp, #12
 80117e2:	af00      	add	r7, sp, #0
 80117e4:	6078      	str	r0, [r7, #4]
 80117e6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	68da      	ldr	r2, [r3, #12]
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	4013      	ands	r3, r2
 80117f0:	683a      	ldr	r2, [r7, #0]
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d101      	bne.n	80117fa <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80117f6:	2301      	movs	r3, #1
 80117f8:	e000      	b.n	80117fc <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80117fa:	2300      	movs	r3, #0
}
 80117fc:	4618      	mov	r0, r3
 80117fe:	370c      	adds	r7, #12
 8011800:	46bd      	mov	sp, r7
 8011802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011806:	4770      	bx	lr

08011808 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011808:	b480      	push	{r7}
 801180a:	b083      	sub	sp, #12
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
 8011810:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	69da      	ldr	r2, [r3, #28]
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	4013      	ands	r3, r2
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	429a      	cmp	r2, r3
 801181e:	d101      	bne.n	8011824 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8011820:	2301      	movs	r3, #1
 8011822:	e000      	b.n	8011826 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8011824:	2300      	movs	r3, #0
}
 8011826:	4618      	mov	r0, r3
 8011828:	370c      	adds	r7, #12
 801182a:	46bd      	mov	sp, r7
 801182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011830:	4770      	bx	lr
	...

08011834 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8011834:	b580      	push	{r7, lr}
 8011836:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8011838:	2102      	movs	r1, #2
 801183a:	4818      	ldr	r0, [pc, #96]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 801183c:	f7ff ffe4 	bl	8011808 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d008      	beq.n	8011858 <HW_IPCC_Rx_Handler+0x24>
 8011846:	4b15      	ldr	r3, [pc, #84]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	f003 0302 	and.w	r3, r3, #2
 801184e:	2b00      	cmp	r3, #0
 8011850:	d102      	bne.n	8011858 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8011852:	f000 f8d5 	bl	8011a00 <HW_IPCC_SYS_EvtHandler>
 8011856:	e01e      	b.n	8011896 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8011858:	2101      	movs	r1, #1
 801185a:	4810      	ldr	r0, [pc, #64]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 801185c:	f7ff ffd4 	bl	8011808 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011860:	4603      	mov	r3, r0
 8011862:	2b00      	cmp	r3, #0
 8011864:	d008      	beq.n	8011878 <HW_IPCC_Rx_Handler+0x44>
 8011866:	4b0d      	ldr	r3, [pc, #52]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 8011868:	685b      	ldr	r3, [r3, #4]
 801186a:	f003 0301 	and.w	r3, r3, #1
 801186e:	2b00      	cmp	r3, #0
 8011870:	d102      	bne.n	8011878 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 8011872:	f000 f889 	bl	8011988 <HW_IPCC_BLE_EvtHandler>
 8011876:	e00e      	b.n	8011896 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011878:	2108      	movs	r1, #8
 801187a:	4808      	ldr	r0, [pc, #32]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 801187c:	f7ff ffc4 	bl	8011808 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011880:	4603      	mov	r3, r0
 8011882:	2b00      	cmp	r3, #0
 8011884:	d008      	beq.n	8011898 <HW_IPCC_Rx_Handler+0x64>
 8011886:	4b05      	ldr	r3, [pc, #20]	@ (801189c <HW_IPCC_Rx_Handler+0x68>)
 8011888:	685b      	ldr	r3, [r3, #4]
 801188a:	f003 0308 	and.w	r3, r3, #8
 801188e:	2b00      	cmp	r3, #0
 8011890:	d102      	bne.n	8011898 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 8011892:	f000 f901 	bl	8011a98 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8011896:	bf00      	nop
 8011898:	bf00      	nop
}
 801189a:	bd80      	pop	{r7, pc}
 801189c:	58000c00 	.word	0x58000c00

080118a0 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80118a0:	b580      	push	{r7, lr}
 80118a2:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80118a4:	2102      	movs	r1, #2
 80118a6:	4818      	ldr	r0, [pc, #96]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118a8:	f7ff ff99 	bl	80117de <LL_C1_IPCC_IsActiveFlag_CHx>
 80118ac:	4603      	mov	r3, r0
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d108      	bne.n	80118c4 <HW_IPCC_Tx_Handler+0x24>
 80118b2:	4b15      	ldr	r3, [pc, #84]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d102      	bne.n	80118c4 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80118be:	f000 f893 	bl	80119e8 <HW_IPCC_SYS_CmdEvtHandler>
 80118c2:	e01e      	b.n	8011902 <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80118c4:	2108      	movs	r1, #8
 80118c6:	4810      	ldr	r0, [pc, #64]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118c8:	f7ff ff89 	bl	80117de <LL_C1_IPCC_IsActiveFlag_CHx>
 80118cc:	4603      	mov	r3, r0
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d108      	bne.n	80118e4 <HW_IPCC_Tx_Handler+0x44>
 80118d2:	4b0d      	ldr	r3, [pc, #52]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118d4:	685b      	ldr	r3, [r3, #4]
 80118d6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d102      	bne.n	80118e4 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 80118de:	f000 f8bd 	bl	8011a5c <HW_IPCC_MM_FreeBufHandler>
 80118e2:	e00e      	b.n	8011902 <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80118e4:	2120      	movs	r1, #32
 80118e6:	4808      	ldr	r0, [pc, #32]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118e8:	f7ff ff79 	bl	80117de <LL_C1_IPCC_IsActiveFlag_CHx>
 80118ec:	4603      	mov	r3, r0
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d108      	bne.n	8011904 <HW_IPCC_Tx_Handler+0x64>
 80118f2:	4b05      	ldr	r3, [pc, #20]	@ (8011908 <HW_IPCC_Tx_Handler+0x68>)
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d102      	bne.n	8011904 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80118fe:	f000 f84f 	bl	80119a0 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8011902:	bf00      	nop
 8011904:	bf00      	nop
}
 8011906:	bd80      	pop	{r7, pc}
 8011908:	58000c00 	.word	0x58000c00

0801190c <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8011910:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8011914:	f7ff fed3 	bl	80116be <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8011918:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801191c:	f7ff fea4 	bl	8011668 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8011920:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8011924:	f7ff fe8c 	bl	8011640 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8011928:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 801192a:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 801192c:	f7ff fe78 	bl	8011620 <LL_PWR_EnableBootC2>

  return;
 8011930:	bf00      	nop
}
 8011932:	bd80      	pop	{r7, pc}

08011934 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8011934:	b580      	push	{r7, lr}
 8011936:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8011938:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 801193c:	f7ff fea6 	bl	801168c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8011940:	4806      	ldr	r0, [pc, #24]	@ (801195c <HW_IPCC_Init+0x28>)
 8011942:	f7ff fee8 	bl	8011716 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8011946:	4805      	ldr	r0, [pc, #20]	@ (801195c <HW_IPCC_Init+0x28>)
 8011948:	f7ff fed5 	bl	80116f6 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 801194c:	202c      	movs	r0, #44	@ 0x2c
 801194e:	f7f1 fa9a 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8011952:	202d      	movs	r0, #45	@ 0x2d
 8011954:	f7f1 fa97 	bl	8002e86 <HAL_NVIC_EnableIRQ>

  return;
 8011958:	bf00      	nop
}
 801195a:	bd80      	pop	{r7, pc}
 801195c:	58000c00 	.word	0x58000c00

08011960 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8011960:	b580      	push	{r7, lr}
 8011962:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011964:	2101      	movs	r1, #1
 8011966:	4802      	ldr	r0, [pc, #8]	@ (8011970 <HW_IPCC_BLE_Init+0x10>)
 8011968:	f7ff ff0a 	bl	8011780 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801196c:	bf00      	nop
}
 801196e:	bd80      	pop	{r7, pc}
 8011970:	58000c00 	.word	0x58000c00

08011974 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8011974:	b580      	push	{r7, lr}
 8011976:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011978:	2101      	movs	r1, #1
 801197a:	4802      	ldr	r0, [pc, #8]	@ (8011984 <HW_IPCC_BLE_SendCmd+0x10>)
 801197c:	f7ff ff20 	bl	80117c0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011980:	bf00      	nop
}
 8011982:	bd80      	pop	{r7, pc}
 8011984:	58000c00 	.word	0x58000c00

08011988 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011988:	b580      	push	{r7, lr}
 801198a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 801198c:	f7fe ff00 	bl	8010790 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011990:	2101      	movs	r1, #1
 8011992:	4802      	ldr	r0, [pc, #8]	@ (801199c <HW_IPCC_BLE_EvtHandler+0x14>)
 8011994:	f7ff ff06 	bl	80117a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011998:	bf00      	nop
}
 801199a:	bd80      	pop	{r7, pc}
 801199c:	58000c00 	.word	0x58000c00

080119a0 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80119a4:	2120      	movs	r1, #32
 80119a6:	4803      	ldr	r0, [pc, #12]	@ (80119b4 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80119a8:	f7ff fed8 	bl	801175c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80119ac:	f7fe ff20 	bl	80107f0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80119b0:	bf00      	nop
}
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	58000c00 	.word	0x58000c00

080119b8 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80119b8:	b580      	push	{r7, lr}
 80119ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80119bc:	2102      	movs	r1, #2
 80119be:	4802      	ldr	r0, [pc, #8]	@ (80119c8 <HW_IPCC_SYS_Init+0x10>)
 80119c0:	f7ff fede 	bl	8011780 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80119c4:	bf00      	nop
}
 80119c6:	bd80      	pop	{r7, pc}
 80119c8:	58000c00 	.word	0x58000c00

080119cc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80119cc:	b580      	push	{r7, lr}
 80119ce:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80119d0:	2102      	movs	r1, #2
 80119d2:	4804      	ldr	r0, [pc, #16]	@ (80119e4 <HW_IPCC_SYS_SendCmd+0x18>)
 80119d4:	f7ff fef4 	bl	80117c0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80119d8:	2102      	movs	r1, #2
 80119da:	4802      	ldr	r0, [pc, #8]	@ (80119e4 <HW_IPCC_SYS_SendCmd+0x18>)
 80119dc:	f7ff feab 	bl	8011736 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80119e0:	bf00      	nop
}
 80119e2:	bd80      	pop	{r7, pc}
 80119e4:	58000c00 	.word	0x58000c00

080119e8 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 80119e8:	b580      	push	{r7, lr}
 80119ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80119ec:	2102      	movs	r1, #2
 80119ee:	4803      	ldr	r0, [pc, #12]	@ (80119fc <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 80119f0:	f7ff feb4 	bl	801175c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 80119f4:	f7fe ff4c 	bl	8010890 <HW_IPCC_SYS_CmdEvtNot>

  return;
 80119f8:	bf00      	nop
}
 80119fa:	bd80      	pop	{r7, pc}
 80119fc:	58000c00 	.word	0x58000c00

08011a00 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8011a04:	f7fe ff5a 	bl	80108bc <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011a08:	2102      	movs	r1, #2
 8011a0a:	4802      	ldr	r0, [pc, #8]	@ (8011a14 <HW_IPCC_SYS_EvtHandler+0x14>)
 8011a0c:	f7ff feca 	bl	80117a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011a10:	bf00      	nop
}
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	58000c00 	.word	0x58000c00

08011a18 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8011a18:	b580      	push	{r7, lr}
 8011a1a:	b082      	sub	sp, #8
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8011a20:	2108      	movs	r1, #8
 8011a22:	480c      	ldr	r0, [pc, #48]	@ (8011a54 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011a24:	f7ff fedb 	bl	80117de <LL_C1_IPCC_IsActiveFlag_CHx>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d007      	beq.n	8011a3e <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8011a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8011a58 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011a34:	2108      	movs	r1, #8
 8011a36:	4807      	ldr	r0, [pc, #28]	@ (8011a54 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011a38:	f7ff fe7d 	bl	8011736 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8011a3c:	e006      	b.n	8011a4c <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011a42:	2108      	movs	r1, #8
 8011a44:	4803      	ldr	r0, [pc, #12]	@ (8011a54 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8011a46:	f7ff febb 	bl	80117c0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8011a4a:	bf00      	nop
}
 8011a4c:	3708      	adds	r7, #8
 8011a4e:	46bd      	mov	sp, r7
 8011a50:	bd80      	pop	{r7, pc}
 8011a52:	bf00      	nop
 8011a54:	58000c00 	.word	0x58000c00
 8011a58:	20000518 	.word	0x20000518

08011a5c <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011a60:	2108      	movs	r1, #8
 8011a62:	4806      	ldr	r0, [pc, #24]	@ (8011a7c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011a64:	f7ff fe7a 	bl	801175c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011a68:	4b05      	ldr	r3, [pc, #20]	@ (8011a80 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011a6e:	2108      	movs	r1, #8
 8011a70:	4802      	ldr	r0, [pc, #8]	@ (8011a7c <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011a72:	f7ff fea5 	bl	80117c0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011a76:	bf00      	nop
}
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	58000c00 	.word	0x58000c00
 8011a80:	20000518 	.word	0x20000518

08011a84 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011a88:	2108      	movs	r1, #8
 8011a8a:	4802      	ldr	r0, [pc, #8]	@ (8011a94 <HW_IPCC_TRACES_Init+0x10>)
 8011a8c:	f7ff fe78 	bl	8011780 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011a90:	bf00      	nop
}
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	58000c00 	.word	0x58000c00

08011a98 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011a9c:	f7fe ffb6 	bl	8010a0c <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011aa0:	2108      	movs	r1, #8
 8011aa2:	4802      	ldr	r0, [pc, #8]	@ (8011aac <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011aa4:	f7ff fe7e 	bl	80117a4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011aa8:	bf00      	nop
}
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	58000c00 	.word	0x58000c00

08011ab0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	4912      	ldr	r1, [pc, #72]	@ (8011b00 <MX_USB_Device_Init+0x50>)
 8011ab8:	4812      	ldr	r0, [pc, #72]	@ (8011b04 <MX_USB_Device_Init+0x54>)
 8011aba:	f7fb fd1f 	bl	800d4fc <USBD_Init>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d001      	beq.n	8011ac8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011ac4:	f7f0 fcd4 	bl	8002470 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011ac8:	490f      	ldr	r1, [pc, #60]	@ (8011b08 <MX_USB_Device_Init+0x58>)
 8011aca:	480e      	ldr	r0, [pc, #56]	@ (8011b04 <MX_USB_Device_Init+0x54>)
 8011acc:	f7fb fd46 	bl	800d55c <USBD_RegisterClass>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d001      	beq.n	8011ada <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011ad6:	f7f0 fccb 	bl	8002470 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011ada:	490c      	ldr	r1, [pc, #48]	@ (8011b0c <MX_USB_Device_Init+0x5c>)
 8011adc:	4809      	ldr	r0, [pc, #36]	@ (8011b04 <MX_USB_Device_Init+0x54>)
 8011ade:	f7fb fc3d 	bl	800d35c <USBD_CDC_RegisterInterface>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d001      	beq.n	8011aec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011ae8:	f7f0 fcc2 	bl	8002470 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011aec:	4805      	ldr	r0, [pc, #20]	@ (8011b04 <MX_USB_Device_Init+0x54>)
 8011aee:	f7fb fd6b 	bl	800d5c8 <USBD_Start>
 8011af2:	4603      	mov	r3, r0
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d001      	beq.n	8011afc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011af8:	f7f0 fcba 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011afc:	bf00      	nop
 8011afe:	bd80      	pop	{r7, pc}
 8011b00:	200000e0 	.word	0x200000e0
 8011b04:	2000051c 	.word	0x2000051c
 8011b08:	2000003c 	.word	0x2000003c
 8011b0c:	200000cc 	.word	0x200000cc

08011b10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011b10:	b580      	push	{r7, lr}
 8011b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011b14:	2200      	movs	r2, #0
 8011b16:	4905      	ldr	r1, [pc, #20]	@ (8011b2c <CDC_Init_FS+0x1c>)
 8011b18:	4805      	ldr	r0, [pc, #20]	@ (8011b30 <CDC_Init_FS+0x20>)
 8011b1a:	f7fb fc39 	bl	800d390 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011b1e:	4905      	ldr	r1, [pc, #20]	@ (8011b34 <CDC_Init_FS+0x24>)
 8011b20:	4803      	ldr	r0, [pc, #12]	@ (8011b30 <CDC_Init_FS+0x20>)
 8011b22:	f7fb fc57 	bl	800d3d4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011b26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	bd80      	pop	{r7, pc}
 8011b2c:	20000ff8 	.word	0x20000ff8
 8011b30:	2000051c 	.word	0x2000051c
 8011b34:	200007f8 	.word	0x200007f8

08011b38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011b38:	b480      	push	{r7}
 8011b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011b3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011b3e:	4618      	mov	r0, r3
 8011b40:	46bd      	mov	sp, r7
 8011b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b46:	4770      	bx	lr

08011b48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	6039      	str	r1, [r7, #0]
 8011b52:	71fb      	strb	r3, [r7, #7]
 8011b54:	4613      	mov	r3, r2
 8011b56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011b58:	79fb      	ldrb	r3, [r7, #7]
 8011b5a:	2b23      	cmp	r3, #35	@ 0x23
 8011b5c:	d84a      	bhi.n	8011bf4 <CDC_Control_FS+0xac>
 8011b5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011b64 <CDC_Control_FS+0x1c>)
 8011b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b64:	08011bf5 	.word	0x08011bf5
 8011b68:	08011bf5 	.word	0x08011bf5
 8011b6c:	08011bf5 	.word	0x08011bf5
 8011b70:	08011bf5 	.word	0x08011bf5
 8011b74:	08011bf5 	.word	0x08011bf5
 8011b78:	08011bf5 	.word	0x08011bf5
 8011b7c:	08011bf5 	.word	0x08011bf5
 8011b80:	08011bf5 	.word	0x08011bf5
 8011b84:	08011bf5 	.word	0x08011bf5
 8011b88:	08011bf5 	.word	0x08011bf5
 8011b8c:	08011bf5 	.word	0x08011bf5
 8011b90:	08011bf5 	.word	0x08011bf5
 8011b94:	08011bf5 	.word	0x08011bf5
 8011b98:	08011bf5 	.word	0x08011bf5
 8011b9c:	08011bf5 	.word	0x08011bf5
 8011ba0:	08011bf5 	.word	0x08011bf5
 8011ba4:	08011bf5 	.word	0x08011bf5
 8011ba8:	08011bf5 	.word	0x08011bf5
 8011bac:	08011bf5 	.word	0x08011bf5
 8011bb0:	08011bf5 	.word	0x08011bf5
 8011bb4:	08011bf5 	.word	0x08011bf5
 8011bb8:	08011bf5 	.word	0x08011bf5
 8011bbc:	08011bf5 	.word	0x08011bf5
 8011bc0:	08011bf5 	.word	0x08011bf5
 8011bc4:	08011bf5 	.word	0x08011bf5
 8011bc8:	08011bf5 	.word	0x08011bf5
 8011bcc:	08011bf5 	.word	0x08011bf5
 8011bd0:	08011bf5 	.word	0x08011bf5
 8011bd4:	08011bf5 	.word	0x08011bf5
 8011bd8:	08011bf5 	.word	0x08011bf5
 8011bdc:	08011bf5 	.word	0x08011bf5
 8011be0:	08011bf5 	.word	0x08011bf5
 8011be4:	08011bf5 	.word	0x08011bf5
 8011be8:	08011bf5 	.word	0x08011bf5
 8011bec:	08011bf5 	.word	0x08011bf5
 8011bf0:	08011bf5 	.word	0x08011bf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011bf4:	bf00      	nop
  }

  return (USBD_OK);
 8011bf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	370c      	adds	r7, #12
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c02:	4770      	bx	lr

08011c04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b082      	sub	sp, #8
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	6078      	str	r0, [r7, #4]
 8011c0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011c0e:	6879      	ldr	r1, [r7, #4]
 8011c10:	4805      	ldr	r0, [pc, #20]	@ (8011c28 <CDC_Receive_FS+0x24>)
 8011c12:	f7fb fbdf 	bl	800d3d4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011c16:	4804      	ldr	r0, [pc, #16]	@ (8011c28 <CDC_Receive_FS+0x24>)
 8011c18:	f7fb fc3a 	bl	800d490 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011c1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3708      	adds	r7, #8
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}
 8011c26:	bf00      	nop
 8011c28:	2000051c 	.word	0x2000051c

08011c2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
 8011c34:	460b      	mov	r3, r1
 8011c36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011c38:	2300      	movs	r3, #0
 8011c3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8011c74 <CDC_Transmit_FS+0x48>)
 8011c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011c42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d001      	beq.n	8011c52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011c4e:	2301      	movs	r3, #1
 8011c50:	e00b      	b.n	8011c6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011c52:	887b      	ldrh	r3, [r7, #2]
 8011c54:	461a      	mov	r2, r3
 8011c56:	6879      	ldr	r1, [r7, #4]
 8011c58:	4806      	ldr	r0, [pc, #24]	@ (8011c74 <CDC_Transmit_FS+0x48>)
 8011c5a:	f7fb fb99 	bl	800d390 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011c5e:	4805      	ldr	r0, [pc, #20]	@ (8011c74 <CDC_Transmit_FS+0x48>)
 8011c60:	f7fb fbd6 	bl	800d410 <USBD_CDC_TransmitPacket>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}
 8011c72:	bf00      	nop
 8011c74:	2000051c 	.word	0x2000051c

08011c78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b087      	sub	sp, #28
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	4613      	mov	r3, r2
 8011c84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011c86:	2300      	movs	r3, #0
 8011c88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011c8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	371c      	adds	r7, #28
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
	...

08011c9c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c9c:	b480      	push	{r7}
 8011c9e:	b083      	sub	sp, #12
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	6039      	str	r1, [r7, #0]
 8011ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011ca8:	683b      	ldr	r3, [r7, #0]
 8011caa:	2212      	movs	r2, #18
 8011cac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011cae:	4b03      	ldr	r3, [pc, #12]	@ (8011cbc <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	370c      	adds	r7, #12
 8011cb4:	46bd      	mov	sp, r7
 8011cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cba:	4770      	bx	lr
 8011cbc:	20000100 	.word	0x20000100

08011cc0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	6039      	str	r1, [r7, #0]
 8011cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	2204      	movs	r2, #4
 8011cd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011cd2:	4b03      	ldr	r3, [pc, #12]	@ (8011ce0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011cd4:	4618      	mov	r0, r3
 8011cd6:	370c      	adds	r7, #12
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cde:	4770      	bx	lr
 8011ce0:	20000114 	.word	0x20000114

08011ce4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	4603      	mov	r3, r0
 8011cec:	6039      	str	r1, [r7, #0]
 8011cee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011cf0:	79fb      	ldrb	r3, [r7, #7]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d105      	bne.n	8011d02 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	4907      	ldr	r1, [pc, #28]	@ (8011d18 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011cfa:	4808      	ldr	r0, [pc, #32]	@ (8011d1c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011cfc:	f7fc fdac 	bl	800e858 <USBD_GetString>
 8011d00:	e004      	b.n	8011d0c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011d02:	683a      	ldr	r2, [r7, #0]
 8011d04:	4904      	ldr	r1, [pc, #16]	@ (8011d18 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011d06:	4805      	ldr	r0, [pc, #20]	@ (8011d1c <USBD_CDC_ProductStrDescriptor+0x38>)
 8011d08:	f7fc fda6 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d0c:	4b02      	ldr	r3, [pc, #8]	@ (8011d18 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3708      	adds	r7, #8
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	200017f8 	.word	0x200017f8
 8011d1c:	08012d20 	.word	0x08012d20

08011d20 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011d2c:	683a      	ldr	r2, [r7, #0]
 8011d2e:	4904      	ldr	r1, [pc, #16]	@ (8011d40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011d30:	4804      	ldr	r0, [pc, #16]	@ (8011d44 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011d32:	f7fc fd91 	bl	800e858 <USBD_GetString>
  return USBD_StrDesc;
 8011d36:	4b02      	ldr	r3, [pc, #8]	@ (8011d40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	200017f8 	.word	0x200017f8
 8011d44:	08012d38 	.word	0x08012d38

08011d48 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	4603      	mov	r3, r0
 8011d50:	6039      	str	r1, [r7, #0]
 8011d52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	221a      	movs	r2, #26
 8011d58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011d5a:	f000 f843 	bl	8011de4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011d5e:	4b02      	ldr	r3, [pc, #8]	@ (8011d68 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011d60:	4618      	mov	r0, r3
 8011d62:	3708      	adds	r7, #8
 8011d64:	46bd      	mov	sp, r7
 8011d66:	bd80      	pop	{r7, pc}
 8011d68:	20000118 	.word	0x20000118

08011d6c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	b082      	sub	sp, #8
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	4603      	mov	r3, r0
 8011d74:	6039      	str	r1, [r7, #0]
 8011d76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d78:	79fb      	ldrb	r3, [r7, #7]
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d105      	bne.n	8011d8a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011d7e:	683a      	ldr	r2, [r7, #0]
 8011d80:	4907      	ldr	r1, [pc, #28]	@ (8011da0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011d82:	4808      	ldr	r0, [pc, #32]	@ (8011da4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011d84:	f7fc fd68 	bl	800e858 <USBD_GetString>
 8011d88:	e004      	b.n	8011d94 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011d8a:	683a      	ldr	r2, [r7, #0]
 8011d8c:	4904      	ldr	r1, [pc, #16]	@ (8011da0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011d8e:	4805      	ldr	r0, [pc, #20]	@ (8011da4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011d90:	f7fc fd62 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d94:	4b02      	ldr	r3, [pc, #8]	@ (8011da0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011d96:	4618      	mov	r0, r3
 8011d98:	3708      	adds	r7, #8
 8011d9a:	46bd      	mov	sp, r7
 8011d9c:	bd80      	pop	{r7, pc}
 8011d9e:	bf00      	nop
 8011da0:	200017f8 	.word	0x200017f8
 8011da4:	08012d4c 	.word	0x08012d4c

08011da8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	b082      	sub	sp, #8
 8011dac:	af00      	add	r7, sp, #0
 8011dae:	4603      	mov	r3, r0
 8011db0:	6039      	str	r1, [r7, #0]
 8011db2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d105      	bne.n	8011dc6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011dba:	683a      	ldr	r2, [r7, #0]
 8011dbc:	4907      	ldr	r1, [pc, #28]	@ (8011ddc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011dbe:	4808      	ldr	r0, [pc, #32]	@ (8011de0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011dc0:	f7fc fd4a 	bl	800e858 <USBD_GetString>
 8011dc4:	e004      	b.n	8011dd0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011dc6:	683a      	ldr	r2, [r7, #0]
 8011dc8:	4904      	ldr	r1, [pc, #16]	@ (8011ddc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011dca:	4805      	ldr	r0, [pc, #20]	@ (8011de0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011dcc:	f7fc fd44 	bl	800e858 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011dd0:	4b02      	ldr	r3, [pc, #8]	@ (8011ddc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011dd2:	4618      	mov	r0, r3
 8011dd4:	3708      	adds	r7, #8
 8011dd6:	46bd      	mov	sp, r7
 8011dd8:	bd80      	pop	{r7, pc}
 8011dda:	bf00      	nop
 8011ddc:	200017f8 	.word	0x200017f8
 8011de0:	08012d58 	.word	0x08012d58

08011de4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011dea:	4b0f      	ldr	r3, [pc, #60]	@ (8011e28 <Get_SerialNum+0x44>)
 8011dec:	681b      	ldr	r3, [r3, #0]
 8011dee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011df0:	4b0e      	ldr	r3, [pc, #56]	@ (8011e2c <Get_SerialNum+0x48>)
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011df6:	4b0e      	ldr	r3, [pc, #56]	@ (8011e30 <Get_SerialNum+0x4c>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	4413      	add	r3, r2
 8011e02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011e04:	68fb      	ldr	r3, [r7, #12]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d009      	beq.n	8011e1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011e0a:	2208      	movs	r2, #8
 8011e0c:	4909      	ldr	r1, [pc, #36]	@ (8011e34 <Get_SerialNum+0x50>)
 8011e0e:	68f8      	ldr	r0, [r7, #12]
 8011e10:	f000 f814 	bl	8011e3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011e14:	2204      	movs	r2, #4
 8011e16:	4908      	ldr	r1, [pc, #32]	@ (8011e38 <Get_SerialNum+0x54>)
 8011e18:	68b8      	ldr	r0, [r7, #8]
 8011e1a:	f000 f80f 	bl	8011e3c <IntToUnicode>
  }
}
 8011e1e:	bf00      	nop
 8011e20:	3710      	adds	r7, #16
 8011e22:	46bd      	mov	sp, r7
 8011e24:	bd80      	pop	{r7, pc}
 8011e26:	bf00      	nop
 8011e28:	1fff7590 	.word	0x1fff7590
 8011e2c:	1fff7594 	.word	0x1fff7594
 8011e30:	1fff7598 	.word	0x1fff7598
 8011e34:	2000011a 	.word	0x2000011a
 8011e38:	2000012a 	.word	0x2000012a

08011e3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011e3c:	b480      	push	{r7}
 8011e3e:	b087      	sub	sp, #28
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	60f8      	str	r0, [r7, #12]
 8011e44:	60b9      	str	r1, [r7, #8]
 8011e46:	4613      	mov	r3, r2
 8011e48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011e4e:	2300      	movs	r3, #0
 8011e50:	75fb      	strb	r3, [r7, #23]
 8011e52:	e027      	b.n	8011ea4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011e54:	68fb      	ldr	r3, [r7, #12]
 8011e56:	0f1b      	lsrs	r3, r3, #28
 8011e58:	2b09      	cmp	r3, #9
 8011e5a:	d80b      	bhi.n	8011e74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	0f1b      	lsrs	r3, r3, #28
 8011e60:	b2da      	uxtb	r2, r3
 8011e62:	7dfb      	ldrb	r3, [r7, #23]
 8011e64:	005b      	lsls	r3, r3, #1
 8011e66:	4619      	mov	r1, r3
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	440b      	add	r3, r1
 8011e6c:	3230      	adds	r2, #48	@ 0x30
 8011e6e:	b2d2      	uxtb	r2, r2
 8011e70:	701a      	strb	r2, [r3, #0]
 8011e72:	e00a      	b.n	8011e8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	0f1b      	lsrs	r3, r3, #28
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	7dfb      	ldrb	r3, [r7, #23]
 8011e7c:	005b      	lsls	r3, r3, #1
 8011e7e:	4619      	mov	r1, r3
 8011e80:	68bb      	ldr	r3, [r7, #8]
 8011e82:	440b      	add	r3, r1
 8011e84:	3237      	adds	r2, #55	@ 0x37
 8011e86:	b2d2      	uxtb	r2, r2
 8011e88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	011b      	lsls	r3, r3, #4
 8011e8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e90:	7dfb      	ldrb	r3, [r7, #23]
 8011e92:	005b      	lsls	r3, r3, #1
 8011e94:	3301      	adds	r3, #1
 8011e96:	68ba      	ldr	r2, [r7, #8]
 8011e98:	4413      	add	r3, r2
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e9e:	7dfb      	ldrb	r3, [r7, #23]
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	75fb      	strb	r3, [r7, #23]
 8011ea4:	7dfa      	ldrb	r2, [r7, #23]
 8011ea6:	79fb      	ldrb	r3, [r7, #7]
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d3d3      	bcc.n	8011e54 <IntToUnicode+0x18>
  }
}
 8011eac:	bf00      	nop
 8011eae:	bf00      	nop
 8011eb0:	371c      	adds	r7, #28
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <LL_AHB2_GRP1_EnableClock>:
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b085      	sub	sp, #20
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ec6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011ec8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	4313      	orrs	r3, r2
 8011ed0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011ed2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ed6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	4013      	ands	r3, r2
 8011edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011ede:	68fb      	ldr	r3, [r7, #12]
}
 8011ee0:	bf00      	nop
 8011ee2:	3714      	adds	r7, #20
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eea:	4770      	bx	lr

08011eec <LL_APB1_GRP1_EnableClock>:
{
 8011eec:	b480      	push	{r7}
 8011eee:	b085      	sub	sp, #20
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011ef4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ef8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011efa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4313      	orrs	r3, r2
 8011f02:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011f04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	4013      	ands	r3, r2
 8011f0e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f10:	68fb      	ldr	r3, [r7, #12]
}
 8011f12:	bf00      	nop
 8011f14:	3714      	adds	r7, #20
 8011f16:	46bd      	mov	sp, r7
 8011f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f1c:	4770      	bx	lr
	...

08011f20 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b09c      	sub	sp, #112	@ 0x70
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	601a      	str	r2, [r3, #0]
 8011f30:	605a      	str	r2, [r3, #4]
 8011f32:	609a      	str	r2, [r3, #8]
 8011f34:	60da      	str	r2, [r3, #12]
 8011f36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011f38:	f107 030c 	add.w	r3, r7, #12
 8011f3c:	2250      	movs	r2, #80	@ 0x50
 8011f3e:	2100      	movs	r1, #0
 8011f40:	4618      	mov	r0, r3
 8011f42:	f000 fe47 	bl	8012bd4 <memset>
  if(pcdHandle->Instance==USB)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	4a23      	ldr	r2, [pc, #140]	@ (8011fd8 <HAL_PCD_MspInit+0xb8>)
 8011f4c:	4293      	cmp	r3, r2
 8011f4e:	d13e      	bne.n	8011fce <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011f50:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011f54:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8011f56:	2318      	movs	r3, #24
 8011f58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8011f5a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011f5e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8011f60:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011f64:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8011f66:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011f6a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8011f6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011f70:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8011f72:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011f76:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011f78:	f107 030c 	add.w	r3, r7, #12
 8011f7c:	4618      	mov	r0, r3
 8011f7e:	f7f6 fcef 	bl	8008960 <HAL_RCCEx_PeriphCLKConfig>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d001      	beq.n	8011f8c <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8011f88:	f7f0 fa72 	bl	8002470 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	f7ff ff94 	bl	8011eba <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011f92:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011f96:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f98:	2302      	movs	r3, #2
 8011f9a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f9c:	2300      	movs	r3, #0
 8011f9e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fa0:	2300      	movs	r3, #0
 8011fa2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011fa4:	230a      	movs	r3, #10
 8011fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fa8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011fac:	4619      	mov	r1, r3
 8011fae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011fb2:	f7f1 f879 	bl	80030a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011fb6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8011fba:	f7ff ff97 	bl	8011eec <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011fbe:	2200      	movs	r2, #0
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	2014      	movs	r0, #20
 8011fc4:	f7f0 ff45 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011fc8:	2014      	movs	r0, #20
 8011fca:	f7f0 ff5c 	bl	8002e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011fce:	bf00      	nop
 8011fd0:	3770      	adds	r7, #112	@ 0x70
 8011fd2:	46bd      	mov	sp, r7
 8011fd4:	bd80      	pop	{r7, pc}
 8011fd6:	bf00      	nop
 8011fd8:	40006800 	.word	0x40006800

08011fdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fdc:	b580      	push	{r7, lr}
 8011fde:	b082      	sub	sp, #8
 8011fe0:	af00      	add	r7, sp, #0
 8011fe2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	4610      	mov	r0, r2
 8011ff4:	f7fb fb35 	bl	800d662 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011ff8:	bf00      	nop
 8011ffa:	3708      	adds	r7, #8
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}

08012000 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b082      	sub	sp, #8
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	460b      	mov	r3, r1
 801200a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012012:	78fa      	ldrb	r2, [r7, #3]
 8012014:	6879      	ldr	r1, [r7, #4]
 8012016:	4613      	mov	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	440b      	add	r3, r1
 8012020:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012024:	681a      	ldr	r2, [r3, #0]
 8012026:	78fb      	ldrb	r3, [r7, #3]
 8012028:	4619      	mov	r1, r3
 801202a:	f7fb fb6f 	bl	800d70c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 801202e:	bf00      	nop
 8012030:	3708      	adds	r7, #8
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b082      	sub	sp, #8
 801203a:	af00      	add	r7, sp, #0
 801203c:	6078      	str	r0, [r7, #4]
 801203e:	460b      	mov	r3, r1
 8012040:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012048:	78fa      	ldrb	r2, [r7, #3]
 801204a:	6879      	ldr	r1, [r7, #4]
 801204c:	4613      	mov	r3, r2
 801204e:	009b      	lsls	r3, r3, #2
 8012050:	4413      	add	r3, r2
 8012052:	00db      	lsls	r3, r3, #3
 8012054:	440b      	add	r3, r1
 8012056:	3324      	adds	r3, #36	@ 0x24
 8012058:	681a      	ldr	r2, [r3, #0]
 801205a:	78fb      	ldrb	r3, [r7, #3]
 801205c:	4619      	mov	r1, r3
 801205e:	f7fb fc08 	bl	800d872 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8012062:	bf00      	nop
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}

0801206a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801206a:	b580      	push	{r7, lr}
 801206c:	b082      	sub	sp, #8
 801206e:	af00      	add	r7, sp, #0
 8012070:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012078:	4618      	mov	r0, r3
 801207a:	f7fb fd42 	bl	800db02 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 801207e:	bf00      	nop
 8012080:	3708      	adds	r7, #8
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b084      	sub	sp, #16
 801208a:	af00      	add	r7, sp, #0
 801208c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801208e:	2301      	movs	r3, #1
 8012090:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	795b      	ldrb	r3, [r3, #5]
 8012096:	2b02      	cmp	r3, #2
 8012098:	d001      	beq.n	801209e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 801209a:	f7f0 f9e9 	bl	8002470 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120a4:	7bfa      	ldrb	r2, [r7, #15]
 80120a6:	4611      	mov	r1, r2
 80120a8:	4618      	mov	r0, r3
 80120aa:	f7fb fce6 	bl	800da7a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120b4:	4618      	mov	r0, r3
 80120b6:	f7fb fc8e 	bl	800d9d6 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80120ba:	bf00      	nop
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}
	...

080120c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120d2:	4618      	mov	r0, r3
 80120d4:	f7fb fce1 	bl	800da9a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	7a5b      	ldrb	r3, [r3, #9]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d005      	beq.n	80120ec <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80120e0:	4b04      	ldr	r3, [pc, #16]	@ (80120f4 <HAL_PCD_SuspendCallback+0x30>)
 80120e2:	691b      	ldr	r3, [r3, #16]
 80120e4:	4a03      	ldr	r2, [pc, #12]	@ (80120f4 <HAL_PCD_SuspendCallback+0x30>)
 80120e6:	f043 0306 	orr.w	r3, r3, #6
 80120ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80120ec:	bf00      	nop
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}
 80120f4:	e000ed00 	.word	0xe000ed00

080120f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b082      	sub	sp, #8
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	7a5b      	ldrb	r3, [r3, #9]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d007      	beq.n	8012118 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012108:	4b08      	ldr	r3, [pc, #32]	@ (801212c <HAL_PCD_ResumeCallback+0x34>)
 801210a:	691b      	ldr	r3, [r3, #16]
 801210c:	4a07      	ldr	r2, [pc, #28]	@ (801212c <HAL_PCD_ResumeCallback+0x34>)
 801210e:	f023 0306 	bic.w	r3, r3, #6
 8012112:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8012114:	f000 f9fa 	bl	801250c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801211e:	4618      	mov	r0, r3
 8012120:	f7fb fcd7 	bl	800dad2 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8012124:	bf00      	nop
 8012126:	3708      	adds	r7, #8
 8012128:	46bd      	mov	sp, r7
 801212a:	bd80      	pop	{r7, pc}
 801212c:	e000ed00 	.word	0xe000ed00

08012130 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012138:	4a2c      	ldr	r2, [pc, #176]	@ (80121ec <USBD_LL_Init+0xbc>)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	4a2a      	ldr	r2, [pc, #168]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012144:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012148:	f7f5 f8c4 	bl	80072d4 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 801214c:	4b27      	ldr	r3, [pc, #156]	@ (80121ec <USBD_LL_Init+0xbc>)
 801214e:	4a28      	ldr	r2, [pc, #160]	@ (80121f0 <USBD_LL_Init+0xc0>)
 8012150:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8012152:	4b26      	ldr	r3, [pc, #152]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012154:	2208      	movs	r2, #8
 8012156:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8012158:	4b24      	ldr	r3, [pc, #144]	@ (80121ec <USBD_LL_Init+0xbc>)
 801215a:	2202      	movs	r2, #2
 801215c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801215e:	4b23      	ldr	r3, [pc, #140]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012160:	2202      	movs	r2, #2
 8012162:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8012164:	4b21      	ldr	r3, [pc, #132]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012166:	2200      	movs	r2, #0
 8012168:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801216a:	4b20      	ldr	r3, [pc, #128]	@ (80121ec <USBD_LL_Init+0xbc>)
 801216c:	2200      	movs	r2, #0
 801216e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012170:	4b1e      	ldr	r3, [pc, #120]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012172:	2200      	movs	r2, #0
 8012174:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8012176:	4b1d      	ldr	r3, [pc, #116]	@ (80121ec <USBD_LL_Init+0xbc>)
 8012178:	2200      	movs	r2, #0
 801217a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801217c:	481b      	ldr	r0, [pc, #108]	@ (80121ec <USBD_LL_Init+0xbc>)
 801217e:	f7f3 fb57 	bl	8005830 <HAL_PCD_Init>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d001      	beq.n	801218c <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012188:	f7f0 f972 	bl	8002470 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012192:	2318      	movs	r3, #24
 8012194:	2200      	movs	r2, #0
 8012196:	2100      	movs	r1, #0
 8012198:	f7f5 f810 	bl	80071bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121a2:	2358      	movs	r3, #88	@ 0x58
 80121a4:	2200      	movs	r2, #0
 80121a6:	2180      	movs	r1, #128	@ 0x80
 80121a8:	f7f5 f808 	bl	80071bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121b2:	23c0      	movs	r3, #192	@ 0xc0
 80121b4:	2200      	movs	r2, #0
 80121b6:	2181      	movs	r1, #129	@ 0x81
 80121b8:	f7f5 f800 	bl	80071bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121c2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 80121c6:	2200      	movs	r2, #0
 80121c8:	2101      	movs	r1, #1
 80121ca:	f7f4 fff7 	bl	80071bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80121d8:	2200      	movs	r2, #0
 80121da:	2182      	movs	r1, #130	@ 0x82
 80121dc:	f7f4 ffee 	bl	80071bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80121e0:	2300      	movs	r3, #0
}
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}
 80121ea:	bf00      	nop
 80121ec:	200019f8 	.word	0x200019f8
 80121f0:	40006800 	.word	0x40006800

080121f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80121f4:	b580      	push	{r7, lr}
 80121f6:	b084      	sub	sp, #16
 80121f8:	af00      	add	r7, sp, #0
 80121fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121fc:	2300      	movs	r3, #0
 80121fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012200:	2300      	movs	r3, #0
 8012202:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801220a:	4618      	mov	r0, r3
 801220c:	f7f3 fbde 	bl	80059cc <HAL_PCD_Start>
 8012210:	4603      	mov	r3, r0
 8012212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012214:	7bfb      	ldrb	r3, [r7, #15]
 8012216:	4618      	mov	r0, r3
 8012218:	f000 f97e 	bl	8012518 <USBD_Get_USB_Status>
 801221c:	4603      	mov	r3, r0
 801221e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012220:	7bbb      	ldrb	r3, [r7, #14]
}
 8012222:	4618      	mov	r0, r3
 8012224:	3710      	adds	r7, #16
 8012226:	46bd      	mov	sp, r7
 8012228:	bd80      	pop	{r7, pc}

0801222a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801222a:	b580      	push	{r7, lr}
 801222c:	b084      	sub	sp, #16
 801222e:	af00      	add	r7, sp, #0
 8012230:	6078      	str	r0, [r7, #4]
 8012232:	4608      	mov	r0, r1
 8012234:	4611      	mov	r1, r2
 8012236:	461a      	mov	r2, r3
 8012238:	4603      	mov	r3, r0
 801223a:	70fb      	strb	r3, [r7, #3]
 801223c:	460b      	mov	r3, r1
 801223e:	70bb      	strb	r3, [r7, #2]
 8012240:	4613      	mov	r3, r2
 8012242:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012244:	2300      	movs	r3, #0
 8012246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012252:	78bb      	ldrb	r3, [r7, #2]
 8012254:	883a      	ldrh	r2, [r7, #0]
 8012256:	78f9      	ldrb	r1, [r7, #3]
 8012258:	f7f3 fd25 	bl	8005ca6 <HAL_PCD_EP_Open>
 801225c:	4603      	mov	r3, r0
 801225e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012260:	7bfb      	ldrb	r3, [r7, #15]
 8012262:	4618      	mov	r0, r3
 8012264:	f000 f958 	bl	8012518 <USBD_Get_USB_Status>
 8012268:	4603      	mov	r3, r0
 801226a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801226c:	7bbb      	ldrb	r3, [r7, #14]
}
 801226e:	4618      	mov	r0, r3
 8012270:	3710      	adds	r7, #16
 8012272:	46bd      	mov	sp, r7
 8012274:	bd80      	pop	{r7, pc}

08012276 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012276:	b580      	push	{r7, lr}
 8012278:	b084      	sub	sp, #16
 801227a:	af00      	add	r7, sp, #0
 801227c:	6078      	str	r0, [r7, #4]
 801227e:	460b      	mov	r3, r1
 8012280:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012282:	2300      	movs	r3, #0
 8012284:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012286:	2300      	movs	r3, #0
 8012288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012290:	78fa      	ldrb	r2, [r7, #3]
 8012292:	4611      	mov	r1, r2
 8012294:	4618      	mov	r0, r3
 8012296:	f7f3 fd63 	bl	8005d60 <HAL_PCD_EP_Close>
 801229a:	4603      	mov	r3, r0
 801229c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801229e:	7bfb      	ldrb	r3, [r7, #15]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f000 f939 	bl	8012518 <USBD_Get_USB_Status>
 80122a6:	4603      	mov	r3, r0
 80122a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80122ac:	4618      	mov	r0, r3
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
 80122bc:	460b      	mov	r3, r1
 80122be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122c0:	2300      	movs	r3, #0
 80122c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122c4:	2300      	movs	r3, #0
 80122c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122ce:	78fa      	ldrb	r2, [r7, #3]
 80122d0:	4611      	mov	r1, r2
 80122d2:	4618      	mov	r0, r3
 80122d4:	f7f3 fe0c 	bl	8005ef0 <HAL_PCD_EP_SetStall>
 80122d8:	4603      	mov	r3, r0
 80122da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122dc:	7bfb      	ldrb	r3, [r7, #15]
 80122de:	4618      	mov	r0, r3
 80122e0:	f000 f91a 	bl	8012518 <USBD_Get_USB_Status>
 80122e4:	4603      	mov	r3, r0
 80122e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80122ea:	4618      	mov	r0, r3
 80122ec:	3710      	adds	r7, #16
 80122ee:	46bd      	mov	sp, r7
 80122f0:	bd80      	pop	{r7, pc}

080122f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b084      	sub	sp, #16
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
 80122fa:	460b      	mov	r3, r1
 80122fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122fe:	2300      	movs	r3, #0
 8012300:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012302:	2300      	movs	r3, #0
 8012304:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801230c:	78fa      	ldrb	r2, [r7, #3]
 801230e:	4611      	mov	r1, r2
 8012310:	4618      	mov	r0, r3
 8012312:	f7f3 fe3f 	bl	8005f94 <HAL_PCD_EP_ClrStall>
 8012316:	4603      	mov	r3, r0
 8012318:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801231a:	7bfb      	ldrb	r3, [r7, #15]
 801231c:	4618      	mov	r0, r3
 801231e:	f000 f8fb 	bl	8012518 <USBD_Get_USB_Status>
 8012322:	4603      	mov	r3, r0
 8012324:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012326:	7bbb      	ldrb	r3, [r7, #14]
}
 8012328:	4618      	mov	r0, r3
 801232a:	3710      	adds	r7, #16
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	460b      	mov	r3, r1
 801233a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012342:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012348:	2b00      	cmp	r3, #0
 801234a:	da0b      	bge.n	8012364 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801234c:	78fb      	ldrb	r3, [r7, #3]
 801234e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012352:	68f9      	ldr	r1, [r7, #12]
 8012354:	4613      	mov	r3, r2
 8012356:	009b      	lsls	r3, r3, #2
 8012358:	4413      	add	r3, r2
 801235a:	00db      	lsls	r3, r3, #3
 801235c:	440b      	add	r3, r1
 801235e:	3312      	adds	r3, #18
 8012360:	781b      	ldrb	r3, [r3, #0]
 8012362:	e00b      	b.n	801237c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012364:	78fb      	ldrb	r3, [r7, #3]
 8012366:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801236a:	68f9      	ldr	r1, [r7, #12]
 801236c:	4613      	mov	r3, r2
 801236e:	009b      	lsls	r3, r3, #2
 8012370:	4413      	add	r3, r2
 8012372:	00db      	lsls	r3, r3, #3
 8012374:	440b      	add	r3, r1
 8012376:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 801237a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801237c:	4618      	mov	r0, r3
 801237e:	3714      	adds	r7, #20
 8012380:	46bd      	mov	sp, r7
 8012382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012386:	4770      	bx	lr

08012388 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b084      	sub	sp, #16
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	460b      	mov	r3, r1
 8012392:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012394:	2300      	movs	r3, #0
 8012396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012398:	2300      	movs	r3, #0
 801239a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80123a2:	78fa      	ldrb	r2, [r7, #3]
 80123a4:	4611      	mov	r1, r2
 80123a6:	4618      	mov	r0, r3
 80123a8:	f7f3 fc59 	bl	8005c5e <HAL_PCD_SetAddress>
 80123ac:	4603      	mov	r3, r0
 80123ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123b0:	7bfb      	ldrb	r3, [r7, #15]
 80123b2:	4618      	mov	r0, r3
 80123b4:	f000 f8b0 	bl	8012518 <USBD_Get_USB_Status>
 80123b8:	4603      	mov	r3, r0
 80123ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80123bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3710      	adds	r7, #16
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}

080123c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123c6:	b580      	push	{r7, lr}
 80123c8:	b086      	sub	sp, #24
 80123ca:	af00      	add	r7, sp, #0
 80123cc:	60f8      	str	r0, [r7, #12]
 80123ce:	607a      	str	r2, [r7, #4]
 80123d0:	603b      	str	r3, [r7, #0]
 80123d2:	460b      	mov	r3, r1
 80123d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123d6:	2300      	movs	r3, #0
 80123d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123da:	2300      	movs	r3, #0
 80123dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80123e4:	7af9      	ldrb	r1, [r7, #11]
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	f7f3 fd4a 	bl	8005e82 <HAL_PCD_EP_Transmit>
 80123ee:	4603      	mov	r3, r0
 80123f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123f2:	7dfb      	ldrb	r3, [r7, #23]
 80123f4:	4618      	mov	r0, r3
 80123f6:	f000 f88f 	bl	8012518 <USBD_Get_USB_Status>
 80123fa:	4603      	mov	r3, r0
 80123fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123fe:	7dbb      	ldrb	r3, [r7, #22]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3718      	adds	r7, #24
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b086      	sub	sp, #24
 801240c:	af00      	add	r7, sp, #0
 801240e:	60f8      	str	r0, [r7, #12]
 8012410:	607a      	str	r2, [r7, #4]
 8012412:	603b      	str	r3, [r7, #0]
 8012414:	460b      	mov	r3, r1
 8012416:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012418:	2300      	movs	r3, #0
 801241a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801241c:	2300      	movs	r3, #0
 801241e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012426:	7af9      	ldrb	r1, [r7, #11]
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	687a      	ldr	r2, [r7, #4]
 801242c:	f7f3 fce0 	bl	8005df0 <HAL_PCD_EP_Receive>
 8012430:	4603      	mov	r3, r0
 8012432:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012434:	7dfb      	ldrb	r3, [r7, #23]
 8012436:	4618      	mov	r0, r3
 8012438:	f000 f86e 	bl	8012518 <USBD_Get_USB_Status>
 801243c:	4603      	mov	r3, r0
 801243e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012440:	7dbb      	ldrb	r3, [r7, #22]
}
 8012442:	4618      	mov	r0, r3
 8012444:	3718      	adds	r7, #24
 8012446:	46bd      	mov	sp, r7
 8012448:	bd80      	pop	{r7, pc}

0801244a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801244a:	b580      	push	{r7, lr}
 801244c:	b082      	sub	sp, #8
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
 8012452:	460b      	mov	r3, r1
 8012454:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801245c:	78fa      	ldrb	r2, [r7, #3]
 801245e:	4611      	mov	r1, r2
 8012460:	4618      	mov	r0, r3
 8012462:	f7f3 fcf6 	bl	8005e52 <HAL_PCD_EP_GetRxCount>
 8012466:	4603      	mov	r3, r0
}
 8012468:	4618      	mov	r0, r3
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}

08012470 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b082      	sub	sp, #8
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	460b      	mov	r3, r1
 801247a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 801247c:	78fb      	ldrb	r3, [r7, #3]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d002      	beq.n	8012488 <HAL_PCDEx_LPM_Callback+0x18>
 8012482:	2b01      	cmp	r3, #1
 8012484:	d013      	beq.n	80124ae <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8012486:	e023      	b.n	80124d0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	7a5b      	ldrb	r3, [r3, #9]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d007      	beq.n	80124a0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012490:	f000 f83c 	bl	801250c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012494:	4b10      	ldr	r3, [pc, #64]	@ (80124d8 <HAL_PCDEx_LPM_Callback+0x68>)
 8012496:	691b      	ldr	r3, [r3, #16]
 8012498:	4a0f      	ldr	r2, [pc, #60]	@ (80124d8 <HAL_PCDEx_LPM_Callback+0x68>)
 801249a:	f023 0306 	bic.w	r3, r3, #6
 801249e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124a6:	4618      	mov	r0, r3
 80124a8:	f7fb fb13 	bl	800dad2 <USBD_LL_Resume>
    break;
 80124ac:	e010      	b.n	80124d0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124b4:	4618      	mov	r0, r3
 80124b6:	f7fb faf0 	bl	800da9a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	7a5b      	ldrb	r3, [r3, #9]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d005      	beq.n	80124ce <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124c2:	4b05      	ldr	r3, [pc, #20]	@ (80124d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80124c4:	691b      	ldr	r3, [r3, #16]
 80124c6:	4a04      	ldr	r2, [pc, #16]	@ (80124d8 <HAL_PCDEx_LPM_Callback+0x68>)
 80124c8:	f043 0306 	orr.w	r3, r3, #6
 80124cc:	6113      	str	r3, [r2, #16]
    break;
 80124ce:	bf00      	nop
}
 80124d0:	bf00      	nop
 80124d2:	3708      	adds	r7, #8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	e000ed00 	.word	0xe000ed00

080124dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80124e4:	4b03      	ldr	r3, [pc, #12]	@ (80124f4 <USBD_static_malloc+0x18>)
}
 80124e6:	4618      	mov	r0, r3
 80124e8:	370c      	adds	r7, #12
 80124ea:	46bd      	mov	sp, r7
 80124ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f0:	4770      	bx	lr
 80124f2:	bf00      	nop
 80124f4:	20001cd4 	.word	0x20001cd4

080124f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012510:	f7ef fd3c 	bl	8001f8c <SystemClock_Config>
}
 8012514:	bf00      	nop
 8012516:	bd80      	pop	{r7, pc}

08012518 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012518:	b480      	push	{r7}
 801251a:	b085      	sub	sp, #20
 801251c:	af00      	add	r7, sp, #0
 801251e:	4603      	mov	r3, r0
 8012520:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012522:	2300      	movs	r3, #0
 8012524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012526:	79fb      	ldrb	r3, [r7, #7]
 8012528:	2b03      	cmp	r3, #3
 801252a:	d817      	bhi.n	801255c <USBD_Get_USB_Status+0x44>
 801252c:	a201      	add	r2, pc, #4	@ (adr r2, 8012534 <USBD_Get_USB_Status+0x1c>)
 801252e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012532:	bf00      	nop
 8012534:	08012545 	.word	0x08012545
 8012538:	0801254b 	.word	0x0801254b
 801253c:	08012551 	.word	0x08012551
 8012540:	08012557 	.word	0x08012557
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8012544:	2300      	movs	r3, #0
 8012546:	73fb      	strb	r3, [r7, #15]
    break;
 8012548:	e00b      	b.n	8012562 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801254a:	2303      	movs	r3, #3
 801254c:	73fb      	strb	r3, [r7, #15]
    break;
 801254e:	e008      	b.n	8012562 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012550:	2301      	movs	r3, #1
 8012552:	73fb      	strb	r3, [r7, #15]
    break;
 8012554:	e005      	b.n	8012562 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8012556:	2303      	movs	r3, #3
 8012558:	73fb      	strb	r3, [r7, #15]
    break;
 801255a:	e002      	b.n	8012562 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801255c:	2303      	movs	r3, #3
 801255e:	73fb      	strb	r3, [r7, #15]
    break;
 8012560:	bf00      	nop
  }
  return usb_status;
 8012562:	7bfb      	ldrb	r3, [r7, #15]
}
 8012564:	4618      	mov	r0, r3
 8012566:	3714      	adds	r7, #20
 8012568:	46bd      	mov	sp, r7
 801256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256e:	4770      	bx	lr

08012570 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012570:	b480      	push	{r7}
 8012572:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8012574:	4b05      	ldr	r3, [pc, #20]	@ (801258c <UTIL_LPM_Init+0x1c>)
 8012576:	2200      	movs	r2, #0
 8012578:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801257a:	4b05      	ldr	r3, [pc, #20]	@ (8012590 <UTIL_LPM_Init+0x20>)
 801257c:	2200      	movs	r2, #0
 801257e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012580:	bf00      	nop
 8012582:	46bd      	mov	sp, r7
 8012584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop
 801258c:	20001ef4 	.word	0x20001ef4
 8012590:	20001ef8 	.word	0x20001ef8

08012594 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8012594:	b480      	push	{r7}
 8012596:	b087      	sub	sp, #28
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	460b      	mov	r3, r1
 801259e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80125a0:	f3ef 8310 	mrs	r3, PRIMASK
 80125a4:	613b      	str	r3, [r7, #16]
  return(result);
 80125a6:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80125a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80125aa:	b672      	cpsid	i
}
 80125ac:	bf00      	nop
  
  switch(state)
 80125ae:	78fb      	ldrb	r3, [r7, #3]
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d008      	beq.n	80125c6 <UTIL_LPM_SetOffMode+0x32>
 80125b4:	2b01      	cmp	r3, #1
 80125b6:	d10e      	bne.n	80125d6 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80125b8:	4b0d      	ldr	r3, [pc, #52]	@ (80125f0 <UTIL_LPM_SetOffMode+0x5c>)
 80125ba:	681a      	ldr	r2, [r3, #0]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	4313      	orrs	r3, r2
 80125c0:	4a0b      	ldr	r2, [pc, #44]	@ (80125f0 <UTIL_LPM_SetOffMode+0x5c>)
 80125c2:	6013      	str	r3, [r2, #0]
      break;
 80125c4:	e008      	b.n	80125d8 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	43da      	mvns	r2, r3
 80125ca:	4b09      	ldr	r3, [pc, #36]	@ (80125f0 <UTIL_LPM_SetOffMode+0x5c>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4013      	ands	r3, r2
 80125d0:	4a07      	ldr	r2, [pc, #28]	@ (80125f0 <UTIL_LPM_SetOffMode+0x5c>)
 80125d2:	6013      	str	r3, [r2, #0]
      break;
 80125d4:	e000      	b.n	80125d8 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80125d6:	bf00      	nop
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f383 8810 	msr	PRIMASK, r3
}
 80125e2:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80125e4:	bf00      	nop
 80125e6:	371c      	adds	r7, #28
 80125e8:	46bd      	mov	sp, r7
 80125ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ee:	4770      	bx	lr
 80125f0:	20001ef8 	.word	0x20001ef8

080125f4 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b090      	sub	sp, #64	@ 0x40
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 80125fc:	4b73      	ldr	r3, [pc, #460]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8012602:	4b72      	ldr	r3, [pc, #456]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 8012604:	681a      	ldr	r2, [r3, #0]
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	4013      	ands	r3, r2
 801260a:	4a70      	ldr	r2, [pc, #448]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 801260c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801260e:	4b70      	ldr	r3, [pc, #448]	@ (80127d0 <UTIL_SEQ_Run+0x1dc>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012614:	4b6f      	ldr	r3, [pc, #444]	@ (80127d4 <UTIL_SEQ_Run+0x1e0>)
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801261a:	4b6f      	ldr	r3, [pc, #444]	@ (80127d8 <UTIL_SEQ_Run+0x1e4>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 8012620:	4b6e      	ldr	r3, [pc, #440]	@ (80127dc <UTIL_SEQ_Run+0x1e8>)
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012626:	e08d      	b.n	8012744 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8012628:	2300      	movs	r3, #0
 801262a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801262c:	e002      	b.n	8012634 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801262e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012630:	3301      	adds	r3, #1
 8012632:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8012634:	4a6a      	ldr	r2, [pc, #424]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 8012636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012638:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801263c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801263e:	401a      	ands	r2, r3
 8012640:	4b62      	ldr	r3, [pc, #392]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	4013      	ands	r3, r2
 8012646:	2b00      	cmp	r3, #0
 8012648:	d0f1      	beq.n	801262e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801264a:	4a65      	ldr	r2, [pc, #404]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 801264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801264e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8012652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012654:	401a      	ands	r2, r3
 8012656:	4b5d      	ldr	r3, [pc, #372]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	4013      	ands	r3, r2
 801265c:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801265e:	4a60      	ldr	r2, [pc, #384]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 8012660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012662:	00db      	lsls	r3, r3, #3
 8012664:	4413      	add	r3, r2
 8012666:	685a      	ldr	r2, [r3, #4]
 8012668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801266a:	4013      	ands	r3, r2
 801266c:	2b00      	cmp	r3, #0
 801266e:	d106      	bne.n	801267e <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012670:	4a5b      	ldr	r2, [pc, #364]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 8012672:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012674:	00db      	lsls	r3, r3, #3
 8012676:	4413      	add	r3, r2
 8012678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801267c:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801267e:	4a58      	ldr	r2, [pc, #352]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 8012680:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012682:	00db      	lsls	r3, r3, #3
 8012684:	4413      	add	r3, r2
 8012686:	685a      	ldr	r2, [r3, #4]
 8012688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801268a:	4013      	ands	r3, r2
 801268c:	4618      	mov	r0, r3
 801268e:	f000 f9b3 	bl	80129f8 <SEQ_BitPosition>
 8012692:	4603      	mov	r3, r0
 8012694:	461a      	mov	r2, r3
 8012696:	4b53      	ldr	r3, [pc, #332]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 8012698:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801269a:	4a51      	ldr	r2, [pc, #324]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 801269c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801269e:	00db      	lsls	r3, r3, #3
 80126a0:	4413      	add	r3, r2
 80126a2:	685a      	ldr	r2, [r3, #4]
 80126a4:	4b4f      	ldr	r3, [pc, #316]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	2101      	movs	r1, #1
 80126aa:	fa01 f303 	lsl.w	r3, r1, r3
 80126ae:	43db      	mvns	r3, r3
 80126b0:	401a      	ands	r2, r3
 80126b2:	494b      	ldr	r1, [pc, #300]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 80126b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126b6:	00db      	lsls	r3, r3, #3
 80126b8:	440b      	add	r3, r1
 80126ba:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80126bc:	f3ef 8310 	mrs	r3, PRIMASK
 80126c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80126c2:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80126c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80126c6:	b672      	cpsid	i
}
 80126c8:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 80126ca:	4b46      	ldr	r3, [pc, #280]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2201      	movs	r2, #1
 80126d0:	fa02 f303 	lsl.w	r3, r2, r3
 80126d4:	43da      	mvns	r2, r3
 80126d6:	4b3e      	ldr	r3, [pc, #248]	@ (80127d0 <UTIL_SEQ_Run+0x1dc>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	4013      	ands	r3, r2
 80126dc:	4a3c      	ldr	r2, [pc, #240]	@ (80127d0 <UTIL_SEQ_Run+0x1dc>)
 80126de:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80126e0:	2302      	movs	r3, #2
 80126e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126e4:	e013      	b.n	801270e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80126e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126e8:	3b01      	subs	r3, #1
 80126ea:	4a3d      	ldr	r2, [pc, #244]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 80126ec:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80126f0:	4b3c      	ldr	r3, [pc, #240]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	2201      	movs	r2, #1
 80126f6:	fa02 f303 	lsl.w	r3, r2, r3
 80126fa:	43da      	mvns	r2, r3
 80126fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126fe:	3b01      	subs	r3, #1
 8012700:	400a      	ands	r2, r1
 8012702:	4937      	ldr	r1, [pc, #220]	@ (80127e0 <UTIL_SEQ_Run+0x1ec>)
 8012704:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801270a:	3b01      	subs	r3, #1
 801270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801270e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012710:	2b00      	cmp	r3, #0
 8012712:	d1e8      	bne.n	80126e6 <UTIL_SEQ_Run+0xf2>
 8012714:	6a3b      	ldr	r3, [r7, #32]
 8012716:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012718:	697b      	ldr	r3, [r7, #20]
 801271a:	f383 8810 	msr	PRIMASK, r3
}
 801271e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8012720:	4b30      	ldr	r3, [pc, #192]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4a30      	ldr	r2, [pc, #192]	@ (80127e8 <UTIL_SEQ_Run+0x1f4>)
 8012726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801272a:	4798      	blx	r3

    local_taskset = TaskSet;
 801272c:	4b28      	ldr	r3, [pc, #160]	@ (80127d0 <UTIL_SEQ_Run+0x1dc>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 8012732:	4b28      	ldr	r3, [pc, #160]	@ (80127d4 <UTIL_SEQ_Run+0x1e0>)
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8012738:	4b27      	ldr	r3, [pc, #156]	@ (80127d8 <UTIL_SEQ_Run+0x1e4>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801273e:	4b27      	ldr	r3, [pc, #156]	@ (80127dc <UTIL_SEQ_Run+0x1e8>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8012744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012748:	401a      	ands	r2, r3
 801274a:	4b20      	ldr	r3, [pc, #128]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	4013      	ands	r3, r2
 8012750:	2b00      	cmp	r3, #0
 8012752:	d005      	beq.n	8012760 <UTIL_SEQ_Run+0x16c>
 8012754:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012758:	4013      	ands	r3, r2
 801275a:	2b00      	cmp	r3, #0
 801275c:	f43f af64 	beq.w	8012628 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8012760:	4b20      	ldr	r3, [pc, #128]	@ (80127e4 <UTIL_SEQ_Run+0x1f0>)
 8012762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012766:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012768:	f000 f938 	bl	80129dc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801276c:	f3ef 8310 	mrs	r3, PRIMASK
 8012770:	613b      	str	r3, [r7, #16]
  return(result);
 8012772:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8012774:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012776:	b672      	cpsid	i
}
 8012778:	bf00      	nop
  local_taskset = TaskSet;
 801277a:	4b15      	ldr	r3, [pc, #84]	@ (80127d0 <UTIL_SEQ_Run+0x1dc>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012780:	4b14      	ldr	r3, [pc, #80]	@ (80127d4 <UTIL_SEQ_Run+0x1e0>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8012786:	4b14      	ldr	r3, [pc, #80]	@ (80127d8 <UTIL_SEQ_Run+0x1e4>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801278c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801278e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012790:	401a      	ands	r2, r3
 8012792:	4b0e      	ldr	r3, [pc, #56]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	4013      	ands	r3, r2
 8012798:	2b00      	cmp	r3, #0
 801279a:	d107      	bne.n	80127ac <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801279c:	4b0f      	ldr	r3, [pc, #60]	@ (80127dc <UTIL_SEQ_Run+0x1e8>)
 801279e:	681a      	ldr	r2, [r3, #0]
 80127a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127a2:	4013      	ands	r3, r2
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d101      	bne.n	80127ac <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80127a8:	f7ef f95b 	bl	8001a62 <UTIL_SEQ_Idle>
 80127ac:	69fb      	ldr	r3, [r7, #28]
 80127ae:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127b0:	68fb      	ldr	r3, [r7, #12]
 80127b2:	f383 8810 	msr	PRIMASK, r3
}
 80127b6:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80127b8:	f000 f917 	bl	80129ea <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80127bc:	4a03      	ldr	r2, [pc, #12]	@ (80127cc <UTIL_SEQ_Run+0x1d8>)
 80127be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127c0:	6013      	str	r3, [r2, #0]

  return;
 80127c2:	bf00      	nop
}
 80127c4:	3740      	adds	r7, #64	@ 0x40
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	20000138 	.word	0x20000138
 80127d0:	20001efc 	.word	0x20001efc
 80127d4:	20001f00 	.word	0x20001f00
 80127d8:	20000134 	.word	0x20000134
 80127dc:	20001f04 	.word	0x20001f04
 80127e0:	20001f8c 	.word	0x20001f8c
 80127e4:	20001f08 	.word	0x20001f08
 80127e8:	20001f0c 	.word	0x20001f0c

080127ec <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b088      	sub	sp, #32
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	60f8      	str	r0, [r7, #12]
 80127f4:	60b9      	str	r1, [r7, #8]
 80127f6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127f8:	f3ef 8310 	mrs	r3, PRIMASK
 80127fc:	617b      	str	r3, [r7, #20]
  return(result);
 80127fe:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8012800:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8012802:	b672      	cpsid	i
}
 8012804:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	f000 f8f6 	bl	80129f8 <SEQ_BitPosition>
 801280c:	4603      	mov	r3, r0
 801280e:	4619      	mov	r1, r3
 8012810:	4a06      	ldr	r2, [pc, #24]	@ (801282c <UTIL_SEQ_RegTask+0x40>)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	f383 8810 	msr	PRIMASK, r3
}
 8012822:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8012824:	bf00      	nop
}
 8012826:	3720      	adds	r7, #32
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	20001f0c 	.word	0x20001f0c

08012830 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8012830:	b480      	push	{r7}
 8012832:	b087      	sub	sp, #28
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
 8012838:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801283a:	f3ef 8310 	mrs	r3, PRIMASK
 801283e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012840:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012842:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012844:	b672      	cpsid	i
}
 8012846:	bf00      	nop

  TaskSet |= TaskId_bm;
 8012848:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <UTIL_SEQ_SetTask+0x50>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	4313      	orrs	r3, r2
 8012850:	4a0b      	ldr	r2, [pc, #44]	@ (8012880 <UTIL_SEQ_SetTask+0x50>)
 8012852:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8012854:	4a0b      	ldr	r2, [pc, #44]	@ (8012884 <UTIL_SEQ_SetTask+0x54>)
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	431a      	orrs	r2, r3
 8012860:	4908      	ldr	r1, [pc, #32]	@ (8012884 <UTIL_SEQ_SetTask+0x54>)
 8012862:	683b      	ldr	r3, [r7, #0]
 8012864:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012868:	697b      	ldr	r3, [r7, #20]
 801286a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801286c:	693b      	ldr	r3, [r7, #16]
 801286e:	f383 8810 	msr	PRIMASK, r3
}
 8012872:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012874:	bf00      	nop
}
 8012876:	371c      	adds	r7, #28
 8012878:	46bd      	mov	sp, r7
 801287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287e:	4770      	bx	lr
 8012880:	20001efc 	.word	0x20001efc
 8012884:	20001f8c 	.word	0x20001f8c

08012888 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012888:	b480      	push	{r7}
 801288a:	b087      	sub	sp, #28
 801288c:	af00      	add	r7, sp, #0
 801288e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012890:	f3ef 8310 	mrs	r3, PRIMASK
 8012894:	60fb      	str	r3, [r7, #12]
  return(result);
 8012896:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801289a:	b672      	cpsid	i
}
 801289c:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	43da      	mvns	r2, r3
 80128a2:	4b08      	ldr	r3, [pc, #32]	@ (80128c4 <UTIL_SEQ_PauseTask+0x3c>)
 80128a4:	681b      	ldr	r3, [r3, #0]
 80128a6:	4013      	ands	r3, r2
 80128a8:	4a06      	ldr	r2, [pc, #24]	@ (80128c4 <UTIL_SEQ_PauseTask+0x3c>)
 80128aa:	6013      	str	r3, [r2, #0]
 80128ac:	697b      	ldr	r3, [r7, #20]
 80128ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	f383 8810 	msr	PRIMASK, r3
}
 80128b6:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128b8:	bf00      	nop
}
 80128ba:	371c      	adds	r7, #28
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	20000134 	.word	0x20000134

080128c8 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 80128c8:	b480      	push	{r7}
 80128ca:	b087      	sub	sp, #28
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128d0:	f3ef 8310 	mrs	r3, PRIMASK
 80128d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80128d6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80128d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128da:	b672      	cpsid	i
}
 80128dc:	bf00      	nop

  TaskMask |= TaskId_bm;
 80128de:	4b09      	ldr	r3, [pc, #36]	@ (8012904 <UTIL_SEQ_ResumeTask+0x3c>)
 80128e0:	681a      	ldr	r2, [r3, #0]
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	4313      	orrs	r3, r2
 80128e6:	4a07      	ldr	r2, [pc, #28]	@ (8012904 <UTIL_SEQ_ResumeTask+0x3c>)
 80128e8:	6013      	str	r3, [r2, #0]
 80128ea:	697b      	ldr	r3, [r7, #20]
 80128ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128ee:	693b      	ldr	r3, [r7, #16]
 80128f0:	f383 8810 	msr	PRIMASK, r3
}
 80128f4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128f6:	bf00      	nop
}
 80128f8:	371c      	adds	r7, #28
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	20000134 	.word	0x20000134

08012908 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8012908:	b480      	push	{r7}
 801290a:	b087      	sub	sp, #28
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012910:	f3ef 8310 	mrs	r3, PRIMASK
 8012914:	60fb      	str	r3, [r7, #12]
  return(result);
 8012916:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801291a:	b672      	cpsid	i
}
 801291c:	bf00      	nop

  EvtSet |= EvtId_bm;
 801291e:	4b09      	ldr	r3, [pc, #36]	@ (8012944 <UTIL_SEQ_SetEvt+0x3c>)
 8012920:	681a      	ldr	r2, [r3, #0]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	4313      	orrs	r3, r2
 8012926:	4a07      	ldr	r2, [pc, #28]	@ (8012944 <UTIL_SEQ_SetEvt+0x3c>)
 8012928:	6013      	str	r3, [r2, #0]
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801292e:	693b      	ldr	r3, [r7, #16]
 8012930:	f383 8810 	msr	PRIMASK, r3
}
 8012934:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012936:	bf00      	nop
}
 8012938:	371c      	adds	r7, #28
 801293a:	46bd      	mov	sp, r7
 801293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012940:	4770      	bx	lr
 8012942:	bf00      	nop
 8012944:	20001f00 	.word	0x20001f00

08012948 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8012948:	b580      	push	{r7, lr}
 801294a:	b088      	sub	sp, #32
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8012950:	4b1f      	ldr	r3, [pc, #124]	@ (80129d0 <UTIL_SEQ_WaitEvt+0x88>)
 8012952:	681b      	ldr	r3, [r3, #0]
 8012954:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8012956:	4b1e      	ldr	r3, [pc, #120]	@ (80129d0 <UTIL_SEQ_WaitEvt+0x88>)
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801295e:	d102      	bne.n	8012966 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8012960:	2300      	movs	r3, #0
 8012962:	61fb      	str	r3, [r7, #28]
 8012964:	e005      	b.n	8012972 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8012966:	4b1a      	ldr	r3, [pc, #104]	@ (80129d0 <UTIL_SEQ_WaitEvt+0x88>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	2201      	movs	r2, #1
 801296c:	fa02 f303 	lsl.w	r3, r2, r3
 8012970:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8012972:	4b18      	ldr	r3, [pc, #96]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x8c>)
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012978:	4a16      	ldr	r2, [pc, #88]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x8c>)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 801297e:	e003      	b.n	8012988 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012980:	6879      	ldr	r1, [r7, #4]
 8012982:	69f8      	ldr	r0, [r7, #28]
 8012984:	f7ef f874 	bl	8001a70 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012988:	4b13      	ldr	r3, [pc, #76]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x90>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	4013      	ands	r3, r2
 8012990:	2b00      	cmp	r3, #0
 8012992:	d0f5      	beq.n	8012980 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8012994:	4a0e      	ldr	r2, [pc, #56]	@ (80129d0 <UTIL_SEQ_WaitEvt+0x88>)
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801299a:	f3ef 8310 	mrs	r3, PRIMASK
 801299e:	60bb      	str	r3, [r7, #8]
  return(result);
 80129a0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80129a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80129a4:	b672      	cpsid	i
}
 80129a6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	43da      	mvns	r2, r3
 80129ac:	4b0a      	ldr	r3, [pc, #40]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x90>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4013      	ands	r3, r2
 80129b2:	4a09      	ldr	r2, [pc, #36]	@ (80129d8 <UTIL_SEQ_WaitEvt+0x90>)
 80129b4:	6013      	str	r3, [r2, #0]
 80129b6:	693b      	ldr	r3, [r7, #16]
 80129b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f383 8810 	msr	PRIMASK, r3
}
 80129c0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80129c2:	4a04      	ldr	r2, [pc, #16]	@ (80129d4 <UTIL_SEQ_WaitEvt+0x8c>)
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	6013      	str	r3, [r2, #0]
  return;
 80129c8:	bf00      	nop
}
 80129ca:	3720      	adds	r7, #32
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	20001f08 	.word	0x20001f08
 80129d4:	20001f04 	.word	0x20001f04
 80129d8:	20001f00 	.word	0x20001f00

080129dc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80129dc:	b480      	push	{r7}
 80129de:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80129e0:	bf00      	nop
}
 80129e2:	46bd      	mov	sp, r7
 80129e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e8:	4770      	bx	lr

080129ea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 80129ea:	b480      	push	{r7}
 80129ec:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80129ee:	bf00      	nop
}
 80129f0:	46bd      	mov	sp, r7
 80129f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f6:	4770      	bx	lr

080129f8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 80129f8:	b480      	push	{r7}
 80129fa:	b085      	sub	sp, #20
 80129fc:	af00      	add	r7, sp, #0
 80129fe:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012a00:	2300      	movs	r3, #0
 8012a02:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012a0e:	d204      	bcs.n	8012a1a <SEQ_BitPosition+0x22>
 8012a10:	2310      	movs	r3, #16
 8012a12:	73fb      	strb	r3, [r7, #15]
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	041b      	lsls	r3, r3, #16
 8012a18:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8012a1a:	68bb      	ldr	r3, [r7, #8]
 8012a1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012a20:	d205      	bcs.n	8012a2e <SEQ_BitPosition+0x36>
 8012a22:	7bfb      	ldrb	r3, [r7, #15]
 8012a24:	3308      	adds	r3, #8
 8012a26:	73fb      	strb	r3, [r7, #15]
 8012a28:	68bb      	ldr	r3, [r7, #8]
 8012a2a:	021b      	lsls	r3, r3, #8
 8012a2c:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8012a2e:	68bb      	ldr	r3, [r7, #8]
 8012a30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012a34:	d205      	bcs.n	8012a42 <SEQ_BitPosition+0x4a>
 8012a36:	7bfb      	ldrb	r3, [r7, #15]
 8012a38:	3304      	adds	r3, #4
 8012a3a:	73fb      	strb	r3, [r7, #15]
 8012a3c:	68bb      	ldr	r3, [r7, #8]
 8012a3e:	011b      	lsls	r3, r3, #4
 8012a40:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	0f1b      	lsrs	r3, r3, #28
 8012a46:	4a07      	ldr	r2, [pc, #28]	@ (8012a64 <SEQ_BitPosition+0x6c>)
 8012a48:	5cd2      	ldrb	r2, [r2, r3]
 8012a4a:	7bfb      	ldrb	r3, [r7, #15]
 8012a4c:	4413      	add	r3, r2
 8012a4e:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8012a50:	7bfb      	ldrb	r3, [r7, #15]
 8012a52:	f1c3 031f 	rsb	r3, r3, #31
 8012a56:	b2db      	uxtb	r3, r3
}
 8012a58:	4618      	mov	r0, r3
 8012a5a:	3714      	adds	r7, #20
 8012a5c:	46bd      	mov	sp, r7
 8012a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a62:	4770      	bx	lr
 8012a64:	08012f9c 	.word	0x08012f9c

08012a68 <malloc>:
 8012a68:	4b02      	ldr	r3, [pc, #8]	@ (8012a74 <malloc+0xc>)
 8012a6a:	4601      	mov	r1, r0
 8012a6c:	6818      	ldr	r0, [r3, #0]
 8012a6e:	f000 b825 	b.w	8012abc <_malloc_r>
 8012a72:	bf00      	nop
 8012a74:	2000013c 	.word	0x2000013c

08012a78 <sbrk_aligned>:
 8012a78:	b570      	push	{r4, r5, r6, lr}
 8012a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8012ab8 <sbrk_aligned+0x40>)
 8012a7c:	460c      	mov	r4, r1
 8012a7e:	6831      	ldr	r1, [r6, #0]
 8012a80:	4605      	mov	r5, r0
 8012a82:	b911      	cbnz	r1, 8012a8a <sbrk_aligned+0x12>
 8012a84:	f000 f8ae 	bl	8012be4 <_sbrk_r>
 8012a88:	6030      	str	r0, [r6, #0]
 8012a8a:	4621      	mov	r1, r4
 8012a8c:	4628      	mov	r0, r5
 8012a8e:	f000 f8a9 	bl	8012be4 <_sbrk_r>
 8012a92:	1c43      	adds	r3, r0, #1
 8012a94:	d103      	bne.n	8012a9e <sbrk_aligned+0x26>
 8012a96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	bd70      	pop	{r4, r5, r6, pc}
 8012a9e:	1cc4      	adds	r4, r0, #3
 8012aa0:	f024 0403 	bic.w	r4, r4, #3
 8012aa4:	42a0      	cmp	r0, r4
 8012aa6:	d0f8      	beq.n	8012a9a <sbrk_aligned+0x22>
 8012aa8:	1a21      	subs	r1, r4, r0
 8012aaa:	4628      	mov	r0, r5
 8012aac:	f000 f89a 	bl	8012be4 <_sbrk_r>
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d1f2      	bne.n	8012a9a <sbrk_aligned+0x22>
 8012ab4:	e7ef      	b.n	8012a96 <sbrk_aligned+0x1e>
 8012ab6:	bf00      	nop
 8012ab8:	20001f9c 	.word	0x20001f9c

08012abc <_malloc_r>:
 8012abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ac0:	1ccd      	adds	r5, r1, #3
 8012ac2:	f025 0503 	bic.w	r5, r5, #3
 8012ac6:	3508      	adds	r5, #8
 8012ac8:	2d0c      	cmp	r5, #12
 8012aca:	bf38      	it	cc
 8012acc:	250c      	movcc	r5, #12
 8012ace:	2d00      	cmp	r5, #0
 8012ad0:	4606      	mov	r6, r0
 8012ad2:	db01      	blt.n	8012ad8 <_malloc_r+0x1c>
 8012ad4:	42a9      	cmp	r1, r5
 8012ad6:	d904      	bls.n	8012ae2 <_malloc_r+0x26>
 8012ad8:	230c      	movs	r3, #12
 8012ada:	6033      	str	r3, [r6, #0]
 8012adc:	2000      	movs	r0, #0
 8012ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012bb8 <_malloc_r+0xfc>
 8012ae6:	f000 f869 	bl	8012bbc <__malloc_lock>
 8012aea:	f8d8 3000 	ldr.w	r3, [r8]
 8012aee:	461c      	mov	r4, r3
 8012af0:	bb44      	cbnz	r4, 8012b44 <_malloc_r+0x88>
 8012af2:	4629      	mov	r1, r5
 8012af4:	4630      	mov	r0, r6
 8012af6:	f7ff ffbf 	bl	8012a78 <sbrk_aligned>
 8012afa:	1c43      	adds	r3, r0, #1
 8012afc:	4604      	mov	r4, r0
 8012afe:	d158      	bne.n	8012bb2 <_malloc_r+0xf6>
 8012b00:	f8d8 4000 	ldr.w	r4, [r8]
 8012b04:	4627      	mov	r7, r4
 8012b06:	2f00      	cmp	r7, #0
 8012b08:	d143      	bne.n	8012b92 <_malloc_r+0xd6>
 8012b0a:	2c00      	cmp	r4, #0
 8012b0c:	d04b      	beq.n	8012ba6 <_malloc_r+0xea>
 8012b0e:	6823      	ldr	r3, [r4, #0]
 8012b10:	4639      	mov	r1, r7
 8012b12:	4630      	mov	r0, r6
 8012b14:	eb04 0903 	add.w	r9, r4, r3
 8012b18:	f000 f864 	bl	8012be4 <_sbrk_r>
 8012b1c:	4581      	cmp	r9, r0
 8012b1e:	d142      	bne.n	8012ba6 <_malloc_r+0xea>
 8012b20:	6821      	ldr	r1, [r4, #0]
 8012b22:	1a6d      	subs	r5, r5, r1
 8012b24:	4629      	mov	r1, r5
 8012b26:	4630      	mov	r0, r6
 8012b28:	f7ff ffa6 	bl	8012a78 <sbrk_aligned>
 8012b2c:	3001      	adds	r0, #1
 8012b2e:	d03a      	beq.n	8012ba6 <_malloc_r+0xea>
 8012b30:	6823      	ldr	r3, [r4, #0]
 8012b32:	442b      	add	r3, r5
 8012b34:	6023      	str	r3, [r4, #0]
 8012b36:	f8d8 3000 	ldr.w	r3, [r8]
 8012b3a:	685a      	ldr	r2, [r3, #4]
 8012b3c:	bb62      	cbnz	r2, 8012b98 <_malloc_r+0xdc>
 8012b3e:	f8c8 7000 	str.w	r7, [r8]
 8012b42:	e00f      	b.n	8012b64 <_malloc_r+0xa8>
 8012b44:	6822      	ldr	r2, [r4, #0]
 8012b46:	1b52      	subs	r2, r2, r5
 8012b48:	d420      	bmi.n	8012b8c <_malloc_r+0xd0>
 8012b4a:	2a0b      	cmp	r2, #11
 8012b4c:	d917      	bls.n	8012b7e <_malloc_r+0xc2>
 8012b4e:	1961      	adds	r1, r4, r5
 8012b50:	42a3      	cmp	r3, r4
 8012b52:	6025      	str	r5, [r4, #0]
 8012b54:	bf18      	it	ne
 8012b56:	6059      	strne	r1, [r3, #4]
 8012b58:	6863      	ldr	r3, [r4, #4]
 8012b5a:	bf08      	it	eq
 8012b5c:	f8c8 1000 	streq.w	r1, [r8]
 8012b60:	5162      	str	r2, [r4, r5]
 8012b62:	604b      	str	r3, [r1, #4]
 8012b64:	4630      	mov	r0, r6
 8012b66:	f000 f82f 	bl	8012bc8 <__malloc_unlock>
 8012b6a:	f104 000b 	add.w	r0, r4, #11
 8012b6e:	1d23      	adds	r3, r4, #4
 8012b70:	f020 0007 	bic.w	r0, r0, #7
 8012b74:	1ac2      	subs	r2, r0, r3
 8012b76:	bf1c      	itt	ne
 8012b78:	1a1b      	subne	r3, r3, r0
 8012b7a:	50a3      	strne	r3, [r4, r2]
 8012b7c:	e7af      	b.n	8012ade <_malloc_r+0x22>
 8012b7e:	6862      	ldr	r2, [r4, #4]
 8012b80:	42a3      	cmp	r3, r4
 8012b82:	bf0c      	ite	eq
 8012b84:	f8c8 2000 	streq.w	r2, [r8]
 8012b88:	605a      	strne	r2, [r3, #4]
 8012b8a:	e7eb      	b.n	8012b64 <_malloc_r+0xa8>
 8012b8c:	4623      	mov	r3, r4
 8012b8e:	6864      	ldr	r4, [r4, #4]
 8012b90:	e7ae      	b.n	8012af0 <_malloc_r+0x34>
 8012b92:	463c      	mov	r4, r7
 8012b94:	687f      	ldr	r7, [r7, #4]
 8012b96:	e7b6      	b.n	8012b06 <_malloc_r+0x4a>
 8012b98:	461a      	mov	r2, r3
 8012b9a:	685b      	ldr	r3, [r3, #4]
 8012b9c:	42a3      	cmp	r3, r4
 8012b9e:	d1fb      	bne.n	8012b98 <_malloc_r+0xdc>
 8012ba0:	2300      	movs	r3, #0
 8012ba2:	6053      	str	r3, [r2, #4]
 8012ba4:	e7de      	b.n	8012b64 <_malloc_r+0xa8>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	6033      	str	r3, [r6, #0]
 8012baa:	4630      	mov	r0, r6
 8012bac:	f000 f80c 	bl	8012bc8 <__malloc_unlock>
 8012bb0:	e794      	b.n	8012adc <_malloc_r+0x20>
 8012bb2:	6005      	str	r5, [r0, #0]
 8012bb4:	e7d6      	b.n	8012b64 <_malloc_r+0xa8>
 8012bb6:	bf00      	nop
 8012bb8:	20001fa0 	.word	0x20001fa0

08012bbc <__malloc_lock>:
 8012bbc:	4801      	ldr	r0, [pc, #4]	@ (8012bc4 <__malloc_lock+0x8>)
 8012bbe:	f000 b84b 	b.w	8012c58 <__retarget_lock_acquire_recursive>
 8012bc2:	bf00      	nop
 8012bc4:	200020e0 	.word	0x200020e0

08012bc8 <__malloc_unlock>:
 8012bc8:	4801      	ldr	r0, [pc, #4]	@ (8012bd0 <__malloc_unlock+0x8>)
 8012bca:	f000 b846 	b.w	8012c5a <__retarget_lock_release_recursive>
 8012bce:	bf00      	nop
 8012bd0:	200020e0 	.word	0x200020e0

08012bd4 <memset>:
 8012bd4:	4402      	add	r2, r0
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	4293      	cmp	r3, r2
 8012bda:	d100      	bne.n	8012bde <memset+0xa>
 8012bdc:	4770      	bx	lr
 8012bde:	f803 1b01 	strb.w	r1, [r3], #1
 8012be2:	e7f9      	b.n	8012bd8 <memset+0x4>

08012be4 <_sbrk_r>:
 8012be4:	b538      	push	{r3, r4, r5, lr}
 8012be6:	4d06      	ldr	r5, [pc, #24]	@ (8012c00 <_sbrk_r+0x1c>)
 8012be8:	2300      	movs	r3, #0
 8012bea:	4604      	mov	r4, r0
 8012bec:	4608      	mov	r0, r1
 8012bee:	602b      	str	r3, [r5, #0]
 8012bf0:	f7ef feac 	bl	800294c <_sbrk>
 8012bf4:	1c43      	adds	r3, r0, #1
 8012bf6:	d102      	bne.n	8012bfe <_sbrk_r+0x1a>
 8012bf8:	682b      	ldr	r3, [r5, #0]
 8012bfa:	b103      	cbz	r3, 8012bfe <_sbrk_r+0x1a>
 8012bfc:	6023      	str	r3, [r4, #0]
 8012bfe:	bd38      	pop	{r3, r4, r5, pc}
 8012c00:	200020dc 	.word	0x200020dc

08012c04 <__errno>:
 8012c04:	4b01      	ldr	r3, [pc, #4]	@ (8012c0c <__errno+0x8>)
 8012c06:	6818      	ldr	r0, [r3, #0]
 8012c08:	4770      	bx	lr
 8012c0a:	bf00      	nop
 8012c0c:	2000013c 	.word	0x2000013c

08012c10 <__libc_init_array>:
 8012c10:	b570      	push	{r4, r5, r6, lr}
 8012c12:	4d0d      	ldr	r5, [pc, #52]	@ (8012c48 <__libc_init_array+0x38>)
 8012c14:	4c0d      	ldr	r4, [pc, #52]	@ (8012c4c <__libc_init_array+0x3c>)
 8012c16:	1b64      	subs	r4, r4, r5
 8012c18:	10a4      	asrs	r4, r4, #2
 8012c1a:	2600      	movs	r6, #0
 8012c1c:	42a6      	cmp	r6, r4
 8012c1e:	d109      	bne.n	8012c34 <__libc_init_array+0x24>
 8012c20:	4d0b      	ldr	r5, [pc, #44]	@ (8012c50 <__libc_init_array+0x40>)
 8012c22:	4c0c      	ldr	r4, [pc, #48]	@ (8012c54 <__libc_init_array+0x44>)
 8012c24:	f000 f828 	bl	8012c78 <_init>
 8012c28:	1b64      	subs	r4, r4, r5
 8012c2a:	10a4      	asrs	r4, r4, #2
 8012c2c:	2600      	movs	r6, #0
 8012c2e:	42a6      	cmp	r6, r4
 8012c30:	d105      	bne.n	8012c3e <__libc_init_array+0x2e>
 8012c32:	bd70      	pop	{r4, r5, r6, pc}
 8012c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c38:	4798      	blx	r3
 8012c3a:	3601      	adds	r6, #1
 8012c3c:	e7ee      	b.n	8012c1c <__libc_init_array+0xc>
 8012c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012c42:	4798      	blx	r3
 8012c44:	3601      	adds	r6, #1
 8012c46:	e7f2      	b.n	8012c2e <__libc_init_array+0x1e>
 8012c48:	08012fb4 	.word	0x08012fb4
 8012c4c:	08012fb4 	.word	0x08012fb4
 8012c50:	08012fb4 	.word	0x08012fb4
 8012c54:	08012fb8 	.word	0x08012fb8

08012c58 <__retarget_lock_acquire_recursive>:
 8012c58:	4770      	bx	lr

08012c5a <__retarget_lock_release_recursive>:
 8012c5a:	4770      	bx	lr

08012c5c <memcpy>:
 8012c5c:	440a      	add	r2, r1
 8012c5e:	4291      	cmp	r1, r2
 8012c60:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012c64:	d100      	bne.n	8012c68 <memcpy+0xc>
 8012c66:	4770      	bx	lr
 8012c68:	b510      	push	{r4, lr}
 8012c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012c72:	4291      	cmp	r1, r2
 8012c74:	d1f9      	bne.n	8012c6a <memcpy+0xe>
 8012c76:	bd10      	pop	{r4, pc}

08012c78 <_init>:
 8012c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c7a:	bf00      	nop
 8012c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c7e:	bc08      	pop	{r3}
 8012c80:	469e      	mov	lr, r3
 8012c82:	4770      	bx	lr

08012c84 <_fini>:
 8012c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c86:	bf00      	nop
 8012c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c8a:	bc08      	pop	{r3}
 8012c8c:	469e      	mov	lr, r3
 8012c8e:	4770      	bx	lr
