
BleTarget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013240  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  08013380  08013380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013758  08013758  00014758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08013760  08013760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013764  08013764  00014764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  08013768  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000035  20000188  080138e8  00015188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  200001c0  0801391d  000151c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f08  200001d4  0801392e  000151d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020dc  0801392e  000160dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00015a67  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00016000  2**2
                  ALLOC
 13 MB_MEM1       000001bb  20030028  20030028  00016000  2**2
                  ALLOC
 14 .MB_MEM2      00000883  200301e4  0801392e  000151e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 15 .debug_info   0003bd9a  00000000  00000000  00015a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00008411  00000000  00000000  00051831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003290  00000000  00000000  00059c48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000268f  00000000  00000000  0005ced8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000322ac  00000000  00000000  0005f567  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0003b5cd  00000000  00000000  00091813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00105647  00000000  00000000  000ccde0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00000043  00000000  00000000  001d2427  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000d850  00000000  00000000  001d246c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000052  00000000  00000000  001dfcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001d4 	.word	0x200001d4
 800015c:	00000000 	.word	0x00000000
 8000160:	08013368 	.word	0x08013368

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001d8 	.word	0x200001d8
 800017c:	08013368 	.word	0x08013368

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b96a 	b.w	8000d58 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	460c      	mov	r4, r1
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d14e      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aa8:	4694      	mov	ip, r2
 8000aaa:	458c      	cmp	ip, r1
 8000aac:	4686      	mov	lr, r0
 8000aae:	fab2 f282 	clz	r2, r2
 8000ab2:	d962      	bls.n	8000b7a <__udivmoddi4+0xde>
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	4091      	lsls	r1, r2
 8000abc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac4:	4319      	orrs	r1, r3
 8000ac6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ace:	fa1f f68c 	uxth.w	r6, ip
 8000ad2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ad6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ada:	fb07 1114 	mls	r1, r7, r4, r1
 8000ade:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ae2:	fb04 f106 	mul.w	r1, r4, r6
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000af2:	f080 8112 	bcs.w	8000d1a <__udivmoddi4+0x27e>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 810f 	bls.w	8000d1a <__udivmoddi4+0x27e>
 8000afc:	3c02      	subs	r4, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a59      	subs	r1, r3, r1
 8000b02:	fa1f f38e 	uxth.w	r3, lr
 8000b06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b12:	fb00 f606 	mul.w	r6, r0, r6
 8000b16:	429e      	cmp	r6, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x94>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b22:	f080 80fc 	bcs.w	8000d1e <__udivmoddi4+0x282>
 8000b26:	429e      	cmp	r6, r3
 8000b28:	f240 80f9 	bls.w	8000d1e <__udivmoddi4+0x282>
 8000b2c:	4463      	add	r3, ip
 8000b2e:	3802      	subs	r0, #2
 8000b30:	1b9b      	subs	r3, r3, r6
 8000b32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b36:	2100      	movs	r1, #0
 8000b38:	b11d      	cbz	r5, 8000b42 <__udivmoddi4+0xa6>
 8000b3a:	40d3      	lsrs	r3, r2
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d905      	bls.n	8000b56 <__udivmoddi4+0xba>
 8000b4a:	b10d      	cbz	r5, 8000b50 <__udivmoddi4+0xb4>
 8000b4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b50:	2100      	movs	r1, #0
 8000b52:	4608      	mov	r0, r1
 8000b54:	e7f5      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b56:	fab3 f183 	clz	r1, r3
 8000b5a:	2900      	cmp	r1, #0
 8000b5c:	d146      	bne.n	8000bec <__udivmoddi4+0x150>
 8000b5e:	42a3      	cmp	r3, r4
 8000b60:	d302      	bcc.n	8000b68 <__udivmoddi4+0xcc>
 8000b62:	4290      	cmp	r0, r2
 8000b64:	f0c0 80f0 	bcc.w	8000d48 <__udivmoddi4+0x2ac>
 8000b68:	1a86      	subs	r6, r0, r2
 8000b6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b6e:	2001      	movs	r0, #1
 8000b70:	2d00      	cmp	r5, #0
 8000b72:	d0e6      	beq.n	8000b42 <__udivmoddi4+0xa6>
 8000b74:	e9c5 6300 	strd	r6, r3, [r5]
 8000b78:	e7e3      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000b7a:	2a00      	cmp	r2, #0
 8000b7c:	f040 8090 	bne.w	8000ca0 <__udivmoddi4+0x204>
 8000b80:	eba1 040c 	sub.w	r4, r1, ip
 8000b84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b88:	fa1f f78c 	uxth.w	r7, ip
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b96:	fb08 4416 	mls	r4, r8, r6, r4
 8000b9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ba2:	4298      	cmp	r0, r3
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x11c>
 8000ba6:	eb1c 0303 	adds.w	r3, ip, r3
 8000baa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x11a>
 8000bb0:	4298      	cmp	r0, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2b4>
 8000bb6:	4626      	mov	r6, r4
 8000bb8:	1a1c      	subs	r4, r3, r0
 8000bba:	fa1f f38e 	uxth.w	r3, lr
 8000bbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000bc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bca:	fb00 f707 	mul.w	r7, r0, r7
 8000bce:	429f      	cmp	r7, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x148>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x146>
 8000bdc:	429f      	cmp	r7, r3
 8000bde:	f200 80b0 	bhi.w	8000d42 <__udivmoddi4+0x2a6>
 8000be2:	4620      	mov	r0, r4
 8000be4:	1bdb      	subs	r3, r3, r7
 8000be6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bea:	e7a5      	b.n	8000b38 <__udivmoddi4+0x9c>
 8000bec:	f1c1 0620 	rsb	r6, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf6:	431f      	orrs	r7, r3
 8000bf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000c00:	ea43 030c 	orr.w	r3, r3, ip
 8000c04:	40f4      	lsrs	r4, r6
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	0c38      	lsrs	r0, r7, #16
 8000c0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c10:	fbb4 fef0 	udiv	lr, r4, r0
 8000c14:	fa1f fc87 	uxth.w	ip, r7
 8000c18:	fb00 441e 	mls	r4, r0, lr, r4
 8000c1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c20:	fb0e f90c 	mul.w	r9, lr, ip
 8000c24:	45a1      	cmp	r9, r4
 8000c26:	fa02 f201 	lsl.w	r2, r2, r1
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x1a6>
 8000c2c:	193c      	adds	r4, r7, r4
 8000c2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c32:	f080 8084 	bcs.w	8000d3e <__udivmoddi4+0x2a2>
 8000c36:	45a1      	cmp	r9, r4
 8000c38:	f240 8081 	bls.w	8000d3e <__udivmoddi4+0x2a2>
 8000c3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c40:	443c      	add	r4, r7
 8000c42:	eba4 0409 	sub.w	r4, r4, r9
 8000c46:	fa1f f983 	uxth.w	r9, r3
 8000c4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c5a:	45a4      	cmp	ip, r4
 8000c5c:	d907      	bls.n	8000c6e <__udivmoddi4+0x1d2>
 8000c5e:	193c      	adds	r4, r7, r4
 8000c60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c64:	d267      	bcs.n	8000d36 <__udivmoddi4+0x29a>
 8000c66:	45a4      	cmp	ip, r4
 8000c68:	d965      	bls.n	8000d36 <__udivmoddi4+0x29a>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	443c      	add	r4, r7
 8000c6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c72:	fba0 9302 	umull	r9, r3, r0, r2
 8000c76:	eba4 040c 	sub.w	r4, r4, ip
 8000c7a:	429c      	cmp	r4, r3
 8000c7c:	46ce      	mov	lr, r9
 8000c7e:	469c      	mov	ip, r3
 8000c80:	d351      	bcc.n	8000d26 <__udivmoddi4+0x28a>
 8000c82:	d04e      	beq.n	8000d22 <__udivmoddi4+0x286>
 8000c84:	b155      	cbz	r5, 8000c9c <__udivmoddi4+0x200>
 8000c86:	ebb8 030e 	subs.w	r3, r8, lr
 8000c8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000c8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000c92:	40cb      	lsrs	r3, r1
 8000c94:	431e      	orrs	r6, r3
 8000c96:	40cc      	lsrs	r4, r1
 8000c98:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e750      	b.n	8000b42 <__udivmoddi4+0xa6>
 8000ca0:	f1c2 0320 	rsb	r3, r2, #32
 8000ca4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cac:	fa24 f303 	lsr.w	r3, r4, r3
 8000cb0:	4094      	lsls	r4, r2
 8000cb2:	430c      	orrs	r4, r1
 8000cb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cbc:	fa1f f78c 	uxth.w	r7, ip
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc8:	0c23      	lsrs	r3, r4, #16
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb00 f107 	mul.w	r1, r0, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d908      	bls.n	8000ce8 <__udivmoddi4+0x24c>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cde:	d22c      	bcs.n	8000d3a <__udivmoddi4+0x29e>
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d92a      	bls.n	8000d3a <__udivmoddi4+0x29e>
 8000ce4:	3802      	subs	r0, #2
 8000ce6:	4463      	add	r3, ip
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cf0:	fb08 3311 	mls	r3, r8, r1, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb01 f307 	mul.w	r3, r1, r7
 8000cfc:	42a3      	cmp	r3, r4
 8000cfe:	d908      	bls.n	8000d12 <__udivmoddi4+0x276>
 8000d00:	eb1c 0404 	adds.w	r4, ip, r4
 8000d04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d08:	d213      	bcs.n	8000d32 <__udivmoddi4+0x296>
 8000d0a:	42a3      	cmp	r3, r4
 8000d0c:	d911      	bls.n	8000d32 <__udivmoddi4+0x296>
 8000d0e:	3902      	subs	r1, #2
 8000d10:	4464      	add	r4, ip
 8000d12:	1ae4      	subs	r4, r4, r3
 8000d14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d18:	e739      	b.n	8000b8e <__udivmoddi4+0xf2>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	e6f0      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e706      	b.n	8000b30 <__udivmoddi4+0x94>
 8000d22:	45c8      	cmp	r8, r9
 8000d24:	d2ae      	bcs.n	8000c84 <__udivmoddi4+0x1e8>
 8000d26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7a8      	b.n	8000c84 <__udivmoddi4+0x1e8>
 8000d32:	4631      	mov	r1, r6
 8000d34:	e7ed      	b.n	8000d12 <__udivmoddi4+0x276>
 8000d36:	4603      	mov	r3, r0
 8000d38:	e799      	b.n	8000c6e <__udivmoddi4+0x1d2>
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	e7d4      	b.n	8000ce8 <__udivmoddi4+0x24c>
 8000d3e:	46d6      	mov	lr, sl
 8000d40:	e77f      	b.n	8000c42 <__udivmoddi4+0x1a6>
 8000d42:	4463      	add	r3, ip
 8000d44:	3802      	subs	r0, #2
 8000d46:	e74d      	b.n	8000be4 <__udivmoddi4+0x148>
 8000d48:	4606      	mov	r6, r0
 8000d4a:	4623      	mov	r3, r4
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	e70f      	b.n	8000b70 <__udivmoddi4+0xd4>
 8000d50:	3e02      	subs	r6, #2
 8000d52:	4463      	add	r3, ip
 8000d54:	e730      	b.n	8000bb8 <__udivmoddi4+0x11c>
 8000d56:	bf00      	nop

08000d58 <__aeabi_idiv0>:
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop

08000d5c <app_init>:

static uint8_t master = 1;


void app_init(I2C_HandleTypeDef* hi2c)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  master = (GPIO_PIN_SET == HAL_GPIO_ReadPin(BOOT_GPIO_Port,BOOT_Pin));
 8000d64:	2108      	movs	r1, #8
 8000d66:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <app_init+0x38>)
 8000d68:	f002 fbb8 	bl	80034dc <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	bf0c      	ite	eq
 8000d72:	2301      	moveq	r3, #1
 8000d74:	2300      	movne	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b07      	ldr	r3, [pc, #28]	@ (8000d98 <app_init+0x3c>)
 8000d7c:	701a      	strb	r2, [r3, #0]
  if(master)
 8000d7e:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <app_init+0x3c>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d002      	beq.n	8000d8c <app_init+0x30>
  {
    I2C_slave_init(hi2c);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8a2 	bl	8000ed0 <I2C_slave_init>
    // any other init needed?
  }



}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	48001c00 	.word	0x48001c00
 8000d98:	20000008 	.word	0x20000008

08000d9c <taskCyclic>:


void taskCyclic()
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0a0      	sub	sp, #128	@ 0x80
 8000da0:	af02      	add	r7, sp, #8
  if(Sensor_newValue())
 8000da2:	f000 fab1 	bl	8001308 <Sensor_newValue>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d06d      	beq.n	8000e88 <taskCyclic+0xec>
  {
    int32_t position = Sensor_getPos();
 8000dac:	f000 f9ba 	bl	8001124 <Sensor_getPos>
 8000db0:	4603      	mov	r3, r0
 8000db2:	667b      	str	r3, [r7, #100]	@ 0x64
    float speed = Sensor_getSpeed();
 8000db4:	f000 fa44 	bl	8001240 <Sensor_getSpeed>
 8000db8:	ed87 0a1d 	vstr	s0, [r7, #116]	@ 0x74
    Sensor_clear();
 8000dbc:	f000 fab0 	bl	8001320 <Sensor_clear>

    uint8_t buffer[DATA_LENGTH] = {0};
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	663b      	str	r3, [r7, #96]	@ 0x60
    uint8_t* buffP = buffer;
 8000dc8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000dcc:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t buffSize = DATA_LENGTH;
 8000dce:	2308      	movs	r3, #8
 8000dd0:	65bb      	str	r3, [r7, #88]	@ 0x58

    int32_t speedInt = (int32_t)speed;
 8000dd2:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8000dd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dda:	ee17 3a90 	vmov	r3, s15
 8000dde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    int32_t speedDecimal = (int32_t)((speed - speedInt) * 1000);
 8000de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000de2:	ee07 3a90 	vmov	s15, r3
 8000de6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dea:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8000dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df2:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8000e90 <taskCyclic+0xf4>
 8000df6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000dfe:	ee17 3a90 	vmov	r3, s15
 8000e02:	657b      	str	r3, [r7, #84]	@ 0x54

    LOG_ENTRY("Position: %d, Speed: %d,%d", (int)position, (int)speedInt, (int)speedDecimal);
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	224c      	movs	r2, #76	@ 0x4c
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4618      	mov	r0, r3
 8000e12:	f011 fe29 	bl	8012a68 <memset>
 8000e16:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000e1a:	1d38      	adds	r0, r7, #4
 8000e1c:	9301      	str	r3, [sp, #4]
 8000e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e20:	9300      	str	r3, [sp, #0]
 8000e22:	4613      	mov	r3, r2
 8000e24:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <taskCyclic+0xf8>)
 8000e26:	2150      	movs	r1, #80	@ 0x50
 8000e28:	f011 fdea 	bl	8012a00 <sniprintf>
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9a6 	bl	8000180 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	3301      	adds	r3, #1
 8000e38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8000e3a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f010 febe 	bl	8011bc4 <CDC_Transmit_FS>
    if(master)
 8000e48:	4b13      	ldr	r3, [pc, #76]	@ (8000e98 <taskCyclic+0xfc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d015      	beq.n	8000e7c <taskCyclic+0xe0>
    {
      serialize_int32_t(buffP, &buffSize, &position);
 8000e50:	f107 0264 	add.w	r2, r7, #100	@ 0x64
 8000e54:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e58:	4619      	mov	r1, r3
 8000e5a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e5c:	f000 fbb6 	bl	80015cc <serialize_int32_t>
      serialize_int32_t(buffP, &buffSize, &speedDecimal);
 8000e60:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 8000e64:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8000e6c:	f000 fbae 	bl	80015cc <serialize_int32_t>

      I2C_slave_updateData(buffer);
 8000e70:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e74:	4618      	mov	r0, r3
 8000e76:	f000 f849 	bl	8000f0c <I2C_slave_updateData>
      // send on uart or BLE!

    }

  }
}
 8000e7a:	e005      	b.n	8000e88 <taskCyclic+0xec>
      I2C_master_read(buffer, DATA_LENGTH);
 8000e7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e80:	2108      	movs	r1, #8
 8000e82:	4618      	mov	r0, r3
 8000e84:	f000 f80a 	bl	8000e9c <I2C_master_read>
}
 8000e88:	bf00      	nop
 8000e8a:	3778      	adds	r7, #120	@ 0x78
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	447a0000 	.word	0x447a0000
 8000e94:	08013380 	.word	0x08013380
 8000e98:	20000008 	.word	0x20000008

08000e9c <I2C_master_read>:
  I2C_master_obj.i2c_handler = hi2c;
  memset(&(I2C_master_obj.data), 0, DATA_LENGTH);
}

void I2C_master_read(uint8_t *buffer, uint16_t Size)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af02      	add	r7, sp, #8
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Master_Receive(I2C_master_obj.i2c_handler, I2C_master_obj.slaveAddr, I2C_master_obj.data, DATA_LENGTH, 500);
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <I2C_master_read+0x2c>)
 8000eaa:	68d8      	ldr	r0, [r3, #12]
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <I2C_master_read+0x2c>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	2308      	movs	r3, #8
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <I2C_master_read+0x30>)
 8000ebc:	f002 fc44 	bl	8003748 <HAL_I2C_Master_Receive>
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	200001f0 	.word	0x200001f0
 8000ecc:	200001f1 	.word	0x200001f1

08000ed0 <I2C_slave_init>:
#include "i2c_slave.h"

i2cS_t I2C_slave_obj;

void I2C_slave_init(I2C_HandleTypeDef *hi2c)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  I2C_slave_obj.i2c_handler = hi2c;
 8000ed8:	4a0a      	ldr	r2, [pc, #40]	@ (8000f04 <I2C_slave_init+0x34>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60d3      	str	r3, [r2, #12]
  I2C_slave_obj.regAddr = 0;
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <I2C_slave_init+0x34>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
  I2C_slave_obj.txcount = 0;
 8000ee4:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <I2C_slave_init+0x34>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	705a      	strb	r2, [r3, #1]
  memset(&(I2C_slave_obj.data), 0, DATA_LENGTH);
 8000eea:	2208      	movs	r2, #8
 8000eec:	2100      	movs	r1, #0
 8000eee:	4806      	ldr	r0, [pc, #24]	@ (8000f08 <I2C_slave_init+0x38>)
 8000ef0:	f011 fdba 	bl	8012a68 <memset>


  HAL_I2C_EnableListen_IT(hi2c);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f002 fe81 	bl	8003bfc <HAL_I2C_EnableListen_IT>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000200 	.word	0x20000200
 8000f08:	20000202 	.word	0x20000202

08000f0c <I2C_slave_updateData>:

void I2C_slave_updateData(uint8_t data[DATA_LENGTH])
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  memcpy(&(I2C_slave_obj.data), data, DATA_LENGTH);
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <I2C_slave_updateData+0x24>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	3302      	adds	r3, #2
 8000f1a:	6811      	ldr	r1, [r2, #0]
 8000f1c:	6852      	ldr	r2, [r2, #4]
 8000f1e:	6019      	str	r1, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	20000200 	.word	0x20000200

08000f34 <ResetI2C>:

static void ResetI2C(I2C_HandleTypeDef *rev_i2c)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_I2C_DeInit(rev_i2c);
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f002 fbd4 	bl	80036ea <HAL_I2C_DeInit>
  HAL_I2C_Init(rev_i2c);
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f002 fb36 	bl	80035b4 <HAL_I2C_Init>
  I2C_slave_obj.regAddr = 0;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <ResetI2C+0x34>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
  I2C_slave_obj.txcount = 0;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <ResetI2C+0x34>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	705a      	strb	r2, [r3, #1]
  memset(I2C_slave_obj.data, 0, DATA_LENGTH);
 8000f54:	2208      	movs	r2, #8
 8000f56:	2100      	movs	r1, #0
 8000f58:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <ResetI2C+0x38>)
 8000f5a:	f011 fd85 	bl	8012a68 <memset>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000200 	.word	0x20000200
 8000f6c:	20000202 	.word	0x20000202

08000f70 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection,
    uint16_t AddrMatchCode)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
 8000f7c:	4613      	mov	r3, r2
 8000f7e:	803b      	strh	r3, [r7, #0]
  if (TransferDirection == I2C_DIRECTION_TRANSMIT)
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10a      	bne.n	8000f9c <HAL_I2C_AddrCallback+0x2c>
  {
    I2C_slave_obj.regAddr = 0; // reset the register address
 8000f86:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb4 <HAL_I2C_AddrCallback+0x44>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Slave_Seq_Receive_IT(hi2c, &(I2C_slave_obj.regAddr), 1, I2C_FIRST_AND_LAST_FRAME);
 8000f8c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f90:	2201      	movs	r2, #1
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <HAL_I2C_AddrCallback+0x44>)
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f002 fd7f 	bl	8003a98 <HAL_I2C_Slave_Seq_Receive_IT>
  }
  else
  {
    HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_slave_obj.data, DATA_LENGTH, I2C_FIRST_AND_LAST_FRAME);
  }
}
 8000f9a:	e006      	b.n	8000faa <HAL_I2C_AddrCallback+0x3a>
    HAL_I2C_Slave_Seq_Transmit_IT(hi2c, I2C_slave_obj.data, DATA_LENGTH, I2C_FIRST_AND_LAST_FRAME);
 8000f9c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000fa0:	2208      	movs	r2, #8
 8000fa2:	4905      	ldr	r1, [pc, #20]	@ (8000fb8 <HAL_I2C_AddrCallback+0x48>)
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f002 fcc5 	bl	8003934 <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000200 	.word	0x20000200
 8000fb8:	20000202 	.word	0x20000202

08000fbc <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  // We never want to receive data other than the reg address.
  HAL_I2C_EnableListen_IT(hi2c);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f002 fe19 	bl	8003bfc <HAL_I2C_EnableListen_IT>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f002 fe0e 	bl	8003bfc <HAL_I2C_EnableListen_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <HAL_I2C_SlaveTxCpltCallback>:

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  HAL_I2C_EnableListen_IT(hi2c);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f002 fe03 	bl	8003bfc <HAL_I2C_EnableListen_IT>
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  //HAL_I2C_ERROR_AF         0x00000004U    /*!< Ack Failure error  */
  //HAL_I2C_ERROR_OVR        0x00000008U    /*!< OVR error          */
  //HAL_I2C_ERROR_DMA        0x00000010U    /*!< DMA transfer error */
  //HAL_I2C_ERROR_TIMEOUT    0x00000020U    /*!< Timeout Error      */

  uint32_t error_code = HAL_I2C_GetError(hi2c);
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f002 febf 	bl	8003d8a <HAL_I2C_GetError>
 800100c:	60f8      	str	r0, [r7, #12]

  if (error_code == HAL_I2C_ERROR_AF)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2b04      	cmp	r3, #4
 8001012:	d005      	beq.n	8001020 <HAL_I2C_ErrorCallback+0x22>
  {

  }
  else if(error_code == HAL_I2C_ERROR_BERR)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d102      	bne.n	8001020 <HAL_I2C_ErrorCallback+0x22>
  {
    ResetI2C(hi2c);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff8a 	bl	8000f34 <ResetI2C>
  }
  HAL_I2C_EnableListen_IT(hi2c);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f002 fdeb 	bl	8003bfc <HAL_I2C_EnableListen_IT>
}
 8001026:	bf00      	nop
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f043 0201 	orr.w	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	601a      	str	r2, [r3, #0]
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr

0800104e <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 800104e:	b480      	push	{r7}
 8001050:	b083      	sub	sp, #12
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f023 0201 	bic.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <LL_TIM_IsEnabledCounter>:
  * @rmtoll CR1          CEN           LL_TIM_IsEnabledCounter
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledCounter(const TIM_TypeDef *TIMx)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->CR1, TIM_CR1_CEN) == (TIM_CR1_CEN)) ? 1UL : 0UL);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <LL_TIM_IsEnabledCounter+0x18>
 8001082:	2301      	movs	r3, #1
 8001084:	e000      	b.n	8001088 <LL_TIM_IsEnabledCounter+0x1a>
 8001086:	2300      	movs	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(const TIM_TypeDef *TIMx)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f06f 0201 	mvn.w	r2, #1
 80010d6:	611a      	str	r2, [r3, #16]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	f043 0201 	orr.w	r2, r3, #1
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	60da      	str	r2, [r3, #12]
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	f023 0201 	bic.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <Sensor_getPos>:

// Multiple adjacent triggered photodiodes are allowed, this would represent a hit between the channels.
// It is not allowed to have a gap in between. This would be an error condition.

int Sensor_getPos()
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b09a      	sub	sp, #104	@ 0x68
 8001128:	af00      	add	r7, sp, #0
  int returnValue = ERROR;
 800112a:	2358      	movs	r3, #88	@ 0x58
 800112c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (sensor.newValue)
 800112e:	4b40      	ldr	r3, [pc, #256]	@ (8001230 <Sensor_getPos+0x10c>)
 8001130:	7b9b      	ldrb	r3, [r3, #14]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d05a      	beq.n	80011ec <Sensor_getPos+0xc8>
  {
    uint8_t first = NOT_USED;
 8001136:	2363      	movs	r3, #99	@ 0x63
 8001138:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    uint8_t last = NOT_USED;
 800113c:	2363      	movs	r3, #99	@ 0x63
 800113e:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62

    for (int i = 0; i < (BACK_CHANNEL); i++)
 8001142:	2300      	movs	r3, #0
 8001144:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001146:	e03d      	b.n	80011c4 <Sensor_getPos+0xa0>
    {
      if (sensor.buffer[i])
 8001148:	4a39      	ldr	r2, [pc, #228]	@ (8001230 <Sensor_getPos+0x10c>)
 800114a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d033      	beq.n	80011be <Sensor_getPos+0x9a>
      {
        if (first == NOT_USED)// If no hit is registered yet, then register.
 8001156:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 800115a:	2b63      	cmp	r3, #99	@ 0x63
 800115c:	d106      	bne.n	800116c <Sensor_getPos+0x48>
        {
          first = i;
 800115e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001160:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
          last = i;
 8001164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001166:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
 800116a:	e028      	b.n	80011be <Sensor_getPos+0x9a>
        } else
        {
          if ((last + 1) == i)// If there is a hit registered, make sure the last hit was the adjacent sensor.
 800116c:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 8001170:	3301      	adds	r3, #1
 8001172:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001174:	429a      	cmp	r2, r3
 8001176:	d103      	bne.n	8001180 <Sensor_getPos+0x5c>
          {
            last = i;
 8001178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800117a:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
 800117e:	e01e      	b.n	80011be <Sensor_getPos+0x9a>
          } else
          {
            // error condition!
            ERROR_ENTRY("Gaps between triggered sensors.");
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	f107 0308 	add.w	r3, r7, #8
 8001188:	224c      	movs	r2, #76	@ 0x4c
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f011 fc6b 	bl	8012a68 <memset>
 8001192:	1d3b      	adds	r3, r7, #4
 8001194:	4a27      	ldr	r2, [pc, #156]	@ (8001234 <Sensor_getPos+0x110>)
 8001196:	2150      	movs	r1, #80	@ 0x50
 8001198:	4618      	mov	r0, r3
 800119a:	f011 fc31 	bl	8012a00 <sniprintf>
 800119e:	1d3b      	adds	r3, r7, #4
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffed 	bl	8000180 <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	3301      	adds	r3, #1
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80011ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f010 fd05 	bl	8011bc4 <CDC_Transmit_FS>
            return returnValue;
 80011ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011bc:	e034      	b.n	8001228 <Sensor_getPos+0x104>
    for (int i = 0; i < (BACK_CHANNEL); i++)
 80011be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c0:	3301      	adds	r3, #1
 80011c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011c6:	2b08      	cmp	r3, #8
 80011c8:	ddbe      	ble.n	8001148 <Sensor_getPos+0x24>
          }
        }
      }
    }

    if (first != NOT_USED) // If there is a valid hit
 80011ca:	f897 3063 	ldrb.w	r3, [r7, #99]	@ 0x63
 80011ce:	2b63      	cmp	r3, #99	@ 0x63
 80011d0:	d005      	beq.n	80011de <Sensor_getPos+0xba>
    {
      returnValue = ((first * 2) + (last * 2)) / 2;
 80011d2:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80011d6:	f897 3062 	ldrb.w	r3, [r7, #98]	@ 0x62
 80011da:	4413      	add	r3, r2
 80011dc:	667b      	str	r3, [r7, #100]	@ 0x64
    }

    if (sensor.buffer[BACK_CHANNEL]) // Left is negative.
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <Sensor_getPos+0x10c>)
 80011e0:	7b5b      	ldrb	r3, [r3, #13]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <Sensor_getPos+0xc8>
    {
      returnValue = -(returnValue);
 80011e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011e8:	425b      	negs	r3, r3
 80011ea:	667b      	str	r3, [r7, #100]	@ 0x64
    }
  }
  LOG_DBG_ENTRY("Position = %d",returnValue);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	224c      	movs	r2, #76	@ 0x4c
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f011 fc35 	bl	8012a68 <memset>
 80011fe:	1d38      	adds	r0, r7, #4
 8001200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001202:	4a0d      	ldr	r2, [pc, #52]	@ (8001238 <Sensor_getPos+0x114>)
 8001204:	2150      	movs	r1, #80	@ 0x50
 8001206:	f011 fbfb 	bl	8012a00 <sniprintf>
 800120a:	1d3b      	adds	r3, r7, #4
 800120c:	4618      	mov	r0, r3
 800120e:	f7fe ffb7 	bl	8000180 <strlen>
 8001212:	4603      	mov	r3, r0
 8001214:	3301      	adds	r3, #1
 8001216:	657b      	str	r3, [r7, #84]	@ 0x54
 8001218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800121a:	b29a      	uxth	r2, r3
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f010 fccf 	bl	8011bc4 <CDC_Transmit_FS>
  return returnValue;
 8001226:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
}
 8001228:	4618      	mov	r0, r3
 800122a:	3768      	adds	r7, #104	@ 0x68
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	2000000c 	.word	0x2000000c
 8001234:	080133a4 	.word	0x080133a4
 8001238:	080133cc 	.word	0x080133cc
 800123c:	00000000 	.word	0x00000000

08001240 <Sensor_getSpeed>:

float Sensor_getSpeed()
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	@ 0x58
 8001244:	af00      	add	r7, sp, #0
  float returnValue = 0;
 8001246:	f04f 0300 	mov.w	r3, #0
 800124a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (sensor.newValue && sensor.buffer[BACK_CHANNEL])
 800124c:	4b2c      	ldr	r3, [pc, #176]	@ (8001300 <Sensor_getSpeed+0xc0>)
 800124e:	7b9b      	ldrb	r3, [r3, #14]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d042      	beq.n	80012da <Sensor_getSpeed+0x9a>
 8001254:	4b2a      	ldr	r3, [pc, #168]	@ (8001300 <Sensor_getSpeed+0xc0>)
 8001256:	7b5b      	ldrb	r3, [r3, #13]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d03e      	beq.n	80012da <Sensor_getSpeed+0x9a>
  {
    returnValue = DISTANCE_ROWS_M/(((float)sensor.speed)*TIME_PERIOD_S);
 800125c:	4b28      	ldr	r3, [pc, #160]	@ (8001300 <Sensor_getSpeed+0xc0>)
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001268:	ee17 0a90 	vmov	r0, s15
 800126c:	f7ff f944 	bl	80004f8 <__aeabi_f2d>
 8001270:	a31f      	add	r3, pc, #124	@ (adr r3, 80012f0 <Sensor_getSpeed+0xb0>)
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f7ff f997 	bl	80005a8 <__aeabi_dmul>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	a11e      	add	r1, pc, #120	@ (adr r1, 80012f8 <Sensor_getSpeed+0xb8>)
 8001280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001284:	f7ff faba 	bl	80007fc <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fb9c 	bl	80009cc <__aeabi_d2f>
 8001294:	4603      	mov	r3, r0
 8001296:	657b      	str	r3, [r7, #84]	@ 0x54
    LOG_DBG_ENTRY("Speed = %d",(int)returnValue);
 8001298:	2300      	movs	r3, #0
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	224c      	movs	r2, #76	@ 0x4c
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f011 fbe0 	bl	8012a68 <memset>
 80012a8:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80012ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b0:	4638      	mov	r0, r7
 80012b2:	ee17 3a90 	vmov	r3, s15
 80012b6:	4a13      	ldr	r2, [pc, #76]	@ (8001304 <Sensor_getSpeed+0xc4>)
 80012b8:	2150      	movs	r1, #80	@ 0x50
 80012ba:	f011 fba1 	bl	8012a00 <sniprintf>
 80012be:	463b      	mov	r3, r7
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7fe ff5d 	bl	8000180 <strlen>
 80012c6:	4603      	mov	r3, r0
 80012c8:	3301      	adds	r3, #1
 80012ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80012cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012ce:	b29a      	uxth	r2, r3
 80012d0:	463b      	mov	r3, r7
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f010 fc75 	bl	8011bc4 <CDC_Transmit_FS>
  }
  return returnValue;
 80012da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012dc:	ee07 3a90 	vmov	s15, r3
}
 80012e0:	eeb0 0a67 	vmov.f32	s0, s15
 80012e4:	3758      	adds	r7, #88	@ 0x58
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	f3af 8000 	nop.w
 80012f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80012f4:	3e50c6f7 	.word	0x3e50c6f7
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	3f847ae1 	.word	0x3f847ae1
 8001300:	2000000c 	.word	0x2000000c
 8001304:	080133e0 	.word	0x080133e0

08001308 <Sensor_newValue>:

unsigned int Sensor_newValue()
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return sensor.newValue;
 800130c:	4b03      	ldr	r3, [pc, #12]	@ (800131c <Sensor_newValue+0x14>)
 800130e:	7b9b      	ldrb	r3, [r3, #14]
}
 8001310:	4618      	mov	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	2000000c 	.word	0x2000000c

08001320 <Sensor_clear>:

void Sensor_clear()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  memset(sensor.buffer,0,NR_CHANNELS);// clean up and get ready for next hit.
 8001324:	220a      	movs	r2, #10
 8001326:	2100      	movs	r1, #0
 8001328:	4806      	ldr	r0, [pc, #24]	@ (8001344 <Sensor_clear+0x24>)
 800132a:	f011 fb9d 	bl	8012a68 <memset>
  sensor.speed = 0;
 800132e:	4b06      	ldr	r3, [pc, #24]	@ (8001348 <Sensor_clear+0x28>)
 8001330:	2200      	movs	r2, #0
 8001332:	611a      	str	r2, [r3, #16]
  sensor.newValue = 0;
 8001334:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <Sensor_clear+0x28>)
 8001336:	2200      	movs	r2, #0
 8001338:	739a      	strb	r2, [r3, #14]
  enableExternalInterrupt();
 800133a:	f000 f8f8 	bl	800152e <enableExternalInterrupt>
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000010 	.word	0x20000010
 8001348:	2000000c 	.word	0x2000000c

0800134c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b098      	sub	sp, #96	@ 0x60
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == CH_C_Pin)
 8001356:	88fb      	ldrh	r3, [r7, #6]
 8001358:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800135c:	d102      	bne.n	8001364 <HAL_GPIO_EXTI_Callback+0x18>
  {
    sensor.buffer[0] = 1;
 800135e:	4b55      	ldr	r3, [pc, #340]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001360:	2201      	movs	r2, #1
 8001362:	711a      	strb	r2, [r3, #4]
  }
  if (GPIO_Pin == CH_1_Pin)
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_GPIO_EXTI_Callback+0x24>
  {
    sensor.buffer[1] = 1;
 800136a:	4b52      	ldr	r3, [pc, #328]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 800136c:	2201      	movs	r2, #1
 800136e:	715a      	strb	r2, [r3, #5]
  }
  if (GPIO_Pin == CH_2_Pin)
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2b02      	cmp	r3, #2
 8001374:	d102      	bne.n	800137c <HAL_GPIO_EXTI_Callback+0x30>
  {
    sensor.buffer[2] = 1;
 8001376:	4b4f      	ldr	r3, [pc, #316]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001378:	2201      	movs	r2, #1
 800137a:	719a      	strb	r2, [r3, #6]
  }
  if (GPIO_Pin == CH_3_Pin)
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	2b04      	cmp	r3, #4
 8001380:	d102      	bne.n	8001388 <HAL_GPIO_EXTI_Callback+0x3c>
  {
    sensor.buffer[3] = 1;
 8001382:	4b4c      	ldr	r3, [pc, #304]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001384:	2201      	movs	r2, #1
 8001386:	71da      	strb	r2, [r3, #7]
  }
  if (GPIO_Pin == CH_4_Pin)
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	2b08      	cmp	r3, #8
 800138c:	d102      	bne.n	8001394 <HAL_GPIO_EXTI_Callback+0x48>
  {
    sensor.buffer[4] = 1;
 800138e:	4b49      	ldr	r3, [pc, #292]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001390:	2201      	movs	r2, #1
 8001392:	721a      	strb	r2, [r3, #8]
  }
  if (GPIO_Pin == CH_5_Pin)
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d102      	bne.n	80013a0 <HAL_GPIO_EXTI_Callback+0x54>
  {
    sensor.buffer[5] = 1;
 800139a:	4b46      	ldr	r3, [pc, #280]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 800139c:	2201      	movs	r2, #1
 800139e:	725a      	strb	r2, [r3, #9]
  }
  if (GPIO_Pin == CH_6_Pin)
 80013a0:	88fb      	ldrh	r3, [r7, #6]
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d102      	bne.n	80013ac <HAL_GPIO_EXTI_Callback+0x60>
  {
    sensor.buffer[6] = 1;
 80013a6:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013a8:	2201      	movs	r2, #1
 80013aa:	729a      	strb	r2, [r3, #10]
  }
  if (GPIO_Pin == CH_7_Pin)
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	2b40      	cmp	r3, #64	@ 0x40
 80013b0:	d102      	bne.n	80013b8 <HAL_GPIO_EXTI_Callback+0x6c>
  {
    sensor.buffer[7] = 1;
 80013b2:	4b40      	ldr	r3, [pc, #256]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013b4:	2201      	movs	r2, #1
 80013b6:	72da      	strb	r2, [r3, #11]
  }
  if (GPIO_Pin == CH_8_Pin)
 80013b8:	88fb      	ldrh	r3, [r7, #6]
 80013ba:	2b80      	cmp	r3, #128	@ 0x80
 80013bc:	d102      	bne.n	80013c4 <HAL_GPIO_EXTI_Callback+0x78>
  {
    sensor.buffer[8] = 1;
 80013be:	4b3d      	ldr	r3, [pc, #244]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	731a      	strb	r2, [r3, #12]
  }

  if (GPIO_Pin == CH_B_Pin) // it is the back row.
 80013c4:	88fb      	ldrh	r3, [r7, #6]
 80013c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80013ca:	d141      	bne.n	8001450 <HAL_GPIO_EXTI_Callback+0x104>
  {
    sensor.buffer[BACK_CHANNEL] = 1;
 80013cc:	4b39      	ldr	r3, [pc, #228]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	735a      	strb	r2, [r3, #13]

    if (!LL_TIM_IsEnabledCounter(sensor.timer)) // If back detector was triggered, and the timer was not already going, start it.
 80013d2:	4b38      	ldr	r3, [pc, #224]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fe49 	bl	800106e <LL_TIM_IsEnabledCounter>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_GPIO_EXTI_Callback+0xc2>
    {
      LL_TIM_SetCounter(sensor.timer, 0);
 80013e2:	4b34      	ldr	r3, [pc, #208]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe53 	bl	8001094 <LL_TIM_SetCounter>
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
 80013ee:	4b31      	ldr	r3, [pc, #196]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fe68 	bl	80010c8 <LL_TIM_ClearFlag_UPDATE>
      LL_TIM_EnableIT_UPDATE(sensor.timer);
 80013f8:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fe71 	bl	80010e4 <LL_TIM_EnableIT_UPDATE>
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rows.
 8001402:	4b2c      	ldr	r3, [pc, #176]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fe11 	bl	800102e <LL_TIM_EnableCounter>
      {
        sensor.speed = LL_TIM_GetCounter(sensor.timer); //
      }
    }
  }
}
 800140c:	e04e      	b.n	80014ac <HAL_GPIO_EXTI_Callback+0x160>
      ERROR_ENTRY("Back row hit after scoring row.");
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	224c      	movs	r2, #76	@ 0x4c
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f011 fb24 	bl	8012a68 <memset>
 8001420:	f107 030c 	add.w	r3, r7, #12
 8001424:	4a24      	ldr	r2, [pc, #144]	@ (80014b8 <HAL_GPIO_EXTI_Callback+0x16c>)
 8001426:	2150      	movs	r1, #80	@ 0x50
 8001428:	4618      	mov	r0, r3
 800142a:	f011 fae9 	bl	8012a00 <sniprintf>
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	4618      	mov	r0, r3
 8001434:	f7fe fea4 	bl	8000180 <strlen>
 8001438:	4603      	mov	r3, r0
 800143a:	3301      	adds	r3, #1
 800143c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800143e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001440:	b29a      	uxth	r2, r3
 8001442:	f107 030c 	add.w	r3, r7, #12
 8001446:	4611      	mov	r1, r2
 8001448:	4618      	mov	r0, r3
 800144a:	f010 fbbb 	bl	8011bc4 <CDC_Transmit_FS>
}
 800144e:	e02d      	b.n	80014ac <HAL_GPIO_EXTI_Callback+0x160>
    if (!LL_TIM_IsEnabledCounter(sensor.timer) ) //  The timer is not enabled. We should start the timer as it is also used to ensure enough time has passed before registering a new value.
 8001450:	4b18      	ldr	r3, [pc, #96]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fe0a 	bl	800106e <LL_TIM_IsEnabledCounter>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d115      	bne.n	800148c <HAL_GPIO_EXTI_Callback+0x140>
      LL_TIM_SetCounter(sensor.timer, 0);
 8001460:	4b14      	ldr	r3, [pc, #80]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fe14 	bl	8001094 <LL_TIM_SetCounter>
      LL_TIM_ClearFlag_UPDATE(sensor.timer);
 800146c:	4b11      	ldr	r3, [pc, #68]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff fe29 	bl	80010c8 <LL_TIM_ClearFlag_UPDATE>
      LL_TIM_EnableIT_UPDATE(sensor.timer);
 8001476:	4b0f      	ldr	r3, [pc, #60]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fe32 	bl	80010e4 <LL_TIM_EnableIT_UPDATE>
      LL_TIM_EnableCounter(sensor.timer); // measure time between back row and other rowes.
 8001480:	4b0c      	ldr	r3, [pc, #48]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fdd2 	bl	800102e <LL_TIM_EnableCounter>
}
 800148a:	e00f      	b.n	80014ac <HAL_GPIO_EXTI_Callback+0x160>
      if((sensor.buffer[BACK_CHANNEL] == 1) && (!sensor.speed)) // only take a measurement if the back row was triggered, and if no other speed was registered.
 800148c:	4b09      	ldr	r3, [pc, #36]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 800148e:	7b5b      	ldrb	r3, [r3, #13]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d10b      	bne.n	80014ac <HAL_GPIO_EXTI_Callback+0x160>
 8001494:	4b07      	ldr	r3, [pc, #28]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d107      	bne.n	80014ac <HAL_GPIO_EXTI_Callback+0x160>
        sensor.speed = LL_TIM_GetCounter(sensor.timer); //
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff fe05 	bl	80010b0 <LL_TIM_GetCounter>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a02      	ldr	r2, [pc, #8]	@ (80014b4 <HAL_GPIO_EXTI_Callback+0x168>)
 80014aa:	6113      	str	r3, [r2, #16]
}
 80014ac:	bf00      	nop
 80014ae:	3760      	adds	r7, #96	@ 0x60
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	080133f4 	.word	0x080133f4

080014bc <timer2UpdateISR>:

void timer2UpdateISR()
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  // Stop the timer then enable the flag for new value.
  LL_TIM_SetCounter(sensor.timer, 0);
 80014c0:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <timer2UpdateISR+0x3c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fde4 	bl	8001094 <LL_TIM_SetCounter>
  LL_TIM_DisableCounter(sensor.timer);
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <timer2UpdateISR+0x3c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fdbc 	bl	800104e <LL_TIM_DisableCounter>
  LL_TIM_DisableIT_UPDATE(sensor.timer);
 80014d6:	4b08      	ldr	r3, [pc, #32]	@ (80014f8 <timer2UpdateISR+0x3c>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4618      	mov	r0, r3
 80014dc:	f7ff fe12 	bl	8001104 <LL_TIM_DisableIT_UPDATE>
  LL_TIM_ClearFlag_UPDATE(sensor.timer);
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <timer2UpdateISR+0x3c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fdef 	bl	80010c8 <LL_TIM_ClearFlag_UPDATE>

  sensor.newValue = 1;
 80014ea:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <timer2UpdateISR+0x3c>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	739a      	strb	r2, [r3, #14]
  disableExternalInterrupt();
 80014f0:	f000 f804 	bl	80014fc <disableExternalInterrupt>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000000c 	.word	0x2000000c

080014fc <disableExternalInterrupt>:


void disableExternalInterrupt()
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8001500:	2006      	movs	r0, #6
 8001502:	f001 fc9a 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI1_IRQn);
 8001506:	2007      	movs	r0, #7
 8001508:	f001 fc97 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800150c:	2008      	movs	r0, #8
 800150e:	f001 fc94 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 8001512:	2009      	movs	r0, #9
 8001514:	f001 fc91 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8001518:	200a      	movs	r0, #10
 800151a:	f001 fc8e 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800151e:	2017      	movs	r0, #23
 8001520:	f001 fc8b 	bl	8002e3a <HAL_NVIC_DisableIRQ>

  HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8001524:	2028      	movs	r0, #40	@ 0x28
 8001526:	f001 fc88 	bl	8002e3a <HAL_NVIC_DisableIRQ>
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}

0800152e <enableExternalInterrupt>:

void enableExternalInterrupt()
{
 800152e:	b580      	push	{r7, lr}
 8001530:	af00      	add	r7, sp, #0
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001532:	2006      	movs	r0, #6
 8001534:	f001 fc73 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001538:	2007      	movs	r0, #7
 800153a:	f001 fc70 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800153e:	2008      	movs	r0, #8
 8001540:	f001 fc6d 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001544:	2009      	movs	r0, #9
 8001546:	f001 fc6a 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800154a:	200a      	movs	r0, #10
 800154c:	f001 fc67 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001550:	2017      	movs	r0, #23
 8001552:	f001 fc64 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001556:	2028      	movs	r0, #40	@ 0x28
 8001558:	f001 fc61 	bl	8002e1e <HAL_NVIC_EnableIRQ>
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}

08001560 <serialize_uint32_t>:
 * THE SOFTWARE.
 */
#include "serialization.h"
#include <string.h>
uint8_t* serialize_uint32_t(uint8_t *buffer, uint32_t* size, uint32_t* value)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
    if(!buffer || *size < 4)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <serialize_uint32_t+0x1a>
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d801      	bhi.n	800157e <serialize_uint32_t+0x1e>
    {
        return 0;
 800157a:	2300      	movs	r3, #0
 800157c:	e020      	b.n	80015c0 <serialize_uint32_t+0x60>
    }
    buffer[0]  = (uint8_t)((*value >> 24)   & 0xFF);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	0e1b      	lsrs	r3, r3, #24
 8001584:	b2da      	uxtb	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	701a      	strb	r2, [r3, #0]
    buffer[1]  = (uint8_t)((*value >> 16)   & 0xFF);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	0c1a      	lsrs	r2, r3, #16
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	3301      	adds	r3, #1
 8001594:	b2d2      	uxtb	r2, r2
 8001596:	701a      	strb	r2, [r3, #0]
    buffer[2]  = (uint8_t)((*value >> 8)    & 0xFF);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	0a1a      	lsrs	r2, r3, #8
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3302      	adds	r3, #2
 80015a2:	b2d2      	uxtb	r2, r2
 80015a4:	701a      	strb	r2, [r3, #0]
    buffer[3]  = (uint8_t)((*value)         & 0xFF);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3303      	adds	r3, #3
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	701a      	strb	r2, [r3, #0]
    *size -= 4;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1f1a      	subs	r2, r3, #4
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	601a      	str	r2, [r3, #0]
    return buffer + 4;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3304      	adds	r3, #4
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <serialize_int32_t>:
    *size -= 4;
    return buffer + 4;
}

uint8_t* serialize_int32_t(uint8_t *buffer, uint32_t* size, int32_t *value)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
    return serialize_uint32_t(buffer, size, (uint32_t*)value);
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	68b9      	ldr	r1, [r7, #8]
 80015dc:	68f8      	ldr	r0, [r7, #12]
 80015de:	f7ff ffbf 	bl	8001560 <serialize_uint32_t>
 80015e2:	4603      	mov	r3, r0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 80015ec:	b5b0      	push	{r4, r5, r7, lr}
 80015ee:	b088      	sub	sp, #32
 80015f0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80015f2:	4b0b      	ldr	r3, [pc, #44]	@ (8001620 <APPD_EnableCPU2+0x34>)
 80015f4:	1d3c      	adds	r4, r7, #4
 80015f6:	461d      	mov	r5, r3
 80015f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001600:	c403      	stmia	r4!, {r0, r1}
 8001602:	8022      	strh	r2, [r4, #0]
 8001604:	3402      	adds	r4, #2
 8001606:	0c13      	lsrs	r3, r2, #16
 8001608:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 800160a:	f00f f9b9 	bl	8010980 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	4618      	mov	r0, r3
 8001612:	f00e fc4a 	bl	800feaa <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001616:	bf00      	nop
}
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bdb0      	pop	{r4, r5, r7, pc}
 800161e:	bf00      	nop
 8001620:	0801341c 	.word	0x0801341c

08001624 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 800162c:	4b07      	ldr	r3, [pc, #28]	@ (800164c <LL_C2_PWR_SetPowerMode+0x28>)
 800162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001632:	f023 0207 	bic.w	r2, r3, #7
 8001636:	4905      	ldr	r1, [pc, #20]	@ (800164c <LL_C2_PWR_SetPowerMode+0x28>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4313      	orrs	r3, r2
 800163c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr
 800164c:	58000400 	.word	0x58000400

08001650 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <LL_EXTI_EnableIT_32_63+0x24>)
 800165a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800165e:	4905      	ldr	r1, [pc, #20]	@ (8001674 <LL_EXTI_EnableIT_32_63+0x24>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4313      	orrs	r3, r2
 8001664:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	58000800 	.word	0x58000800

08001678 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001684:	4a0a      	ldr	r2, [pc, #40]	@ (80016b0 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001686:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800168e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001692:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800169e:	4313      	orrs	r3, r2
 80016a0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80016a4:	bf00      	nop
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	cafecafe 	.word	0xcafecafe

080016b4 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80016bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80016c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]
}
 80016d0:	bf00      	nop
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80016e0:	4b04      	ldr	r3, [pc, #16]	@ (80016f4 <LL_DBGMCU_GetDeviceID+0x18>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e0042000 	.word	0xe0042000

080016f8 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 80016fc:	4b04      	ldr	r3, [pc, #16]	@ (8001710 <LL_DBGMCU_GetRevisionID+0x18>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	b29b      	uxth	r3, r3
}
 8001704:	4618      	mov	r0, r3
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e0042000 	.word	0xe0042000

08001714 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	22ff      	movs	r2, #255	@ 0xff
 8001720:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001722:	bf00      	nop
 8001724:	370c      	adds	r7, #12
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800172e:	b480      	push	{r7}
 8001730:	b083      	sub	sp, #12
 8001732:	af00      	add	r7, sp, #0
 8001734:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	22ca      	movs	r2, #202	@ 0xca
 800173a:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2253      	movs	r2, #83	@ 0x53
 8001740:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr

0800174e <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800174e:	b480      	push	{r7}
 8001750:	b083      	sub	sp, #12
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
 8001756:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f023 0207 	bic.w	r2, r3, #7
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	609a      	str	r2, [r3, #8]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <MX_APPE_Config+0x18>)
 800177a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800177e:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 8001780:	f000 f824 	bl	80017cc <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001784:	f000 f829 	bl	80017da <Config_HSE>

  return;
 8001788:	bf00      	nop
}
 800178a:	bd80      	pop	{r7, pc}
 800178c:	58004000 	.word	0x58004000

08001790 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 8001794:	f000 f835 	bl	8001802 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001798:	f000 f84e 	bl	8001838 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800179c:	4903      	ldr	r1, [pc, #12]	@ (80017ac <MX_APPE_Init+0x1c>)
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f988 	bl	8001ab4 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80017a4:	f000 f856 	bl	8001854 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80017a8:	bf00      	nop
}
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000340 	.word	0x20000340

080017b0 <Init_Smps>:

void Init_Smps(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80017b4:	bf00      	nop
}
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <Init_Exti>:

void Init_Exti(void)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80017c2:	2050      	movs	r0, #80	@ 0x50
 80017c4:	f7ff ff44 	bl	8001650 <LL_EXTI_EnableIT_32_63>

  return;
 80017c8:	bf00      	nop
}
 80017ca:	bd80      	pop	{r7, pc}

080017cc <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 80017d0:	bf00      	nop
}
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr

080017da <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80017e0:	2000      	movs	r0, #0
 80017e2:	f00f f959 	bl	8010a98 <OTP_Read>
 80017e6:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d005      	beq.n	80017fa <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	799b      	ldrb	r3, [r3, #6]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff40 	bl	8001678 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
}
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <System_Init>:

static void System_Init(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  Init_Smps();
 8001806:	f7ff ffd3 	bl	80017b0 <Init_Smps>

  Init_Exti();
 800180a:	f7ff ffd8 	bl	80017be <Init_Exti>

  Init_Rtc();
 800180e:	f000 f803 	bl	8001818 <Init_Rtc>

  return;
 8001812:	bf00      	nop
}
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <Init_Rtc>:

static void Init_Rtc(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800181c:	4805      	ldr	r0, [pc, #20]	@ (8001834 <Init_Rtc+0x1c>)
 800181e:	f7ff ff86 	bl	800172e <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001822:	2100      	movs	r1, #0
 8001824:	4803      	ldr	r0, [pc, #12]	@ (8001834 <Init_Rtc+0x1c>)
 8001826:	f7ff ff92 	bl	800174e <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800182a:	4802      	ldr	r0, [pc, #8]	@ (8001834 <Init_Rtc+0x1c>)
 800182c:	f7ff ff72 	bl	8001714 <LL_RTC_EnableWriteProtection>

  return;
 8001830:	bf00      	nop
}
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40002800 	.word	0x40002800

08001838 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 800183c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001840:	f7ff ff38 	bl	80016b4 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001844:	f010 fe60 	bl	8012508 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001848:	2004      	movs	r0, #4
 800184a:	f7ff feeb 	bl	8001624 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800184e:	bf00      	nop
}
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800185a:	f00e fedb 	bl	8010614 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 800185e:	4a11      	ldr	r2, [pc, #68]	@ (80018a4 <appe_Tl_Init+0x50>)
 8001860:	2100      	movs	r1, #0
 8001862:	2004      	movs	r0, #4
 8001864:	f010 ff8e 	bl	8012784 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <appe_Tl_Init+0x54>)
 800186a:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <appe_Tl_Init+0x58>)
 800186e:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001870:	463b      	mov	r3, r7
 8001872:	4619      	mov	r1, r3
 8001874:	480e      	ldr	r0, [pc, #56]	@ (80018b0 <appe_Tl_Init+0x5c>)
 8001876:	f00e fd8f 	bl	8010398 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800187a:	4b0e      	ldr	r3, [pc, #56]	@ (80018b4 <appe_Tl_Init+0x60>)
 800187c:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800187e:	4b0e      	ldr	r3, [pc, #56]	@ (80018b8 <appe_Tl_Init+0x64>)
 8001880:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001882:	4b0e      	ldr	r3, [pc, #56]	@ (80018bc <appe_Tl_Init+0x68>)
 8001884:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001886:	f240 533c 	movw	r3, #1340	@ 0x53c
 800188a:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	4618      	mov	r0, r3
 8001892:	f00f f801 	bl	8010898 <TL_MM_Init>

  TL_Enable();
 8001896:	f00e feb7 	bl	8010608 <TL_Enable>

  return;
 800189a:	bf00      	nop
}
 800189c:	3720      	adds	r7, #32
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	080103d1 	.word	0x080103d1
 80018a8:	20030734 	.word	0x20030734
 80018ac:	080018c1 	.word	0x080018c1
 80018b0:	080018d9 	.word	0x080018d9
 80018b4:	2003094c 	.word	0x2003094c
 80018b8:	20030840 	.word	0x20030840
 80018bc:	200301f8 	.word	0x200301f8

080018c0 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80018ca:	bf00      	nop
}
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
	...

080018d8 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	330b      	adds	r3, #11
 80018e6:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	881b      	ldrh	r3, [r3, #0]
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	f5a3 4312 	sub.w	r3, r3, #37376	@ 0x9200
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	d81f      	bhi.n	8001936 <APPE_SysUserEvtRx+0x5e>
 80018f6:	a201      	add	r2, pc, #4	@ (adr r2, 80018fc <APPE_SysUserEvtRx+0x24>)
 80018f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018fc:	0800191d 	.word	0x0800191d
 8001900:	0800192f 	.word	0x0800192f
 8001904:	08001937 	.word	0x08001937
 8001908:	08001937 	.word	0x08001937
 800190c:	08001937 	.word	0x08001937
 8001910:	08001937 	.word	0x08001937
 8001914:	08001937 	.word	0x08001937
 8001918:	08001937 	.word	0x08001937
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f00e faef 	bl	800ff04 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
    APPE_SysEvtReadyProcessing(pPayload);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f000 f81b 	bl	8001962 <APPE_SysEvtReadyProcessing>
    break;
 800192c:	e004      	b.n	8001938 <APPE_SysUserEvtRx+0x60>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
    APPE_SysEvtError(pPayload);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f000 f806 	bl	8001940 <APPE_SysEvtError>
    break;
 8001934:	e000      	b.n	8001938 <APPE_SysUserEvtRx+0x60>
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
    break;

  default:
    break;
 8001936:	bf00      	nop
  }

  return;
 8001938:	bf00      	nop
}
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	330b      	adds	r3, #11
 800194e:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3302      	adds	r3, #2
 8001954:	60bb      	str	r3, [r7, #8]
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001956:	bf00      	nop
}
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr

08001962 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b08a      	sub	sp, #40	@ 0x28
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t DeviceID=0;
 800197c:	2300      	movs	r3, #0
 800197e:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	330b      	adds	r3, #11
 8001986:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	3302      	adds	r3, #2
 800198c:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d11d      	bne.n	80019d2 <APPE_SysEvtReadyProcessing+0x70>
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");

    /* Traces channel initialization */
    APPD_EnableCPU2();
 8001996:	f7ff fe29 	bl	80015ec <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800199a:	230f      	movs	r3, #15
 800199c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 800199e:	237f      	movs	r3, #127	@ 0x7f
 80019a0:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 80019a2:	f7ff fea9 	bl	80016f8 <LL_DBGMCU_GetRevisionID>
 80019a6:	6278      	str	r0, [r7, #36]	@ 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);

    config_param.RevisionID = (uint16_t)RevisionID;
 80019a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 80019ae:	f7ff fe95 	bl	80016dc <LL_DBGMCU_GetDeviceID>
 80019b2:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
    config_param.DeviceID = (uint16_t)DeviceID;
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	4618      	mov	r0, r3
 80019c0:	f00e fa8a 	bl	800fed8 <SHCI_C2_Config>

    APP_BLE_Init();
 80019c4:	f00f f972 	bl	8010cac <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80019c8:	2100      	movs	r1, #0
 80019ca:	2001      	movs	r0, #1
 80019cc:	f010 fdae 	bl	801252c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80019d0:	e007      	b.n	80019e2 <APPE_SysEvtReadyProcessing+0x80>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d103      	bne.n	80019e2 <APPE_SysEvtReadyProcessing+0x80>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
  return;
 80019e0:	bf00      	nop
 80019e2:	bf00      	nop
}
 80019e4:	3728      	adds	r7, #40	@ 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80019f2:	f010 fdcb 	bl	801258c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80019fe:	bf00      	nop
}
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a16:	f010 fdb9 	bl	801258c <UTIL_SEQ_Run>
  return;
 8001a1a:	bf00      	nop
}
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	2004      	movs	r0, #4
 8001a2e:	f010 fecb 	bl	80127c8 <UTIL_SEQ_SetTask>
  return;
 8001a32:	bf00      	nop
}
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001a42:	2002      	movs	r0, #2
 8001a44:	f010 ff2c 	bl	80128a0 <UTIL_SEQ_SetEvt>
  return;
 8001a48:	bf00      	nop
}
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f010 ff41 	bl	80128e0 <UTIL_SEQ_WaitEvt>
  return;
 8001a5e:	bf00      	nop
}
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <LL_EXTI_EnableIT_0_31>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8001a72:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8001a76:	4905      	ldr	r1, [pc, #20]	@ (8001a8c <LL_EXTI_EnableIT_0_31+0x24>)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	58000800 	.word	0x58000800

08001a90 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4904      	ldr	r1, [pc, #16]	@ (8001ab0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	600b      	str	r3, [r1, #0]

}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	58000800 	.word	0x58000800

08001ab4 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8001ac0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c3c <HW_TS_Init+0x188>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	22ca      	movs	r2, #202	@ 0xca
 8001ac6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c3c <HW_TS_Init+0x188>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2253      	movs	r2, #83	@ 0x53
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	@ (8001c40 <HW_TS_Init+0x18c>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c40 <HW_TS_Init+0x18c>)
 8001ad6:	f043 0320 	orr.w	r3, r3, #32
 8001ada:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001adc:	4b58      	ldr	r3, [pc, #352]	@ (8001c40 <HW_TS_Init+0x18c>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f1c3 0304 	rsb	r3, r3, #4
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4b55      	ldr	r3, [pc, #340]	@ (8001c44 <HW_TS_Init+0x190>)
 8001af0:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8001af2:	4b53      	ldr	r3, [pc, #332]	@ (8001c40 <HW_TS_Init+0x18c>)
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001afa:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8001afe:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	693a      	ldr	r2, [r7, #16]
 8001b02:	fa92 f2a2 	rbit	r2, r2
 8001b06:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001b0c:	697a      	ldr	r2, [r7, #20]
 8001b0e:	2a00      	cmp	r2, #0
 8001b10:	d101      	bne.n	8001b16 <HW_TS_Init+0x62>
  {
    return 32U;
 8001b12:	2220      	movs	r2, #32
 8001b14:	e003      	b.n	8001b1e <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8001b16:	697a      	ldr	r2, [r7, #20]
 8001b18:	fab2 f282 	clz	r2, r2
 8001b1c:	b2d2      	uxtb	r2, r2
 8001b1e:	40d3      	lsrs	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b48      	ldr	r3, [pc, #288]	@ (8001c48 <HW_TS_Init+0x194>)
 8001b28:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001b2a:	4b45      	ldr	r3, [pc, #276]	@ (8001c40 <HW_TS_Init+0x18c>)
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	b29a      	uxth	r2, r3
 8001b3a:	4b44      	ldr	r3, [pc, #272]	@ (8001c4c <HW_TS_Init+0x198>)
 8001b3c:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001b3e:	4b43      	ldr	r3, [pc, #268]	@ (8001c4c <HW_TS_Init+0x198>)
 8001b40:	881b      	ldrh	r3, [r3, #0]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	4a40      	ldr	r2, [pc, #256]	@ (8001c48 <HW_TS_Init+0x194>)
 8001b46:	7812      	ldrb	r2, [r2, #0]
 8001b48:	fb02 f303 	mul.w	r3, r2, r3
 8001b4c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001b50:	4a3c      	ldr	r2, [pc, #240]	@ (8001c44 <HW_TS_Init+0x190>)
 8001b52:	7812      	ldrb	r2, [r2, #0]
 8001b54:	40d3      	lsrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d904      	bls.n	8001b6c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	@ (8001c50 <HW_TS_Init+0x19c>)
 8001b64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b68:	801a      	strh	r2, [r3, #0]
 8001b6a:	e003      	b.n	8001b74 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b37      	ldr	r3, [pc, #220]	@ (8001c50 <HW_TS_Init+0x19c>)
 8001b72:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b74:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001b78:	f7ff ff8a 	bl	8001a90 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8001b7c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8001b80:	f7ff ff72 	bl	8001a68 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d13d      	bne.n	8001c06 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8001b8a:	4b32      	ldr	r3, [pc, #200]	@ (8001c54 <HW_TS_Init+0x1a0>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001b90:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <HW_TS_Init+0x1a4>)
 8001b92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b96:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	77fb      	strb	r3, [r7, #31]
 8001b9c:	e00c      	b.n	8001bb8 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8001b9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ba0:	492e      	ldr	r1, [pc, #184]	@ (8001c5c <HW_TS_Init+0x1a8>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	4413      	add	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	440b      	add	r3, r1
 8001bac:	330c      	adds	r3, #12
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8001bb2:	7ffb      	ldrb	r3, [r7, #31]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	77fb      	strb	r3, [r7, #31]
 8001bb8:	7ffb      	ldrb	r3, [r7, #31]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d9ef      	bls.n	8001b9e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <HW_TS_Init+0x1ac>)
 8001bc0:	2206      	movs	r2, #6
 8001bc2:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd2:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001bd4:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8001be4:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001be6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HW_TS_Init+0x1b0>)
 8001be8:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001bec:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001bee:	2003      	movs	r0, #3
 8001bf0:	f001 f94b 	bl	8002e8a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001bf4:	4b11      	ldr	r3, [pc, #68]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <HW_TS_Init+0x188>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	e009      	b.n	8001c1a <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8001c06:	4b0d      	ldr	r3, [pc, #52]	@ (8001c3c <HW_TS_Init+0x188>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001c14:	2003      	movs	r0, #3
 8001c16:	f001 f92a 	bl	8002e6e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8001c1a:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HW_TS_Init+0x188>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	22ff      	movs	r2, #255	@ 0xff
 8001c20:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8001c22:	2200      	movs	r2, #0
 8001c24:	2103      	movs	r1, #3
 8001c26:	2003      	movs	r0, #3
 8001c28:	f001 f8df 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001c2c:	2003      	movs	r0, #3
 8001c2e:	f001 f8f6 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  return;
 8001c32:	bf00      	nop
}
 8001c34:	3720      	adds	r7, #32
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000340 	.word	0x20000340
 8001c40:	40002800 	.word	0x40002800
 8001c44:	200002a9 	.word	0x200002a9
 8001c48:	200002aa 	.word	0x200002aa
 8001c4c:	200002ac 	.word	0x200002ac
 8001c50:	200002ae 	.word	0x200002ae
 8001c54:	200002a8 	.word	0x200002a8
 8001c58:	200002a4 	.word	0x200002a4
 8001c5c:	20000210 	.word	0x20000210
 8001c60:	200002a0 	.word	0x200002a0
 8001c64:	58000800 	.word	0x58000800

08001c68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <__NVIC_GetPriorityGrouping+0x18>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	0a1b      	lsrs	r3, r3, #8
 8001c72:	f003 0307 	and.w	r3, r3, #7
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	db0b      	blt.n	8001cae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	f003 021f 	and.w	r2, r3, #31
 8001c9c:	4907      	ldr	r1, [pc, #28]	@ (8001cbc <__NVIC_EnableIRQ+0x38>)
 8001c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca2:	095b      	lsrs	r3, r3, #5
 8001ca4:	2001      	movs	r0, #1
 8001ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8001caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	e000e100 	.word	0xe000e100

08001cc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	db0a      	blt.n	8001cea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	490c      	ldr	r1, [pc, #48]	@ (8001d0c <__NVIC_SetPriority+0x4c>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	0112      	lsls	r2, r2, #4
 8001ce0:	b2d2      	uxtb	r2, r2
 8001ce2:	440b      	add	r3, r1
 8001ce4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ce8:	e00a      	b.n	8001d00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	4908      	ldr	r1, [pc, #32]	@ (8001d10 <__NVIC_SetPriority+0x50>)
 8001cf0:	79fb      	ldrb	r3, [r7, #7]
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	3b04      	subs	r3, #4
 8001cf8:	0112      	lsls	r2, r2, #4
 8001cfa:	b2d2      	uxtb	r2, r2
 8001cfc:	440b      	add	r3, r1
 8001cfe:	761a      	strb	r2, [r3, #24]
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000e100 	.word	0xe000e100
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f1c3 0307 	rsb	r3, r3, #7
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	bf28      	it	cs
 8001d32:	2304      	movcs	r3, #4
 8001d34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	3304      	adds	r3, #4
 8001d3a:	2b06      	cmp	r3, #6
 8001d3c:	d902      	bls.n	8001d44 <NVIC_EncodePriority+0x30>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	3b03      	subs	r3, #3
 8001d42:	e000      	b.n	8001d46 <NVIC_EncodePriority+0x32>
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	401a      	ands	r2, r3
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa01 f303 	lsl.w	r3, r1, r3
 8001d66:	43d9      	mvns	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	4313      	orrs	r3, r2
         );
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3724      	adds	r7, #36	@ 0x24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b085      	sub	sp, #20
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	bf00      	nop
 8001da2:	3714      	adds	r7, #20
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001db8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001dc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
}
 8001dd2:	bf00      	nop
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr

08001dde <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b085      	sub	sp, #20
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001de6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dea:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001dfa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e02:	68fb      	ldr	r3, [r7, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	3220      	adds	r2, #32
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	4a05      	ldr	r2, [pc, #20]	@ (8001e3c <LL_HSEM_1StepLock+0x2c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d001      	beq.n	8001e2e <LL_HSEM_1StepLock+0x1e>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_HSEM_1StepLock+0x20>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	80000400 	.word	0x80000400

08001e40 <LL_TIM_DisableARRPreload>:
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_TIM_SetClockSource>:
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8001e72:	f023 0307 	bic.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
}
 8001e7e:	bf00      	nop
 8001e80:	370c      	adds	r7, #12
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr

08001e8a <LL_TIM_SetTriggerOutput>:
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
 8001e92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	605a      	str	r2, [r3, #4]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <LL_TIM_DisableMasterSlaveMode>:
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	609a      	str	r2, [r3, #8]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed4:	f000 fdc8 	bl	8002a68 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8001ed8:	f7ff fc4c 	bl	8001774 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f000 f822 	bl	8001f24 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001ee0:	f000 f890 	bl	8002004 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8001ee4:	f000 f8f4 	bl	80020d0 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee8:	f000 f9fc 	bl	80022e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001eec:	f000 f8b0 	bl	8002050 <MX_I2C1_Init>
  MX_RTC_Init();
 8001ef0:	f000 f90a 	bl	8002108 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8001ef4:	f000 f9aa 	bl	800224c <MX_USART1_UART_Init>
  MX_USB_Device_Init();
 8001ef8:	f00f fda6 	bl	8011a48 <MX_USB_Device_Init>
  MX_TIM16_Init();
 8001efc:	f000 f96e 	bl	80021dc <MX_TIM16_Init>
  MX_TIM2_Init();
 8001f00:	f000 f92c 	bl	800215c <MX_TIM2_Init>
  MX_RF_Init();
 8001f04:	f000 f8f8 	bl	80020f8 <MX_RF_Init>
  /* USER CODE BEGIN 2 */
  app_init(&hi2c1);
 8001f08:	4805      	ldr	r0, [pc, #20]	@ (8001f20 <main+0x50>)
 8001f0a:	f7fe ff27 	bl	8000d5c <app_init>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8001f0e:	f7ff fc3f 	bl	8001790 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8001f12:	f7ff fd6a 	bl	80019ea <MX_APPE_Process>

    /* USER CODE BEGIN 3 */
    taskCyclic();
 8001f16:	f7fe ff41 	bl	8000d9c <taskCyclic>
    MX_APPE_Process();
 8001f1a:	bf00      	nop
 8001f1c:	e7f9      	b.n	8001f12 <main+0x42>
 8001f1e:	bf00      	nop
 8001f20:	200002b0 	.word	0x200002b0

08001f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b09a      	sub	sp, #104	@ 0x68
 8001f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	2248      	movs	r2, #72	@ 0x48
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f010 fd98 	bl	8012a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	1d3b      	adds	r3, r7, #4
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	615a      	str	r2, [r3, #20]
 8001f48:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002000 <SystemClock_Config+0xdc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f52:	4a2b      	ldr	r2, [pc, #172]	@ (8002000 <SystemClock_Config+0xdc>)
 8001f54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	4b29      	ldr	r3, [pc, #164]	@ (8002000 <SystemClock_Config+0xdc>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f62:	603b      	str	r3, [r7, #0]
 8001f64:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8001f66:	232f      	movs	r3, #47	@ 0x2f
 8001f68:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f74:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7e:	2340      	movs	r3, #64	@ 0x40
 8001f80:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001f86:	2360      	movs	r3, #96	@ 0x60
 8001f88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f8a:	2305      	movs	r3, #5
 8001f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001f92:	2301      	movs	r3, #1
 8001f94:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001fa4:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001fa8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001faa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fae:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f005 fcdf 	bl	8007978 <HAL_RCC_OscConfig>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001fc0:	f000 fa22 	bl	8002408 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001fc4:	236f      	movs	r3, #111	@ 0x6f
 8001fc6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8001fd8:	2380      	movs	r3, #128	@ 0x80
 8001fda:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001fe0:	1d3b      	adds	r3, r7, #4
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f006 f83b 	bl	8008060 <HAL_RCC_ClockConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001ff0:	f000 fa0a 	bl	8002408 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001ff4:	f006 fdf6 	bl	8008be4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001ff8:	bf00      	nop
 8001ffa:	3768      	adds	r7, #104	@ 0x68
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	58000400 	.word	0x58000400

08002004 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b094      	sub	sp, #80	@ 0x50
 8002008:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800200a:	463b      	mov	r3, r7
 800200c:	2250      	movs	r2, #80	@ 0x50
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f010 fd29 	bl	8012a68 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002016:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800201a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 800201c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002020:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8002022:	2300      	movs	r3, #0
 8002024:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002026:	2310      	movs	r3, #16
 8002028:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800202a:	463b      	mov	r3, r7
 800202c:	4618      	mov	r0, r3
 800202e:	f006 fc63 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002038:	f000 f9e6 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */
  LL_HSEM_1StepLock( HSEM, 5 ); // Fix to make USB work with BLE.
 800203c:	2105      	movs	r1, #5
 800203e:	4803      	ldr	r0, [pc, #12]	@ (800204c <PeriphCommonClock_Config+0x48>)
 8002040:	f7ff fee6 	bl	8001e10 <LL_HSEM_1StepLock>
  /* USER CODE END Smps */
}
 8002044:	bf00      	nop
 8002046:	3750      	adds	r7, #80	@ 0x50
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58001400 	.word	0x58001400

08002050 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002056:	4a1c      	ldr	r2, [pc, #112]	@ (80020c8 <MX_I2C1_Init+0x78>)
 8002058:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800205c:	4a1b      	ldr	r2, [pc, #108]	@ (80020cc <MX_I2C1_Init+0x7c>)
 800205e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 4;
 8002060:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002062:	2204      	movs	r2, #4
 8002064:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002066:	4b17      	ldr	r3, [pc, #92]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002068:	2201      	movs	r2, #1
 800206a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800206c:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002072:	4b14      	ldr	r3, [pc, #80]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002078:	4b12      	ldr	r3, [pc, #72]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207e:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002080:	2200      	movs	r2, #0
 8002082:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <MX_I2C1_Init+0x74>)
 8002086:	2200      	movs	r2, #0
 8002088:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800208a:	480e      	ldr	r0, [pc, #56]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800208c:	f001 fa92 	bl	80035b4 <HAL_I2C_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002096:	f000 f9b7 	bl	8002408 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800209a:	2100      	movs	r1, #0
 800209c:	4809      	ldr	r0, [pc, #36]	@ (80020c4 <MX_I2C1_Init+0x74>)
 800209e:	f003 fa75 	bl	800558c <HAL_I2CEx_ConfigAnalogFilter>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d001      	beq.n	80020ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020a8:	f000 f9ae 	bl	8002408 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020ac:	2100      	movs	r1, #0
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_I2C1_Init+0x74>)
 80020b0:	f003 fab7 	bl	8005622 <HAL_I2CEx_ConfigDigitalFilter>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020ba:	f000 f9a5 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200002b0 	.word	0x200002b0
 80020c8:	40005400 	.word	0x40005400
 80020cc:	10707dbc 	.word	0x10707dbc

080020d0 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80020d4:	4b06      	ldr	r3, [pc, #24]	@ (80020f0 <MX_IPCC_Init+0x20>)
 80020d6:	4a07      	ldr	r2, [pc, #28]	@ (80020f4 <MX_IPCC_Init+0x24>)
 80020d8:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	@ (80020f0 <MX_IPCC_Init+0x20>)
 80020dc:	f003 faee 	bl	80056bc <HAL_IPCC_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 80020e6:	f000 f98f 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000304 	.word	0x20000304
 80020f4:	58000c00 	.word	0x58000c00

080020f8 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
	...

08002108 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800210c:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_RTC_Init+0x4c>)
 800210e:	4a12      	ldr	r2, [pc, #72]	@ (8002158 <MX_RTC_Init+0x50>)
 8002110:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002112:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <MX_RTC_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <MX_RTC_Init+0x4c>)
 800211a:	227f      	movs	r2, #127	@ 0x7f
 800211c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 800211e:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <MX_RTC_Init+0x4c>)
 8002120:	f641 6284 	movw	r2, #7812	@ 0x1e84
 8002124:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002126:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <MX_RTC_Init+0x4c>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800212c:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_RTC_Init+0x4c>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002132:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <MX_RTC_Init+0x4c>)
 8002134:	2200      	movs	r2, #0
 8002136:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002138:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <MX_RTC_Init+0x4c>)
 800213a:	2200      	movs	r2, #0
 800213c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800213e:	4805      	ldr	r0, [pc, #20]	@ (8002154 <MX_RTC_Init+0x4c>)
 8002140:	f006 fe68 	bl	8008e14 <HAL_RTC_Init>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800214a:	f000 f95d 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	20000340 	.word	0x20000340
 8002158:	40002800 	.word	0x40002800

0800215c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002162:	1d3b      	adds	r3, r7, #4
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8002170:	2001      	movs	r0, #1
 8002172:	f7ff fe1b 	bl	8001dac <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002176:	f7ff fd77 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 800217a:	4603      	mov	r3, r0
 800217c:	2200      	movs	r2, #0
 800217e:	2100      	movs	r1, #0
 8002180:	4618      	mov	r0, r3
 8002182:	f7ff fdc7 	bl	8001d14 <NVIC_EncodePriority>
 8002186:	4603      	mov	r3, r0
 8002188:	4619      	mov	r1, r3
 800218a:	201c      	movs	r0, #28
 800218c:	f7ff fd98 	bl	8001cc0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8002190:	201c      	movs	r0, #28
 8002192:	f7ff fd77 	bl	8001c84 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 6400000;
 800219e:	4b0e      	ldr	r3, [pc, #56]	@ (80021d8 <MX_TIM2_Init+0x7c>)
 80021a0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80021a6:	1d3b      	adds	r3, r7, #4
 80021a8:	4619      	mov	r1, r3
 80021aa:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021ae:	f008 f8c9 	bl	800a344 <LL_TIM_Init>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80021b2:	2100      	movs	r1, #0
 80021b4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021b8:	f7ff fe52 	bl	8001e60 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80021bc:	2100      	movs	r1, #0
 80021be:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021c2:	f7ff fe62 	bl	8001e8a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80021c6:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 80021ca:	f7ff fe71 	bl	8001eb0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	0061a800 	.word	0x0061a800

080021dc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80021e2:	1d3b      	adds	r3, r7, #4
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]
 80021e8:	605a      	str	r2, [r3, #4]
 80021ea:	609a      	str	r2, [r3, #8]
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM16);
 80021f0:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 80021f4:	f7ff fdf3 	bl	8001dde <LL_APB2_GRP1_EnableClock>

  /* TIM16 interrupt Init */
  NVIC_SetPriority(TIM1_UP_TIM16_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80021f8:	f7ff fd36 	bl	8001c68 <__NVIC_GetPriorityGrouping>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2200      	movs	r2, #0
 8002200:	210f      	movs	r1, #15
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff fd86 	bl	8001d14 <NVIC_EncodePriority>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
 800220c:	2019      	movs	r0, #25
 800220e:	f7ff fd57 	bl	8001cc0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002212:	2019      	movs	r0, #25
 8002214:	f7ff fd36 	bl	8001c84 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  TIM_InitStruct.Prescaler = 6399;
 8002218:	f641 03ff 	movw	r3, #6399	@ 0x18ff
 800221c:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8002222:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8002226:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM16, &TIM_InitStruct);
 8002230:	1d3b      	adds	r3, r7, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4804      	ldr	r0, [pc, #16]	@ (8002248 <MX_TIM16_Init+0x6c>)
 8002236:	f008 f885 	bl	800a344 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM16);
 800223a:	4803      	ldr	r0, [pc, #12]	@ (8002248 <MX_TIM16_Init+0x6c>)
 800223c:	f7ff fe00 	bl	8001e40 <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40014400 	.word	0x40014400

0800224c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002250:	4b22      	ldr	r3, [pc, #136]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002252:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <MX_USART1_UART_Init+0x94>)
 8002254:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002256:	4b21      	ldr	r3, [pc, #132]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002258:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800225c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225e:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002260:	2200      	movs	r2, #0
 8002262:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002266:	2200      	movs	r2, #0
 8002268:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800226c:	2200      	movs	r2, #0
 800226e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002270:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002272:	220c      	movs	r2, #12
 8002274:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002276:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002278:	2200      	movs	r2, #0
 800227a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800227c:	4b17      	ldr	r3, [pc, #92]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002284:	2200      	movs	r2, #0
 8002286:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002288:	4b14      	ldr	r3, [pc, #80]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 800228a:	2200      	movs	r2, #0
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800228e:	4b13      	ldr	r3, [pc, #76]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002290:	2200      	movs	r2, #0
 8002292:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002294:	4811      	ldr	r0, [pc, #68]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 8002296:	f006 fedd 	bl	8009054 <HAL_UART_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022a0:	f000 f8b2 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a4:	2100      	movs	r1, #0
 80022a6:	480d      	ldr	r0, [pc, #52]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022a8:	f007 ff47 	bl	800a13a <HAL_UARTEx_SetTxFifoThreshold>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022b2:	f000 f8a9 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022b6:	2100      	movs	r1, #0
 80022b8:	4808      	ldr	r0, [pc, #32]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ba:	f007 ff7c 	bl	800a1b6 <HAL_UARTEx_SetRxFifoThreshold>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022c4:	f000 f8a0 	bl	8002408 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022c8:	4804      	ldr	r0, [pc, #16]	@ (80022dc <MX_USART1_UART_Init+0x90>)
 80022ca:	f007 fefd 	bl	800a0c8 <HAL_UARTEx_DisableFifoMode>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022d4:	f000 f898 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000364 	.word	0x20000364
 80022e0:	40013800 	.word	0x40013800

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	1d3b      	adds	r3, r7, #4
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f8:	2004      	movs	r0, #4
 80022fa:	f7ff fd3e 	bl	8001d7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022fe:	2080      	movs	r0, #128	@ 0x80
 8002300:	f7ff fd3b 	bl	8001d7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002304:	2002      	movs	r0, #2
 8002306:	f7ff fd38 	bl	8001d7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230a:	2001      	movs	r0, #1
 800230c:	f7ff fd35 	bl	8001d7a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8002310:	2201      	movs	r2, #1
 8002312:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002316:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800231a:	f001 f8f7 	bl	800350c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CH_B_Pin CH_C_Pin */
  GPIO_InitStruct.Pin = CH_B_Pin|CH_C_Pin;
 800231e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002322:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002324:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002328:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	4619      	mov	r1, r3
 8002332:	4833      	ldr	r0, [pc, #204]	@ (8002400 <MX_GPIO_Init+0x11c>)
 8002334:	f000 fe84 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT_Pin */
  GPIO_InitStruct.Pin = BOOT_Pin;
 8002338:	2308      	movs	r3, #8
 800233a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BOOT_GPIO_Port, &GPIO_InitStruct);
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	4619      	mov	r1, r3
 8002348:	482e      	ldr	r0, [pc, #184]	@ (8002404 <MX_GPIO_Init+0x120>)
 800234a:	f000 fe79 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pins : CH_1_Pin CH_2_Pin CH_3_Pin CH_4_Pin
                           CH_5_Pin CH_6_Pin CH_7_Pin CH_8_Pin */
  GPIO_InitStruct.Pin = CH_1_Pin|CH_2_Pin|CH_3_Pin|CH_4_Pin
 800234e:	23ff      	movs	r3, #255	@ 0xff
 8002350:	607b      	str	r3, [r7, #4]
                          |CH_5_Pin|CH_6_Pin|CH_7_Pin|CH_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002352:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002356:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235c:	1d3b      	adds	r3, r7, #4
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002364:	f000 fe6c 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002368:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800236c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800236e:	2311      	movs	r3, #17
 8002370:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8002376:	2301      	movs	r3, #1
 8002378:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800237a:	1d3b      	adds	r3, r7, #4
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002382:	f000 fe5d 	bl	8003040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2006      	movs	r0, #6
 800238c:	f000 fd2d 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002390:	2006      	movs	r0, #6
 8002392:	f000 fd44 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2007      	movs	r0, #7
 800239c:	f000 fd25 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80023a0:	2007      	movs	r0, #7
 80023a2:	f000 fd3c 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80023a6:	2200      	movs	r2, #0
 80023a8:	2100      	movs	r1, #0
 80023aa:	2008      	movs	r0, #8
 80023ac:	f000 fd1d 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80023b0:	2008      	movs	r0, #8
 80023b2:	f000 fd34 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80023b6:	2200      	movs	r2, #0
 80023b8:	2100      	movs	r1, #0
 80023ba:	2009      	movs	r0, #9
 80023bc:	f000 fd15 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80023c0:	2009      	movs	r0, #9
 80023c2:	f000 fd2c 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80023c6:	2200      	movs	r2, #0
 80023c8:	2100      	movs	r1, #0
 80023ca:	200a      	movs	r0, #10
 80023cc:	f000 fd0d 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80023d0:	200a      	movs	r0, #10
 80023d2:	f000 fd24 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2100      	movs	r1, #0
 80023da:	2017      	movs	r0, #23
 80023dc:	f000 fd05 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80023e0:	2017      	movs	r0, #23
 80023e2:	f000 fd1c 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	2028      	movs	r0, #40	@ 0x28
 80023ec:	f000 fcfd 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80023f0:	2028      	movs	r0, #40	@ 0x28
 80023f2:	f000 fd14 	bl	8002e1e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	48000800 	.word	0x48000800
 8002404:	48001c00 	.word	0x48001c00

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <Error_Handler+0x8>

08002414 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002424:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <LL_AHB2_GRP1_EnableClock>:
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800243e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002442:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002444:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800244e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4013      	ands	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	bf00      	nop
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_AHB3_GRP1_EnableClock>:
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002474:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002476:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4313      	orrs	r3, r2
 800247e:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002480:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002484:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4013      	ands	r3, r2
 800248a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800248c:	68fb      	ldr	r3, [r7, #12]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <LL_APB1_GRP1_EnableClock>:
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80024a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024a6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024b6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	4013      	ands	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80024be:	68fb      	ldr	r3, [r7, #12]
}
 80024c0:	bf00      	nop
 80024c2:	3714      	adds	r7, #20
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr

080024cc <LL_APB1_GRP1_DisableClock>:
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80024d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	43db      	mvns	r3, r3
 80024de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80024e2:	4013      	ands	r3, r2
 80024e4:	658b      	str	r3, [r1, #88]	@ 0x58
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <LL_APB2_GRP1_EnableClock>:
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002500:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4313      	orrs	r3, r2
 8002508:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800250e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4013      	ands	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002528:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800252c:	f7ff ff9c 	bl	8002468 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002530:	2200      	movs	r2, #0
 8002532:	2100      	movs	r1, #0
 8002534:	202e      	movs	r0, #46	@ 0x2e
 8002536:	f000 fc58 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800253a:	202e      	movs	r0, #46	@ 0x2e
 800253c:	f000 fc6f 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002540:	bf00      	nop
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b09c      	sub	sp, #112	@ 0x70
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800255c:	f107 030c 	add.w	r3, r7, #12
 8002560:	2250      	movs	r2, #80	@ 0x50
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f010 fa7f 	bl	8012a68 <memset>
  if(hi2c->Instance==I2C1)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a1f      	ldr	r2, [pc, #124]	@ (80025ec <HAL_I2C_MspInit+0xa8>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d136      	bne.n	80025e2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002574:	2304      	movs	r3, #4
 8002576:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002578:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800257c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800257e:	f107 030c 	add.w	r3, r7, #12
 8002582:	4618      	mov	r0, r3
 8002584:	f006 f9b8 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800258e:	f7ff ff3b 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002592:	2002      	movs	r0, #2
 8002594:	f7ff ff4f 	bl	8002436 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002598:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800259c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800259e:	2312      	movs	r3, #18
 80025a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a6:	2300      	movs	r3, #0
 80025a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025aa:	2304      	movs	r3, #4
 80025ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ae:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80025b2:	4619      	mov	r1, r3
 80025b4:	480e      	ldr	r0, [pc, #56]	@ (80025f0 <HAL_I2C_MspInit+0xac>)
 80025b6:	f000 fd43 	bl	8003040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025ba:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80025be:	f7ff ff6c 	bl	800249a <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	201e      	movs	r0, #30
 80025c8:	f000 fc0f 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80025cc:	201e      	movs	r0, #30
 80025ce:	f000 fc26 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80025d2:	2200      	movs	r2, #0
 80025d4:	2100      	movs	r1, #0
 80025d6:	201f      	movs	r0, #31
 80025d8:	f000 fc07 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80025dc:	201f      	movs	r0, #31
 80025de:	f000 fc1e 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025e2:	bf00      	nop
 80025e4:	3770      	adds	r7, #112	@ 0x70
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40005400 	.word	0x40005400
 80025f0:	48000400 	.word	0x48000400

080025f4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <HAL_I2C_MspDeInit+0x44>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d113      	bne.n	800262e <HAL_I2C_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002606:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 800260a:	f7ff ff5f 	bl	80024cc <LL_APB1_GRP1_DisableClock>

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800260e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002612:	480a      	ldr	r0, [pc, #40]	@ (800263c <HAL_I2C_MspDeInit+0x48>)
 8002614:	f000 fe84 	bl	8003320 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8002618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800261c:	4807      	ldr	r0, [pc, #28]	@ (800263c <HAL_I2C_MspDeInit+0x48>)
 800261e:	f000 fe7f 	bl	8003320 <HAL_GPIO_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002622:	201e      	movs	r0, #30
 8002624:	f000 fc09 	bl	8002e3a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002628:	201f      	movs	r0, #31
 800262a:	f000 fc06 	bl	8002e3a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40005400 	.word	0x40005400
 800263c:	48000400 	.word	0x48000400

08002640 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <HAL_IPCC_MspInit+0x44>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d113      	bne.n	800267a <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002652:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8002656:	f7ff ff07 	bl	8002468 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800265a:	2200      	movs	r2, #0
 800265c:	2100      	movs	r1, #0
 800265e:	202c      	movs	r0, #44	@ 0x2c
 8002660:	f000 fbc3 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002664:	202c      	movs	r0, #44	@ 0x2c
 8002666:	f000 fbda 	bl	8002e1e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800266a:	2200      	movs	r2, #0
 800266c:	2100      	movs	r1, #0
 800266e:	202d      	movs	r0, #45	@ 0x2d
 8002670:	f000 fbbb 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002674:	202d      	movs	r0, #45	@ 0x2d
 8002676:	f000 fbd2 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800267a:	bf00      	nop
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	58000c00 	.word	0x58000c00

08002688 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b096      	sub	sp, #88	@ 0x58
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	2250      	movs	r2, #80	@ 0x50
 8002696:	2100      	movs	r1, #0
 8002698:	4618      	mov	r0, r3
 800269a:	f010 f9e5 	bl	8012a68 <memset>
  if(hrtc->Instance==RTC)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <HAL_RTC_MspInit+0x58>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d117      	bne.n	80026d8 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 80026a8:	f004 fdc2 	bl	8007230 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80026ac:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80026b0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80026b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80026b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026b8:	f107 0308 	add.w	r3, r7, #8
 80026bc:	4618      	mov	r0, r3
 80026be:	f006 f91b 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 80026c8:	f7ff fe9e 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80026cc:	f7ff fea2 	bl	8002414 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80026d0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80026d4:	f7ff fee1 	bl	800249a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80026d8:	bf00      	nop
 80026da:	3758      	adds	r7, #88	@ 0x58
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40002800 	.word	0x40002800

080026e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b09c      	sub	sp, #112	@ 0x70
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026fc:	f107 030c 	add.w	r3, r7, #12
 8002700:	2250      	movs	r2, #80	@ 0x50
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f010 f9af 	bl	8012a68 <memset>
  if(huart->Instance==USART1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_UART_MspInit+0x94>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d12c      	bne.n	800276e <HAL_UART_MspInit+0x8a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002714:	2301      	movs	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002718:	2300      	movs	r3, #0
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f006 f8e9 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800272c:	f7ff fe6c 	bl	8002408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002730:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002734:	f7ff fedd 	bl	80024f2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002738:	2002      	movs	r0, #2
 800273a:	f7ff fe7c 	bl	8002436 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800273e:	23c0      	movs	r3, #192	@ 0xc0
 8002740:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002742:	2302      	movs	r3, #2
 8002744:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800274e:	2307      	movs	r3, #7
 8002750:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002752:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002756:	4619      	mov	r1, r3
 8002758:	4808      	ldr	r0, [pc, #32]	@ (800277c <HAL_UART_MspInit+0x98>)
 800275a:	f000 fc71 	bl	8003040 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800275e:	2200      	movs	r2, #0
 8002760:	2100      	movs	r1, #0
 8002762:	2024      	movs	r0, #36	@ 0x24
 8002764:	f000 fb41 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002768:	2024      	movs	r0, #36	@ 0x24
 800276a:	f000 fb58 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800276e:	bf00      	nop
 8002770:	3770      	adds	r7, #112	@ 0x70
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	40013800 	.word	0x40013800
 800277c:	48000400 	.word	0x48000400

08002780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002784:	bf00      	nop
 8002786:	e7fd      	b.n	8002784 <NMI_Handler+0x4>

08002788 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800278c:	bf00      	nop
 800278e:	e7fd      	b.n	800278c <HardFault_Handler+0x4>

08002790 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <MemManage_Handler+0x4>

08002798 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800279c:	bf00      	nop
 800279e:	e7fd      	b.n	800279c <BusFault_Handler+0x4>

080027a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a4:	bf00      	nop
 80027a6:	e7fd      	b.n	80027a4 <UsageFault_Handler+0x4>

080027a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027c8:	bf00      	nop
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d6:	f000 f9a1 	bl	8002b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	bd80      	pop	{r7, pc}

080027de <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_1_Pin);
 80027e2:	2001      	movs	r0, #1
 80027e4:	f000 feaa 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}

080027ec <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_2_Pin);
 80027f0:	2002      	movs	r0, #2
 80027f2:	f000 fea3 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}

080027fa <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_3_Pin);
 80027fe:	2004      	movs	r0, #4
 8002800:	f000 fe9c 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002804:	bf00      	nop
 8002806:	bd80      	pop	{r7, pc}

08002808 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_4_Pin);
 800280c:	2008      	movs	r0, #8
 800280e:	f000 fe95 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}

08002816 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_5_Pin);
 800281a:	2010      	movs	r0, #16
 800281c:	f000 fe8e 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}

08002824 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002828:	4802      	ldr	r0, [pc, #8]	@ (8002834 <USB_LP_IRQHandler+0x10>)
 800282a:	f003 f8bd 	bl	80059a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	200019f0 	.word	0x200019f0

08002838 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_6_Pin);
 800283c:	2020      	movs	r0, #32
 800283e:	f000 fe7d 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_7_Pin);
 8002842:	2040      	movs	r0, #64	@ 0x40
 8002844:	f000 fe7a 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_8_Pin);
 8002848:	2080      	movs	r0, #128	@ 0x80
 800284a:	f000 fe77 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}

08002852 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002852:	b480      	push	{r7}
 8002854:	af00      	add	r7, sp, #0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  timer2UpdateISR();
 8002864:	f7fe fe2a 	bl	80014bc <timer2UpdateISR>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002868:	bf00      	nop
 800286a:	bd80      	pop	{r7, pc}

0800286c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002870:	4802      	ldr	r0, [pc, #8]	@ (800287c <I2C1_EV_IRQHandler+0x10>)
 8002872:	f001 f9e3 	bl	8003c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002876:	bf00      	nop
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	200002b0 	.word	0x200002b0

08002880 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <I2C1_ER_IRQHandler+0x10>)
 8002886:	f001 f9f3 	bl	8003c70 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	200002b0 	.word	0x200002b0

08002894 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <USART1_IRQHandler+0x10>)
 800289a:	f006 fc2b 	bl	80090f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000364 	.word	0x20000364

080028a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CH_B_Pin);
 80028ac:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80028b0:	f000 fe44 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(CH_C_Pin);
 80028b4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80028b8:	f000 fe40 	bl	800353c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}

080028c0 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80028c4:	f00e ff82 	bl	80117cc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80028c8:	bf00      	nop
 80028ca:	bd80      	pop	{r7, pc}

080028cc <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80028d0:	f00e ffb2 	bl	8011838 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80028dc:	f000 fe46 	bl	800356c <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80028e0:	bf00      	nop
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028ec:	4a14      	ldr	r2, [pc, #80]	@ (8002940 <_sbrk+0x5c>)
 80028ee:	4b15      	ldr	r3, [pc, #84]	@ (8002944 <_sbrk+0x60>)
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028f8:	4b13      	ldr	r3, [pc, #76]	@ (8002948 <_sbrk+0x64>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <_sbrk+0x64>)
 8002902:	4a12      	ldr	r2, [pc, #72]	@ (800294c <_sbrk+0x68>)
 8002904:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002906:	4b10      	ldr	r3, [pc, #64]	@ (8002948 <_sbrk+0x64>)
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4413      	add	r3, r2
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	429a      	cmp	r2, r3
 8002912:	d207      	bcs.n	8002924 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002914:	f010 f8b0 	bl	8012a78 <__errno>
 8002918:	4603      	mov	r3, r0
 800291a:	220c      	movs	r2, #12
 800291c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800291e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002922:	e009      	b.n	8002938 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <_sbrk+0x64>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800292a:	4b07      	ldr	r3, [pc, #28]	@ (8002948 <_sbrk+0x64>)
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4413      	add	r3, r2
 8002932:	4a05      	ldr	r2, [pc, #20]	@ (8002948 <_sbrk+0x64>)
 8002934:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002936:	68fb      	ldr	r3, [r7, #12]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20030000 	.word	0x20030000
 8002944:	00000400 	.word	0x00000400
 8002948:	200003f8 	.word	0x200003f8
 800294c:	200020e0 	.word	0x200020e0

08002950 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002950:	b480      	push	{r7}
 8002952:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8002954:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <SystemInit+0x98>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	4a23      	ldr	r2, [pc, #140]	@ (80029e8 <SystemInit+0x98>)
 800295c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002960:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8002974:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002978:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800297c:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800297e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002988:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <SystemInit+0x9c>)
 800298a:	4013      	ands	r3, r2
 800298c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800298e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002992:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002996:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800299a:	f023 0305 	bic.w	r3, r3, #5
 800299e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80029aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029ae:	f023 0301 	bic.w	r3, r3, #1
 80029b2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80029b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ba:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <SystemInit+0xa0>)
 80029bc:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029c2:	4a0b      	ldr	r2, [pc, #44]	@ (80029f0 <SystemInit+0xa0>)
 80029c4:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80029d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80029d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80029da:	2200      	movs	r2, #0
 80029dc:	619a      	str	r2, [r3, #24]
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	e000ed00 	.word	0xe000ed00
 80029ec:	faf6fefb 	.word	0xfaf6fefb
 80029f0:	22041000 	.word	0x22041000

080029f4 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80029f4:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f6:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f8:	3304      	adds	r3, #4

080029fa <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029fa:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fc:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80029fe:	d3f9      	bcc.n	80029f4 <CopyDataInit>
  bx lr
 8002a00:	4770      	bx	lr

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8002a02:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8002a04:	3004      	adds	r0, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8002a06:	4288      	cmp	r0, r1
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>
  bx lr
 8002a0a:	4770      	bx	lr

08002a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a0c:	480c      	ldr	r0, [pc, #48]	@ (8002a40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a10:	f7ff ff9e 	bl	8002950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8002a14:	480b      	ldr	r0, [pc, #44]	@ (8002a44 <LoopForever+0x6>)
 8002a16:	490c      	ldr	r1, [pc, #48]	@ (8002a48 <LoopForever+0xa>)
 8002a18:	4a0c      	ldr	r2, [pc, #48]	@ (8002a4c <LoopForever+0xe>)
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f7ff ffed 	bl	80029fa <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a20:	480b      	ldr	r0, [pc, #44]	@ (8002a50 <LoopForever+0x12>)
 8002a22:	490c      	ldr	r1, [pc, #48]	@ (8002a54 <LoopForever+0x16>)
 8002a24:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <LoopForever+0x1a>)
 8002a26:	2300      	movs	r3, #0
 8002a28:	f7ff ffe7 	bl	80029fa <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8002a2c:	480b      	ldr	r0, [pc, #44]	@ (8002a5c <LoopForever+0x1e>)
 8002a2e:	490c      	ldr	r1, [pc, #48]	@ (8002a60 <LoopForever+0x22>)
 8002a30:	2300      	movs	r3, #0
 8002a32:	f7ff ffe8 	bl	8002a06 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002a36:	f010 f825 	bl	8012a84 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002a3a:	f7ff fa49 	bl	8001ed0 <main>

08002a3e <LoopForever>:

LoopForever:
  b LoopForever
 8002a3e:	e7fe      	b.n	8002a3e <LoopForever>
  ldr   r0, =_estack
 8002a40:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8002a44:	20000008 	.word	0x20000008
 8002a48:	20000188 	.word	0x20000188
 8002a4c:	08013768 	.word	0x08013768
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8002a50:	200301e4 	.word	0x200301e4
 8002a54:	20030a67 	.word	0x20030a67
 8002a58:	0801392e 	.word	0x0801392e
  INIT_BSS _sbss, _ebss
 8002a5c:	200001d4 	.word	0x200001d4
 8002a60:	200020dc 	.word	0x200020dc

08002a64 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002a64:	e7fe      	b.n	8002a64 <ADC1_IRQHandler>
	...

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a72:	4b0c      	ldr	r3, [pc, #48]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a0b      	ldr	r2, [pc, #44]	@ (8002aa4 <HAL_Init+0x3c>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f000 f9a8 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a84:	200f      	movs	r0, #15
 8002a86:	f000 f80f 	bl	8002aa8 <HAL_InitTick>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	71fb      	strb	r3, [r7, #7]
 8002a94:	e001      	b.n	8002a9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a96:	f7ff fd45 	bl	8002524 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a9a:	79fb      	ldrb	r3, [r7, #7]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3708      	adds	r7, #8
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	58004000 	.word	0x58004000

08002aa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002ab4:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <HAL_InitTick+0x6c>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d024      	beq.n	8002b06 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002abc:	f005 fc7c 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b14      	ldr	r3, [pc, #80]	@ (8002b14 <HAL_InitTick+0x6c>)
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002acc:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 f9be 	bl	8002e56 <HAL_SYSTICK_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10f      	bne.n	8002b00 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b0f      	cmp	r3, #15
 8002ae4:	d809      	bhi.n	8002afa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	6879      	ldr	r1, [r7, #4]
 8002aea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002aee:	f000 f97c 	bl	8002dea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af2:	4a09      	ldr	r2, [pc, #36]	@ (8002b18 <HAL_InitTick+0x70>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	e007      	b.n	8002b0a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	73fb      	strb	r3, [r7, #15]
 8002afe:	e004      	b.n	8002b0a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
 8002b04:	e001      	b.n	8002b0a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000028 	.word	0x20000028
 8002b18:	20000024 	.word	0x20000024

08002b1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b20:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_IncTick+0x20>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b06      	ldr	r3, [pc, #24]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	4a04      	ldr	r2, [pc, #16]	@ (8002b40 <HAL_IncTick+0x24>)
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	20000028 	.word	0x20000028
 8002b40:	200003fc 	.word	0x200003fc

08002b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return uwTick;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_GetTick+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	200003fc 	.word	0x200003fc

08002b5c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002b60:	4b03      	ldr	r3, [pc, #12]	@ (8002b70 <HAL_GetTickPrio+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000024 	.word	0x20000024

08002b74 <__NVIC_SetPriorityGrouping>:
{
 8002b74:	b480      	push	{r7}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8a:	68ba      	ldr	r2, [r7, #8]
 8002b8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b90:	4013      	ands	r3, r2
 8002b92:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ba6:	4a04      	ldr	r2, [pc, #16]	@ (8002bb8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	60d3      	str	r3, [r2, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_GetPriorityGrouping>:
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc0:	4b04      	ldr	r3, [pc, #16]	@ (8002bd4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 0307 	and.w	r3, r3, #7
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_EnableIRQ>:
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	db0b      	blt.n	8002c02 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bea:	79fb      	ldrb	r3, [r7, #7]
 8002bec:	f003 021f 	and.w	r2, r3, #31
 8002bf0:	4907      	ldr	r1, [pc, #28]	@ (8002c10 <__NVIC_EnableIRQ+0x38>)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	095b      	lsrs	r3, r3, #5
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	e000e100 	.word	0xe000e100

08002c14 <__NVIC_DisableIRQ>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	db12      	blt.n	8002c4c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	f003 021f 	and.w	r2, r3, #31
 8002c2c:	490a      	ldr	r1, [pc, #40]	@ (8002c58 <__NVIC_DisableIRQ+0x44>)
 8002c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2001      	movs	r0, #1
 8002c36:	fa00 f202 	lsl.w	r2, r0, r2
 8002c3a:	3320      	adds	r3, #32
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8002c40:	f3bf 8f4f 	dsb	sy
}
 8002c44:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c46:	f3bf 8f6f 	isb	sy
}
 8002c4a:	bf00      	nop
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000e100 	.word	0xe000e100

08002c5c <__NVIC_SetPendingIRQ>:
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0c      	blt.n	8002c88 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	@ (8002c94 <__NVIC_SetPendingIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	3340      	adds	r3, #64	@ 0x40
 8002c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_ClearPendingIRQ>:
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0c      	blt.n	8002cc4 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <__NVIC_ClearPendingIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	3360      	adds	r3, #96	@ 0x60
 8002cc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002db4:	f7ff ff8e 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff fec9 	bl	8002b74 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002df8:	f7ff fee0 	bl	8002bbc <__NVIC_GetPriorityGrouping>
 8002dfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	68b9      	ldr	r1, [r7, #8]
 8002e02:	6978      	ldr	r0, [r7, #20]
 8002e04:	f7ff ff90 	bl	8002d28 <NVIC_EncodePriority>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff5f 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e16:	bf00      	nop
 8002e18:	3718      	adds	r7, #24
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4603      	mov	r3, r0
 8002e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff fed3 	bl	8002bd8 <__NVIC_EnableIRQ>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff fee3 	bl	8002c14 <__NVIC_DisableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ff96 	bl	8002d90 <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff feed 	bl	8002c5c <__NVIC_SetPendingIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fefd 	bl	8002c98 <__NVIC_ClearPendingIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d101      	bne.n	8002eb8 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04f      	b.n	8002f58 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d008      	beq.n	8002ed6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e040      	b.n	8002f58 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020e 	bic.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ef0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0201 	bic.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0a:	f003 021c 	and.w	r2, r3, #28
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f202 	lsl.w	r2, r1, r2
 8002f18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00c      	beq.n	8002f46 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f36:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002f44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d005      	beq.n	8002f88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2204      	movs	r2, #4
 8002f80:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	e047      	b.n	8003018 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 020e 	bic.w	r2, r2, #14
 8002f96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fb2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fbc:	f003 021c 	and.w	r2, r3, #28
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002fd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00c      	beq.n	8002ff8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fe8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002fec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002ff6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
    }
  }
  return status;
 8003018:	7bfb      	ldrb	r3, [r7, #15]
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003030:	b2db      	uxtb	r3, r3
}
 8003032:	4618      	mov	r0, r3
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e14c      	b.n	80032ea <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 813e 	beq.w	80032e4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_GPIO_Init+0x40>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d130      	bne.n	80030e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030b6:	2201      	movs	r2, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 0201 	and.w	r2, r3, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d017      	beq.n	800311e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d123      	bne.n	8003172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 8098 	beq.w	80032e4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80031b4:	4a54      	ldr	r2, [pc, #336]	@ (8003308 <HAL_GPIO_Init+0x2c8>)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	089b      	lsrs	r3, r3, #2
 80031ba:	3302      	adds	r3, #2
 80031bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f003 0303 	and.w	r3, r3, #3
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	220f      	movs	r2, #15
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	43db      	mvns	r3, r3
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031de:	d019      	beq.n	8003214 <HAL_GPIO_Init+0x1d4>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a4a      	ldr	r2, [pc, #296]	@ (800330c <HAL_GPIO_Init+0x2cc>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_GPIO_Init+0x1d0>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4a49      	ldr	r2, [pc, #292]	@ (8003310 <HAL_GPIO_Init+0x2d0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d00d      	beq.n	800320c <HAL_GPIO_Init+0x1cc>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a48      	ldr	r2, [pc, #288]	@ (8003314 <HAL_GPIO_Init+0x2d4>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <HAL_GPIO_Init+0x1c8>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a47      	ldr	r2, [pc, #284]	@ (8003318 <HAL_GPIO_Init+0x2d8>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_GPIO_Init+0x1c4>
 8003200:	2304      	movs	r3, #4
 8003202:	e008      	b.n	8003216 <HAL_GPIO_Init+0x1d6>
 8003204:	2307      	movs	r3, #7
 8003206:	e006      	b.n	8003216 <HAL_GPIO_Init+0x1d6>
 8003208:	2303      	movs	r3, #3
 800320a:	e004      	b.n	8003216 <HAL_GPIO_Init+0x1d6>
 800320c:	2302      	movs	r3, #2
 800320e:	e002      	b.n	8003216 <HAL_GPIO_Init+0x1d6>
 8003210:	2301      	movs	r3, #1
 8003212:	e000      	b.n	8003216 <HAL_GPIO_Init+0x1d6>
 8003214:	2300      	movs	r3, #0
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	f002 0203 	and.w	r2, r2, #3
 800321c:	0092      	lsls	r2, r2, #2
 800321e:	4093      	lsls	r3, r2
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003226:	4938      	ldr	r1, [pc, #224]	@ (8003308 <HAL_GPIO_Init+0x2c8>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3302      	adds	r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003234:	4b39      	ldr	r3, [pc, #228]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	43db      	mvns	r3, r3
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	4013      	ands	r3, r2
 8003242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003258:	4a30      	ldr	r2, [pc, #192]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800325e:	4b2f      	ldr	r3, [pc, #188]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003282:	4a26      	ldr	r2, [pc, #152]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003288:	4b24      	ldr	r3, [pc, #144]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 800328a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	43db      	mvns	r3, r3
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4013      	ands	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032ae:	4a1b      	ldr	r2, [pc, #108]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80032b6:	4b19      	ldr	r3, [pc, #100]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 80032b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	43db      	mvns	r3, r3
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4013      	ands	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032dc:	4a0f      	ldr	r2, [pc, #60]	@ (800331c <HAL_GPIO_Init+0x2dc>)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f47f aeab 	bne.w	8003050 <HAL_GPIO_Init+0x10>
  }
}
 80032fa:	bf00      	nop
 80032fc:	bf00      	nop
 80032fe:	371c      	adds	r7, #28
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr
 8003308:	40010000 	.word	0x40010000
 800330c:	48000400 	.word	0x48000400
 8003310:	48000800 	.word	0x48000800
 8003314:	48000c00 	.word	0x48000c00
 8003318:	48001000 	.word	0x48001000
 800331c:	58000800 	.word	0x58000800

08003320 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800332e:	e0bb      	b.n	80034a8 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003330:	2201      	movs	r2, #1
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	4013      	ands	r3, r2
 800333c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 80ae 	beq.w	80034a2 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003346:	4a5f      	ldr	r2, [pc, #380]	@ (80034c4 <HAL_GPIO_DeInit+0x1a4>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800336e:	d019      	beq.n	80033a4 <HAL_GPIO_DeInit+0x84>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a55      	ldr	r2, [pc, #340]	@ (80034c8 <HAL_GPIO_DeInit+0x1a8>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d013      	beq.n	80033a0 <HAL_GPIO_DeInit+0x80>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a54      	ldr	r2, [pc, #336]	@ (80034cc <HAL_GPIO_DeInit+0x1ac>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00d      	beq.n	800339c <HAL_GPIO_DeInit+0x7c>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a53      	ldr	r2, [pc, #332]	@ (80034d0 <HAL_GPIO_DeInit+0x1b0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d007      	beq.n	8003398 <HAL_GPIO_DeInit+0x78>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a52      	ldr	r2, [pc, #328]	@ (80034d4 <HAL_GPIO_DeInit+0x1b4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d101      	bne.n	8003394 <HAL_GPIO_DeInit+0x74>
 8003390:	2304      	movs	r3, #4
 8003392:	e008      	b.n	80033a6 <HAL_GPIO_DeInit+0x86>
 8003394:	2307      	movs	r3, #7
 8003396:	e006      	b.n	80033a6 <HAL_GPIO_DeInit+0x86>
 8003398:	2303      	movs	r3, #3
 800339a:	e004      	b.n	80033a6 <HAL_GPIO_DeInit+0x86>
 800339c:	2302      	movs	r3, #2
 800339e:	e002      	b.n	80033a6 <HAL_GPIO_DeInit+0x86>
 80033a0:	2301      	movs	r3, #1
 80033a2:	e000      	b.n	80033a6 <HAL_GPIO_DeInit+0x86>
 80033a4:	2300      	movs	r3, #0
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	f002 0203 	and.w	r2, r2, #3
 80033ac:	0092      	lsls	r2, r2, #2
 80033ae:	4093      	lsls	r3, r2
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d136      	bne.n	8003424 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033b6:	4b48      	ldr	r3, [pc, #288]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033b8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	43db      	mvns	r3, r3
 80033c0:	4945      	ldr	r1, [pc, #276]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033c2:	4013      	ands	r3, r2
 80033c4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80033c8:	4b43      	ldr	r3, [pc, #268]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	4941      	ldr	r1, [pc, #260]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033d4:	4013      	ands	r3, r2
 80033d6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80033da:	4b3f      	ldr	r3, [pc, #252]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	493d      	ldr	r1, [pc, #244]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033e4:	4013      	ands	r3, r2
 80033e6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80033e8:	4b3b      	ldr	r3, [pc, #236]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	4939      	ldr	r1, [pc, #228]	@ (80034d8 <HAL_GPIO_DeInit+0x1b8>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003406:	4a2f      	ldr	r2, [pc, #188]	@ (80034c4 <HAL_GPIO_DeInit+0x1a4>)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	089b      	lsrs	r3, r3, #2
 800340c:	3302      	adds	r3, #2
 800340e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43da      	mvns	r2, r3
 8003416:	482b      	ldr	r0, [pc, #172]	@ (80034c4 <HAL_GPIO_DeInit+0x1a4>)
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	400a      	ands	r2, r1
 800341e:	3302      	adds	r3, #2
 8003420:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	2103      	movs	r1, #3
 800342e:	fa01 f303 	lsl.w	r3, r1, r3
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	220f      	movs	r2, #15
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	697a      	ldr	r2, [r7, #20]
 8003456:	08d2      	lsrs	r2, r2, #3
 8003458:	4019      	ands	r1, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3208      	adds	r2, #8
 800345e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	2103      	movs	r1, #3
 800346c:	fa01 f303 	lsl.w	r3, r1, r3
 8003470:	43db      	mvns	r3, r3
 8003472:	401a      	ands	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	2101      	movs	r1, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	43db      	mvns	r3, r3
 8003486:	401a      	ands	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	005b      	lsls	r3, r3, #1
 8003494:	2103      	movs	r1, #3
 8003496:	fa01 f303 	lsl.w	r3, r1, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	401a      	ands	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
    }

    position++;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3301      	adds	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa22 f303 	lsr.w	r3, r2, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	f47f af3d 	bne.w	8003330 <HAL_GPIO_DeInit+0x10>
  }
}
 80034b6:	bf00      	nop
 80034b8:	bf00      	nop
 80034ba:	371c      	adds	r7, #28
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40010000 	.word	0x40010000
 80034c8:	48000400 	.word	0x48000400
 80034cc:	48000800 	.word	0x48000800
 80034d0:	48000c00 	.word	0x48000c00
 80034d4:	48001000 	.word	0x48001000
 80034d8:	58000800 	.word	0x58000800

080034dc <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691a      	ldr	r2, [r3, #16]
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d002      	beq.n	80034fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80034f4:	2301      	movs	r3, #1
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e001      	b.n	80034fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003500:	4618      	mov	r0, r3
 8003502:	3714      	adds	r7, #20
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	460b      	mov	r3, r1
 8003516:	807b      	strh	r3, [r7, #2]
 8003518:	4613      	mov	r3, r2
 800351a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800351c:	787b      	ldrb	r3, [r7, #1]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003528:	e002      	b.n	8003530 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800352a:	887a      	ldrh	r2, [r7, #2]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003548:	68da      	ldr	r2, [r3, #12]
 800354a:	88fb      	ldrh	r3, [r7, #6]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003552:	4a05      	ldr	r2, [pc, #20]	@ (8003568 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003554:	88fb      	ldrh	r3, [r7, #6]
 8003556:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003558:	88fb      	ldrh	r3, [r7, #6]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fef6 	bl	800134c <HAL_GPIO_EXTI_Callback>
  }
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	58000800 	.word	0x58000800

0800356c <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8003572:	4b0a      	ldr	r3, [pc, #40]	@ (800359c <HAL_HSEM_IRQHandler+0x30>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <HAL_HSEM_IRQHandler+0x30>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	43db      	mvns	r3, r3
 8003580:	4906      	ldr	r1, [pc, #24]	@ (800359c <HAL_HSEM_IRQHandler+0x30>)
 8003582:	4013      	ands	r3, r2
 8003584:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8003586:	4a05      	ldr	r2, [pc, #20]	@ (800359c <HAL_HSEM_IRQHandler+0x30>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f807 	bl	80035a0 <HAL_HSEM_FreeCallback>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	58001500 	.word	0x58001500

080035a0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d101      	bne.n	80035c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e08d      	b.n	80036e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7fe ffb2 	bl	8002544 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2224      	movs	r2, #36	@ 0x24
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f022 0201 	bic.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003604:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003614:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	2b01      	cmp	r3, #1
 800361c:	d107      	bne.n	800362e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	689a      	ldr	r2, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	e006      	b.n	800363c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800363a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d108      	bne.n	8003656 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	e007      	b.n	8003666 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003664:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	6812      	ldr	r2, [r2, #0]
 8003670:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003674:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	430a      	orrs	r2, r1
 80036a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	69d9      	ldr	r1, [r3, #28]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a1a      	ldr	r2, [r3, #32]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0201 	orr.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e021      	b.n	8003740 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2224      	movs	r2, #36	@ 0x24
 8003700:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7fe ff6d 	bl	80025f4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af02      	add	r7, sp, #8
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	607a      	str	r2, [r7, #4]
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	817b      	strh	r3, [r7, #10]
 8003758:	4613      	mov	r3, r2
 800375a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b20      	cmp	r3, #32
 8003766:	f040 80db 	bne.w	8003920 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <HAL_I2C_Master_Receive+0x30>
 8003774:	2302      	movs	r3, #2
 8003776:	e0d4      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003780:	f7ff f9e0 	bl	8002b44 <HAL_GetTick>
 8003784:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f001 fbdd 	bl	8004f52 <I2C_WaitOnFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e0bf      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2222      	movs	r2, #34	@ 0x22
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2210      	movs	r2, #16
 80037ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	893a      	ldrh	r2, [r7, #8]
 80037c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2bff      	cmp	r3, #255	@ 0xff
 80037d2:	d90e      	bls.n	80037f2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	22ff      	movs	r2, #255	@ 0xff
 80037d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	8979      	ldrh	r1, [r7, #10]
 80037e2:	4b52      	ldr	r3, [pc, #328]	@ (800392c <HAL_I2C_Master_Receive+0x1e4>)
 80037e4:	9300      	str	r3, [sp, #0]
 80037e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f001 fdba 	bl	8005364 <I2C_TransferConfig>
 80037f0:	e06d      	b.n	80038ce <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	b2da      	uxtb	r2, r3
 8003802:	8979      	ldrh	r1, [r7, #10]
 8003804:	4b49      	ldr	r3, [pc, #292]	@ (800392c <HAL_I2C_Master_Receive+0x1e4>)
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f001 fda9 	bl	8005364 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003812:	e05c      	b.n	80038ce <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	6a39      	ldr	r1, [r7, #32]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f001 fc37 	bl	800508c <I2C_WaitOnRXNEFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e07c      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	1c5a      	adds	r2, r3, #1
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d034      	beq.n	80038ce <HAL_I2C_Master_Receive+0x186>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003868:	2b00      	cmp	r3, #0
 800386a:	d130      	bne.n	80038ce <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	6a3b      	ldr	r3, [r7, #32]
 8003872:	2200      	movs	r2, #0
 8003874:	2180      	movs	r1, #128	@ 0x80
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f001 fb6b 	bl	8004f52 <I2C_WaitOnFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e04d      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	2bff      	cmp	r3, #255	@ 0xff
 800388e:	d90e      	bls.n	80038ae <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	22ff      	movs	r2, #255	@ 0xff
 8003894:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800389a:	b2da      	uxtb	r2, r3
 800389c:	8979      	ldrh	r1, [r7, #10]
 800389e:	2300      	movs	r3, #0
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f001 fd5c 	bl	8005364 <I2C_TransferConfig>
 80038ac:	e00f      	b.n	80038ce <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	2300      	movs	r3, #0
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f001 fd4b 	bl	8005364 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d19d      	bne.n	8003814 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038d8:	697a      	ldr	r2, [r7, #20]
 80038da:	6a39      	ldr	r1, [r7, #32]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f001 fb91 	bl	8005004 <I2C_WaitOnSTOPFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01a      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <HAL_I2C_Master_Receive+0x1e8>)
 8003900:	400b      	ands	r3, r1
 8003902:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	80002400 	.word	0x80002400
 8003930:	fe00e800 	.word	0xfe00e800

08003934 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	60b9      	str	r1, [r7, #8]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	4613      	mov	r3, r2
 8003942:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394a:	b2db      	uxtb	r3, r3
 800394c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003950:	2b28      	cmp	r3, #40	@ 0x28
 8003952:	f040 8098 	bne.w	8003a86 <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d105      	bne.n	800396e <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003968:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e08c      	b.n	8003a88 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800396e:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f001 fdac 	bl	80054d0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 8003982:	2302      	movs	r3, #2
 8003984:	e080      	b.n	8003a88 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b2a      	cmp	r3, #42	@ 0x2a
 8003998:	d12a      	bne.n	80039f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800399a:	2102      	movs	r1, #2
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f001 fd97 	bl	80054d0 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039b0:	d11e      	bne.n	80039f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039c0:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d012      	beq.n	80039f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ce:	4a30      	ldr	r2, [pc, #192]	@ (8003a90 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80039d0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d6:	4618      	mov	r0, r3
 80039d8:	f7ff fac4 	bl	8002f64 <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80039ec:	4610      	mov	r0, r2
 80039ee:	4798      	blx	r3
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2229      	movs	r2, #41	@ 0x29
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a14:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	88fa      	ldrh	r2, [r7, #6]
 8003a20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4a17      	ldr	r2, [pc, #92]	@ (8003a94 <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 8003a36:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	bf0c      	ite	eq
 8003a46:	2301      	moveq	r3, #1
 8003a48:	2300      	movne	r3, #0
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	0c1b      	lsrs	r3, r3, #16
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d106      	bne.n	8003a70 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2208      	movs	r2, #8
 8003a6e:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8003a78:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f001 fca3 	bl	80053c8 <I2C_Enable_IRQ>

    return HAL_OK;
 8003a82:	2300      	movs	r3, #0
 8003a84:	e000      	b.n	8003a88 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08004f17 	.word	0x08004f17
 8003a94:	08003da3 	.word	0x08003da3

08003a98 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ab4:	2b28      	cmp	r3, #40	@ 0x28
 8003ab6:	f040 8098 	bne.w	8003bea <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d002      	beq.n	8003ac6 <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 8003ac0:	88fb      	ldrh	r3, [r7, #6]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d105      	bne.n	8003ad2 <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003acc:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e08c      	b.n	8003bec <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003ad2:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f001 fcfa 	bl	80054d0 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e080      	b.n	8003bec <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b29      	cmp	r3, #41	@ 0x29
 8003afc:	d12a      	bne.n	8003b54 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003afe:	2101      	movs	r1, #1
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f001 fce5 	bl	80054d0 <I2C_Disable_IRQ>

#if defined(HAL_DMA_MODULE_ENABLED)
      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b14:	d11e      	bne.n	8003b54 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003b24:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d012      	beq.n	8003b54 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	4a30      	ldr	r2, [pc, #192]	@ (8003bf4 <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fa12 	bl	8002f64 <HAL_DMA_Abort_IT>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d006      	beq.n	8003b54 <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b50:	4610      	mov	r0, r2
 8003b52:	4798      	blx	r3
        }
      }
#endif /* HAL_DMA_MODULE_ENABLED */
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	222a      	movs	r2, #42	@ 0x2a
 8003b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003b78:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	68ba      	ldr	r2, [r7, #8]
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	88fa      	ldrh	r2, [r7, #6]
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	683a      	ldr	r2, [r7, #0]
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4a17      	ldr	r2, [pc, #92]	@ (8003bf8 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8003b9a:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	699b      	ldr	r3, [r3, #24]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b08      	cmp	r3, #8
 8003ba8:	bf0c      	ite	eq
 8003baa:	2301      	moveq	r3, #1
 8003bac:	2300      	movne	r3, #0
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8003bdc:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f001 fbf1 	bl	80053c8 <I2C_Enable_IRQ>

    return HAL_OK;
 8003be6:	2300      	movs	r3, #0
 8003be8:	e000      	b.n	8003bec <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
  }
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3718      	adds	r7, #24
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	08004f17 	.word	0x08004f17
 8003bf8:	08003da3 	.word	0x08003da3

08003bfc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	2b20      	cmp	r3, #32
 8003c0e:	d10d      	bne.n	8003c2c <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2228      	movs	r2, #40	@ 0x28
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a07      	ldr	r2, [pc, #28]	@ (8003c38 <HAL_I2C_EnableListen_IT+0x3c>)
 8003c1c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f001 fbd0 	bl	80053c8 <I2C_Enable_IRQ>

    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	08003da3 	.word	0x08003da3

08003c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00f      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca0:	f043 0201 	orr.w	r2, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003cb0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00f      	beq.n	8003cdc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cca:	f043 0208 	orr.w	r2, r3, #8
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cda:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00f      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cf4:	f043 0202 	orr.w	r2, r3, #2
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003d04:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f003 030b 	and.w	r3, r3, #11
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 ffc1 	bl	8004ca0 <I2C_ITError>
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d101      	bne.n	8003dc6 <I2C_Slave_ISR_IT+0x24>
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	e0e2      	b.n	8003f8c <I2C_Slave_ISR_IT+0x1ea>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d004      	beq.n	8003dec <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003de2:	6939      	ldr	r1, [r7, #16]
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fda3 	bl	8004930 <I2C_ITSlaveCplt>
 8003dea:	e0ca      	b.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d04b      	beq.n	8003e8e <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d046      	beq.n	8003e8e <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d128      	bne.n	8003e5c <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b28      	cmp	r3, #40	@ 0x28
 8003e14:	d108      	bne.n	8003e28 <I2C_Slave_ISR_IT+0x86>
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e1c:	d104      	bne.n	8003e28 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e1e:	6939      	ldr	r1, [r7, #16]
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 fee9 	bl	8004bf8 <I2C_ITListenCplt>
 8003e26:	e031      	b.n	8003e8c <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b29      	cmp	r3, #41	@ 0x29
 8003e32:	d10e      	bne.n	8003e52 <I2C_Slave_ISR_IT+0xb0>
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003e3a:	d00a      	beq.n	8003e52 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2210      	movs	r2, #16
 8003e42:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003e44:	68f8      	ldr	r0, [r7, #12]
 8003e46:	f001 f842 	bl	8004ece <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fc4c 	bl	80046e8 <I2C_ITSlaveSeqCplt>
 8003e50:	e01c      	b.n	8003e8c <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2210      	movs	r2, #16
 8003e58:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003e5a:	e08f      	b.n	8003f7c <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2210      	movs	r2, #16
 8003e62:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e68:	f043 0204 	orr.w	r2, r3, #4
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <I2C_Slave_ISR_IT+0xdc>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e7c:	d17e      	bne.n	8003f7c <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e82:	4619      	mov	r1, r3
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 ff0b 	bl	8004ca0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003e8a:	e077      	b.n	8003f7c <I2C_Slave_ISR_IT+0x1da>
 8003e8c:	e076      	b.n	8003f7c <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02f      	beq.n	8003ef8 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d02a      	beq.n	8003ef8 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d018      	beq.n	8003ede <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d14b      	bne.n	8003f80 <I2C_Slave_ISR_IT+0x1de>
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003eee:	d047      	beq.n	8003f80 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003ef0:	68f8      	ldr	r0, [r7, #12]
 8003ef2:	f000 fbf9 	bl	80046e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003ef6:	e043      	b.n	8003f80 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003f0c:	6939      	ldr	r1, [r7, #16]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fb29 	bl	8004566 <I2C_ITAddrCplt>
 8003f14:	e035      	b.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d030      	beq.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d02b      	beq.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d018      	beq.n	8003f66 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f38:	781a      	ldrb	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	1c5a      	adds	r2, r3, #1
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003f64:	e00d      	b.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f6c:	d002      	beq.n	8003f74 <I2C_Slave_ISR_IT+0x1d2>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d106      	bne.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003f74:	68f8      	ldr	r0, [r7, #12]
 8003f76:	f000 fbb7 	bl	80046e8 <I2C_ITSlaveSeqCplt>
 8003f7a:	e002      	b.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003f7c:	bf00      	nop
 8003f7e:	e000      	b.n	8003f82 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003f80:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3718      	adds	r7, #24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d101      	bne.n	8003fae <I2C_Master_ISR_DMA+0x1a>
 8003faa:	2302      	movs	r3, #2
 8003fac:	e0d9      	b.n	8004162 <I2C_Master_ISR_DMA+0x1ce>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	f003 0310 	and.w	r3, r3, #16
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d016      	beq.n	8003fee <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2210      	movs	r2, #16
 8003fd0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003fde:	2120      	movs	r1, #32
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f001 f9f1 	bl	80053c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fe6:	68f8      	ldr	r0, [r7, #12]
 8003fe8:	f000 ff71 	bl	8004ece <I2C_Flush_TXDR>
 8003fec:	e0b4      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d071      	beq.n	80040dc <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06c      	beq.n	80040dc <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004010:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d04e      	beq.n	80040ba <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004028:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	2bff      	cmp	r3, #255	@ 0xff
 8004032:	d906      	bls.n	8004042 <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	22ff      	movs	r2, #255	@ 0xff
 8004038:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800403a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	e010      	b.n	8004064 <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004050:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004054:	d003      	beq.n	800405e <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	e002      	b.n	8004064 <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800405e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004062:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004068:	b2da      	uxtb	r2, r3
 800406a:	8a79      	ldrh	r1, [r7, #18]
 800406c:	2300      	movs	r3, #0
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f001 f976 	bl	8005364 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800407c:	b29a      	uxth	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004082:	1ad3      	subs	r3, r2, r3
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004090:	b2db      	uxtb	r3, r3
 8004092:	2b22      	cmp	r3, #34	@ 0x22
 8004094:	d108      	bne.n	80040a8 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040a4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040a6:	e057      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80040b6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80040b8:	e04e      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80040c8:	d003      	beq.n	80040d2 <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f000 facf 	bl	800466e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80040d0:	e042      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80040d2:	2140      	movs	r1, #64	@ 0x40
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 fde3 	bl	8004ca0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80040da:	e03d      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d119      	bne.n	800412e <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004104:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004108:	d025      	beq.n	8004156 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004112:	d108      	bne.n	8004126 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	685a      	ldr	r2, [r3, #4]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004122:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8004124:	e017      	b.n	8004156 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 faa1 	bl	800466e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800412c:	e013      	b.n	8004156 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800412e:	2140      	movs	r1, #64	@ 0x40
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 fdb5 	bl	8004ca0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004136:	e00e      	b.n	8004156 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	f003 0320 	and.w	r3, r3, #32
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004148:	2b00      	cmp	r3, #0
 800414a:	d005      	beq.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 fb26 	bl	80047a0 <I2C_ITMasterCplt>
 8004154:	e000      	b.n	8004158 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8004156:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3718      	adds	r7, #24
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8004178:	4b8d      	ldr	r3, [pc, #564]	@ (80043b0 <I2C_Mem_ISR_DMA+0x244>)
 800417a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004182:	2b01      	cmp	r3, #1
 8004184:	d101      	bne.n	800418a <I2C_Mem_ISR_DMA+0x1e>
 8004186:	2302      	movs	r3, #2
 8004188:	e10e      	b.n	80043a8 <I2C_Mem_ISR_DMA+0x23c>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2201      	movs	r2, #1
 800418e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	f003 0310 	and.w	r3, r3, #16
 8004198:	2b00      	cmp	r3, #0
 800419a:	d016      	beq.n	80041ca <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d011      	beq.n	80041ca <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2210      	movs	r2, #16
 80041ac:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b2:	f043 0204 	orr.w	r2, r3, #4
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80041ba:	2120      	movs	r1, #32
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f001 f903 	bl	80053c8 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fe83 	bl	8004ece <I2C_Flush_TXDR>
 80041c8:	e0e9      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d00e      	beq.n	80041f2 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d009      	beq.n	80041f2 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80041ee:	651a      	str	r2, [r3, #80]	@ 0x50
 80041f0:	e0d5      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d05f      	beq.n	80042bc <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8004202:	2b00      	cmp	r3, #0
 8004204:	d05a      	beq.n	80042bc <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004206:	2101      	movs	r1, #1
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f001 f961 	bl	80054d0 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800420e:	2110      	movs	r1, #16
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f001 f8d9 	bl	80053c8 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d048      	beq.n	80042b2 <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	2bff      	cmp	r3, #255	@ 0xff
 8004228:	d910      	bls.n	800424c <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	22ff      	movs	r2, #255	@ 0xff
 800422e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	b299      	uxth	r1, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800423a:	b2da      	uxtb	r2, r3
 800423c:	2300      	movs	r3, #0
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f001 f88d 	bl	8005364 <I2C_TransferConfig>
 800424a:	e011      	b.n	8004270 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425a:	b299      	uxth	r1, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004260:	b2da      	uxtb	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f001 f87a 	bl	8005364 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b22      	cmp	r3, #34	@ 0x22
 800428c:	d108      	bne.n	80042a0 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800429c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800429e:	e07e      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ae:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80042b0:	e075      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80042b2:	2140      	movs	r1, #64	@ 0x40
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 fcf3 	bl	8004ca0 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80042ba:	e070      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d05d      	beq.n	8004382 <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d058      	beq.n	8004382 <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042d0:	2101      	movs	r1, #1
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f001 f8fc 	bl	80054d0 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80042d8:	2110      	movs	r1, #16
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f001 f874 	bl	80053c8 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b22      	cmp	r3, #34	@ 0x22
 80042ea:	d101      	bne.n	80042f0 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80042ec:	4b31      	ldr	r3, [pc, #196]	@ (80043b4 <I2C_Mem_ISR_DMA+0x248>)
 80042ee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2bff      	cmp	r3, #255	@ 0xff
 80042f8:	d910      	bls.n	800431c <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	22ff      	movs	r2, #255	@ 0xff
 80042fe:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004304:	b299      	uxth	r1, r3
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800430a:	b2da      	uxtb	r2, r3
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	9300      	str	r3, [sp, #0]
 8004310:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f001 f825 	bl	8005364 <I2C_TransferConfig>
 800431a:	e011      	b.n	8004340 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800432a:	b299      	uxth	r1, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004330:	b2da      	uxtb	r2, r3
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f001 f812 	bl	8005364 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	b29a      	uxth	r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b22      	cmp	r3, #34	@ 0x22
 800435c:	d108      	bne.n	8004370 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800436c:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800436e:	e016      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800437e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004380:	e00d      	b.n	800439e <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8004396:	68b9      	ldr	r1, [r7, #8]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 fa01 	bl	80047a0 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	80002000 	.word	0x80002000
 80043b4:	80002400 	.word	0x80002400

080043b8 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b088      	sub	sp, #32
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <I2C_Slave_ISR_DMA+0x24>
 80043d8:	2302      	movs	r3, #2
 80043da:	e0c0      	b.n	800455e <I2C_Slave_ISR_DMA+0x1a6>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f003 0320 	and.w	r3, r3, #32
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d009      	beq.n	8004402 <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d004      	beq.n	8004402 <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80043f8:	68b9      	ldr	r1, [r7, #8]
 80043fa:	68f8      	ldr	r0, [r7, #12]
 80043fc:	f000 fa98 	bl	8004930 <I2C_ITSlaveCplt>
 8004400:	e0a8      	b.n	8004554 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8095 	beq.w	8004538 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 808f 	beq.w	8004538 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d104      	bne.n	800442e <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800442a:	2b00      	cmp	r3, #0
 800442c:	d07d      	beq.n	800452a <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d007      	beq.n	8004450 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 800444c:	2301      	movs	r3, #1
 800444e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00c      	beq.n	8004472 <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 800446e:	2301      	movs	r3, #1
 8004470:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d128      	bne.n	80044ca <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b28      	cmp	r3, #40	@ 0x28
 8004482:	d108      	bne.n	8004496 <I2C_Slave_ISR_DMA+0xde>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800448a:	d104      	bne.n	8004496 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800448c:	68b9      	ldr	r1, [r7, #8]
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f000 fbb2 	bl	8004bf8 <I2C_ITListenCplt>
 8004494:	e048      	b.n	8004528 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b29      	cmp	r3, #41	@ 0x29
 80044a0:	d10e      	bne.n	80044c0 <I2C_Slave_ISR_DMA+0x108>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80044a8:	d00a      	beq.n	80044c0 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2210      	movs	r2, #16
 80044b0:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80044b2:	68f8      	ldr	r0, [r7, #12]
 80044b4:	f000 fd0b 	bl	8004ece <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 f915 	bl	80046e8 <I2C_ITSlaveSeqCplt>
 80044be:	e033      	b.n	8004528 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2210      	movs	r2, #16
 80044c6:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80044c8:	e034      	b.n	8004534 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	2210      	movs	r2, #16
 80044d0:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044e4:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d003      	beq.n	80044f4 <I2C_Slave_ISR_DMA+0x13c>
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80044f2:	d11f      	bne.n	8004534 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80044f4:	7dfb      	ldrb	r3, [r7, #23]
 80044f6:	2b21      	cmp	r3, #33	@ 0x21
 80044f8:	d002      	beq.n	8004500 <I2C_Slave_ISR_DMA+0x148>
 80044fa:	7dfb      	ldrb	r3, [r7, #23]
 80044fc:	2b29      	cmp	r3, #41	@ 0x29
 80044fe:	d103      	bne.n	8004508 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2221      	movs	r2, #33	@ 0x21
 8004504:	631a      	str	r2, [r3, #48]	@ 0x30
 8004506:	e008      	b.n	800451a <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004508:	7dfb      	ldrb	r3, [r7, #23]
 800450a:	2b22      	cmp	r3, #34	@ 0x22
 800450c:	d002      	beq.n	8004514 <I2C_Slave_ISR_DMA+0x15c>
 800450e:	7dfb      	ldrb	r3, [r7, #23]
 8004510:	2b2a      	cmp	r3, #42	@ 0x2a
 8004512:	d102      	bne.n	800451a <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2222      	movs	r2, #34	@ 0x22
 8004518:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	4619      	mov	r1, r3
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fbbd 	bl	8004ca0 <I2C_ITError>
      if (treatdmanack == 1U)
 8004526:	e005      	b.n	8004534 <I2C_Slave_ISR_DMA+0x17c>
 8004528:	e004      	b.n	8004534 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2210      	movs	r2, #16
 8004530:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004532:	e00f      	b.n	8004554 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8004534:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004536:	e00d      	b.n	8004554 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f003 0308 	and.w	r3, r3, #8
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004548:	2b00      	cmp	r3, #0
 800454a:	d003      	beq.n	8004554 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f809 	bl	8004566 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3720      	adds	r7, #32
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
 800456e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800457c:	2b28      	cmp	r3, #40	@ 0x28
 800457e:	d16a      	bne.n	8004656 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	0c1b      	lsrs	r3, r3, #16
 8004588:	b2db      	uxtb	r3, r3
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	699b      	ldr	r3, [r3, #24]
 8004596:	0c1b      	lsrs	r3, r3, #16
 8004598:	b29b      	uxth	r3, r3
 800459a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800459e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80045ac:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	b29b      	uxth	r3, r3
 80045b6:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80045ba:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	d138      	bne.n	8004636 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	09db      	lsrs	r3, r3, #7
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	89bb      	ldrh	r3, [r7, #12]
 80045cc:	4053      	eors	r3, r2
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	f003 0306 	and.w	r3, r3, #6
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d11c      	bne.n	8004612 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80045d8:	897b      	ldrh	r3, [r7, #10]
 80045da:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d13b      	bne.n	8004666 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2208      	movs	r2, #8
 80045fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004604:	89ba      	ldrh	r2, [r7, #12]
 8004606:	7bfb      	ldrb	r3, [r7, #15]
 8004608:	4619      	mov	r1, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f7fc fcb0 	bl	8000f70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004610:	e029      	b.n	8004666 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004612:	893b      	ldrh	r3, [r7, #8]
 8004614:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 ff58 	bl	80054d0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004628:	89ba      	ldrh	r2, [r7, #12]
 800462a:	7bfb      	ldrb	r3, [r7, #15]
 800462c:	4619      	mov	r1, r3
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fc fc9e 	bl	8000f70 <HAL_I2C_AddrCallback>
}
 8004634:	e017      	b.n	8004666 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004636:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 ff48 	bl	80054d0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004648:	89ba      	ldrh	r2, [r7, #12]
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	4619      	mov	r1, r3
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7fc fc8e 	bl	8000f70 <HAL_I2C_AddrCallback>
}
 8004654:	e007      	b.n	8004666 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2208      	movs	r2, #8
 800465c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b21      	cmp	r3, #33	@ 0x21
 8004688:	d115      	bne.n	80046b6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2211      	movs	r2, #17
 8004696:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800469e:	2101      	movs	r1, #1
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 ff15 	bl	80054d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7ff fb39 	bl	8003d26 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046b4:	e014      	b.n	80046e0 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2212      	movs	r2, #18
 80046c2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80046ca:	2102      	movs	r1, #2
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 feff 	bl	80054d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fb2d 	bl	8003d3a <HAL_I2C_MasterRxCpltCallback>
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d008      	beq.n	800471c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	e00c      	b.n	8004736 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d007      	beq.n	8004736 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004734:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b29      	cmp	r3, #41	@ 0x29
 8004740:	d112      	bne.n	8004768 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2228      	movs	r2, #40	@ 0x28
 8004746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2221      	movs	r2, #33	@ 0x21
 800474e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004750:	2101      	movs	r1, #1
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 febc 	bl	80054d0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f7fc fc41 	bl	8000fe8 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004766:	e017      	b.n	8004798 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b2a      	cmp	r3, #42	@ 0x2a
 8004772:	d111      	bne.n	8004798 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2228      	movs	r2, #40	@ 0x28
 8004778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2222      	movs	r2, #34	@ 0x22
 8004780:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004782:	2102      	movs	r1, #2
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fea3 	bl	80054d0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f7fc fc12 	bl	8000fbc <HAL_I2C_SlaveRxCpltCallback>
}
 8004798:	bf00      	nop
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2220      	movs	r2, #32
 80047b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b21      	cmp	r3, #33	@ 0x21
 80047c0:	d107      	bne.n	80047d2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80047c2:	2101      	movs	r1, #1
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fe83 	bl	80054d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2211      	movs	r2, #17
 80047ce:	631a      	str	r2, [r3, #48]	@ 0x30
 80047d0:	e00c      	b.n	80047ec <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b22      	cmp	r3, #34	@ 0x22
 80047dc:	d106      	bne.n	80047ec <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80047de:	2102      	movs	r1, #2
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fe75 	bl	80054d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2212      	movs	r2, #18
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4b4c      	ldr	r3, [pc, #304]	@ (8004928 <I2C_ITMasterCplt+0x188>)
 80047f8:	400b      	ands	r3, r1
 80047fa:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a49      	ldr	r2, [pc, #292]	@ (800492c <I2C_ITMasterCplt+0x18c>)
 8004806:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f003 0310 	and.w	r3, r3, #16
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2210      	movs	r2, #16
 8004818:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f043 0204 	orr.w	r2, r3, #4
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b60      	cmp	r3, #96	@ 0x60
 8004830:	d10a      	bne.n	8004848 <I2C_ITMasterCplt+0xa8>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	f003 0304 	and.w	r3, r3, #4
 8004838:	2b00      	cmp	r3, #0
 800483a:	d005      	beq.n	8004848 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	b2db      	uxtb	r3, r3
 8004844:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004846:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f000 fb40 	bl	8004ece <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b60      	cmp	r3, #96	@ 0x60
 800485e:	d002      	beq.n	8004866 <I2C_ITMasterCplt+0xc6>
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d006      	beq.n	8004874 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fa17 	bl	8004ca0 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004872:	e054      	b.n	800491e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487a:	b2db      	uxtb	r3, r3
 800487c:	2b21      	cmp	r3, #33	@ 0x21
 800487e:	d124      	bne.n	80048ca <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b40      	cmp	r3, #64	@ 0x40
 8004898:	d10b      	bne.n	80048b2 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7ff fa4f 	bl	8003d4e <HAL_I2C_MemTxCpltCallback>
}
 80048b0:	e035      	b.n	800491e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fa2f 	bl	8003d26 <HAL_I2C_MasterTxCpltCallback>
}
 80048c8:	e029      	b.n	800491e <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b22      	cmp	r3, #34	@ 0x22
 80048d4:	d123      	bne.n	800491e <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	2b40      	cmp	r3, #64	@ 0x40
 80048ee:	d10b      	bne.n	8004908 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fa2e 	bl	8003d62 <HAL_I2C_MemRxCpltCallback>
}
 8004906:	e00a      	b.n	800491e <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7ff fa0e 	bl	8003d3a <HAL_I2C_MasterRxCpltCallback>
}
 800491e:	bf00      	nop
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}
 8004926:	bf00      	nop
 8004928:	fe00e800 	.word	0xfe00e800
 800492c:	ffff0000 	.word	0xffff0000

08004930 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004952:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2220      	movs	r2, #32
 800495a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800495c:	7afb      	ldrb	r3, [r7, #11]
 800495e:	2b21      	cmp	r3, #33	@ 0x21
 8004960:	d002      	beq.n	8004968 <I2C_ITSlaveCplt+0x38>
 8004962:	7afb      	ldrb	r3, [r7, #11]
 8004964:	2b29      	cmp	r3, #41	@ 0x29
 8004966:	d108      	bne.n	800497a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004968:	f248 0101 	movw	r1, #32769	@ 0x8001
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fdaf 	bl	80054d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	631a      	str	r2, [r3, #48]	@ 0x30
 8004978:	e019      	b.n	80049ae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800497a:	7afb      	ldrb	r3, [r7, #11]
 800497c:	2b22      	cmp	r3, #34	@ 0x22
 800497e:	d002      	beq.n	8004986 <I2C_ITSlaveCplt+0x56>
 8004980:	7afb      	ldrb	r3, [r7, #11]
 8004982:	2b2a      	cmp	r3, #42	@ 0x2a
 8004984:	d108      	bne.n	8004998 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004986:	f248 0102 	movw	r1, #32770	@ 0x8002
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fda0 	bl	80054d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2222      	movs	r2, #34	@ 0x22
 8004994:	631a      	str	r2, [r3, #48]	@ 0x30
 8004996:	e00a      	b.n	80049ae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004998:	7afb      	ldrb	r3, [r7, #11]
 800499a:	2b28      	cmp	r3, #40	@ 0x28
 800499c:	d107      	bne.n	80049ae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800499e:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fd94 	bl	80054d0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2200      	movs	r2, #0
 80049ac:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049bc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6859      	ldr	r1, [r3, #4]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b89      	ldr	r3, [pc, #548]	@ (8004bf0 <I2C_ITSlaveCplt+0x2c0>)
 80049ca:	400b      	ands	r3, r1
 80049cc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa7d 	bl	8004ece <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d013      	beq.n	8004a06 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d01f      	beq.n	8004a36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a04:	e017      	b.n	8004a36 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d012      	beq.n	8004a36 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d006      	beq.n	8004a36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b29a      	uxth	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	f003 0304 	and.w	r3, r3, #4
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d020      	beq.n	8004a82 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0304 	bic.w	r3, r3, #4
 8004a46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	b2d2      	uxtb	r2, r2
 8004a54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	1c5a      	adds	r2, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00c      	beq.n	8004a82 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a90:	f043 0204 	orr.w	r2, r3, #4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	f003 0310 	and.w	r3, r3, #16
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d049      	beq.n	8004b36 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d044      	beq.n	8004b36 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d128      	bne.n	8004b08 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b28      	cmp	r3, #40	@ 0x28
 8004ac0:	d108      	bne.n	8004ad4 <I2C_ITSlaveCplt+0x1a4>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ac8:	d104      	bne.n	8004ad4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004aca:	6979      	ldr	r1, [r7, #20]
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 f893 	bl	8004bf8 <I2C_ITListenCplt>
 8004ad2:	e030      	b.n	8004b36 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b29      	cmp	r3, #41	@ 0x29
 8004ade:	d10e      	bne.n	8004afe <I2C_ITSlaveCplt+0x1ce>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ae6:	d00a      	beq.n	8004afe <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2210      	movs	r2, #16
 8004aee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f9ec 	bl	8004ece <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fdf6 	bl	80046e8 <I2C_ITSlaveSeqCplt>
 8004afc:	e01b      	b.n	8004b36 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2210      	movs	r2, #16
 8004b04:	61da      	str	r2, [r3, #28]
 8004b06:	e016      	b.n	8004b36 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2210      	movs	r2, #16
 8004b0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b14:	f043 0204 	orr.w	r2, r3, #4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <I2C_ITSlaveCplt+0x1fa>
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b28:	d105      	bne.n	8004b36 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	4619      	mov	r1, r3
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f8b5 	bl	8004ca0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f8a4 	bl	8004ca0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b28      	cmp	r3, #40	@ 0x28
 8004b62:	d141      	bne.n	8004be8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b64:	6979      	ldr	r1, [r7, #20]
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f846 	bl	8004bf8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e03c      	b.n	8004be8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b72:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b76:	d014      	beq.n	8004ba2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f7ff fdb5 	bl	80046e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf4 <I2C_ITSlaveCplt+0x2c4>)
 8004b82:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7fc fa19 	bl	8000fd2 <HAL_I2C_ListenCpltCallback>
}
 8004ba0:	e022      	b.n	8004be8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ba8:	b2db      	uxtb	r3, r3
 8004baa:	2b22      	cmp	r3, #34	@ 0x22
 8004bac:	d10e      	bne.n	8004bcc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bc4:	6878      	ldr	r0, [r7, #4]
 8004bc6:	f7fc f9f9 	bl	8000fbc <HAL_I2C_SlaveRxCpltCallback>
}
 8004bca:	e00d      	b.n	8004be8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc fa00 	bl	8000fe8 <HAL_I2C_SlaveTxCpltCallback>
}
 8004be8:	bf00      	nop
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	fe00e800 	.word	0xfe00e800
 8004bf4:	ffff0000 	.word	0xffff0000

08004bf8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a25      	ldr	r2, [pc, #148]	@ (8004c9c <I2C_ITListenCplt+0xa4>)
 8004c06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2220      	movs	r2, #32
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d022      	beq.n	8004c74 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	b2d2      	uxtb	r2, r2
 8004c3a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d012      	beq.n	8004c74 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	f043 0204 	orr.w	r2, r3, #4
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c74:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 fc29 	bl	80054d0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2210      	movs	r2, #16
 8004c84:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fc f99f 	bl	8000fd2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	ffff0000 	.word	0xffff0000

08004ca0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cb0:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a6d      	ldr	r2, [pc, #436]	@ (8004e74 <I2C_ITError+0x1d4>)
 8004cbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	2b28      	cmp	r3, #40	@ 0x28
 8004cd6:	d005      	beq.n	8004ce4 <I2C_ITError+0x44>
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
 8004cda:	2b29      	cmp	r3, #41	@ 0x29
 8004cdc:	d002      	beq.n	8004ce4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004cde:	7bfb      	ldrb	r3, [r7, #15]
 8004ce0:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce2:	d10b      	bne.n	8004cfc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ce4:	2103      	movs	r1, #3
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fbf2 	bl	80054d0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2228      	movs	r2, #40	@ 0x28
 8004cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	4a60      	ldr	r2, [pc, #384]	@ (8004e78 <I2C_ITError+0x1d8>)
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
 8004cfa:	e030      	b.n	8004d5e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cfc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 fbe5 	bl	80054d0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f8e1 	bl	8004ece <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	2b60      	cmp	r3, #96	@ 0x60
 8004d16:	d01f      	beq.n	8004d58 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d114      	bne.n	8004d58 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f003 0310 	and.w	r3, r3, #16
 8004d38:	2b10      	cmp	r3, #16
 8004d3a:	d109      	bne.n	8004d50 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2210      	movs	r2, #16
 8004d42:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2220      	movs	r2, #32
 8004d56:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d62:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d039      	beq.n	8004de0 <I2C_ITError+0x140>
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	2b11      	cmp	r3, #17
 8004d70:	d002      	beq.n	8004d78 <I2C_ITError+0xd8>
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b21      	cmp	r3, #33	@ 0x21
 8004d76:	d133      	bne.n	8004de0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d86:	d107      	bne.n	8004d98 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004d96:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7fe f940 	bl	8003022 <HAL_DMA_GetState>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d017      	beq.n	8004dd8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dac:	4a33      	ldr	r2, [pc, #204]	@ (8004e7c <I2C_ITError+0x1dc>)
 8004dae:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7fe f8d1 	bl	8002f64 <HAL_DMA_Abort_IT>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d04d      	beq.n	8004e64 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dd6:	e045      	b.n	8004e64 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 f851 	bl	8004e80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dde:	e041      	b.n	8004e64 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d039      	beq.n	8004e5c <I2C_ITError+0x1bc>
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2b12      	cmp	r3, #18
 8004dec:	d002      	beq.n	8004df4 <I2C_ITError+0x154>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b22      	cmp	r3, #34	@ 0x22
 8004df2:	d133      	bne.n	8004e5c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004dfe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e02:	d107      	bne.n	8004e14 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fe f902 	bl	8003022 <HAL_DMA_GetState>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d017      	beq.n	8004e54 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e28:	4a14      	ldr	r2, [pc, #80]	@ (8004e7c <I2C_ITError+0x1dc>)
 8004e2a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7fe f893 	bl	8002f64 <HAL_DMA_Abort_IT>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d011      	beq.n	8004e68 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e52:	e009      	b.n	8004e68 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f813 	bl	8004e80 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e5a:	e005      	b.n	8004e68 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f80f 	bl	8004e80 <I2C_TreatErrorCallback>
  }
}
 8004e62:	e002      	b.n	8004e6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e64:	bf00      	nop
 8004e66:	e000      	b.n	8004e6a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e68:	bf00      	nop
}
 8004e6a:	bf00      	nop
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	ffff0000 	.word	0xffff0000
 8004e78:	08003da3 	.word	0x08003da3
 8004e7c:	08004f17 	.word	0x08004f17

08004e80 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b60      	cmp	r3, #96	@ 0x60
 8004e92:	d10e      	bne.n	8004eb2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fe ff63 	bl	8003d76 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004eb0:	e009      	b.n	8004ec6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f7fc f89c 	bl	8000ffe <HAL_I2C_ErrorCallback>
}
 8004ec6:	bf00      	nop
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d103      	bne.n	8004eec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0301 	and.w	r3, r3, #1
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d007      	beq.n	8004f0a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f042 0201 	orr.w	r2, r2, #1
 8004f08:	619a      	str	r2, [r3, #24]
  }
}
 8004f0a:	bf00      	nop
 8004f0c:	370c      	adds	r7, #12
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr

08004f16 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b084      	sub	sp, #16
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	2200      	movs	r2, #0
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f40:	2200      	movs	r2, #0
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7ff ff9b 	bl	8004e80 <I2C_TreatErrorCallback>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	603b      	str	r3, [r7, #0]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f62:	e03b      	b.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f91b 	bl	80051a4 <I2C_IsErrorOccurred>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e041      	b.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f7e:	d02d      	beq.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fd fde0 	bl	8002b44 <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d122      	bne.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	699a      	ldr	r2, [r3, #24]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	bf0c      	ite	eq
 8004fa6:	2301      	moveq	r3, #1
 8004fa8:	2300      	movne	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	461a      	mov	r2, r3
 8004fae:	79fb      	ldrb	r3, [r7, #7]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d113      	bne.n	8004fdc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb8:	f043 0220 	orr.w	r2, r3, #32
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e00f      	b.n	8004ffc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699a      	ldr	r2, [r3, #24]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	4013      	ands	r3, r2
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	bf0c      	ite	eq
 8004fec:	2301      	moveq	r3, #1
 8004fee:	2300      	movne	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d0b4      	beq.n	8004f64 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005010:	e02f      	b.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68b9      	ldr	r1, [r7, #8]
 8005016:	68f8      	ldr	r0, [r7, #12]
 8005018:	f000 f8c4 	bl	80051a4 <I2C_IsErrorOccurred>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d001      	beq.n	8005026 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e02d      	b.n	8005082 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005026:	f7fd fd8d 	bl	8002b44 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	429a      	cmp	r2, r3
 8005034:	d302      	bcc.n	800503c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d11a      	bne.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	f003 0320 	and.w	r3, r3, #32
 8005046:	2b20      	cmp	r3, #32
 8005048:	d013      	beq.n	8005072 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e007      	b.n	8005082 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f003 0320 	and.w	r3, r3, #32
 800507c:	2b20      	cmp	r3, #32
 800507e:	d1c8      	bne.n	8005012 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005098:	2300      	movs	r3, #0
 800509a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800509c:	e071      	b.n	8005182 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800509e:	687a      	ldr	r2, [r7, #4]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	68f8      	ldr	r0, [r7, #12]
 80050a4:	f000 f87e 	bl	80051a4 <I2C_IsErrorOccurred>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d13b      	bne.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d138      	bne.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b04      	cmp	r3, #4
 80050d2:	d105      	bne.n	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80050dc:	2300      	movs	r3, #0
 80050de:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d121      	bne.n	8005132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2210      	movs	r2, #16
 80050f4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2204      	movs	r2, #4
 80050fa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2220      	movs	r2, #32
 8005102:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6859      	ldr	r1, [r3, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	4b24      	ldr	r3, [pc, #144]	@ (80051a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8005110:	400b      	ands	r3, r1
 8005112:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	75fb      	strb	r3, [r7, #23]
 8005130:	e002      	b.n	8005138 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8005138:	f7fd fd04 	bl	8002b44 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d302      	bcc.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d119      	bne.n	8005182 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800514e:	7dfb      	ldrb	r3, [r7, #23]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d116      	bne.n	8005182 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b04      	cmp	r3, #4
 8005160:	d00f      	beq.n	8005182 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005166:	f043 0220 	orr.w	r2, r3, #32
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d002      	beq.n	8005196 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8005190:	7dfb      	ldrb	r3, [r7, #23]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d083      	beq.n	800509e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8005196:	7dfb      	ldrb	r3, [r7, #23]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3718      	adds	r7, #24
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	fe00e800 	.word	0xfe00e800

080051a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	@ 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d068      	beq.n	80052a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2210      	movs	r2, #16
 80051d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80051d8:	e049      	b.n	800526e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051e0:	d045      	beq.n	800526e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80051e2:	f7fd fcaf 	bl	8002b44 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	69fb      	ldr	r3, [r7, #28]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d302      	bcc.n	80051f8 <I2C_IsErrorOccurred+0x54>
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d13a      	bne.n	800526e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005202:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800520a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005216:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800521a:	d121      	bne.n	8005260 <I2C_IsErrorOccurred+0xbc>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005222:	d01d      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	2b20      	cmp	r3, #32
 8005228:	d01a      	beq.n	8005260 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005238:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800523a:	f7fd fc83 	bl	8002b44 <HAL_GetTick>
 800523e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005240:	e00e      	b.n	8005260 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005242:	f7fd fc7f 	bl	8002b44 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	69fb      	ldr	r3, [r7, #28]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b19      	cmp	r3, #25
 800524e:	d907      	bls.n	8005260 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	f043 0320 	orr.w	r3, r3, #32
 8005256:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800525e:	e006      	b.n	800526e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0320 	and.w	r3, r3, #32
 800526a:	2b20      	cmp	r3, #32
 800526c:	d1e9      	bne.n	8005242 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b20      	cmp	r3, #32
 800527a:	d003      	beq.n	8005284 <I2C_IsErrorOccurred+0xe0>
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	d0aa      	beq.n	80051da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005284:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005288:	2b00      	cmp	r3, #0
 800528a:	d103      	bne.n	8005294 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2220      	movs	r2, #32
 8005292:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005294:	6a3b      	ldr	r3, [r7, #32]
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	699b      	ldr	r3, [r3, #24]
 80052a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80052b4:	6a3b      	ldr	r3, [r7, #32]
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	f043 0308 	orr.w	r3, r3, #8
 80052dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	f043 0302 	orr.w	r3, r3, #2
 80052fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005308:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8005310:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01c      	beq.n	8005352 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f7ff fdd8 	bl	8004ece <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	4b0d      	ldr	r3, [pc, #52]	@ (8005360 <I2C_IsErrorOccurred+0x1bc>)
 800532a:	400b      	ands	r3, r1
 800532c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	431a      	orrs	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8005352:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8005356:	4618      	mov	r0, r3
 8005358:	3728      	adds	r7, #40	@ 0x28
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	fe00e800 	.word	0xfe00e800

08005364 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	607b      	str	r3, [r7, #4]
 800536e:	460b      	mov	r3, r1
 8005370:	817b      	strh	r3, [r7, #10]
 8005372:	4613      	mov	r3, r2
 8005374:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005376:	897b      	ldrh	r3, [r7, #10]
 8005378:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800537c:	7a7b      	ldrb	r3, [r7, #9]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005384:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	4313      	orrs	r3, r2
 800538e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005392:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	0d5b      	lsrs	r3, r3, #21
 800539e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <I2C_TransferConfig+0x60>)
 80053a4:	430b      	orrs	r3, r1
 80053a6:	43db      	mvns	r3, r3
 80053a8:	ea02 0103 	and.w	r1, r2, r3
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80053b6:	bf00      	nop
 80053b8:	371c      	adds	r7, #28
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	03ff63ff 	.word	0x03ff63ff

080053c8 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	460b      	mov	r3, r1
 80053d2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

#if defined(HAL_DMA_MODULE_ENABLED)
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053dc:	4a39      	ldr	r2, [pc, #228]	@ (80054c4 <I2C_Enable_IRQ+0xfc>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d032      	beq.n	8005448 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 80053e6:	4a38      	ldr	r2, [pc, #224]	@ (80054c8 <I2C_Enable_IRQ+0x100>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d02d      	beq.n	8005448 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 80053f0:	4a36      	ldr	r2, [pc, #216]	@ (80054cc <I2C_Enable_IRQ+0x104>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d028      	beq.n	8005448 <I2C_Enable_IRQ+0x80>
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80053f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	da03      	bge.n	8005406 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005404:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005406:	887b      	ldrh	r3, [r7, #2]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d003      	beq.n	8005418 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005416:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8005418:	887b      	ldrh	r3, [r7, #2]
 800541a:	f003 0302 	and.w	r3, r3, #2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8005428:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800542a:	887b      	ldrh	r3, [r7, #2]
 800542c:	2b10      	cmp	r3, #16
 800542e:	d103      	bne.n	8005438 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005436:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	2b20      	cmp	r3, #32
 800543c:	d133      	bne.n	80054a6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f043 0320 	orr.w	r3, r3, #32
 8005444:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005446:	e02e      	b.n	80054a6 <I2C_Enable_IRQ+0xde>
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005448:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800544c:	2b00      	cmp	r3, #0
 800544e:	da03      	bge.n	8005458 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005456:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005458:	887b      	ldrh	r3, [r7, #2]
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8005468:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800546a:	887b      	ldrh	r3, [r7, #2]
 800546c:	f003 0302 	and.w	r3, r3, #2
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800547a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800547c:	887b      	ldrh	r3, [r7, #2]
 800547e:	2b10      	cmp	r3, #16
 8005480:	d103      	bne.n	800548a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005488:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800548a:	887b      	ldrh	r3, [r7, #2]
 800548c:	2b20      	cmp	r3, #32
 800548e:	d103      	bne.n	8005498 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005496:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005498:	887b      	ldrh	r3, [r7, #2]
 800549a:	2b40      	cmp	r3, #64	@ 0x40
 800549c:	d103      	bne.n	80054a6 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054a4:	60fb      	str	r3, [r7, #12]
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6819      	ldr	r1, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68fa      	ldr	r2, [r7, #12]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	601a      	str	r2, [r3, #0]
}
 80054b6:	bf00      	nop
 80054b8:	3714      	adds	r7, #20
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	08003f95 	.word	0x08003f95
 80054c8:	080043b9 	.word	0x080043b9
 80054cc:	0800416d 	.word	0x0800416d

080054d0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	460b      	mov	r3, r1
 80054da:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054e0:	887b      	ldrh	r3, [r7, #2]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80054f0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80054fe:	2b28      	cmp	r3, #40	@ 0x28
 8005500:	d003      	beq.n	800550a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005508:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800550a:	887b      	ldrh	r3, [r7, #2]
 800550c:	f003 0302 	and.w	r3, r3, #2
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00f      	beq.n	8005534 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800551a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005522:	b2db      	uxtb	r3, r3
 8005524:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005528:	2b28      	cmp	r3, #40	@ 0x28
 800552a:	d003      	beq.n	8005534 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8005532:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005534:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005538:	2b00      	cmp	r3, #0
 800553a:	da03      	bge.n	8005544 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8005542:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	2b10      	cmp	r3, #16
 8005548:	d103      	bne.n	8005552 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8005550:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005552:	887b      	ldrh	r3, [r7, #2]
 8005554:	2b20      	cmp	r3, #32
 8005556:	d103      	bne.n	8005560 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f043 0320 	orr.w	r3, r3, #32
 800555e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d103      	bne.n	800556e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800556c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6819      	ldr	r1, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	43da      	mvns	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	400a      	ands	r2, r1
 800557e:	601a      	str	r2, [r3, #0]
}
 8005580:	bf00      	nop
 8005582:	3714      	adds	r7, #20
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b20      	cmp	r3, #32
 80055a0:	d138      	bne.n	8005614 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e032      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2224      	movs	r2, #36	@ 0x24
 80055bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0201 	bic.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6819      	ldr	r1, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	430a      	orrs	r2, r1
 80055ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f042 0201 	orr.w	r2, r2, #1
 80055fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005614:	2302      	movs	r3, #2
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005622:	b480      	push	{r7}
 8005624:	b085      	sub	sp, #20
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b20      	cmp	r3, #32
 8005636:	d139      	bne.n	80056ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005642:	2302      	movs	r3, #2
 8005644:	e033      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2224      	movs	r2, #36	@ 0x24
 8005652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005674:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	021b      	lsls	r3, r3, #8
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4313      	orrs	r3, r2
 800567e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f042 0201 	orr.w	r2, r2, #1
 8005696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a8:	2300      	movs	r3, #0
 80056aa:	e000      	b.n	80056ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056ac:	2302      	movs	r3, #2
  }
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr
	...

080056bc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 80056c4:	2300      	movs	r3, #0
 80056c6:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01e      	beq.n	800570c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 80056ce:	4b13      	ldr	r3, [pc, #76]	@ (800571c <HAL_IPCC_Init+0x60>)
 80056d0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d102      	bne.n	80056e4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc ffae 	bl	8002640 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80056e4:	68b8      	ldr	r0, [r7, #8]
 80056e6:	f000 f85b 	bl	80057a0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f82c 	bl	8005754 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800570a:	e001      	b.n	8005710 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	58000c00 	.word	0x58000c00

08005720 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8005720:	b480      	push	{r7}
 8005722:	b085      	sub	sp, #20
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800572e:	bf00      	nop
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800573a:	b480      	push	{r7}
 800573c:	b085      	sub	sp, #20
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	60b9      	str	r1, [r7, #8]
 8005744:	4613      	mov	r3, r2
 8005746:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8005748:	bf00      	nop
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800575c:	2300      	movs	r3, #0
 800575e:	60fb      	str	r3, [r7, #12]
 8005760:	e00f      	b.n	8005782 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	4a0b      	ldr	r2, [pc, #44]	@ (8005798 <IPCC_SetDefaultCallbacks+0x44>)
 800576c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3306      	adds	r3, #6
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	4a08      	ldr	r2, [pc, #32]	@ (800579c <IPCC_SetDefaultCallbacks+0x48>)
 800577a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	3301      	adds	r3, #1
 8005780:	60fb      	str	r3, [r7, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2b05      	cmp	r3, #5
 8005786:	d9ec      	bls.n	8005762 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8005788:	bf00      	nop
 800578a:	bf00      	nop
 800578c:	3714      	adds	r7, #20
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	08005721 	.word	0x08005721
 800579c:	0800573b 	.word	0x0800573b

080057a0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 80057b4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	223f      	movs	r2, #63	@ 0x3f
 80057ba:	609a      	str	r2, [r3, #8]
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0c0      	b.n	800595c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d106      	bne.n	80057f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f00c fb62 	bl	8011eb8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2203      	movs	r2, #3
 80057f8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f004 fe14 	bl	800a42e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005806:	2300      	movs	r3, #0
 8005808:	73fb      	strb	r3, [r7, #15]
 800580a:	e03e      	b.n	800588a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800580c:	7bfa      	ldrb	r2, [r7, #15]
 800580e:	6879      	ldr	r1, [r7, #4]
 8005810:	4613      	mov	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4413      	add	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	440b      	add	r3, r1
 800581a:	3311      	adds	r3, #17
 800581c:	2201      	movs	r2, #1
 800581e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005820:	7bfa      	ldrb	r2, [r7, #15]
 8005822:	6879      	ldr	r1, [r7, #4]
 8005824:	4613      	mov	r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	440b      	add	r3, r1
 800582e:	3310      	adds	r3, #16
 8005830:	7bfa      	ldrb	r2, [r7, #15]
 8005832:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005834:	7bfa      	ldrb	r2, [r7, #15]
 8005836:	6879      	ldr	r1, [r7, #4]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	00db      	lsls	r3, r3, #3
 8005840:	440b      	add	r3, r1
 8005842:	3313      	adds	r3, #19
 8005844:	2200      	movs	r2, #0
 8005846:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005848:	7bfa      	ldrb	r2, [r7, #15]
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	4613      	mov	r3, r2
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	00db      	lsls	r3, r3, #3
 8005854:	440b      	add	r3, r1
 8005856:	3320      	adds	r3, #32
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800585c:	7bfa      	ldrb	r2, [r7, #15]
 800585e:	6879      	ldr	r1, [r7, #4]
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	00db      	lsls	r3, r3, #3
 8005868:	440b      	add	r3, r1
 800586a:	3324      	adds	r3, #36	@ 0x24
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	1c5a      	adds	r2, r3, #1
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	2200      	movs	r2, #0
 8005882:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	3301      	adds	r3, #1
 8005888:	73fb      	strb	r3, [r7, #15]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	791b      	ldrb	r3, [r3, #4]
 800588e:	7bfa      	ldrb	r2, [r7, #15]
 8005890:	429a      	cmp	r2, r3
 8005892:	d3bb      	bcc.n	800580c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e044      	b.n	8005924 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800589a:	7bfa      	ldrb	r2, [r7, #15]
 800589c:	6879      	ldr	r1, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80058ac:	2200      	movs	r2, #0
 80058ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80058b0:	7bfa      	ldrb	r2, [r7, #15]
 80058b2:	6879      	ldr	r1, [r7, #4]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80058c2:	7bfa      	ldrb	r2, [r7, #15]
 80058c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80058c6:	7bfa      	ldrb	r2, [r7, #15]
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	440b      	add	r3, r1
 80058d4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80058d8:	2200      	movs	r2, #0
 80058da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80058dc:	7bfa      	ldrb	r2, [r7, #15]
 80058de:	6879      	ldr	r1, [r7, #4]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80058f2:	7bfa      	ldrb	r2, [r7, #15]
 80058f4:	6879      	ldr	r1, [r7, #4]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005908:	7bfa      	ldrb	r2, [r7, #15]
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800591a:	2200      	movs	r2, #0
 800591c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800591e:	7bfb      	ldrb	r3, [r7, #15]
 8005920:	3301      	adds	r3, #1
 8005922:	73fb      	strb	r3, [r7, #15]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	791b      	ldrb	r3, [r3, #4]
 8005928:	7bfa      	ldrb	r2, [r7, #15]
 800592a:	429a      	cmp	r2, r3
 800592c:	d3b5      	bcc.n	800589a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6818      	ldr	r0, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3304      	adds	r3, #4
 8005936:	e893 0006 	ldmia.w	r3, {r1, r2}
 800593a:	f004 fd93 	bl	800a464 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	7a9b      	ldrb	r3, [r3, #10]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d102      	bne.n	800595a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f001 fc40 	bl	80071da <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <HAL_PCD_Start+0x16>
 8005976:	2302      	movs	r3, #2
 8005978:	e012      	b.n	80059a0 <HAL_PCD_Start+0x3c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4618      	mov	r0, r3
 8005988:	f004 fd3a 	bl	800a400 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f006 fffa 	bl	800c98a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3708      	adds	r7, #8
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f006 ffff 	bl	800c9b8 <USB_ReadInterrupts>
 80059ba:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d003      	beq.n	80059ce <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f000 fb04 	bl	8005fd4 <PCD_EP_ISR_Handler>

    return;
 80059cc:	e110      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d013      	beq.n	8005a00 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ea:	b292      	uxth	r2, r2
 80059ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f00c fb14 	bl	801201e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80059f6:	2100      	movs	r1, #0
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f8fc 	bl	8005bf6 <HAL_PCD_SetAddress>

    return;
 80059fe:	e0f7      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00c      	beq.n	8005a24 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005a1c:	b292      	uxth	r2, r2
 8005a1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a22:	e0e5      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005a36:	b29a      	uxth	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a40:	b292      	uxth	r2, r2
 8005a42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005a46:	e0d3      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d034      	beq.n	8005abc <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f022 0204 	bic.w	r2, r2, #4
 8005a64:	b292      	uxth	r2, r2
 8005a66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f022 0208 	bic.w	r2, r2, #8
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a94:	2100      	movs	r1, #0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f00c fcb6 	bl	8012408 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f00c faf7 	bl	8012090 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ab4:	b292      	uxth	r2, r2
 8005ab6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005aba:	e099      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d027      	beq.n	8005b16 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0208 	orr.w	r2, r2, #8
 8005ad8:	b292      	uxth	r2, r2
 8005ada:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005af0:	b292      	uxth	r2, r2
 8005af2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0204 	orr.w	r2, r2, #4
 8005b08:	b292      	uxth	r2, r2
 8005b0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f00c faa4 	bl	801205c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005b14:	e06c      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d040      	beq.n	8005ba2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b32:	b292      	uxth	r2, r2
 8005b34:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d12b      	bne.n	8005b9a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f042 0204 	orr.w	r2, r2, #4
 8005b54:	b292      	uxth	r2, r2
 8005b56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005b62:	b29a      	uxth	r2, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f042 0208 	orr.w	r2, r2, #8
 8005b6c:	b292      	uxth	r2, r2
 8005b6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	089b      	lsrs	r3, r3, #2
 8005b86:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005b90:	2101      	movs	r1, #1
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f00c fc38 	bl	8012408 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005b98:	e02a      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f00c fa5e 	bl	801205c <HAL_PCD_SuspendCallback>
    return;
 8005ba0:	e026      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00f      	beq.n	8005bcc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005bbe:	b292      	uxth	r2, r2
 8005bc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f00c fa1c 	bl	8012002 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005bca:	e011      	b.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00c      	beq.n	8005bf0 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005be8:	b292      	uxth	r2, r2
 8005bea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005bee:	bf00      	nop
  }
}
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005bf6:	b580      	push	{r7, lr}
 8005bf8:	b082      	sub	sp, #8
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	460b      	mov	r3, r1
 8005c00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d101      	bne.n	8005c10 <HAL_PCD_SetAddress+0x1a>
 8005c0c:	2302      	movs	r3, #2
 8005c0e:	e012      	b.n	8005c36 <HAL_PCD_SetAddress+0x40>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	78fa      	ldrb	r2, [r7, #3]
 8005c1c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	78fa      	ldrb	r2, [r7, #3]
 8005c24:	4611      	mov	r1, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f006 fe9b 	bl	800c962 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	4608      	mov	r0, r1
 8005c48:	4611      	mov	r1, r2
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	70fb      	strb	r3, [r7, #3]
 8005c50:	460b      	mov	r3, r1
 8005c52:	803b      	strh	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0e      	bge.n	8005c82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c64:	78fb      	ldrb	r3, [r7, #3]
 8005c66:	f003 0207 	and.w	r2, r3, #7
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	00db      	lsls	r3, r3, #3
 8005c72:	3310      	adds	r3, #16
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	4413      	add	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	705a      	strb	r2, [r3, #1]
 8005c80:	e00e      	b.n	8005ca0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c82:	78fb      	ldrb	r3, [r7, #3]
 8005c84:	f003 0207 	and.w	r2, r3, #7
 8005c88:	4613      	mov	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	4413      	add	r3, r2
 8005c98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 0307 	and.w	r3, r3, #7
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005cac:	883a      	ldrh	r2, [r7, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	78ba      	ldrb	r2, [r7, #2]
 8005cb6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005cb8:	78bb      	ldrb	r3, [r7, #2]
 8005cba:	2b02      	cmp	r3, #2
 8005cbc:	d102      	bne.n	8005cc4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_PCD_EP_Open+0x94>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e00e      	b.n	8005cf0 <HAL_PCD_EP_Open+0xb2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f004 fbdd 	bl	800a4a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8005cee:	7afb      	ldrb	r3, [r7, #11]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da0e      	bge.n	8005d2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 0207 	and.w	r2, r3, #7
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	00db      	lsls	r3, r3, #3
 8005d1a:	3310      	adds	r3, #16
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	705a      	strb	r2, [r3, #1]
 8005d28:	e00e      	b.n	8005d48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d2a:	78fb      	ldrb	r3, [r7, #3]
 8005d2c:	f003 0207 	and.w	r2, r3, #7
 8005d30:	4613      	mov	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	4413      	add	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	4413      	add	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	f003 0307 	and.w	r3, r3, #7
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d101      	bne.n	8005d62 <HAL_PCD_EP_Close+0x6a>
 8005d5e:	2302      	movs	r3, #2
 8005d60:	e00e      	b.n	8005d80 <HAL_PCD_EP_Close+0x88>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68f9      	ldr	r1, [r7, #12]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f004 ff59 	bl	800ac28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	603b      	str	r3, [r7, #0]
 8005d94:	460b      	mov	r3, r1
 8005d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d98:	7afb      	ldrb	r3, [r7, #11]
 8005d9a:	f003 0207 	and.w	r2, r3, #7
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	00db      	lsls	r3, r3, #3
 8005da6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4413      	add	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	b2da      	uxtb	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f005 f911 	bl	800b002 <USB_EPStartXfer>

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3718      	adds	r7, #24
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	460b      	mov	r3, r1
 8005df4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005df6:	78fb      	ldrb	r3, [r7, #3]
 8005df8:	f003 0207 	and.w	r2, r3, #7
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	00db      	lsls	r3, r3, #3
 8005e06:	440b      	add	r3, r1
 8005e08:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8005e0c:	681b      	ldr	r3, [r3, #0]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	370c      	adds	r7, #12
 8005e12:	46bd      	mov	sp, r7
 8005e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e18:	4770      	bx	lr

08005e1a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	460b      	mov	r3, r1
 8005e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2a:	7afb      	ldrb	r3, [r7, #11]
 8005e2c:	f003 0207 	and.w	r2, r3, #7
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	00db      	lsls	r3, r3, #3
 8005e38:	3310      	adds	r3, #16
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2201      	movs	r2, #1
 8005e64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6979      	ldr	r1, [r7, #20]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f005 f8c2 	bl	800b002 <USB_EPStartXfer>

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	460b      	mov	r3, r1
 8005e92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005e94:	78fb      	ldrb	r3, [r7, #3]
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	7912      	ldrb	r2, [r2, #4]
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d901      	bls.n	8005ea6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e03e      	b.n	8005f24 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	da0e      	bge.n	8005ecc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	f003 0207 	and.w	r2, r3, #7
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4413      	add	r3, r2
 8005eba:	00db      	lsls	r3, r3, #3
 8005ebc:	3310      	adds	r3, #16
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	4413      	add	r3, r2
 8005ec2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	705a      	strb	r2, [r3, #1]
 8005eca:	e00c      	b.n	8005ee6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ecc:	78fa      	ldrb	r2, [r7, #3]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	4413      	add	r3, r2
 8005ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eec:	78fb      	ldrb	r3, [r7, #3]
 8005eee:	f003 0307 	and.w	r3, r3, #7
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d101      	bne.n	8005f06 <HAL_PCD_EP_SetStall+0x7e>
 8005f02:	2302      	movs	r3, #2
 8005f04:	e00e      	b.n	8005f24 <HAL_PCD_EP_SetStall+0x9c>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	4618      	mov	r0, r3
 8005f16:	f006 fc25 	bl	800c764 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	460b      	mov	r3, r1
 8005f36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	f003 030f 	and.w	r3, r3, #15
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	7912      	ldrb	r2, [r2, #4]
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d901      	bls.n	8005f4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e040      	b.n	8005fcc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	da0e      	bge.n	8005f70 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	f003 0207 	and.w	r2, r3, #7
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	00db      	lsls	r3, r3, #3
 8005f60:	3310      	adds	r3, #16
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	4413      	add	r3, r2
 8005f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	705a      	strb	r2, [r3, #1]
 8005f6e:	e00e      	b.n	8005f8e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 0207 	and.w	r2, r3, #7
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	2200      	movs	r2, #0
 8005f92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	f003 0307 	and.w	r3, r3, #7
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_PCD_EP_ClrStall+0x82>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e00e      	b.n	8005fcc <HAL_PCD_EP_ClrStall+0xa0>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	f006 fc22 	bl	800c806 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b096      	sub	sp, #88	@ 0x58
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005fdc:	e3ad      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005fe6:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005fea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	f003 030f 	and.w	r3, r3, #15
 8005ff4:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005ff8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f040 816f 	bne.w	80062e0 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006002:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	d14c      	bne.n	80060a8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	881b      	ldrh	r3, [r3, #0]
 8006014:	b29b      	uxth	r3, r3
 8006016:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800601a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800601e:	81fb      	strh	r3, [r7, #14]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	89fb      	ldrh	r3, [r7, #14]
 8006026:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800602a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800602e:	b29b      	uxth	r3, r3
 8006030:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3310      	adds	r3, #16
 8006036:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006040:	b29b      	uxth	r3, r3
 8006042:	461a      	mov	r2, r3
 8006044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6812      	ldr	r2, [r2, #0]
 8006050:	4413      	add	r3, r2
 8006052:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800605c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800605e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006062:	695a      	ldr	r2, [r3, #20]
 8006064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006066:	69db      	ldr	r3, [r3, #28]
 8006068:	441a      	add	r2, r3
 800606a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800606c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800606e:	2100      	movs	r1, #0
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f00b ffac 	bl	8011fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7b1b      	ldrb	r3, [r3, #12]
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 835c 	beq.w	800673a <PCD_EP_ISR_Handler+0x766>
 8006082:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	2b00      	cmp	r3, #0
 8006088:	f040 8357 	bne.w	800673a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	7b1b      	ldrb	r3, [r3, #12]
 8006090:	b2db      	uxtb	r3, r3
 8006092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006096:	b2da      	uxtb	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	731a      	strb	r2, [r3, #12]
 80060a6:	e348      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80060ae:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	881b      	ldrh	r3, [r3, #0]
 80060b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80060ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d032      	beq.n	800612c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	461a      	mov	r2, r3
 80060d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	00db      	lsls	r3, r3, #3
 80060d8:	4413      	add	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	4413      	add	r3, r2
 80060e0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6818      	ldr	r0, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80060f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fa:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80060fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060fe:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006100:	b29b      	uxth	r3, r3
 8006102:	f006 fcab 	bl	800ca5c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	b29a      	uxth	r2, r3
 800610e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006112:	4013      	ands	r3, r2
 8006114:	823b      	strh	r3, [r7, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	8a3a      	ldrh	r2, [r7, #16]
 800611c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006120:	b292      	uxth	r2, r2
 8006122:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f00b ff25 	bl	8011f74 <HAL_PCD_SetupStageCallback>
 800612a:	e306      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800612c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8006130:	2b00      	cmp	r3, #0
 8006132:	f280 8302 	bge.w	800673a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29a      	uxth	r2, r3
 800613e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006142:	4013      	ands	r3, r2
 8006144:	83fb      	strh	r3, [r7, #30]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	8bfa      	ldrh	r2, [r7, #30]
 800614c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006150:	b292      	uxth	r2, r2
 8006152:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800615c:	b29b      	uxth	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	4413      	add	r3, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	4413      	add	r3, r2
 800616e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006172:	881b      	ldrh	r3, [r3, #0]
 8006174:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800617c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d019      	beq.n	80061b8 <PCD_EP_ISR_Handler+0x1e4>
 8006184:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d015      	beq.n	80061b8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006192:	6959      	ldr	r1, [r3, #20]
 8006194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006196:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006198:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800619a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800619c:	b29b      	uxth	r3, r3
 800619e:	f006 fc5d 	bl	800ca5c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80061a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	441a      	add	r2, r3
 80061ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80061b0:	2100      	movs	r1, #0
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f00b fef0 	bl	8011f98 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80061c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80061c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f040 82b5 	bne.w	800673a <PCD_EP_ISR_Handler+0x766>
 80061d0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80061d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80061d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80061dc:	f000 82ad 	beq.w	800673a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	461a      	mov	r2, r3
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	4413      	add	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80061fe:	617b      	str	r3, [r7, #20]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	b29b      	uxth	r3, r3
 8006206:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800620a:	b29a      	uxth	r2, r3
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	801a      	strh	r2, [r3, #0]
 8006210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b3e      	cmp	r3, #62	@ 0x3e
 8006216:	d91d      	bls.n	8006254 <PCD_EP_ISR_Handler+0x280>
 8006218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	095b      	lsrs	r3, r3, #5
 800621e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <PCD_EP_ISR_Handler+0x25e>
 800622c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800622e:	3b01      	subs	r3, #1
 8006230:	647b      	str	r3, [r7, #68]	@ 0x44
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	881b      	ldrh	r3, [r3, #0]
 8006236:	b29a      	uxth	r2, r3
 8006238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800623a:	b29b      	uxth	r3, r3
 800623c:	029b      	lsls	r3, r3, #10
 800623e:	b29b      	uxth	r3, r3
 8006240:	4313      	orrs	r3, r2
 8006242:	b29b      	uxth	r3, r3
 8006244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624c:	b29a      	uxth	r2, r3
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	801a      	strh	r2, [r3, #0]
 8006252:	e026      	b.n	80062a2 <PCD_EP_ISR_Handler+0x2ce>
 8006254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <PCD_EP_ISR_Handler+0x29e>
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800626a:	b29a      	uxth	r2, r3
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	801a      	strh	r2, [r3, #0]
 8006270:	e017      	b.n	80062a2 <PCD_EP_ISR_Handler+0x2ce>
 8006272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	085b      	lsrs	r3, r3, #1
 8006278:	647b      	str	r3, [r7, #68]	@ 0x44
 800627a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d002      	beq.n	800628c <PCD_EP_ISR_Handler+0x2b8>
 8006286:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006288:	3301      	adds	r3, #1
 800628a:	647b      	str	r3, [r7, #68]	@ 0x44
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	b29a      	uxth	r2, r3
 8006292:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006294:	b29b      	uxth	r3, r3
 8006296:	029b      	lsls	r3, r3, #10
 8006298:	b29b      	uxth	r3, r3
 800629a:	4313      	orrs	r3, r2
 800629c:	b29a      	uxth	r2, r3
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b2:	827b      	strh	r3, [r7, #18]
 80062b4:	8a7b      	ldrh	r3, [r7, #18]
 80062b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80062ba:	827b      	strh	r3, [r7, #18]
 80062bc:	8a7b      	ldrh	r3, [r7, #18]
 80062be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80062c2:	827b      	strh	r3, [r7, #18]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	8a7b      	ldrh	r3, [r7, #18]
 80062ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062da:	b29b      	uxth	r3, r3
 80062dc:	8013      	strh	r3, [r2, #0]
 80062de:	e22c      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	881b      	ldrh	r3, [r3, #0]
 80062f0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80062f4:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f280 80f6 	bge.w	80064ea <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29a      	uxth	r2, r3
 8006310:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8006314:	4013      	ands	r3, r2
 8006316:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	4413      	add	r3, r2
 8006328:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800632c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006330:	b292      	uxth	r2, r2
 8006332:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006334:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	00db      	lsls	r3, r3, #3
 8006340:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4413      	add	r3, r2
 8006348:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800634a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800634c:	7b1b      	ldrb	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d123      	bne.n	800639a <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635a:	b29b      	uxth	r3, r3
 800635c:	461a      	mov	r2, r3
 800635e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	4413      	add	r3, r2
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6812      	ldr	r2, [r2, #0]
 800636a:	4413      	add	r3, r2
 800636c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006376:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800637a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 808e 	beq.w	80064a0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800638a:	6959      	ldr	r1, [r3, #20]
 800638c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800638e:	88da      	ldrh	r2, [r3, #6]
 8006390:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006394:	f006 fb62 	bl	800ca5c <USB_ReadPMA>
 8006398:	e082      	b.n	80064a0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800639a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800639c:	78db      	ldrb	r3, [r3, #3]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d10a      	bne.n	80063b8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80063a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80063a6:	461a      	mov	r2, r3
 80063a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f9d3 	bl	8006756 <HAL_PCD_EP_DB_Receive>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80063b6:	e073      	b.n	80064a0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	461a      	mov	r2, r3
 80063be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	009b      	lsls	r3, r3, #2
 80063c4:	4413      	add	r3, r2
 80063c6:	881b      	ldrh	r3, [r3, #0]
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80063e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	461a      	mov	r2, r3
 8006402:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d022      	beq.n	800645c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800641e:	b29b      	uxth	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6812      	ldr	r2, [r2, #0]
 800642e:	4413      	add	r3, r2
 8006430:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800643a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800643e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006442:	2b00      	cmp	r3, #0
 8006444:	d02c      	beq.n	80064a0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800644c:	6959      	ldr	r1, [r3, #20]
 800644e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006450:	891a      	ldrh	r2, [r3, #8]
 8006452:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006456:	f006 fb01 	bl	800ca5c <USB_ReadPMA>
 800645a:	e021      	b.n	80064a0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4413      	add	r3, r2
 8006476:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006480:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8006484:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6818      	ldr	r0, [r3, #0]
 8006490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006492:	6959      	ldr	r1, [r3, #20]
 8006494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006496:	895a      	ldrh	r2, [r3, #10]
 8006498:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800649c:	f006 fade 	bl	800ca5c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80064a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064a2:	69da      	ldr	r2, [r3, #28]
 80064a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064a8:	441a      	add	r2, r3
 80064aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80064ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064b0:	695a      	ldr	r2, [r3, #20]
 80064b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80064b6:	441a      	add	r2, r3
 80064b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ba:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80064bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <PCD_EP_ISR_Handler+0x4fc>
 80064c4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80064c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d206      	bcs.n	80064de <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80064d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f00b fd5e 	bl	8011f98 <HAL_PCD_DataOutStageCallback>
 80064dc:	e005      	b.n	80064ea <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80064e4:	4618      	mov	r0, r3
 80064e6:	f004 fd8c 	bl	800b002 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80064ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80064ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 8121 	beq.w	800673a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 80064f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80064fc:	4613      	mov	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	4413      	add	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	3310      	adds	r3, #16
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	4413      	add	r3, r2
 800650a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	461a      	mov	r2, r3
 8006512:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8006522:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006526:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	461a      	mov	r2, r3
 8006530:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	441a      	add	r2, r3
 8006538:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800653c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006544:	b29b      	uxth	r3, r3
 8006546:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800654a:	78db      	ldrb	r3, [r3, #3]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f040 80a2 	bne.w	8006696 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8006552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006554:	2200      	movs	r2, #0
 8006556:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800655a:	7b1b      	ldrb	r3, [r3, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 8093 	beq.w	8006688 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006562:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800656a:	2b00      	cmp	r3, #0
 800656c:	d046      	beq.n	80065fc <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800656e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006570:	785b      	ldrb	r3, [r3, #1]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d126      	bne.n	80065c4 <PCD_EP_ISR_Handler+0x5f0>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006584:	b29b      	uxth	r3, r3
 8006586:	461a      	mov	r2, r3
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	4413      	add	r3, r2
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
 800658e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	00da      	lsls	r2, r3, #3
 8006594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006596:	4413      	add	r3, r2
 8006598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	881b      	ldrh	r3, [r3, #0]
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	801a      	strh	r2, [r3, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065bc:	b29a      	uxth	r2, r3
 80065be:	6a3b      	ldr	r3, [r7, #32]
 80065c0:	801a      	strh	r2, [r3, #0]
 80065c2:	e061      	b.n	8006688 <PCD_EP_ISR_Handler+0x6b4>
 80065c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065c6:	785b      	ldrb	r3, [r3, #1]
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d15d      	bne.n	8006688 <PCD_EP_ISR_Handler+0x6b4>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065da:	b29b      	uxth	r3, r3
 80065dc:	461a      	mov	r2, r3
 80065de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065e0:	4413      	add	r3, r2
 80065e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80065e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	00da      	lsls	r2, r3, #3
 80065ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065ec:	4413      	add	r3, r2
 80065ee:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80065f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80065f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f6:	2200      	movs	r2, #0
 80065f8:	801a      	strh	r2, [r3, #0]
 80065fa:	e045      	b.n	8006688 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006604:	785b      	ldrb	r3, [r3, #1]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d126      	bne.n	8006658 <PCD_EP_ISR_Handler+0x684>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006618:	b29b      	uxth	r3, r3
 800661a:	461a      	mov	r2, r3
 800661c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800661e:	4413      	add	r3, r2
 8006620:	637b      	str	r3, [r7, #52]	@ 0x34
 8006622:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	00da      	lsls	r2, r3, #3
 8006628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800662a:	4413      	add	r3, r2
 800662c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006630:	633b      	str	r3, [r7, #48]	@ 0x30
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	b29b      	uxth	r3, r3
 8006638:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800663c:	b29a      	uxth	r2, r3
 800663e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006640:	801a      	strh	r2, [r3, #0]
 8006642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b29b      	uxth	r3, r3
 8006648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800664c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006650:	b29a      	uxth	r2, r3
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	801a      	strh	r2, [r3, #0]
 8006656:	e017      	b.n	8006688 <PCD_EP_ISR_Handler+0x6b4>
 8006658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800665a:	785b      	ldrb	r3, [r3, #1]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d113      	bne.n	8006688 <PCD_EP_ISR_Handler+0x6b4>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006668:	b29b      	uxth	r3, r3
 800666a:	461a      	mov	r2, r3
 800666c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666e:	4413      	add	r3, r2
 8006670:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006672:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	00da      	lsls	r2, r3, #3
 8006678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800667a:	4413      	add	r3, r2
 800667c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006680:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	2200      	movs	r2, #0
 8006686:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f00b fc9d 	bl	8011fce <HAL_PCD_DataInStageCallback>
 8006694:	e051      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8006696:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800669a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d144      	bne.n	800672c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	461a      	mov	r2, r3
 80066ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	00db      	lsls	r3, r3, #3
 80066b4:	4413      	add	r3, r2
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	6812      	ldr	r2, [r2, #0]
 80066ba:	4413      	add	r3, r2
 80066bc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80066c0:	881b      	ldrh	r3, [r3, #0]
 80066c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80066c6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80066ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066cc:	699a      	ldr	r2, [r3, #24]
 80066ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d907      	bls.n	80066e6 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80066d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d8:	699a      	ldr	r2, [r3, #24]
 80066da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80066de:	1ad2      	subs	r2, r2, r3
 80066e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e2:	619a      	str	r2, [r3, #24]
 80066e4:	e002      	b.n	80066ec <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80066e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066e8:	2200      	movs	r2, #0
 80066ea:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80066ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d106      	bne.n	8006702 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80066f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	4619      	mov	r1, r3
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f00b fc67 	bl	8011fce <HAL_PCD_DataInStageCallback>
 8006700:	e01b      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8006702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006704:	695a      	ldr	r2, [r3, #20]
 8006706:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800670a:	441a      	add	r2, r3
 800670c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800670e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8006710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006712:	69da      	ldr	r2, [r3, #28]
 8006714:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006718:	441a      	add	r2, r3
 800671a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800671c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006724:	4618      	mov	r0, r3
 8006726:	f004 fc6c 	bl	800b002 <USB_EPStartXfer>
 800672a:	e006      	b.n	800673a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800672c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006730:	461a      	mov	r2, r3
 8006732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f000 f917 	bl	8006968 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8006742:	b29b      	uxth	r3, r3
 8006744:	b21b      	sxth	r3, r3
 8006746:	2b00      	cmp	r3, #0
 8006748:	f6ff ac49 	blt.w	8005fde <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	3758      	adds	r7, #88	@ 0x58
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b088      	sub	sp, #32
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	4613      	mov	r3, r2
 8006762:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006764:	88fb      	ldrh	r3, [r7, #6]
 8006766:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d07c      	beq.n	8006868 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	00db      	lsls	r3, r3, #3
 8006780:	4413      	add	r3, r2
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	4413      	add	r3, r2
 8006788:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006792:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	699a      	ldr	r2, [r3, #24]
 8006798:	8b7b      	ldrh	r3, [r7, #26]
 800679a:	429a      	cmp	r2, r3
 800679c:	d306      	bcc.n	80067ac <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	699a      	ldr	r2, [r3, #24]
 80067a2:	8b7b      	ldrh	r3, [r7, #26]
 80067a4:	1ad2      	subs	r2, r2, r3
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	619a      	str	r2, [r3, #24]
 80067aa:	e002      	b.n	80067b2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	2200      	movs	r2, #0
 80067b0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d123      	bne.n	8006802 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	461a      	mov	r2, r3
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	4413      	add	r3, r2
 80067c8:	881b      	ldrh	r3, [r3, #0]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d4:	833b      	strh	r3, [r7, #24]
 80067d6:	8b3b      	ldrh	r3, [r7, #24]
 80067d8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80067dc:	833b      	strh	r3, [r7, #24]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	461a      	mov	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	441a      	add	r2, r3
 80067ec:	8b3b      	ldrh	r3, [r7, #24]
 80067ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80067fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067fe:	b29b      	uxth	r3, r3
 8006800:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006802:	88fb      	ldrh	r3, [r7, #6]
 8006804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006808:	2b00      	cmp	r3, #0
 800680a:	d01f      	beq.n	800684c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	461a      	mov	r2, r3
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	881b      	ldrh	r3, [r3, #0]
 800681c:	b29b      	uxth	r3, r3
 800681e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006822:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006826:	82fb      	strh	r3, [r7, #22]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	461a      	mov	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	441a      	add	r2, r3
 8006836:	8afb      	ldrh	r3, [r7, #22]
 8006838:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800683c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006844:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006848:	b29b      	uxth	r3, r3
 800684a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800684c:	8b7b      	ldrh	r3, [r7, #26]
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 8085 	beq.w	800695e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6818      	ldr	r0, [r3, #0]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6959      	ldr	r1, [r3, #20]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	891a      	ldrh	r2, [r3, #8]
 8006860:	8b7b      	ldrh	r3, [r7, #26]
 8006862:	f006 f8fb 	bl	800ca5c <USB_ReadPMA>
 8006866:	e07a      	b.n	800695e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006870:	b29b      	uxth	r3, r3
 8006872:	461a      	mov	r2, r3
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	4413      	add	r3, r2
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	6812      	ldr	r2, [r2, #0]
 8006880:	4413      	add	r3, r2
 8006882:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006886:	881b      	ldrh	r3, [r3, #0]
 8006888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800688c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	8b7b      	ldrh	r3, [r7, #26]
 8006894:	429a      	cmp	r2, r3
 8006896:	d306      	bcc.n	80068a6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	8b7b      	ldrh	r3, [r7, #26]
 800689e:	1ad2      	subs	r2, r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	619a      	str	r2, [r3, #24]
 80068a4:	e002      	b.n	80068ac <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	2200      	movs	r2, #0
 80068aa:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d123      	bne.n	80068fc <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ce:	83fb      	strh	r3, [r7, #30]
 80068d0:	8bfb      	ldrh	r3, [r7, #30]
 80068d2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80068d6:	83fb      	strh	r3, [r7, #30]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	441a      	add	r2, r3
 80068e6:	8bfb      	ldrh	r3, [r7, #30]
 80068e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80068ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80068f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80068f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006902:	2b00      	cmp	r3, #0
 8006904:	d11f      	bne.n	8006946 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	4413      	add	r3, r2
 8006914:	881b      	ldrh	r3, [r3, #0]
 8006916:	b29b      	uxth	r3, r3
 8006918:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800691c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006920:	83bb      	strh	r3, [r7, #28]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	461a      	mov	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	441a      	add	r2, r3
 8006930:	8bbb      	ldrh	r3, [r7, #28]
 8006932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800693a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800693e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006942:	b29b      	uxth	r3, r3
 8006944:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006946:	8b7b      	ldrh	r3, [r7, #26]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d008      	beq.n	800695e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6818      	ldr	r0, [r3, #0]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	6959      	ldr	r1, [r3, #20]
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	895a      	ldrh	r2, [r3, #10]
 8006958:	8b7b      	ldrh	r3, [r7, #26]
 800695a:	f006 f87f 	bl	800ca5c <USB_ReadPMA>
    }
  }

  return count;
 800695e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3720      	adds	r7, #32
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b0a4      	sub	sp, #144	@ 0x90
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	4613      	mov	r3, r2
 8006974:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006976:	88fb      	ldrh	r3, [r7, #6]
 8006978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 81db 	beq.w	8006d38 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	68fa      	ldr	r2, [r7, #12]
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	4413      	add	r3, r2
 800699c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069a6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d907      	bls.n	80069c6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80069be:	1ad2      	subs	r2, r2, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	619a      	str	r2, [r3, #24]
 80069c4:	e002      	b.n	80069cc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	2200      	movs	r2, #0
 80069ca:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f040 80b9 	bne.w	8006b48 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	785b      	ldrb	r3, [r3, #1]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d126      	bne.n	8006a2c <HAL_PCD_EP_DB_Transmit+0xc4>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	461a      	mov	r2, r3
 80069f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069f2:	4413      	add	r3, r2
 80069f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	00da      	lsls	r2, r3, #3
 80069fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fe:	4413      	add	r3, r2
 8006a00:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	801a      	strh	r2, [r3, #0]
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	881b      	ldrh	r3, [r3, #0]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	801a      	strh	r2, [r3, #0]
 8006a2a:	e01a      	b.n	8006a62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d116      	bne.n	8006a62 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	461a      	mov	r2, r3
 8006a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a48:	4413      	add	r3, r2
 8006a4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	00da      	lsls	r2, r3, #3
 8006a52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a54:	4413      	add	r3, r2
 8006a56:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006a5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	2200      	movs	r2, #0
 8006a60:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d126      	bne.n	8006abe <HAL_PCD_EP_DB_Transmit+0x156>
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	61fb      	str	r3, [r7, #28]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	461a      	mov	r2, r3
 8006a82:	69fb      	ldr	r3, [r7, #28]
 8006a84:	4413      	add	r3, r2
 8006a86:	61fb      	str	r3, [r7, #28]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	00da      	lsls	r2, r3, #3
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	4413      	add	r3, r2
 8006a92:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006a96:	61bb      	str	r3, [r7, #24]
 8006a98:	69bb      	ldr	r3, [r7, #24]
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006aa2:	b29a      	uxth	r2, r3
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	801a      	strh	r2, [r3, #0]
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	881b      	ldrh	r3, [r3, #0]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e017      	b.n	8006aee <HAL_PCD_EP_DB_Transmit+0x186>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	785b      	ldrb	r3, [r3, #1]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d113      	bne.n	8006aee <HAL_PCD_EP_DB_Transmit+0x186>
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	461a      	mov	r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad4:	4413      	add	r3, r2
 8006ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	00da      	lsls	r2, r3, #3
 8006ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae0:	4413      	add	r3, r2
 8006ae2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ae6:	623b      	str	r3, [r7, #32]
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	2200      	movs	r2, #0
 8006aec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	4619      	mov	r1, r3
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f00b fa6a 	bl	8011fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	f000 82fa 	beq.w	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	4413      	add	r3, r2
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b20:	82fb      	strh	r3, [r7, #22]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	441a      	add	r2, r3
 8006b30:	8afb      	ldrh	r3, [r7, #22]
 8006b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b3a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	8013      	strh	r3, [r2, #0]
 8006b46:	e2d8      	b.n	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006b48:	88fb      	ldrh	r3, [r7, #6]
 8006b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d021      	beq.n	8006b96 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	461a      	mov	r2, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	781b      	ldrb	r3, [r3, #0]
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	4413      	add	r3, r2
 8006b60:	881b      	ldrh	r3, [r3, #0]
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	441a      	add	r2, r3
 8006b7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006b82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006b8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b92:	b29b      	uxth	r3, r3
 8006b94:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	f040 82ac 	bne.w	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006baa:	441a      	add	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	69da      	ldr	r2, [r3, #28]
 8006bb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006bb8:	441a      	add	r2, r3
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6a1a      	ldr	r2, [r3, #32]
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d30b      	bcc.n	8006be2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006bda:	1ad2      	subs	r2, r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	621a      	str	r2, [r3, #32]
 8006be0:	e017      	b.n	8006c12 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d108      	bne.n	8006bfc <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8006bea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006bee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006bfa:	e00a      	b.n	8006c12 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	6a1b      	ldr	r3, [r3, #32]
 8006c08:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	785b      	ldrb	r3, [r3, #1]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d165      	bne.n	8006ce6 <HAL_PCD_EP_DB_Transmit+0x37e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c2e:	4413      	add	r3, r2
 8006c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	00da      	lsls	r2, r3, #3
 8006c38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c3a:	4413      	add	r3, r2
 8006c3c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c50:	801a      	strh	r2, [r3, #0]
 8006c52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c58:	d91d      	bls.n	8006c96 <HAL_PCD_EP_DB_Transmit+0x32e>
 8006c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c66:	f003 031f 	and.w	r3, r3, #31
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d102      	bne.n	8006c74 <HAL_PCD_EP_DB_Transmit+0x30c>
 8006c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c70:	3b01      	subs	r3, #1
 8006c72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	029b      	lsls	r3, r3, #10
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	4313      	orrs	r3, r2
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c8e:	b29a      	uxth	r2, r3
 8006c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c92:	801a      	strh	r2, [r3, #0]
 8006c94:	e044      	b.n	8006d20 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006c96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d10a      	bne.n	8006cb4 <HAL_PCD_EP_DB_Transmit+0x34c>
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cb0:	801a      	strh	r2, [r3, #0]
 8006cb2:	e035      	b.n	8006d20 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cb8:	085b      	lsrs	r3, r3, #1
 8006cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d002      	beq.n	8006cce <HAL_PCD_EP_DB_Transmit+0x366>
 8006cc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cca:	3301      	adds	r3, #1
 8006ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	881b      	ldrh	r3, [r3, #0]
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	029b      	lsls	r3, r3, #10
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce2:	801a      	strh	r2, [r3, #0]
 8006ce4:	e01c      	b.n	8006d20 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	785b      	ldrb	r3, [r3, #1]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d118      	bne.n	8006d20 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d02:	4413      	add	r3, r2
 8006d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	00da      	lsls	r2, r3, #3
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d1e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6818      	ldr	r0, [r3, #0]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	6959      	ldr	r1, [r3, #20]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	891a      	ldrh	r2, [r3, #8]
 8006d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	f005 fe51 	bl	800c9d8 <USB_WritePMA>
 8006d36:	e1e0      	b.n	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	461a      	mov	r2, r3
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	6812      	ldr	r2, [r2, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d5c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d307      	bcc.n	8006d7c <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	699a      	ldr	r2, [r3, #24]
 8006d70:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006d74:	1ad2      	subs	r2, r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	619a      	str	r2, [r3, #24]
 8006d7a:	e002      	b.n	8006d82 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f040 80c0 	bne.w	8006f0c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	785b      	ldrb	r3, [r3, #1]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d126      	bne.n	8006de2 <HAL_PCD_EP_DB_Transmit+0x47a>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006da8:	4413      	add	r3, r2
 8006daa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	00da      	lsls	r2, r3, #3
 8006db2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006db4:	4413      	add	r3, r2
 8006db6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006dba:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dc6:	b29a      	uxth	r2, r3
 8006dc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dca:	801a      	strh	r2, [r3, #0]
 8006dcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dce:	881b      	ldrh	r3, [r3, #0]
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dde:	801a      	strh	r2, [r3, #0]
 8006de0:	e01a      	b.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	785b      	ldrb	r3, [r3, #1]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d116      	bne.n	8006e18 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	667b      	str	r3, [r7, #100]	@ 0x64
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	461a      	mov	r2, r3
 8006dfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006dfe:	4413      	add	r3, r2
 8006e00:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	00da      	lsls	r2, r3, #3
 8006e08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006e10:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e14:	2200      	movs	r2, #0
 8006e16:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d12b      	bne.n	8006e7e <HAL_PCD_EP_DB_Transmit+0x516>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	461a      	mov	r2, r3
 8006e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e3a:	4413      	add	r3, r2
 8006e3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	00da      	lsls	r2, r3, #3
 8006e44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e46:	4413      	add	r3, r2
 8006e48:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006e50:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e62:	801a      	strh	r2, [r3, #0]
 8006e64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e68:	881b      	ldrh	r3, [r3, #0]
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006e7a:	801a      	strh	r2, [r3, #0]
 8006e7c:	e017      	b.n	8006eae <HAL_PCD_EP_DB_Transmit+0x546>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	785b      	ldrb	r3, [r3, #1]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d113      	bne.n	8006eae <HAL_PCD_EP_DB_Transmit+0x546>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e8e:	b29b      	uxth	r3, r3
 8006e90:	461a      	mov	r2, r3
 8006e92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e94:	4413      	add	r3, r2
 8006e96:	677b      	str	r3, [r7, #116]	@ 0x74
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	00da      	lsls	r2, r3, #3
 8006e9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006ea0:	4413      	add	r3, r2
 8006ea2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006ea6:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ea8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006eaa:	2200      	movs	r2, #0
 8006eac:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f00b f88a 	bl	8011fce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006eba:	88fb      	ldrh	r3, [r7, #6]
 8006ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f040 811a 	bne.w	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4413      	add	r3, r2
 8006ed4:	881b      	ldrh	r3, [r3, #0]
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006edc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ee0:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	461a      	mov	r2, r3
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	441a      	add	r2, r3
 8006ef2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006ef6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006efa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006efe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	8013      	strh	r3, [r2, #0]
 8006f0a:	e0f6      	b.n	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006f0c:	88fb      	ldrh	r3, [r7, #6]
 8006f0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d121      	bne.n	8006f5a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	009b      	lsls	r3, r3, #2
 8006f22:	4413      	add	r3, r2
 8006f24:	881b      	ldrh	r3, [r3, #0]
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	461a      	mov	r2, r3
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	441a      	add	r2, r3
 8006f42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006f46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f4e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006f52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	f040 80ca 	bne.w	80070fa <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	695a      	ldr	r2, [r3, #20]
 8006f6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f6e:	441a      	add	r2, r3
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	69da      	ldr	r2, [r3, #28]
 8006f78:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006f7c:	441a      	add	r2, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d30b      	bcc.n	8006fa6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	6a1a      	ldr	r2, [r3, #32]
 8006f9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f9e:	1ad2      	subs	r2, r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	621a      	str	r2, [r3, #32]
 8006fa4:	e017      	b.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6a1b      	ldr	r3, [r3, #32]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d108      	bne.n	8006fc0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006fae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006fb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8006fbe:	e00a      	b.n	8006fd6 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	657b      	str	r3, [r7, #84]	@ 0x54
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	785b      	ldrb	r3, [r3, #1]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d165      	bne.n	80070b0 <HAL_PCD_EP_DB_Transmit+0x748>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	4413      	add	r3, r2
 8006ffa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00da      	lsls	r2, r3, #3
 8007002:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007004:	4413      	add	r3, r2
 8007006:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800700a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800700c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800700e:	881b      	ldrh	r3, [r3, #0]
 8007010:	b29b      	uxth	r3, r3
 8007012:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007016:	b29a      	uxth	r2, r3
 8007018:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800701a:	801a      	strh	r2, [r3, #0]
 800701c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007020:	2b3e      	cmp	r3, #62	@ 0x3e
 8007022:	d91d      	bls.n	8007060 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007024:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007028:	095b      	lsrs	r3, r3, #5
 800702a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007030:	f003 031f 	and.w	r3, r3, #31
 8007034:	2b00      	cmp	r3, #0
 8007036:	d102      	bne.n	800703e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007038:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800703a:	3b01      	subs	r3, #1
 800703c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800703e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007040:	881b      	ldrh	r3, [r3, #0]
 8007042:	b29a      	uxth	r2, r3
 8007044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007046:	b29b      	uxth	r3, r3
 8007048:	029b      	lsls	r3, r3, #10
 800704a:	b29b      	uxth	r3, r3
 800704c:	4313      	orrs	r3, r2
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007058:	b29a      	uxth	r2, r3
 800705a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800705c:	801a      	strh	r2, [r3, #0]
 800705e:	e041      	b.n	80070e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10a      	bne.n	800707e <HAL_PCD_EP_DB_Transmit+0x716>
 8007068:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	b29b      	uxth	r3, r3
 800706e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007076:	b29a      	uxth	r2, r3
 8007078:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800707a:	801a      	strh	r2, [r3, #0]
 800707c:	e032      	b.n	80070e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 800707e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007082:	085b      	lsrs	r3, r3, #1
 8007084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007086:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d002      	beq.n	8007098 <HAL_PCD_EP_DB_Transmit+0x730>
 8007092:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007094:	3301      	adds	r3, #1
 8007096:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007098:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800709a:	881b      	ldrh	r3, [r3, #0]
 800709c:	b29a      	uxth	r2, r3
 800709e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	029b      	lsls	r3, r3, #10
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	4313      	orrs	r3, r2
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070ac:	801a      	strh	r2, [r3, #0]
 80070ae:	e019      	b.n	80070e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	785b      	ldrb	r3, [r3, #1]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d115      	bne.n	80070e4 <HAL_PCD_EP_DB_Transmit+0x77c>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	461a      	mov	r2, r3
 80070c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070c6:	4413      	add	r3, r2
 80070c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	00da      	lsls	r2, r3, #3
 80070d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80070d2:	4413      	add	r3, r2
 80070d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80070d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80070da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070e2:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6818      	ldr	r0, [r3, #0]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	6959      	ldr	r1, [r3, #20]
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	895a      	ldrh	r2, [r3, #10]
 80070f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	f005 fc6f 	bl	800c9d8 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	881b      	ldrh	r3, [r3, #0]
 800710a:	b29b      	uxth	r3, r3
 800710c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007114:	82bb      	strh	r3, [r7, #20]
 8007116:	8abb      	ldrh	r3, [r7, #20]
 8007118:	f083 0310 	eor.w	r3, r3, #16
 800711c:	82bb      	strh	r3, [r7, #20]
 800711e:	8abb      	ldrh	r3, [r7, #20]
 8007120:	f083 0320 	eor.w	r3, r3, #32
 8007124:	82bb      	strh	r3, [r7, #20]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	781b      	ldrb	r3, [r3, #0]
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	441a      	add	r2, r3
 8007134:	8abb      	ldrh	r3, [r7, #20]
 8007136:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800713a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800713e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007146:	b29b      	uxth	r3, r3
 8007148:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800714a:	2300      	movs	r3, #0
}
 800714c:	4618      	mov	r0, r3
 800714e:	3790      	adds	r7, #144	@ 0x90
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007154:	b480      	push	{r7}
 8007156:	b087      	sub	sp, #28
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	607b      	str	r3, [r7, #4]
 800715e:	460b      	mov	r3, r1
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	4613      	mov	r3, r2
 8007164:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007166:	897b      	ldrh	r3, [r7, #10]
 8007168:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007172:	897b      	ldrh	r3, [r7, #10]
 8007174:	f003 0207 	and.w	r2, r3, #7
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	00db      	lsls	r3, r3, #3
 8007180:	3310      	adds	r3, #16
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4413      	add	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
 8007188:	e009      	b.n	800719e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800718a:	897a      	ldrh	r2, [r7, #10]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	00db      	lsls	r3, r3, #3
 8007194:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	4413      	add	r3, r2
 800719c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800719e:	893b      	ldrh	r3, [r7, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d107      	bne.n	80071b4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2200      	movs	r2, #0
 80071a8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	b29a      	uxth	r2, r3
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	80da      	strh	r2, [r3, #6]
 80071b2:	e00b      	b.n	80071cc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2201      	movs	r2, #1
 80071b8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	b29a      	uxth	r2, r3
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	0c1b      	lsrs	r3, r3, #16
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80071fe:	b29b      	uxth	r3, r3
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	b29a      	uxth	r2, r3
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8007212:	b29b      	uxth	r3, r3
 8007214:	f043 0302 	orr.w	r3, r3, #2
 8007218:	b29a      	uxth	r2, r3
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8007220:	2300      	movs	r3, #0
}
 8007222:	4618      	mov	r0, r3
 8007224:	3714      	adds	r7, #20
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
	...

08007230 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007234:	4b05      	ldr	r3, [pc, #20]	@ (800724c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a04      	ldr	r2, [pc, #16]	@ (800724c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800723a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800723e:	6013      	str	r3, [r2, #0]
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	58000400 	.word	0x58000400

08007250 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8007254:	4b04      	ldr	r3, [pc, #16]	@ (8007268 <HAL_PWREx_GetVoltageRange+0x18>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800725c:	4618      	mov	r0, r3
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	58000400 	.word	0x58000400

0800726c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8007270:	4b05      	ldr	r3, [pc, #20]	@ (8007288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	4a04      	ldr	r2, [pc, #16]	@ (8007288 <HAL_PWREx_EnableVddUSB+0x1c>)
 8007276:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800727a:	6053      	str	r3, [r2, #4]
}
 800727c:	bf00      	nop
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	58000400 	.word	0x58000400

0800728c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800728c:	b480      	push	{r7}
 800728e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800729e:	d101      	bne.n	80072a4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	46bd      	mov	sp, r7
 80072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ae:	4770      	bx	lr

080072b0 <LL_RCC_HSE_Enable>:
{
 80072b0:	b480      	push	{r7}
 80072b2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80072b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80072c2:	6013      	str	r3, [r2, #0]
}
 80072c4:	bf00      	nop
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <LL_RCC_HSE_Disable>:
{
 80072ce:	b480      	push	{r7}
 80072d0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80072d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80072dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80072e0:	6013      	str	r3, [r2, #0]
}
 80072e2:	bf00      	nop
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <LL_RCC_HSE_IsReady>:
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80072f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80072fe:	d101      	bne.n	8007304 <LL_RCC_HSE_IsReady+0x18>
 8007300:	2301      	movs	r3, #1
 8007302:	e000      	b.n	8007306 <LL_RCC_HSE_IsReady+0x1a>
 8007304:	2300      	movs	r3, #0
}
 8007306:	4618      	mov	r0, r3
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <LL_RCC_HSI_Enable>:
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8007314:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800731e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007322:	6013      	str	r3, [r2, #0]
}
 8007324:	bf00      	nop
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <LL_RCC_HSI_Disable>:
{
 800732e:	b480      	push	{r7}
 8007330:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8007332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800733c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007340:	6013      	str	r3, [r2, #0]
}
 8007342:	bf00      	nop
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <LL_RCC_HSI_IsReady>:
{
 800734c:	b480      	push	{r7}
 800734e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007350:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800735a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800735e:	d101      	bne.n	8007364 <LL_RCC_HSI_IsReady+0x18>
 8007360:	2301      	movs	r3, #1
 8007362:	e000      	b.n	8007366 <LL_RCC_HSI_IsReady+0x1a>
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007378:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	061b      	lsls	r3, r3, #24
 8007386:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800738a:	4313      	orrs	r3, r2
 800738c:	604b      	str	r3, [r1, #4]
}
 800738e:	bf00      	nop
 8007390:	370c      	adds	r7, #12
 8007392:	46bd      	mov	sp, r7
 8007394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007398:	4770      	bx	lr

0800739a <LL_RCC_HSI48_Enable>:
{
 800739a:	b480      	push	{r7}
 800739c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800739e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073aa:	f043 0301 	orr.w	r3, r3, #1
 80073ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80073b2:	bf00      	nop
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <LL_RCC_HSI48_Disable>:
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80073c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073c8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80073cc:	f023 0301 	bic.w	r3, r3, #1
 80073d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80073d4:	bf00      	nop
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <LL_RCC_HSI48_IsReady>:
{
 80073de:	b480      	push	{r7}
 80073e0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80073e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80073e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d101      	bne.n	80073f6 <LL_RCC_HSI48_IsReady+0x18>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <LL_RCC_HSI48_IsReady+0x1a>
 80073f6:	2300      	movs	r3, #0
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <LL_RCC_LSE_Enable>:
{
 8007402:	b480      	push	{r7}
 8007404:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800740a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800740e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007412:	f043 0301 	orr.w	r3, r3, #1
 8007416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800741a:	bf00      	nop
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr

08007424 <LL_RCC_LSE_Disable>:
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8007428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800742c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800743c:	bf00      	nop
 800743e:	46bd      	mov	sp, r7
 8007440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007444:	4770      	bx	lr

08007446 <LL_RCC_LSE_EnableBypass>:
{
 8007446:	b480      	push	{r7}
 8007448:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800744a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007452:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007456:	f043 0304 	orr.w	r3, r3, #4
 800745a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800745e:	bf00      	nop
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <LL_RCC_LSE_DisableBypass>:
{
 8007468:	b480      	push	{r7}
 800746a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800746c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007470:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007474:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007478:	f023 0304 	bic.w	r3, r3, #4
 800747c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007480:	bf00      	nop
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <LL_RCC_LSE_IsReady>:
{
 800748a:	b480      	push	{r7}
 800748c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800748e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007492:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b02      	cmp	r3, #2
 800749c:	d101      	bne.n	80074a2 <LL_RCC_LSE_IsReady+0x18>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <LL_RCC_LSE_IsReady+0x1a>
 80074a2:	2300      	movs	r3, #0
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <LL_RCC_LSI1_Enable>:
{
 80074ae:	b480      	push	{r7}
 80074b0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80074b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074ba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074be:	f043 0301 	orr.w	r3, r3, #1
 80074c2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80074c6:	bf00      	nop
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <LL_RCC_LSI1_Disable>:
{
 80074d0:	b480      	push	{r7}
 80074d2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80074d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074e0:	f023 0301 	bic.w	r3, r3, #1
 80074e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80074e8:	bf00      	nop
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <LL_RCC_LSI1_IsReady>:
{
 80074f2:	b480      	push	{r7}
 80074f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d101      	bne.n	800750a <LL_RCC_LSI1_IsReady+0x18>
 8007506:	2301      	movs	r3, #1
 8007508:	e000      	b.n	800750c <LL_RCC_LSI1_IsReady+0x1a>
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	46bd      	mov	sp, r7
 8007510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007514:	4770      	bx	lr

08007516 <LL_RCC_LSI2_Enable>:
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007522:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007526:	f043 0304 	orr.w	r3, r3, #4
 800752a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800752e:	bf00      	nop
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <LL_RCC_LSI2_Disable>:
{
 8007538:	b480      	push	{r7}
 800753a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800753c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007540:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007544:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007548:	f023 0304 	bic.w	r3, r3, #4
 800754c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <LL_RCC_LSI2_IsReady>:
{
 800755a:	b480      	push	{r7}
 800755c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800755e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007562:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b08      	cmp	r3, #8
 800756c:	d101      	bne.n	8007572 <LL_RCC_LSI2_IsReady+0x18>
 800756e:	2301      	movs	r3, #1
 8007570:	e000      	b.n	8007574 <LL_RCC_LSI2_IsReady+0x1a>
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <LL_RCC_LSI2_SetTrimming>:
{
 800757e:	b480      	push	{r7}
 8007580:	b083      	sub	sp, #12
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8007586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800758a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800758e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800759a:	4313      	orrs	r3, r2
 800759c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <LL_RCC_MSI_Enable>:
{
 80075ac:	b480      	push	{r7}
 80075ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80075b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075ba:	f043 0301 	orr.w	r3, r3, #1
 80075be:	6013      	str	r3, [r2, #0]
}
 80075c0:	bf00      	nop
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <LL_RCC_MSI_Disable>:
{
 80075ca:	b480      	push	{r7}
 80075cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075d8:	f023 0301 	bic.w	r3, r3, #1
 80075dc:	6013      	str	r3, [r2, #0]
}
 80075de:	bf00      	nop
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <LL_RCC_MSI_IsReady>:
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80075ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f003 0302 	and.w	r3, r3, #2
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d101      	bne.n	80075fe <LL_RCC_MSI_IsReady+0x16>
 80075fa:	2301      	movs	r3, #1
 80075fc:	e000      	b.n	8007600 <LL_RCC_MSI_IsReady+0x18>
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <LL_RCC_MSI_SetRange>:
{
 800760a:	b480      	push	{r7}
 800760c:	b083      	sub	sp, #12
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8007612:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800761c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4313      	orrs	r3, r2
 8007624:	600b      	str	r3, [r1, #0]
}
 8007626:	bf00      	nop
 8007628:	370c      	adds	r7, #12
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <LL_RCC_MSI_GetRange>:
{
 8007632:	b480      	push	{r7}
 8007634:	b083      	sub	sp, #12
 8007636:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8007638:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007642:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2bb0      	cmp	r3, #176	@ 0xb0
 8007648:	d901      	bls.n	800764e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800764a:	23b0      	movs	r3, #176	@ 0xb0
 800764c:	607b      	str	r3, [r7, #4]
  return msiRange;
 800764e:	687b      	ldr	r3, [r7, #4]
}
 8007650:	4618      	mov	r0, r3
 8007652:	370c      	adds	r7, #12
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <LL_RCC_MSI_SetCalibTrimming>:
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8007664:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	021b      	lsls	r3, r3, #8
 8007672:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007676:	4313      	orrs	r3, r2
 8007678:	604b      	str	r3, [r1, #4]
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <LL_RCC_SetSysClkSource>:
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800768e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f023 0203 	bic.w	r2, r3, #3
 8007698:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]
}
 80076a2:	bf00      	nop
 80076a4:	370c      	adds	r7, #12
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <LL_RCC_GetSysClkSource>:
{
 80076ae:	b480      	push	{r7}
 80076b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80076b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 030c 	and.w	r3, r3, #12
}
 80076bc:	4618      	mov	r0, r3
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr

080076c6 <LL_RCC_SetAHBPrescaler>:
{
 80076c6:	b480      	push	{r7}
 80076c8:	b083      	sub	sp, #12
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80076ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80076d8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4313      	orrs	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
}
 80076e2:	bf00      	nop
 80076e4:	370c      	adds	r7, #12
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr

080076ee <LL_C2_RCC_SetAHBPrescaler>:
{
 80076ee:	b480      	push	{r7}
 80076f0:	b083      	sub	sp, #12
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80076f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80076fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80076fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007702:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800770e:	bf00      	nop
 8007710:	370c      	adds	r7, #12
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <LL_RCC_SetAHB4Prescaler>:
{
 800771a:	b480      	push	{r7}
 800771c:	b083      	sub	sp, #12
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8007722:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007726:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800772a:	f023 020f 	bic.w	r2, r3, #15
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	091b      	lsrs	r3, r3, #4
 8007732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <LL_RCC_SetAPB1Prescaler>:
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800775a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4313      	orrs	r3, r2
 8007762:	608b      	str	r3, [r1, #8]
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <LL_RCC_SetAPB2Prescaler>:
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800777c:	689b      	ldr	r3, [r3, #8]
 800777e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007782:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	4313      	orrs	r3, r2
 800778a:	608b      	str	r3, [r1, #8]
}
 800778c:	bf00      	nop
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <LL_RCC_GetAHBPrescaler>:
{
 8007798:	b480      	push	{r7}
 800779a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800779c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077a0:	689b      	ldr	r3, [r3, #8]
 80077a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <LL_RCC_GetAHB4Prescaler>:
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80077b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <LL_RCC_GetAPB1Prescaler>:
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80077d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80077da:	4618      	mov	r0, r3
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <LL_RCC_GetAPB2Prescaler>:
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80077e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80077fc:	b480      	push	{r7}
 80077fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800780a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800780e:	6013      	str	r3, [r2, #0]
}
 8007810:	bf00      	nop
 8007812:	46bd      	mov	sp, r7
 8007814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007818:	4770      	bx	lr

0800781a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800781a:	b480      	push	{r7}
 800781c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800781e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007828:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800782c:	6013      	str	r3, [r2, #0]
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800783c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007846:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800784a:	d101      	bne.n	8007850 <LL_RCC_PLL_IsReady+0x18>
 800784c:	2301      	movs	r3, #1
 800784e:	e000      	b.n	8007852 <LL_RCC_PLL_IsReady+0x1a>
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800785c:	b480      	push	{r7}
 800785e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007864:	68db      	ldr	r3, [r3, #12]
 8007866:	0a1b      	lsrs	r3, r3, #8
 8007868:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800786c:	4618      	mov	r0, r3
 800786e:	46bd      	mov	sp, r7
 8007870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007874:	4770      	bx	lr

08007876 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8007876:	b480      	push	{r7}
 8007878:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800787a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8007884:	4618      	mov	r0, r3
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800788e:	b480      	push	{r7}
 8007890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007892:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800789c:	4618      	mov	r0, r3
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80078aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f003 0303 	and.w	r3, r3, #3
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80078be:	b480      	push	{r7}
 80078c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80078c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80078cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078d0:	d101      	bne.n	80078d6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr

080078e2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80078e2:	b480      	push	{r7}
 80078e4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80078e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80078ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80078ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80078f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80078f6:	d101      	bne.n	80078fc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80078f8:	2301      	movs	r3, #1
 80078fa:	e000      	b.n	80078fe <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8007908:	b480      	push	{r7}
 800790a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800790c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007910:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8007914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800791c:	d101      	bne.n	8007922 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800792e:	b480      	push	{r7}
 8007930:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007940:	d101      	bne.n	8007946 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007942:	2301      	movs	r3, #1
 8007944:	e000      	b.n	8007948 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007946:	2300      	movs	r3, #0
}
 8007948:	4618      	mov	r0, r3
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007964:	d101      	bne.n	800796a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007978:	b590      	push	{r4, r7, lr}
 800797a:	b08d      	sub	sp, #52	@ 0x34
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d101      	bne.n	800798a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e363      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 808d 	beq.w	8007ab2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007998:	f7ff fe89 	bl	80076ae <LL_RCC_GetSysClkSource>
 800799c:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800799e:	f7ff ff82 	bl	80078a6 <LL_RCC_PLL_GetMainSource>
 80079a2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80079a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_RCC_OscConfig+0x3e>
 80079aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079ac:	2b0c      	cmp	r3, #12
 80079ae:	d147      	bne.n	8007a40 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d144      	bne.n	8007a40 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e347      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80079c6:	f7ff fe34 	bl	8007632 <LL_RCC_MSI_GetRange>
 80079ca:	4603      	mov	r3, r0
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d914      	bls.n	80079fa <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079d4:	4618      	mov	r0, r3
 80079d6:	f000 fd2f 	bl	8008438 <RCC_SetFlashLatencyFromMSIRange>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e336      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079e8:	4618      	mov	r0, r3
 80079ea:	f7ff fe0e 	bl	800760a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fe32 	bl	800765c <LL_RCC_MSI_SetCalibTrimming>
 80079f8:	e013      	b.n	8007a22 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fe:	4618      	mov	r0, r3
 8007a00:	f7ff fe03 	bl	800760a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7ff fe27 	bl	800765c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fd10 	bl	8008438 <RCC_SetFlashLatencyFromMSIRange>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e317      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007a22:	f000 fcc9 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 8007a26:	4603      	mov	r3, r0
 8007a28:	4aa4      	ldr	r2, [pc, #656]	@ (8007cbc <HAL_RCC_OscConfig+0x344>)
 8007a2a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a2c:	4ba4      	ldr	r3, [pc, #656]	@ (8007cc0 <HAL_RCC_OscConfig+0x348>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fb f839 	bl	8002aa8 <HAL_InitTick>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d039      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e308      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	69db      	ldr	r3, [r3, #28]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01e      	beq.n	8007a86 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a48:	f7ff fdb0 	bl	80075ac <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a4c:	f7fb f87a 	bl	8002b44 <HAL_GetTick>
 8007a50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a54:	f7fb f876 	bl	8002b44 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e2f5      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007a66:	f7ff fdbf 	bl	80075e8 <LL_RCC_MSI_IsReady>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d0f1      	beq.n	8007a54 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7ff fdc8 	bl	800760a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7ff fdec 	bl	800765c <LL_RCC_MSI_SetCalibTrimming>
 8007a84:	e015      	b.n	8007ab2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a86:	f7ff fda0 	bl	80075ca <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a8a:	f7fb f85b 	bl	8002b44 <HAL_GetTick>
 8007a8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007a90:	e008      	b.n	8007aa4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a92:	f7fb f857 	bl	8002b44 <HAL_GetTick>
 8007a96:	4602      	mov	r2, r0
 8007a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d901      	bls.n	8007aa4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e2d6      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007aa4:	f7ff fda0 	bl	80075e8 <LL_RCC_MSI_IsReady>
 8007aa8:	4603      	mov	r3, r0
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1f1      	bne.n	8007a92 <HAL_RCC_OscConfig+0x11a>
 8007aae:	e000      	b.n	8007ab2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007ab0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d047      	beq.n	8007b4e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007abe:	f7ff fdf6 	bl	80076ae <LL_RCC_GetSysClkSource>
 8007ac2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ac4:	f7ff feef 	bl	80078a6 <LL_RCC_PLL_GetMainSource>
 8007ac8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007aca:	6a3b      	ldr	r3, [r7, #32]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d005      	beq.n	8007adc <HAL_RCC_OscConfig+0x164>
 8007ad0:	6a3b      	ldr	r3, [r7, #32]
 8007ad2:	2b0c      	cmp	r3, #12
 8007ad4:	d108      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b03      	cmp	r3, #3
 8007ada:	d105      	bne.n	8007ae8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d134      	bne.n	8007b4e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e2b4      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007af0:	d102      	bne.n	8007af8 <HAL_RCC_OscConfig+0x180>
 8007af2:	f7ff fbdd 	bl	80072b0 <LL_RCC_HSE_Enable>
 8007af6:	e001      	b.n	8007afc <HAL_RCC_OscConfig+0x184>
 8007af8:	f7ff fbe9 	bl	80072ce <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b04:	f7fb f81e 	bl	8002b44 <HAL_GetTick>
 8007b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b0c:	f7fb f81a 	bl	8002b44 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b64      	cmp	r3, #100	@ 0x64
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e299      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007b1e:	f7ff fbe5 	bl	80072ec <LL_RCC_HSE_IsReady>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d0f1      	beq.n	8007b0c <HAL_RCC_OscConfig+0x194>
 8007b28:	e011      	b.n	8007b4e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2a:	f7fb f80b 	bl	8002b44 <HAL_GetTick>
 8007b2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007b30:	e008      	b.n	8007b44 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b32:	f7fb f807 	bl	8002b44 <HAL_GetTick>
 8007b36:	4602      	mov	r2, r0
 8007b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b3a:	1ad3      	subs	r3, r2, r3
 8007b3c:	2b64      	cmp	r3, #100	@ 0x64
 8007b3e:	d901      	bls.n	8007b44 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e286      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007b44:	f7ff fbd2 	bl	80072ec <LL_RCC_HSE_IsReady>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1f1      	bne.n	8007b32 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0302 	and.w	r3, r3, #2
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d04c      	beq.n	8007bf4 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b5a:	f7ff fda8 	bl	80076ae <LL_RCC_GetSysClkSource>
 8007b5e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007b60:	f7ff fea1 	bl	80078a6 <LL_RCC_PLL_GetMainSource>
 8007b64:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b04      	cmp	r3, #4
 8007b6a:	d005      	beq.n	8007b78 <HAL_RCC_OscConfig+0x200>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	2b0c      	cmp	r3, #12
 8007b70:	d10e      	bne.n	8007b90 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d10b      	bne.n	8007b90 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d101      	bne.n	8007b84 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e266      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	691b      	ldr	r3, [r3, #16]
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff fbf1 	bl	8007370 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007b8e:	e031      	b.n	8007bf4 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d019      	beq.n	8007bcc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b98:	f7ff fbba 	bl	8007310 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b9c:	f7fa ffd2 	bl	8002b44 <HAL_GetTick>
 8007ba0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007ba2:	e008      	b.n	8007bb6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ba4:	f7fa ffce 	bl	8002b44 <HAL_GetTick>
 8007ba8:	4602      	mov	r2, r0
 8007baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	2b02      	cmp	r3, #2
 8007bb0:	d901      	bls.n	8007bb6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007bb2:	2303      	movs	r3, #3
 8007bb4:	e24d      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007bb6:	f7ff fbc9 	bl	800734c <LL_RCC_HSI_IsReady>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d0f1      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7ff fbd3 	bl	8007370 <LL_RCC_HSI_SetCalibTrimming>
 8007bca:	e013      	b.n	8007bf4 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bcc:	f7ff fbaf 	bl	800732e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fa ffb8 	bl	8002b44 <HAL_GetTick>
 8007bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fa ffb4 	bl	8002b44 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e233      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007bea:	f7ff fbaf 	bl	800734c <LL_RCC_HSI_IsReady>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1f1      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0308 	and.w	r3, r3, #8
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d106      	bne.n	8007c0e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f000 80a3 	beq.w	8007d54 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d076      	beq.n	8007d04 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0310 	and.w	r3, r3, #16
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d046      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007c22:	f7ff fc66 	bl	80074f2 <LL_RCC_LSI1_IsReady>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d113      	bne.n	8007c54 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007c2c:	f7ff fc3f 	bl	80074ae <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007c30:	f7fa ff88 	bl	8002b44 <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007c38:	f7fa ff84 	bl	8002b44 <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e203      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007c4a:	f7ff fc52 	bl	80074f2 <LL_RCC_LSI1_IsReady>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f1      	beq.n	8007c38 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007c54:	f7ff fc5f 	bl	8007516 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c58:	f7fa ff74 	bl	8002b44 <HAL_GetTick>
 8007c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007c60:	f7fa ff70 	bl	8002b44 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e1ef      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007c72:	f7ff fc72 	bl	800755a <LL_RCC_LSI2_IsReady>
 8007c76:	4603      	mov	r3, r0
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f1      	beq.n	8007c60 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff fc7c 	bl	800757e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007c86:	f7ff fc23 	bl	80074d0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c8a:	f7fa ff5b 	bl	8002b44 <HAL_GetTick>
 8007c8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007c92:	f7fa ff57 	bl	8002b44 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e1d6      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007ca4:	f7ff fc25 	bl	80074f2 <LL_RCC_LSI1_IsReady>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f1      	bne.n	8007c92 <HAL_RCC_OscConfig+0x31a>
 8007cae:	e051      	b.n	8007d54 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007cb0:	f7ff fbfd 	bl	80074ae <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cb4:	f7fa ff46 	bl	8002b44 <HAL_GetTick>
 8007cb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007cba:	e00c      	b.n	8007cd6 <HAL_RCC_OscConfig+0x35e>
 8007cbc:	20000020 	.word	0x20000020
 8007cc0:	20000024 	.word	0x20000024
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007cc4:	f7fa ff3e 	bl	8002b44 <HAL_GetTick>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d901      	bls.n	8007cd6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007cd2:	2303      	movs	r3, #3
 8007cd4:	e1bd      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007cd6:	f7ff fc0c 	bl	80074f2 <LL_RCC_LSI1_IsReady>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d0f1      	beq.n	8007cc4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007ce0:	f7ff fc2a 	bl	8007538 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007ce4:	e008      	b.n	8007cf8 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007ce6:	f7fa ff2d 	bl	8002b44 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d901      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e1ac      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007cf8:	f7ff fc2f 	bl	800755a <LL_RCC_LSI2_IsReady>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f1      	bne.n	8007ce6 <HAL_RCC_OscConfig+0x36e>
 8007d02:	e027      	b.n	8007d54 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007d04:	f7ff fc18 	bl	8007538 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d08:	f7fa ff1c 	bl	8002b44 <HAL_GetTick>
 8007d0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007d0e:	e008      	b.n	8007d22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007d10:	f7fa ff18 	bl	8002b44 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	2b03      	cmp	r3, #3
 8007d1c:	d901      	bls.n	8007d22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	e197      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007d22:	f7ff fc1a 	bl	800755a <LL_RCC_LSI2_IsReady>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1f1      	bne.n	8007d10 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007d2c:	f7ff fbd0 	bl	80074d0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d30:	f7fa ff08 	bl	8002b44 <HAL_GetTick>
 8007d34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007d36:	e008      	b.n	8007d4a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007d38:	f7fa ff04 	bl	8002b44 <HAL_GetTick>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	2b02      	cmp	r3, #2
 8007d44:	d901      	bls.n	8007d4a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007d46:	2303      	movs	r3, #3
 8007d48:	e183      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007d4a:	f7ff fbd2 	bl	80074f2 <LL_RCC_LSI1_IsReady>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1f1      	bne.n	8007d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f003 0304 	and.w	r3, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d05b      	beq.n	8007e18 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d60:	4ba7      	ldr	r3, [pc, #668]	@ (8008000 <HAL_RCC_OscConfig+0x688>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d114      	bne.n	8007d96 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007d6c:	f7ff fa60 	bl	8007230 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d70:	f7fa fee8 	bl	8002b44 <HAL_GetTick>
 8007d74:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d78:	f7fa fee4 	bl	8002b44 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e163      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d8a:	4b9d      	ldr	r3, [pc, #628]	@ (8008000 <HAL_RCC_OscConfig+0x688>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	689b      	ldr	r3, [r3, #8]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d102      	bne.n	8007da4 <HAL_RCC_OscConfig+0x42c>
 8007d9e:	f7ff fb30 	bl	8007402 <LL_RCC_LSE_Enable>
 8007da2:	e00c      	b.n	8007dbe <HAL_RCC_OscConfig+0x446>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	689b      	ldr	r3, [r3, #8]
 8007da8:	2b05      	cmp	r3, #5
 8007daa:	d104      	bne.n	8007db6 <HAL_RCC_OscConfig+0x43e>
 8007dac:	f7ff fb4b 	bl	8007446 <LL_RCC_LSE_EnableBypass>
 8007db0:	f7ff fb27 	bl	8007402 <LL_RCC_LSE_Enable>
 8007db4:	e003      	b.n	8007dbe <HAL_RCC_OscConfig+0x446>
 8007db6:	f7ff fb35 	bl	8007424 <LL_RCC_LSE_Disable>
 8007dba:	f7ff fb55 	bl	8007468 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d014      	beq.n	8007df0 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dc6:	f7fa febd 	bl	8002b44 <HAL_GetTick>
 8007dca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007dcc:	e00a      	b.n	8007de4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f7fa feb9 	bl	8002b44 <HAL_GetTick>
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d901      	bls.n	8007de4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007de0:	2303      	movs	r3, #3
 8007de2:	e136      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007de4:	f7ff fb51 	bl	800748a <LL_RCC_LSE_IsReady>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0ef      	beq.n	8007dce <HAL_RCC_OscConfig+0x456>
 8007dee:	e013      	b.n	8007e18 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df0:	f7fa fea8 	bl	8002b44 <HAL_GetTick>
 8007df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007df6:	e00a      	b.n	8007e0e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df8:	f7fa fea4 	bl	8002b44 <HAL_GetTick>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e00:	1ad3      	subs	r3, r2, r3
 8007e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d901      	bls.n	8007e0e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8007e0a:	2303      	movs	r3, #3
 8007e0c:	e121      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8007e0e:	f7ff fb3c 	bl	800748a <LL_RCC_LSE_IsReady>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1ef      	bne.n	8007df8 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d02c      	beq.n	8007e7e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d014      	beq.n	8007e56 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e2c:	f7ff fab5 	bl	800739a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e30:	f7fa fe88 	bl	8002b44 <HAL_GetTick>
 8007e34:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007e36:	e008      	b.n	8007e4a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e38:	f7fa fe84 	bl	8002b44 <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	d901      	bls.n	8007e4a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e103      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007e4a:	f7ff fac8 	bl	80073de <LL_RCC_HSI48_IsReady>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d0f1      	beq.n	8007e38 <HAL_RCC_OscConfig+0x4c0>
 8007e54:	e013      	b.n	8007e7e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e56:	f7ff fab1 	bl	80073bc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e5a:	f7fa fe73 	bl	8002b44 <HAL_GetTick>
 8007e5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007e60:	e008      	b.n	8007e74 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e62:	f7fa fe6f 	bl	8002b44 <HAL_GetTick>
 8007e66:	4602      	mov	r2, r0
 8007e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6a:	1ad3      	subs	r3, r2, r3
 8007e6c:	2b02      	cmp	r3, #2
 8007e6e:	d901      	bls.n	8007e74 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8007e70:	2303      	movs	r3, #3
 8007e72:	e0ee      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007e74:	f7ff fab3 	bl	80073de <LL_RCC_HSI48_IsReady>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f1      	bne.n	8007e62 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80e4 	beq.w	8008050 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e88:	f7ff fc11 	bl	80076ae <LL_RCC_GetSysClkSource>
 8007e8c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8007e8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	f040 80b4 	bne.w	8008008 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 0203 	and.w	r2, r3, #3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d123      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d11c      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d114      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007ed6:	429a      	cmp	r2, r3
 8007ed8:	d10d      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d106      	bne.n	8007ef6 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d05d      	beq.n	8007fb2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	2b0c      	cmp	r3, #12
 8007efa:	d058      	beq.n	8007fae <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d001      	beq.n	8007f0e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	e0a1      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f0e:	f7ff fc84 	bl	800781a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f12:	f7fa fe17 	bl	8002b44 <HAL_GetTick>
 8007f16:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f18:	e008      	b.n	8007f2c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f1a:	f7fa fe13 	bl	8002b44 <HAL_GetTick>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	2b02      	cmp	r3, #2
 8007f26:	d901      	bls.n	8007f2c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007f28:	2303      	movs	r3, #3
 8007f2a:	e092      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d1ef      	bne.n	8007f1a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	4b30      	ldr	r3, [pc, #192]	@ (8008004 <HAL_RCC_OscConfig+0x68c>)
 8007f42:	4013      	ands	r3, r2
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007f4c:	4311      	orrs	r1, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007f52:	0212      	lsls	r2, r2, #8
 8007f54:	4311      	orrs	r1, r2
 8007f56:	687a      	ldr	r2, [r7, #4]
 8007f58:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007f5a:	4311      	orrs	r1, r2
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007f60:	4311      	orrs	r1, r2
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007f66:	430a      	orrs	r2, r1
 8007f68:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007f70:	f7ff fc44 	bl	80077fc <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f84:	f7fa fdde 	bl	8002b44 <HAL_GetTick>
 8007f88:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f8a:	e008      	b.n	8007f9e <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f8c:	f7fa fdda 	bl	8002b44 <HAL_GetTick>
 8007f90:	4602      	mov	r2, r0
 8007f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f94:	1ad3      	subs	r3, r2, r3
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d901      	bls.n	8007f9e <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	e059      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d0ef      	beq.n	8007f8c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007fac:	e050      	b.n	8008050 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e04f      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d147      	bne.n	8008050 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007fc0:	f7ff fc1c 	bl	80077fc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007fd4:	f7fa fdb6 	bl	8002b44 <HAL_GetTick>
 8007fd8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fda:	e008      	b.n	8007fee <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fdc:	f7fa fdb2 	bl	8002b44 <HAL_GetTick>
 8007fe0:	4602      	mov	r2, r0
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	1ad3      	subs	r3, r2, r3
 8007fe6:	2b02      	cmp	r3, #2
 8007fe8:	d901      	bls.n	8007fee <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8007fea:	2303      	movs	r3, #3
 8007fec:	e031      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d0ef      	beq.n	8007fdc <HAL_RCC_OscConfig+0x664>
 8007ffc:	e028      	b.n	8008050 <HAL_RCC_OscConfig+0x6d8>
 8007ffe:	bf00      	nop
 8008000:	58000400 	.word	0x58000400
 8008004:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	2b0c      	cmp	r3, #12
 800800c:	d01e      	beq.n	800804c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800800e:	f7ff fc04 	bl	800781a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008012:	f7fa fd97 	bl	8002b44 <HAL_GetTick>
 8008016:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008018:	e008      	b.n	800802c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800801a:	f7fa fd93 	bl	8002b44 <HAL_GetTick>
 800801e:	4602      	mov	r2, r0
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	2b02      	cmp	r3, #2
 8008026:	d901      	bls.n	800802c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8008028:	2303      	movs	r3, #3
 800802a:	e012      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800802c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d1ef      	bne.n	800801a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800803a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803e:	68da      	ldr	r2, [r3, #12]
 8008040:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008044:	4b05      	ldr	r3, [pc, #20]	@ (800805c <HAL_RCC_OscConfig+0x6e4>)
 8008046:	4013      	ands	r3, r2
 8008048:	60cb      	str	r3, [r1, #12]
 800804a:	e001      	b.n	8008050 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3734      	adds	r7, #52	@ 0x34
 8008056:	46bd      	mov	sp, r7
 8008058:	bd90      	pop	{r4, r7, pc}
 800805a:	bf00      	nop
 800805c:	eefefffc 	.word	0xeefefffc

08008060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d101      	bne.n	8008074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e12d      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008074:	4b98      	ldr	r3, [pc, #608]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0307 	and.w	r3, r3, #7
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	429a      	cmp	r2, r3
 8008080:	d91b      	bls.n	80080ba <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008082:	4b95      	ldr	r3, [pc, #596]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f023 0207 	bic.w	r2, r3, #7
 800808a:	4993      	ldr	r1, [pc, #588]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	4313      	orrs	r3, r2
 8008090:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008092:	f7fa fd57 	bl	8002b44 <HAL_GetTick>
 8008096:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008098:	e008      	b.n	80080ac <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800809a:	f7fa fd53 	bl	8002b44 <HAL_GetTick>
 800809e:	4602      	mov	r2, r0
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	1ad3      	subs	r3, r2, r3
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	d901      	bls.n	80080ac <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80080a8:	2303      	movs	r3, #3
 80080aa:	e111      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ac:	4b8a      	ldr	r3, [pc, #552]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	683a      	ldr	r2, [r7, #0]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	d1ef      	bne.n	800809a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 0302 	and.w	r3, r3, #2
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d016      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fafb 	bl	80076c6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80080d0:	f7fa fd38 	bl	8002b44 <HAL_GetTick>
 80080d4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80080d8:	f7fa fd34 	bl	8002b44 <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e0f2      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80080ea:	f7ff fbe8 	bl	80078be <LL_RCC_IsActiveFlag_HPRE>
 80080ee:	4603      	mov	r3, r0
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d0f1      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0320 	and.w	r3, r3, #32
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d016      	beq.n	800812e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	695b      	ldr	r3, [r3, #20]
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff faf2 	bl	80076ee <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800810a:	f7fa fd1b 	bl	8002b44 <HAL_GetTick>
 800810e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008110:	e008      	b.n	8008124 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008112:	f7fa fd17 	bl	8002b44 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e0d5      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8008124:	f7ff fbdd 	bl	80078e2 <LL_RCC_IsActiveFlag_C2HPRE>
 8008128:	4603      	mov	r3, r0
 800812a:	2b00      	cmp	r3, #0
 800812c:	d0f1      	beq.n	8008112 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d016      	beq.n	8008168 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff faeb 	bl	800771a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008144:	f7fa fcfe 	bl	8002b44 <HAL_GetTick>
 8008148:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800814a:	e008      	b.n	800815e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800814c:	f7fa fcfa 	bl	8002b44 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e0b8      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800815e:	f7ff fbd3 	bl	8007908 <LL_RCC_IsActiveFlag_SHDHPRE>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0f1      	beq.n	800814c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d016      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	4618      	mov	r0, r3
 800817a:	f7ff fae5 	bl	8007748 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800817e:	f7fa fce1 	bl	8002b44 <HAL_GetTick>
 8008182:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008184:	e008      	b.n	8008198 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008186:	f7fa fcdd 	bl	8002b44 <HAL_GetTick>
 800818a:	4602      	mov	r2, r0
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	1ad3      	subs	r3, r2, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d901      	bls.n	8008198 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8008194:	2303      	movs	r3, #3
 8008196:	e09b      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008198:	f7ff fbc9 	bl	800792e <LL_RCC_IsActiveFlag_PPRE1>
 800819c:	4603      	mov	r3, r0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0f1      	beq.n	8008186 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d017      	beq.n	80081de <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	00db      	lsls	r3, r3, #3
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff fadb 	bl	8007770 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80081ba:	f7fa fcc3 	bl	8002b44 <HAL_GetTick>
 80081be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80081c0:	e008      	b.n	80081d4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80081c2:	f7fa fcbf 	bl	8002b44 <HAL_GetTick>
 80081c6:	4602      	mov	r2, r0
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e07d      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80081d4:	f7ff fbbd 	bl	8007952 <LL_RCC_IsActiveFlag_PPRE2>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0f1      	beq.n	80081c2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0301 	and.w	r3, r3, #1
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d043      	beq.n	8008272 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d106      	bne.n	8008200 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80081f2:	f7ff f87b 	bl	80072ec <LL_RCC_HSE_IsReady>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d11e      	bne.n	800823a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	e067      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	2b03      	cmp	r3, #3
 8008206:	d106      	bne.n	8008216 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8008208:	f7ff fb16 	bl	8007838 <LL_RCC_PLL_IsReady>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d113      	bne.n	800823a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e05c      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800821e:	f7ff f9e3 	bl	80075e8 <LL_RCC_MSI_IsReady>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d108      	bne.n	800823a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	e051      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800822c:	f7ff f88e 	bl	800734c <LL_RCC_HSI_IsReady>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d101      	bne.n	800823a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e04a      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	4618      	mov	r0, r3
 8008240:	f7ff fa21 	bl	8007686 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008244:	f7fa fc7e 	bl	8002b44 <HAL_GetTick>
 8008248:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800824a:	e00a      	b.n	8008262 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800824c:	f7fa fc7a 	bl	8002b44 <HAL_GetTick>
 8008250:	4602      	mov	r2, r0
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	1ad3      	subs	r3, r2, r3
 8008256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800825a:	4293      	cmp	r3, r2
 800825c:	d901      	bls.n	8008262 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	e036      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008262:	f7ff fa24 	bl	80076ae <LL_RCC_GetSysClkSource>
 8008266:	4602      	mov	r2, r0
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	429a      	cmp	r2, r3
 8008270:	d1ec      	bne.n	800824c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008272:	4b19      	ldr	r3, [pc, #100]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f003 0307 	and.w	r3, r3, #7
 800827a:	683a      	ldr	r2, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d21b      	bcs.n	80082b8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008280:	4b15      	ldr	r3, [pc, #84]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f023 0207 	bic.w	r2, r3, #7
 8008288:	4913      	ldr	r1, [pc, #76]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	4313      	orrs	r3, r2
 800828e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008290:	f7fa fc58 	bl	8002b44 <HAL_GetTick>
 8008294:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008296:	e008      	b.n	80082aa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008298:	f7fa fc54 	bl	8002b44 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e012      	b.n	80082d0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80082aa:	4b0b      	ldr	r3, [pc, #44]	@ (80082d8 <HAL_RCC_ClockConfig+0x278>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 0307 	and.w	r3, r3, #7
 80082b2:	683a      	ldr	r2, [r7, #0]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d1ef      	bne.n	8008298 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80082b8:	f000 f87e 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 80082bc:	4603      	mov	r3, r0
 80082be:	4a07      	ldr	r2, [pc, #28]	@ (80082dc <HAL_RCC_ClockConfig+0x27c>)
 80082c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80082c2:	f7fa fc4b 	bl	8002b5c <HAL_GetTickPrio>
 80082c6:	4603      	mov	r3, r0
 80082c8:	4618      	mov	r0, r3
 80082ca:	f7fa fbed 	bl	8002aa8 <HAL_InitTick>
 80082ce:	4603      	mov	r3, r0
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	58004000 	.word	0x58004000
 80082dc:	20000020 	.word	0x20000020

080082e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082e0:	b590      	push	{r4, r7, lr}
 80082e2:	b085      	sub	sp, #20
 80082e4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e6:	f7ff f9e2 	bl	80076ae <LL_RCC_GetSysClkSource>
 80082ea:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80082f2:	f7ff f99e 	bl	8007632 <LL_RCC_MSI_GetRange>
 80082f6:	4603      	mov	r3, r0
 80082f8:	091b      	lsrs	r3, r3, #4
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	4a2b      	ldr	r2, [pc, #172]	@ (80083ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8008300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008304:	60fb      	str	r3, [r7, #12]
 8008306:	e04b      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b04      	cmp	r3, #4
 800830c:	d102      	bne.n	8008314 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800830e:	4b28      	ldr	r3, [pc, #160]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008310:	60fb      	str	r3, [r7, #12]
 8008312:	e045      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b08      	cmp	r3, #8
 8008318:	d10a      	bne.n	8008330 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800831a:	f7fe ffb7 	bl	800728c <LL_RCC_HSE_IsEnabledDiv2>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	d102      	bne.n	800832a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8008324:	4b22      	ldr	r3, [pc, #136]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008326:	60fb      	str	r3, [r7, #12]
 8008328:	e03a      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800832a:	4b22      	ldr	r3, [pc, #136]	@ (80083b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800832c:	60fb      	str	r3, [r7, #12]
 800832e:	e037      	b.n	80083a0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8008330:	f7ff fab9 	bl	80078a6 <LL_RCC_PLL_GetMainSource>
 8008334:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	2b02      	cmp	r3, #2
 800833a:	d003      	beq.n	8008344 <HAL_RCC_GetSysClockFreq+0x64>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b03      	cmp	r3, #3
 8008340:	d003      	beq.n	800834a <HAL_RCC_GetSysClockFreq+0x6a>
 8008342:	e00d      	b.n	8008360 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8008344:	4b1a      	ldr	r3, [pc, #104]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008346:	60bb      	str	r3, [r7, #8]
        break;
 8008348:	e015      	b.n	8008376 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800834a:	f7fe ff9f 	bl	800728c <LL_RCC_HSE_IsEnabledDiv2>
 800834e:	4603      	mov	r3, r0
 8008350:	2b01      	cmp	r3, #1
 8008352:	d102      	bne.n	800835a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8008354:	4b16      	ldr	r3, [pc, #88]	@ (80083b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008356:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008358:	e00d      	b.n	8008376 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800835a:	4b16      	ldr	r3, [pc, #88]	@ (80083b4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800835c:	60bb      	str	r3, [r7, #8]
        break;
 800835e:	e00a      	b.n	8008376 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008360:	f7ff f967 	bl	8007632 <LL_RCC_MSI_GetRange>
 8008364:	4603      	mov	r3, r0
 8008366:	091b      	lsrs	r3, r3, #4
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	4a0f      	ldr	r2, [pc, #60]	@ (80083ac <HAL_RCC_GetSysClockFreq+0xcc>)
 800836e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008372:	60bb      	str	r3, [r7, #8]
        break;
 8008374:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8008376:	f7ff fa71 	bl	800785c <LL_RCC_PLL_GetN>
 800837a:	4602      	mov	r2, r0
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	fb03 f402 	mul.w	r4, r3, r2
 8008382:	f7ff fa84 	bl	800788e <LL_RCC_PLL_GetDivider>
 8008386:	4603      	mov	r3, r0
 8008388:	091b      	lsrs	r3, r3, #4
 800838a:	3301      	adds	r3, #1
 800838c:	fbb4 f4f3 	udiv	r4, r4, r3
 8008390:	f7ff fa71 	bl	8007876 <LL_RCC_PLL_GetR>
 8008394:	4603      	mov	r3, r0
 8008396:	0f5b      	lsrs	r3, r3, #29
 8008398:	3301      	adds	r3, #1
 800839a:	fbb4 f3f3 	udiv	r3, r4, r3
 800839e:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80083a0:	68fb      	ldr	r3, [r7, #12]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd90      	pop	{r4, r7, pc}
 80083aa:	bf00      	nop
 80083ac:	08013684 	.word	0x08013684
 80083b0:	00f42400 	.word	0x00f42400
 80083b4:	01e84800 	.word	0x01e84800

080083b8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083b8:	b598      	push	{r3, r4, r7, lr}
 80083ba:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80083bc:	f7ff ff90 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 80083c0:	4604      	mov	r4, r0
 80083c2:	f7ff f9e9 	bl	8007798 <LL_RCC_GetAHBPrescaler>
 80083c6:	4603      	mov	r3, r0
 80083c8:	091b      	lsrs	r3, r3, #4
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	4a03      	ldr	r2, [pc, #12]	@ (80083dc <HAL_RCC_GetHCLKFreq+0x24>)
 80083d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083d4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80083d8:	4618      	mov	r0, r3
 80083da:	bd98      	pop	{r3, r4, r7, pc}
 80083dc:	08013624 	.word	0x08013624

080083e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80083e0:	b598      	push	{r3, r4, r7, lr}
 80083e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80083e4:	f7ff ffe8 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 80083e8:	4604      	mov	r4, r0
 80083ea:	f7ff f9ef 	bl	80077cc <LL_RCC_GetAPB1Prescaler>
 80083ee:	4603      	mov	r3, r0
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	4a04      	ldr	r2, [pc, #16]	@ (8008408 <HAL_RCC_GetPCLK1Freq+0x28>)
 80083f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083fc:	f003 031f 	and.w	r3, r3, #31
 8008400:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008404:	4618      	mov	r0, r3
 8008406:	bd98      	pop	{r3, r4, r7, pc}
 8008408:	08013664 	.word	0x08013664

0800840c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800840c:	b598      	push	{r3, r4, r7, lr}
 800840e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8008410:	f7ff ffd2 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 8008414:	4604      	mov	r4, r0
 8008416:	f7ff f9e5 	bl	80077e4 <LL_RCC_GetAPB2Prescaler>
 800841a:	4603      	mov	r3, r0
 800841c:	0adb      	lsrs	r3, r3, #11
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	4a04      	ldr	r2, [pc, #16]	@ (8008434 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008428:	f003 031f 	and.w	r3, r3, #31
 800842c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8008430:	4618      	mov	r0, r3
 8008432:	bd98      	pop	{r3, r4, r7, pc}
 8008434:	08013664 	.word	0x08013664

08008438 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b085      	sub	sp, #20
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2bb0      	cmp	r3, #176	@ 0xb0
 8008444:	d903      	bls.n	800844e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8008446:	4b15      	ldr	r3, [pc, #84]	@ (800849c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800844a:	60fb      	str	r3, [r7, #12]
 800844c:	e007      	b.n	800845e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	091b      	lsrs	r3, r3, #4
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	4a11      	ldr	r2, [pc, #68]	@ (800849c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800845c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800845e:	f7ff f9a7 	bl	80077b0 <LL_RCC_GetAHB4Prescaler>
 8008462:	4603      	mov	r3, r0
 8008464:	091b      	lsrs	r3, r3, #4
 8008466:	f003 030f 	and.w	r3, r3, #15
 800846a:	4a0d      	ldr	r2, [pc, #52]	@ (80084a0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800846c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	fbb2 f3f3 	udiv	r3, r2, r3
 8008476:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	4a0a      	ldr	r2, [pc, #40]	@ (80084a4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800847c:	fba2 2303 	umull	r2, r3, r2, r3
 8008480:	0c9c      	lsrs	r4, r3, #18
 8008482:	f7fe fee5 	bl	8007250 <HAL_PWREx_GetVoltageRange>
 8008486:	4603      	mov	r3, r0
 8008488:	4619      	mov	r1, r3
 800848a:	4620      	mov	r0, r4
 800848c:	f000 f80c 	bl	80084a8 <RCC_SetFlashLatency>
 8008490:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8008492:	4618      	mov	r0, r3
 8008494:	3714      	adds	r7, #20
 8008496:	46bd      	mov	sp, r7
 8008498:	bd90      	pop	{r4, r7, pc}
 800849a:	bf00      	nop
 800849c:	08013684 	.word	0x08013684
 80084a0:	08013624 	.word	0x08013624
 80084a4:	431bde83 	.word	0x431bde83

080084a8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80084a8:	b590      	push	{r4, r7, lr}
 80084aa:	b093      	sub	sp, #76	@ 0x4c
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80084b2:	4b37      	ldr	r3, [pc, #220]	@ (8008590 <RCC_SetFlashLatency+0xe8>)
 80084b4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80084b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80084be:	4a35      	ldr	r2, [pc, #212]	@ (8008594 <RCC_SetFlashLatency+0xec>)
 80084c0:	f107 031c 	add.w	r3, r7, #28
 80084c4:	ca07      	ldmia	r2, {r0, r1, r2}
 80084c6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80084ca:	4b33      	ldr	r3, [pc, #204]	@ (8008598 <RCC_SetFlashLatency+0xf0>)
 80084cc:	f107 040c 	add.w	r4, r7, #12
 80084d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80084d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80084d6:	2300      	movs	r3, #0
 80084d8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80084da:	683b      	ldr	r3, [r7, #0]
 80084dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084e0:	d11a      	bne.n	8008518 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80084e2:	2300      	movs	r3, #0
 80084e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80084e6:	e013      	b.n	8008510 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80084e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	3348      	adds	r3, #72	@ 0x48
 80084ee:	443b      	add	r3, r7
 80084f0:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d807      	bhi.n	800850a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80084fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	3348      	adds	r3, #72	@ 0x48
 8008500:	443b      	add	r3, r7
 8008502:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008506:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8008508:	e020      	b.n	800854c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800850a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800850c:	3301      	adds	r3, #1
 800850e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008512:	2b03      	cmp	r3, #3
 8008514:	d9e8      	bls.n	80084e8 <RCC_SetFlashLatency+0x40>
 8008516:	e019      	b.n	800854c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008518:	2300      	movs	r3, #0
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800851c:	e013      	b.n	8008546 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800851e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008520:	009b      	lsls	r3, r3, #2
 8008522:	3348      	adds	r3, #72	@ 0x48
 8008524:	443b      	add	r3, r7
 8008526:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	429a      	cmp	r2, r3
 800852e:	d807      	bhi.n	8008540 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8008530:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	3348      	adds	r3, #72	@ 0x48
 8008536:	443b      	add	r3, r7
 8008538:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800853c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800853e:	e005      	b.n	800854c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8008540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008542:	3301      	adds	r3, #1
 8008544:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008548:	2b02      	cmp	r3, #2
 800854a:	d9e8      	bls.n	800851e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800854c:	4b13      	ldr	r3, [pc, #76]	@ (800859c <RCC_SetFlashLatency+0xf4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f023 0207 	bic.w	r2, r3, #7
 8008554:	4911      	ldr	r1, [pc, #68]	@ (800859c <RCC_SetFlashLatency+0xf4>)
 8008556:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008558:	4313      	orrs	r3, r2
 800855a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800855c:	f7fa faf2 	bl	8002b44 <HAL_GetTick>
 8008560:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008562:	e008      	b.n	8008576 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008564:	f7fa faee 	bl	8002b44 <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	2b02      	cmp	r3, #2
 8008570:	d901      	bls.n	8008576 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8008572:	2303      	movs	r3, #3
 8008574:	e007      	b.n	8008586 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8008576:	4b09      	ldr	r3, [pc, #36]	@ (800859c <RCC_SetFlashLatency+0xf4>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008580:	429a      	cmp	r2, r3
 8008582:	d1ef      	bne.n	8008564 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8008584:	2300      	movs	r3, #0
}
 8008586:	4618      	mov	r0, r3
 8008588:	374c      	adds	r7, #76	@ 0x4c
 800858a:	46bd      	mov	sp, r7
 800858c:	bd90      	pop	{r4, r7, pc}
 800858e:	bf00      	nop
 8008590:	08013438 	.word	0x08013438
 8008594:	08013448 	.word	0x08013448
 8008598:	08013454 	.word	0x08013454
 800859c:	58004000 	.word	0x58004000

080085a0 <LL_RCC_LSE_IsEnabled>:
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80085a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085ac:	f003 0301 	and.w	r3, r3, #1
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <LL_RCC_LSE_IsEnabled+0x18>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <LL_RCC_LSE_IsEnabled+0x1a>
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <LL_RCC_LSE_IsReady>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80085c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b02      	cmp	r3, #2
 80085d6:	d101      	bne.n	80085dc <LL_RCC_LSE_IsReady+0x18>
 80085d8:	2301      	movs	r3, #1
 80085da:	e000      	b.n	80085de <LL_RCC_LSE_IsReady+0x1a>
 80085dc:	2300      	movs	r3, #0
}
 80085de:	4618      	mov	r0, r3
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <LL_RCC_MSI_EnablePLLMode>:
{
 80085e8:	b480      	push	{r7}
 80085ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80085ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085f6:	f043 0304 	orr.w	r3, r3, #4
 80085fa:	6013      	str	r3, [r2, #0]
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <LL_RCC_SetRFWKPClockSource>:
{
 8008606:	b480      	push	{r7}
 8008608:	b083      	sub	sp, #12
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800860e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008612:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008616:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800861a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8008626:	bf00      	nop
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <LL_RCC_SetSMPSClockSource>:
{
 8008632:	b480      	push	{r7}
 8008634:	b083      	sub	sp, #12
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800863a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800863e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008640:	f023 0203 	bic.w	r2, r3, #3
 8008644:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4313      	orrs	r3, r2
 800864c:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800864e:	bf00      	nop
 8008650:	370c      	adds	r7, #12
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr

0800865a <LL_RCC_SetSMPSPrescaler>:
{
 800865a:	b480      	push	{r7}
 800865c:	b083      	sub	sp, #12
 800865e:	af00      	add	r7, sp, #0
 8008660:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8008662:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008668:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800866c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4313      	orrs	r3, r2
 8008674:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8008676:	bf00      	nop
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr

08008682 <LL_RCC_SetUSARTClockSource>:
{
 8008682:	b480      	push	{r7}
 8008684:	b083      	sub	sp, #12
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800868a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800868e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008692:	f023 0203 	bic.w	r2, r3, #3
 8008696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4313      	orrs	r3, r2
 800869e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80086a2:	bf00      	nop
 80086a4:	370c      	adds	r7, #12
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <LL_RCC_SetLPUARTClockSource>:
{
 80086ae:	b480      	push	{r7}
 80086b0:	b083      	sub	sp, #12
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80086b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80086be:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80086c2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80086ce:	bf00      	nop
 80086d0:	370c      	adds	r7, #12
 80086d2:	46bd      	mov	sp, r7
 80086d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d8:	4770      	bx	lr

080086da <LL_RCC_SetI2CClockSource>:
{
 80086da:	b480      	push	{r7}
 80086dc:	b083      	sub	sp, #12
 80086de:	af00      	add	r7, sp, #0
 80086e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80086e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	091b      	lsrs	r3, r3, #4
 80086ee:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80086f2:	43db      	mvns	r3, r3
 80086f4:	401a      	ands	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 80086fe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008708:	bf00      	nop
 800870a:	370c      	adds	r7, #12
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RCC_SetLPTIMClockSource>:
{
 8008714:	b480      	push	{r7}
 8008716:	b083      	sub	sp, #12
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800871c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008720:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	0c1b      	lsrs	r3, r3, #16
 8008728:	041b      	lsls	r3, r3, #16
 800872a:	43db      	mvns	r3, r3
 800872c:	401a      	ands	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	041b      	lsls	r3, r3, #16
 8008732:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008736:	4313      	orrs	r3, r2
 8008738:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <LL_RCC_SetSAIClockSource>:
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8008750:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008758:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800875c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4313      	orrs	r3, r2
 8008764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <LL_RCC_SetRNGClockSource>:
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800877c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008780:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008784:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008788:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4313      	orrs	r3, r2
 8008790:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <LL_RCC_SetCLK48ClockSource>:
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80087a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80087b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4313      	orrs	r3, r2
 80087bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <LL_RCC_SetUSBClockSource>:
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f7ff ffe3 	bl	80087a0 <LL_RCC_SetCLK48ClockSource>
}
 80087da:	bf00      	nop
 80087dc:	3708      	adds	r7, #8
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}

080087e2 <LL_RCC_SetADCClockSource>:
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80087ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80087f2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80087f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <LL_RCC_SetRTCClockSource>:
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008816:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800881a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800881e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008822:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4313      	orrs	r3, r2
 800882a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800882e:	bf00      	nop
 8008830:	370c      	adds	r7, #12
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr

0800883a <LL_RCC_GetRTCClockSource>:
{
 800883a:	b480      	push	{r7}
 800883c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800883e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800884a:	4618      	mov	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <LL_RCC_ForceBackupDomainReset>:
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800885c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008860:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008868:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800886c:	bf00      	nop
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008876:	b480      	push	{r7}
 8008878:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800887a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800887e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008882:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008886:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800888a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <LL_RCC_PLLSAI1_Enable>:
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800889c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80088aa:	6013      	str	r3, [r2, #0]
}
 80088ac:	bf00      	nop
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <LL_RCC_PLLSAI1_Disable>:
{
 80088b6:	b480      	push	{r7}
 80088b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 80088ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80088c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80088c8:	6013      	str	r3, [r2, #0]
}
 80088ca:	bf00      	nop
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <LL_RCC_PLLSAI1_IsReady>:
{
 80088d4:	b480      	push	{r7}
 80088d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80088d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80088e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80088e6:	d101      	bne.n	80088ec <LL_RCC_PLLSAI1_IsReady+0x18>
 80088e8:	2301      	movs	r3, #1
 80088ea:	e000      	b.n	80088ee <LL_RCC_PLLSAI1_IsReady+0x1a>
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008900:	2300      	movs	r3, #0
 8008902:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008904:	2300      	movs	r3, #0
 8008906:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008910:	2b00      	cmp	r3, #0
 8008912:	d034      	beq.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008918:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800891c:	d021      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800891e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8008922:	d81b      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008928:	d01d      	beq.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800892a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800892e:	d815      	bhi.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008930:	2b00      	cmp	r3, #0
 8008932:	d00b      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008934:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008938:	d110      	bne.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800893a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800893e:	68db      	ldr	r3, [r3, #12]
 8008940:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008948:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800894a:	e00d      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3304      	adds	r3, #4
 8008950:	4618      	mov	r0, r3
 8008952:	f000 f94d 	bl	8008bf0 <RCCEx_PLLSAI1_ConfigNP>
 8008956:	4603      	mov	r3, r0
 8008958:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800895a:	e005      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	77fb      	strb	r3, [r7, #31]
        break;
 8008960:	e002      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008962:	bf00      	nop
 8008964:	e000      	b.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008968:	7ffb      	ldrb	r3, [r7, #31]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d105      	bne.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008972:	4618      	mov	r0, r3
 8008974:	f7ff fee8 	bl	8008748 <LL_RCC_SetSAIClockSource>
 8008978:	e001      	b.n	800897e <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800897a:	7ffb      	ldrb	r3, [r7, #31]
 800897c:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008986:	2b00      	cmp	r3, #0
 8008988:	d046      	beq.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800898a:	f7ff ff56 	bl	800883a <LL_RCC_GetRTCClockSource>
 800898e:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008994:	69ba      	ldr	r2, [r7, #24]
 8008996:	429a      	cmp	r2, r3
 8008998:	d03c      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800899a:	f7fe fc49 	bl	8007230 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d105      	bne.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089a8:	4618      	mov	r0, r3
 80089aa:	f7ff ff30 	bl	800880e <LL_RCC_SetRTCClockSource>
 80089ae:	e02e      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 80089b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089b8:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 80089ba:	f7ff ff4b 	bl	8008854 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 80089be:	f7ff ff5a 	bl	8008876 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089cc:	4313      	orrs	r3, r2
 80089ce:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 80089d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 80089da:	f7ff fde1 	bl	80085a0 <LL_RCC_LSE_IsEnabled>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d114      	bne.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80089e4:	f7fa f8ae 	bl	8002b44 <HAL_GetTick>
 80089e8:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 80089ea:	e00b      	b.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80089ec:	f7fa f8aa 	bl	8002b44 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d902      	bls.n	8008a04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 80089fe:	2303      	movs	r3, #3
 8008a00:	77fb      	strb	r3, [r7, #31]
              break;
 8008a02:	e004      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008a04:	f7ff fdde 	bl	80085c4 <LL_RCC_LSE_IsReady>
 8008a08:	4603      	mov	r3, r0
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d1ee      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008a0e:	7ffb      	ldrb	r3, [r7, #31]
 8008a10:	77bb      	strb	r3, [r7, #30]
 8008a12:	e001      	b.n	8008a18 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a14:	7ffb      	ldrb	r3, [r7, #31]
 8008a16:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f003 0301 	and.w	r3, r3, #1
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d004      	beq.n	8008a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	699b      	ldr	r3, [r3, #24]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f7ff fe2a 	bl	8008682 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d004      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f7ff fe35 	bl	80086ae <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0310 	and.w	r3, r3, #16
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d004      	beq.n	8008a5a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a54:	4618      	mov	r0, r3
 8008a56:	f7ff fe5d 	bl	8008714 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d004      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f7ff fe52 	bl	8008714 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d004      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	6a1b      	ldr	r3, [r3, #32]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff fe2a 	bl	80086da <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0308 	and.w	r3, r3, #8
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d004      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7ff fe1f 	bl	80086da <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d022      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7ff fe8d 	bl	80087cc <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ab6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aba:	d107      	bne.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008abc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008ac6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008aca:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ad0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008ad4:	d10b      	bne.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f8e3 	bl	8008ca6 <RCCEx_PLLSAI1_ConfigNQ>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008ae4:	7ffb      	ldrb	r3, [r7, #31]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008aea:	7ffb      	ldrb	r3, [r7, #31]
 8008aec:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d02b      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008afe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b02:	d008      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b08:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b0c:	d003      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d105      	bne.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f7ff fe2a 	bl	8008774 <LL_RCC_SetRNGClockSource>
 8008b20:	e00a      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	f7ff fe21 	bl	8008774 <LL_RCC_SetRNGClockSource>
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f7ff fe34 	bl	80087a0 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b3c:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008b40:	d107      	bne.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008b50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d022      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7ff fe3d 	bl	80087e2 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b70:	d107      	bne.n	8008b82 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b76:	68db      	ldr	r3, [r3, #12]
 8008b78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008b7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b80:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008b86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b8a:	d10b      	bne.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3304      	adds	r3, #4
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 f8e3 	bl	8008d5c <RCCEx_PLLSAI1_ConfigNR>
 8008b96:	4603      	mov	r3, r0
 8008b98:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008b9a:	7ffb      	ldrb	r3, [r7, #31]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d001      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008ba0:	7ffb      	ldrb	r3, [r7, #31]
 8008ba2:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d004      	beq.n	8008bba <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f7ff fd26 	bl	8008606 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d009      	beq.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f7ff fd45 	bl	800865a <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7ff fd2c 	bl	8008632 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008bda:	7fbb      	ldrb	r3, [r7, #30]
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3720      	adds	r7, #32
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with @ref HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	af00      	add	r7, sp, #0
  LL_RCC_MSI_EnablePLLMode() ;
 8008be8:	f7ff fcfe 	bl	80085e8 <LL_RCC_MSI_EnablePLLMode>
}
 8008bec:	bf00      	nop
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008bfc:	f7ff fe5b 	bl	80088b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008c00:	f7f9 ffa0 	bl	8002b44 <HAL_GetTick>
 8008c04:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008c06:	e009      	b.n	8008c1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c08:	f7f9 ff9c 	bl	8002b44 <HAL_GetTick>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	1ad3      	subs	r3, r2, r3
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d902      	bls.n	8008c1c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008c16:	2303      	movs	r3, #3
 8008c18:	73fb      	strb	r3, [r7, #15]
      break;
 8008c1a:	e004      	b.n	8008c26 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008c1c:	f7ff fe5a 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008c20:	4603      	mov	r3, r0
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1f0      	bne.n	8008c08 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d137      	bne.n	8008c9c <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c30:	691b      	ldr	r3, [r3, #16]
 8008c32:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	021b      	lsls	r3, r3, #8
 8008c3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c40:	4313      	orrs	r3, r2
 8008c42:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c56:	4313      	orrs	r3, r2
 8008c58:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008c5a:	f7ff fe1d 	bl	8008898 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c5e:	f7f9 ff71 	bl	8002b44 <HAL_GetTick>
 8008c62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008c64:	e009      	b.n	8008c7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008c66:	f7f9 ff6d 	bl	8002b44 <HAL_GetTick>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	1ad3      	subs	r3, r2, r3
 8008c70:	2b02      	cmp	r3, #2
 8008c72:	d902      	bls.n	8008c7a <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	73fb      	strb	r3, [r7, #15]
        break;
 8008c78:	e004      	b.n	8008c84 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008c7a:	f7ff fe2b 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d1f0      	bne.n	8008c66 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d108      	bne.n	8008c9c <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c8e:	691a      	ldr	r2, [r3, #16]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691b      	ldr	r3, [r3, #16]
 8008c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008cb2:	f7ff fe00 	bl	80088b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008cb6:	f7f9 ff45 	bl	8002b44 <HAL_GetTick>
 8008cba:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008cbc:	e009      	b.n	8008cd2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008cbe:	f7f9 ff41 	bl	8002b44 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d902      	bls.n	8008cd2 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd0:	e004      	b.n	8008cdc <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008cd2:	f7ff fdff 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1f0      	bne.n	8008cbe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008cdc:	7bfb      	ldrb	r3, [r7, #15]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d137      	bne.n	8008d52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	021b      	lsls	r3, r3, #8
 8008cf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008cfa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008d10:	f7ff fdc2 	bl	8008898 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d14:	f7f9 ff16 	bl	8002b44 <HAL_GetTick>
 8008d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d1a:	e009      	b.n	8008d30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d1c:	f7f9 ff12 	bl	8002b44 <HAL_GetTick>
 8008d20:	4602      	mov	r2, r0
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	1ad3      	subs	r3, r2, r3
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d902      	bls.n	8008d30 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008d2a:	2303      	movs	r3, #3
 8008d2c:	73fb      	strb	r3, [r7, #15]
        break;
 8008d2e:	e004      	b.n	8008d3a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008d30:	f7ff fdd0 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d1f0      	bne.n	8008d1c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008d3a:	7bfb      	ldrb	r3, [r7, #15]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d108      	bne.n	8008d52 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008d40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008d68:	f7ff fda5 	bl	80088b6 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008d6c:	f7f9 feea 	bl	8002b44 <HAL_GetTick>
 8008d70:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d72:	e009      	b.n	8008d88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008d74:	f7f9 fee6 	bl	8002b44 <HAL_GetTick>
 8008d78:	4602      	mov	r2, r0
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d902      	bls.n	8008d88 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008d82:	2303      	movs	r3, #3
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	e004      	b.n	8008d92 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008d88:	f7ff fda4 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f0      	bne.n	8008d74 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008d92:	7bfb      	ldrb	r3, [r7, #15]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d137      	bne.n	8008e08 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	021b      	lsls	r3, r3, #8
 8008da8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008dac:	4313      	orrs	r3, r2
 8008dae:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008db0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008db4:	691b      	ldr	r3, [r3, #16]
 8008db6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	68db      	ldr	r3, [r3, #12]
 8008dbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008dc6:	f7ff fd67 	bl	8008898 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dca:	f7f9 febb 	bl	8002b44 <HAL_GetTick>
 8008dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008dd0:	e009      	b.n	8008de6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008dd2:	f7f9 feb7 	bl	8002b44 <HAL_GetTick>
 8008dd6:	4602      	mov	r2, r0
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	1ad3      	subs	r3, r2, r3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d902      	bls.n	8008de6 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008de0:	2303      	movs	r3, #3
 8008de2:	73fb      	strb	r3, [r7, #15]
        break;
 8008de4:	e004      	b.n	8008df0 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008de6:	f7ff fd75 	bl	80088d4 <LL_RCC_PLLSAI1_IsReady>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d1f0      	bne.n	8008dd2 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008df0:	7bfb      	ldrb	r3, [r7, #15]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d108      	bne.n	8008e08 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008dfa:	691a      	ldr	r2, [r3, #16]
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008e04:	4313      	orrs	r3, r2
 8008e06:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3710      	adds	r7, #16
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b084      	sub	sp, #16
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d101      	bne.n	8008e26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e09f      	b.n	8008f66 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d106      	bne.n	8008e40 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f9 fc24 	bl	8002688 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2202      	movs	r2, #2
 8008e44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008e48:	4b49      	ldr	r3, [pc, #292]	@ (8008f70 <HAL_RTC_Init+0x15c>)
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	f003 0310 	and.w	r3, r3, #16
 8008e50:	2b10      	cmp	r3, #16
 8008e52:	d07e      	beq.n	8008f52 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	22ca      	movs	r2, #202	@ 0xca
 8008e5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2253      	movs	r2, #83	@ 0x53
 8008e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f8ab 	bl	8008fc0 <RTC_EnterInitMode>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d00a      	beq.n	8008e86 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	22ff      	movs	r2, #255	@ 0xff
 8008e76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2204      	movs	r2, #4
 8008e7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	73fb      	strb	r3, [r7, #15]
 8008e84:	e067      	b.n	8008f56 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008e94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e98:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6899      	ldr	r1, [r3, #8]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685a      	ldr	r2, [r3, #4]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	691b      	ldr	r3, [r3, #16]
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	430a      	orrs	r2, r1
 8008eb6:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	68d2      	ldr	r2, [r2, #12]
 8008ec0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	6919      	ldr	r1, [r3, #16]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	041a      	lsls	r2, r3, #16
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	430a      	orrs	r2, r1
 8008ed4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68da      	ldr	r2, [r3, #12]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ee4:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 0203 	bic.w	r2, r2, #3
 8008ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	69da      	ldr	r2, [r3, #28]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	695b      	ldr	r3, [r3, #20]
 8008f04:	431a      	orrs	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d113      	bne.n	8008f44 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f829 	bl	8008f74 <HAL_RTC_WaitForSynchro>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d00d      	beq.n	8008f44 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	22ff      	movs	r2, #255	@ 0xff
 8008f2e:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2204      	movs	r2, #4
 8008f34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	e010      	b.n	8008f66 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	22ff      	movs	r2, #255	@ 0xff
 8008f4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	73fb      	strb	r3, [r7, #15]
 8008f50:	e001      	b.n	8008f56 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008f56:	7bfb      	ldrb	r3, [r7, #15]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d103      	bne.n	8008f64 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 8008f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f66:	4618      	mov	r0, r3
 8008f68:	3710      	adds	r7, #16
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	bd80      	pop	{r7, pc}
 8008f6e:	bf00      	nop
 8008f70:	40002800 	.word	0x40002800

08008f74 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	68da      	ldr	r2, [r3, #12]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008f8a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8008f8c:	f7f9 fdda 	bl	8002b44 <HAL_GetTick>
 8008f90:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008f92:	e009      	b.n	8008fa8 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008f94:	f7f9 fdd6 	bl	8002b44 <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008fa2:	d901      	bls.n	8008fa8 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e007      	b.n	8008fb8 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	68db      	ldr	r3, [r3, #12]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d0ee      	beq.n	8008f94 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d119      	bne.n	800900a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008fde:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008fe0:	f7f9 fdb0 	bl	8002b44 <HAL_GetTick>
 8008fe4:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008fe6:	e009      	b.n	8008ffc <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008fe8:	f7f9 fdac 	bl	8002b44 <HAL_GetTick>
 8008fec:	4602      	mov	r2, r0
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ff6:	d901      	bls.n	8008ffc <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e007      	b.n	800900c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0ee      	beq.n	8008fe8 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3710      	adds	r7, #16
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <LL_RCC_GetUSARTClockSource>:
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800901c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009020:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4013      	ands	r3, r2
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <LL_RCC_GetLPUARTClockSource>:
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800903c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009040:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4013      	ands	r3, r2
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e042      	b.n	80090ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800906c:	2b00      	cmp	r3, #0
 800906e:	d106      	bne.n	800907e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7f9 fb33 	bl	80026e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	2224      	movs	r2, #36	@ 0x24
 8009082:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f022 0201 	bic.w	r2, r2, #1
 8009094:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800909a:	2b00      	cmp	r3, #0
 800909c:	d002      	beq.n	80090a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fd94 	bl	8009bcc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 fb69 	bl	800977c <UART_SetConfig>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d101      	bne.n	80090b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e01b      	b.n	80090ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 0201 	orr.w	r2, r2, #1
 80090e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fe13 	bl	8009d10 <UART_CheckIdleState>
 80090ea:	4603      	mov	r3, r0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b0ba      	sub	sp, #232	@ 0xe8
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800911a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800911e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009122:	4013      	ands	r3, r2
 8009124:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800912c:	2b00      	cmp	r3, #0
 800912e:	d11b      	bne.n	8009168 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009134:	f003 0320 	and.w	r3, r3, #32
 8009138:	2b00      	cmp	r3, #0
 800913a:	d015      	beq.n	8009168 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800913c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009140:	f003 0320 	and.w	r3, r3, #32
 8009144:	2b00      	cmp	r3, #0
 8009146:	d105      	bne.n	8009154 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800914c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d009      	beq.n	8009168 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 82e3 	beq.w	8009724 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	4798      	blx	r3
      }
      return;
 8009166:	e2dd      	b.n	8009724 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009168:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 8123 	beq.w	80093b8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009172:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009176:	4b8d      	ldr	r3, [pc, #564]	@ (80093ac <HAL_UART_IRQHandler+0x2b8>)
 8009178:	4013      	ands	r3, r2
 800917a:	2b00      	cmp	r3, #0
 800917c:	d106      	bne.n	800918c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800917e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009182:	4b8b      	ldr	r3, [pc, #556]	@ (80093b0 <HAL_UART_IRQHandler+0x2bc>)
 8009184:	4013      	ands	r3, r2
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8116 	beq.w	80093b8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009190:	f003 0301 	and.w	r3, r3, #1
 8009194:	2b00      	cmp	r3, #0
 8009196:	d011      	beq.n	80091bc <HAL_UART_IRQHandler+0xc8>
 8009198:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00b      	beq.n	80091bc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	2201      	movs	r2, #1
 80091aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091b2:	f043 0201 	orr.w	r2, r3, #1
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091c0:	f003 0302 	and.w	r3, r3, #2
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d011      	beq.n	80091ec <HAL_UART_IRQHandler+0xf8>
 80091c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091cc:	f003 0301 	and.w	r3, r3, #1
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	2202      	movs	r2, #2
 80091da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80091e2:	f043 0204 	orr.w	r2, r3, #4
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f0:	f003 0304 	and.w	r3, r3, #4
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d011      	beq.n	800921c <HAL_UART_IRQHandler+0x128>
 80091f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00b      	beq.n	800921c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	2204      	movs	r2, #4
 800920a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009212:	f043 0202 	orr.w	r2, r3, #2
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800921c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009220:	f003 0308 	and.w	r3, r3, #8
 8009224:	2b00      	cmp	r3, #0
 8009226:	d017      	beq.n	8009258 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800922c:	f003 0320 	and.w	r3, r3, #32
 8009230:	2b00      	cmp	r3, #0
 8009232:	d105      	bne.n	8009240 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009234:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009238:	4b5c      	ldr	r3, [pc, #368]	@ (80093ac <HAL_UART_IRQHandler+0x2b8>)
 800923a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2208      	movs	r2, #8
 8009246:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800924e:	f043 0208 	orr.w	r2, r3, #8
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009258:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800925c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009260:	2b00      	cmp	r3, #0
 8009262:	d012      	beq.n	800928a <HAL_UART_IRQHandler+0x196>
 8009264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009268:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d00c      	beq.n	800928a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009280:	f043 0220 	orr.w	r2, r3, #32
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 8249 	beq.w	8009728 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80092a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d105      	bne.n	80092ba <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80092ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d007      	beq.n	80092ca <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d003      	beq.n	80092ca <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80092d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092de:	2b40      	cmp	r3, #64	@ 0x40
 80092e0:	d005      	beq.n	80092ee <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80092e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80092e6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d054      	beq.n	8009398 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	f000 fe25 	bl	8009f3e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092fe:	2b40      	cmp	r3, #64	@ 0x40
 8009300:	d146      	bne.n	8009390 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	3308      	adds	r3, #8
 8009308:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800931c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009320:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	3308      	adds	r3, #8
 800932a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800932e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009332:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800933a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1d9      	bne.n	8009302 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009354:	2b00      	cmp	r3, #0
 8009356:	d017      	beq.n	8009388 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800935e:	4a15      	ldr	r2, [pc, #84]	@ (80093b4 <HAL_UART_IRQHandler+0x2c0>)
 8009360:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009368:	4618      	mov	r0, r3
 800936a:	f7f9 fdfb 	bl	8002f64 <HAL_DMA_Abort_IT>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d019      	beq.n	80093a8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800937a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009382:	4610      	mov	r0, r2
 8009384:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009386:	e00f      	b.n	80093a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 f9e1 	bl	8009750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800938e:	e00b      	b.n	80093a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 f9dd 	bl	8009750 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009396:	e007      	b.n	80093a8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9d9 	bl	8009750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80093a6:	e1bf      	b.n	8009728 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a8:	bf00      	nop
    return;
 80093aa:	e1bd      	b.n	8009728 <HAL_UART_IRQHandler+0x634>
 80093ac:	10000001 	.word	0x10000001
 80093b0:	04000120 	.word	0x04000120
 80093b4:	0800a00b 	.word	0x0800a00b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80093bc:	2b01      	cmp	r3, #1
 80093be:	f040 8153 	bne.w	8009668 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80093c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093c6:	f003 0310 	and.w	r3, r3, #16
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 814c 	beq.w	8009668 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80093d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093d4:	f003 0310 	and.w	r3, r3, #16
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 8145 	beq.w	8009668 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2210      	movs	r2, #16
 80093e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093f0:	2b40      	cmp	r3, #64	@ 0x40
 80093f2:	f040 80bb 	bne.w	800956c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685b      	ldr	r3, [r3, #4]
 8009400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009408:	2b00      	cmp	r3, #0
 800940a:	f000 818f 	beq.w	800972c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009414:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009418:	429a      	cmp	r2, r3
 800941a:	f080 8187 	bcs.w	800972c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009424:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	f040 8087 	bne.w	800954a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009448:	e853 3f00 	ldrex	r3, [r3]
 800944c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009454:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009458:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800946a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009472:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009476:	e841 2300 	strex	r3, r2, [r1]
 800947a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800947e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1da      	bne.n	800943c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3308      	adds	r3, #8
 800948c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009496:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3308      	adds	r3, #8
 80094a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80094aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80094ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094b6:	e841 2300 	strex	r3, r2, [r1]
 80094ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1e1      	bne.n	8009486 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3308      	adds	r3, #8
 80094c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094cc:	e853 3f00 	ldrex	r3, [r3]
 80094d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80094d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80094d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3308      	adds	r3, #8
 80094e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80094e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094ee:	e841 2300 	strex	r3, r2, [r1]
 80094f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1e3      	bne.n	80094c2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2220      	movs	r2, #32
 80094fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009510:	e853 3f00 	ldrex	r3, [r3]
 8009514:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009516:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009518:	f023 0310 	bic.w	r3, r3, #16
 800951c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	461a      	mov	r2, r3
 8009526:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800952a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800952c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800952e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009530:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009532:	e841 2300 	strex	r3, r2, [r1]
 8009536:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1e4      	bne.n	8009508 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009544:	4618      	mov	r0, r3
 8009546:	f7f9 fcae 	bl	8002ea6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2202      	movs	r2, #2
 800954e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800955c:	b29b      	uxth	r3, r3
 800955e:	1ad3      	subs	r3, r2, r3
 8009560:	b29b      	uxth	r3, r3
 8009562:	4619      	mov	r1, r3
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 f8fd 	bl	8009764 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800956a:	e0df      	b.n	800972c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009578:	b29b      	uxth	r3, r3
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009586:	b29b      	uxth	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	f000 80d1 	beq.w	8009730 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800958e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009592:	2b00      	cmp	r3, #0
 8009594:	f000 80cc 	beq.w	8009730 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800959e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a0:	e853 3f00 	ldrex	r3, [r3]
 80095a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80095ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80095bc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095c2:	e841 2300 	strex	r3, r2, [r1]
 80095c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1e4      	bne.n	8009598 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	3308      	adds	r3, #8
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d8:	e853 3f00 	ldrex	r3, [r3]
 80095dc:	623b      	str	r3, [r7, #32]
   return(result);
 80095de:	6a3b      	ldr	r3, [r7, #32]
 80095e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095e4:	f023 0301 	bic.w	r3, r3, #1
 80095e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	3308      	adds	r3, #8
 80095f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80095f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80095f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fe:	e841 2300 	strex	r3, r2, [r1]
 8009602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1e1      	bne.n	80095ce <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2220      	movs	r2, #32
 800960e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	e853 3f00 	ldrex	r3, [r3]
 800962a:	60fb      	str	r3, [r7, #12]
   return(result);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f023 0310 	bic.w	r3, r3, #16
 8009632:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009640:	61fb      	str	r3, [r7, #28]
 8009642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009644:	69b9      	ldr	r1, [r7, #24]
 8009646:	69fa      	ldr	r2, [r7, #28]
 8009648:	e841 2300 	strex	r3, r2, [r1]
 800964c:	617b      	str	r3, [r7, #20]
   return(result);
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d1e4      	bne.n	800961e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800965a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800965e:	4619      	mov	r1, r3
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 f87f 	bl	8009764 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009666:	e063      	b.n	8009730 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800966c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00e      	beq.n	8009692 <HAL_UART_IRQHandler+0x59e>
 8009674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800967c:	2b00      	cmp	r3, #0
 800967e:	d008      	beq.n	8009692 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f000 fcfe 	bl	800a08c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009690:	e051      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800969a:	2b00      	cmp	r3, #0
 800969c:	d014      	beq.n	80096c8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800969e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d105      	bne.n	80096b6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80096aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80096ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d008      	beq.n	80096c8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d03a      	beq.n	8009734 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	4798      	blx	r3
    }
    return;
 80096c6:	e035      	b.n	8009734 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80096c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d009      	beq.n	80096e8 <HAL_UART_IRQHandler+0x5f4>
 80096d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d003      	beq.n	80096e8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fca8 	bl	800a036 <UART_EndTransmit_IT>
    return;
 80096e6:	e026      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80096e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <HAL_UART_IRQHandler+0x614>
 80096f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fcd7 	bl	800a0b4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009706:	e016      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d010      	beq.n	8009736 <HAL_UART_IRQHandler+0x642>
 8009714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009718:	2b00      	cmp	r3, #0
 800971a:	da0c      	bge.n	8009736 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fcbf 	bl	800a0a0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009722:	e008      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
      return;
 8009724:	bf00      	nop
 8009726:	e006      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
    return;
 8009728:	bf00      	nop
 800972a:	e004      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
      return;
 800972c:	bf00      	nop
 800972e:	e002      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
      return;
 8009730:	bf00      	nop
 8009732:	e000      	b.n	8009736 <HAL_UART_IRQHandler+0x642>
    return;
 8009734:	bf00      	nop
  }
}
 8009736:	37e8      	adds	r7, #232	@ 0xe8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800973c:	b480      	push	{r7}
 800973e:	b083      	sub	sp, #12
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009744:	bf00      	nop
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr

08009750 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009758:	bf00      	nop
 800975a:	370c      	adds	r7, #12
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800977c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009780:	b08c      	sub	sp, #48	@ 0x30
 8009782:	af00      	add	r7, sp, #0
 8009784:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009786:	2300      	movs	r3, #0
 8009788:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	689a      	ldr	r2, [r3, #8]
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	691b      	ldr	r3, [r3, #16]
 8009794:	431a      	orrs	r2, r3
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	695b      	ldr	r3, [r3, #20]
 800979a:	431a      	orrs	r2, r3
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	4baf      	ldr	r3, [pc, #700]	@ (8009a68 <UART_SetConfig+0x2ec>)
 80097ac:	4013      	ands	r3, r2
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	6812      	ldr	r2, [r2, #0]
 80097b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097b4:	430b      	orrs	r3, r1
 80097b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	685b      	ldr	r3, [r3, #4]
 80097be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	430a      	orrs	r2, r1
 80097cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4aa4      	ldr	r2, [pc, #656]	@ (8009a6c <UART_SetConfig+0x2f0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d004      	beq.n	80097e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097e4:	4313      	orrs	r3, r2
 80097e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80097f2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	6812      	ldr	r2, [r2, #0]
 80097fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80097fc:	430b      	orrs	r3, r1
 80097fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009806:	f023 010f 	bic.w	r1, r3, #15
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	430a      	orrs	r2, r1
 8009814:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a95      	ldr	r2, [pc, #596]	@ (8009a70 <UART_SetConfig+0x2f4>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d125      	bne.n	800986c <UART_SetConfig+0xf0>
 8009820:	2003      	movs	r0, #3
 8009822:	f7ff fbf7 	bl	8009014 <LL_RCC_GetUSARTClockSource>
 8009826:	4603      	mov	r3, r0
 8009828:	2b03      	cmp	r3, #3
 800982a:	d81b      	bhi.n	8009864 <UART_SetConfig+0xe8>
 800982c:	a201      	add	r2, pc, #4	@ (adr r2, 8009834 <UART_SetConfig+0xb8>)
 800982e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009832:	bf00      	nop
 8009834:	08009845 	.word	0x08009845
 8009838:	08009855 	.word	0x08009855
 800983c:	0800984d 	.word	0x0800984d
 8009840:	0800985d 	.word	0x0800985d
 8009844:	2301      	movs	r3, #1
 8009846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800984a:	e042      	b.n	80098d2 <UART_SetConfig+0x156>
 800984c:	2302      	movs	r3, #2
 800984e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009852:	e03e      	b.n	80098d2 <UART_SetConfig+0x156>
 8009854:	2304      	movs	r3, #4
 8009856:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800985a:	e03a      	b.n	80098d2 <UART_SetConfig+0x156>
 800985c:	2308      	movs	r3, #8
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e036      	b.n	80098d2 <UART_SetConfig+0x156>
 8009864:	2310      	movs	r3, #16
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e032      	b.n	80098d2 <UART_SetConfig+0x156>
 800986c:	697b      	ldr	r3, [r7, #20]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a7e      	ldr	r2, [pc, #504]	@ (8009a6c <UART_SetConfig+0x2f0>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d12a      	bne.n	80098cc <UART_SetConfig+0x150>
 8009876:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800987a:	f7ff fbdb 	bl	8009034 <LL_RCC_GetLPUARTClockSource>
 800987e:	4603      	mov	r3, r0
 8009880:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009884:	d01a      	beq.n	80098bc <UART_SetConfig+0x140>
 8009886:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800988a:	d81b      	bhi.n	80098c4 <UART_SetConfig+0x148>
 800988c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009890:	d00c      	beq.n	80098ac <UART_SetConfig+0x130>
 8009892:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009896:	d815      	bhi.n	80098c4 <UART_SetConfig+0x148>
 8009898:	2b00      	cmp	r3, #0
 800989a:	d003      	beq.n	80098a4 <UART_SetConfig+0x128>
 800989c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098a0:	d008      	beq.n	80098b4 <UART_SetConfig+0x138>
 80098a2:	e00f      	b.n	80098c4 <UART_SetConfig+0x148>
 80098a4:	2300      	movs	r3, #0
 80098a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098aa:	e012      	b.n	80098d2 <UART_SetConfig+0x156>
 80098ac:	2302      	movs	r3, #2
 80098ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098b2:	e00e      	b.n	80098d2 <UART_SetConfig+0x156>
 80098b4:	2304      	movs	r3, #4
 80098b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ba:	e00a      	b.n	80098d2 <UART_SetConfig+0x156>
 80098bc:	2308      	movs	r3, #8
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e006      	b.n	80098d2 <UART_SetConfig+0x156>
 80098c4:	2310      	movs	r3, #16
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e002      	b.n	80098d2 <UART_SetConfig+0x156>
 80098cc:	2310      	movs	r3, #16
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a65      	ldr	r2, [pc, #404]	@ (8009a6c <UART_SetConfig+0x2f0>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	f040 8097 	bne.w	8009a0c <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d823      	bhi.n	800992e <UART_SetConfig+0x1b2>
 80098e6:	a201      	add	r2, pc, #4	@ (adr r2, 80098ec <UART_SetConfig+0x170>)
 80098e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ec:	08009911 	.word	0x08009911
 80098f0:	0800992f 	.word	0x0800992f
 80098f4:	08009919 	.word	0x08009919
 80098f8:	0800992f 	.word	0x0800992f
 80098fc:	0800991f 	.word	0x0800991f
 8009900:	0800992f 	.word	0x0800992f
 8009904:	0800992f 	.word	0x0800992f
 8009908:	0800992f 	.word	0x0800992f
 800990c:	08009927 	.word	0x08009927
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009910:	f7fe fd66 	bl	80083e0 <HAL_RCC_GetPCLK1Freq>
 8009914:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009916:	e010      	b.n	800993a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009918:	4b56      	ldr	r3, [pc, #344]	@ (8009a74 <UART_SetConfig+0x2f8>)
 800991a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800991c:	e00d      	b.n	800993a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800991e:	f7fe fcdf 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 8009922:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009924:	e009      	b.n	800993a <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009926:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800992a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800992c:	e005      	b.n	800993a <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009938:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800993a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800993c:	2b00      	cmp	r3, #0
 800993e:	f000 812b 	beq.w	8009b98 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009942:	697b      	ldr	r3, [r7, #20]
 8009944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009946:	4a4c      	ldr	r2, [pc, #304]	@ (8009a78 <UART_SetConfig+0x2fc>)
 8009948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800994c:	461a      	mov	r2, r3
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	fbb3 f3f2 	udiv	r3, r3, r2
 8009954:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	69ba      	ldr	r2, [r7, #24]
 8009962:	429a      	cmp	r2, r3
 8009964:	d305      	bcc.n	8009972 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	429a      	cmp	r2, r3
 8009970:	d903      	bls.n	800997a <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009978:	e10e      	b.n	8009b98 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800997a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800997c:	2200      	movs	r2, #0
 800997e:	60bb      	str	r3, [r7, #8]
 8009980:	60fa      	str	r2, [r7, #12]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009986:	4a3c      	ldr	r2, [pc, #240]	@ (8009a78 <UART_SetConfig+0x2fc>)
 8009988:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800998c:	b29b      	uxth	r3, r3
 800998e:	2200      	movs	r2, #0
 8009990:	603b      	str	r3, [r7, #0]
 8009992:	607a      	str	r2, [r7, #4]
 8009994:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009998:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800999c:	f7f7 f866 	bl	8000a6c <__aeabi_uldivmod>
 80099a0:	4602      	mov	r2, r0
 80099a2:	460b      	mov	r3, r1
 80099a4:	4610      	mov	r0, r2
 80099a6:	4619      	mov	r1, r3
 80099a8:	f04f 0200 	mov.w	r2, #0
 80099ac:	f04f 0300 	mov.w	r3, #0
 80099b0:	020b      	lsls	r3, r1, #8
 80099b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099b6:	0202      	lsls	r2, r0, #8
 80099b8:	6979      	ldr	r1, [r7, #20]
 80099ba:	6849      	ldr	r1, [r1, #4]
 80099bc:	0849      	lsrs	r1, r1, #1
 80099be:	2000      	movs	r0, #0
 80099c0:	460c      	mov	r4, r1
 80099c2:	4605      	mov	r5, r0
 80099c4:	eb12 0804 	adds.w	r8, r2, r4
 80099c8:	eb43 0905 	adc.w	r9, r3, r5
 80099cc:	697b      	ldr	r3, [r7, #20]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2200      	movs	r2, #0
 80099d2:	469a      	mov	sl, r3
 80099d4:	4693      	mov	fp, r2
 80099d6:	4652      	mov	r2, sl
 80099d8:	465b      	mov	r3, fp
 80099da:	4640      	mov	r0, r8
 80099dc:	4649      	mov	r1, r9
 80099de:	f7f7 f845 	bl	8000a6c <__aeabi_uldivmod>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4613      	mov	r3, r2
 80099e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80099f0:	d308      	bcc.n	8009a04 <UART_SetConfig+0x288>
 80099f2:	6a3b      	ldr	r3, [r7, #32]
 80099f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099f8:	d204      	bcs.n	8009a04 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	6a3a      	ldr	r2, [r7, #32]
 8009a00:	60da      	str	r2, [r3, #12]
 8009a02:	e0c9      	b.n	8009b98 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a0a:	e0c5      	b.n	8009b98 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009a14:	d16d      	bne.n	8009af2 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009a16:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	d82d      	bhi.n	8009a7c <UART_SetConfig+0x300>
 8009a20:	a201      	add	r2, pc, #4	@ (adr r2, 8009a28 <UART_SetConfig+0x2ac>)
 8009a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a26:	bf00      	nop
 8009a28:	08009a49 	.word	0x08009a49
 8009a2c:	08009a51 	.word	0x08009a51
 8009a30:	08009a7d 	.word	0x08009a7d
 8009a34:	08009a57 	.word	0x08009a57
 8009a38:	08009a7d 	.word	0x08009a7d
 8009a3c:	08009a7d 	.word	0x08009a7d
 8009a40:	08009a7d 	.word	0x08009a7d
 8009a44:	08009a5f 	.word	0x08009a5f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a48:	f7fe fce0 	bl	800840c <HAL_RCC_GetPCLK2Freq>
 8009a4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a4e:	e01b      	b.n	8009a88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a50:	4b08      	ldr	r3, [pc, #32]	@ (8009a74 <UART_SetConfig+0x2f8>)
 8009a52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a54:	e018      	b.n	8009a88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a56:	f7fe fc43 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 8009a5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009a5c:	e014      	b.n	8009a88 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009a64:	e010      	b.n	8009a88 <UART_SetConfig+0x30c>
 8009a66:	bf00      	nop
 8009a68:	cfff69f3 	.word	0xcfff69f3
 8009a6c:	40008000 	.word	0x40008000
 8009a70:	40013800 	.word	0x40013800
 8009a74:	00f42400 	.word	0x00f42400
 8009a78:	080136c4 	.word	0x080136c4
      default:
        pclk = 0U;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009a86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 8084 	beq.w	8009b98 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a94:	4a4b      	ldr	r2, [pc, #300]	@ (8009bc4 <UART_SetConfig+0x448>)
 8009a96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a9e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009aa2:	005a      	lsls	r2, r3, #1
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	085b      	lsrs	r3, r3, #1
 8009aaa:	441a      	add	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ab4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ab6:	6a3b      	ldr	r3, [r7, #32]
 8009ab8:	2b0f      	cmp	r3, #15
 8009aba:	d916      	bls.n	8009aea <UART_SetConfig+0x36e>
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009ac2:	d212      	bcs.n	8009aea <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f023 030f 	bic.w	r3, r3, #15
 8009acc:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ace:	6a3b      	ldr	r3, [r7, #32]
 8009ad0:	085b      	lsrs	r3, r3, #1
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f003 0307 	and.w	r3, r3, #7
 8009ad8:	b29a      	uxth	r2, r3
 8009ada:	8bfb      	ldrh	r3, [r7, #30]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	8bfa      	ldrh	r2, [r7, #30]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	e056      	b.n	8009b98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009af0:	e052      	b.n	8009b98 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009af2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009af6:	3b01      	subs	r3, #1
 8009af8:	2b07      	cmp	r3, #7
 8009afa:	d822      	bhi.n	8009b42 <UART_SetConfig+0x3c6>
 8009afc:	a201      	add	r2, pc, #4	@ (adr r2, 8009b04 <UART_SetConfig+0x388>)
 8009afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b02:	bf00      	nop
 8009b04:	08009b25 	.word	0x08009b25
 8009b08:	08009b2d 	.word	0x08009b2d
 8009b0c:	08009b43 	.word	0x08009b43
 8009b10:	08009b33 	.word	0x08009b33
 8009b14:	08009b43 	.word	0x08009b43
 8009b18:	08009b43 	.word	0x08009b43
 8009b1c:	08009b43 	.word	0x08009b43
 8009b20:	08009b3b 	.word	0x08009b3b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b24:	f7fe fc72 	bl	800840c <HAL_RCC_GetPCLK2Freq>
 8009b28:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b2a:	e010      	b.n	8009b4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b2c:	4b26      	ldr	r3, [pc, #152]	@ (8009bc8 <UART_SetConfig+0x44c>)
 8009b2e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b30:	e00d      	b.n	8009b4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b32:	f7fe fbd5 	bl	80082e0 <HAL_RCC_GetSysClockFreq>
 8009b36:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009b38:	e009      	b.n	8009b4e <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b40:	e005      	b.n	8009b4e <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8009b42:	2300      	movs	r3, #0
 8009b44:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b4c:	bf00      	nop
    }

    if (pclk != 0U)
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d021      	beq.n	8009b98 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b58:	4a1a      	ldr	r2, [pc, #104]	@ (8009bc4 <UART_SetConfig+0x448>)
 8009b5a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	085b      	lsrs	r3, r3, #1
 8009b6c:	441a      	add	r2, r3
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b76:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	2b0f      	cmp	r3, #15
 8009b7c:	d909      	bls.n	8009b92 <UART_SetConfig+0x416>
 8009b7e:	6a3b      	ldr	r3, [r7, #32]
 8009b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b84:	d205      	bcs.n	8009b92 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	60da      	str	r2, [r3, #12]
 8009b90:	e002      	b.n	8009b98 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2200      	movs	r2, #0
 8009bac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009bb4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3730      	adds	r7, #48	@ 0x30
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bc2:	bf00      	nop
 8009bc4:	080136c4 	.word	0x080136c4
 8009bc8:	00f42400 	.word	0x00f42400

08009bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd8:	f003 0308 	and.w	r3, r3, #8
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bfa:	f003 0301 	and.w	r3, r3, #1
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c1c:	f003 0302 	and.w	r3, r3, #2
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c3e:	f003 0304 	and.w	r3, r3, #4
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01a      	beq.n	8009ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cca:	d10a      	bne.n	8009ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	605a      	str	r2, [r3, #4]
  }
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b098      	sub	sp, #96	@ 0x60
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d20:	f7f8 ff10 	bl	8002b44 <HAL_GetTick>
 8009d24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d12f      	bne.n	8009d94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f88e 	bl	8009e64 <UART_WaitOnFlagUntilTimeout>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d022      	beq.n	8009d94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009d6e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009d72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e6      	bne.n	8009d4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e063      	b.n	8009e5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f003 0304 	and.w	r3, r3, #4
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d149      	bne.n	8009e36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009da2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009da6:	9300      	str	r3, [sp, #0]
 8009da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009daa:	2200      	movs	r2, #0
 8009dac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f857 	bl	8009e64 <UART_WaitOnFlagUntilTimeout>
 8009db6:	4603      	mov	r3, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d03c      	beq.n	8009e36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	623b      	str	r3, [r7, #32]
   return(result);
 8009dca:	6a3b      	ldr	r3, [r7, #32]
 8009dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009dda:	633b      	str	r3, [r7, #48]	@ 0x30
 8009ddc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e6      	bne.n	8009dbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3308      	adds	r3, #8
 8009df4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f023 0301 	bic.w	r3, r3, #1
 8009e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009e0e:	61fa      	str	r2, [r7, #28]
 8009e10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	69b9      	ldr	r1, [r7, #24]
 8009e14:	69fa      	ldr	r2, [r7, #28]
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	617b      	str	r3, [r7, #20]
   return(result);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e5      	bne.n	8009dee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e012      	b.n	8009e5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2220      	movs	r2, #32
 8009e3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2220      	movs	r2, #32
 8009e42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2200      	movs	r2, #0
 8009e56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3758      	adds	r7, #88	@ 0x58
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	60f8      	str	r0, [r7, #12]
 8009e6c:	60b9      	str	r1, [r7, #8]
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	4613      	mov	r3, r2
 8009e72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e74:	e04f      	b.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e7c:	d04b      	beq.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e7e:	f7f8 fe61 	bl	8002b44 <HAL_GetTick>
 8009e82:	4602      	mov	r2, r0
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	1ad3      	subs	r3, r2, r3
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d302      	bcc.n	8009e94 <UART_WaitOnFlagUntilTimeout+0x30>
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009e94:	2303      	movs	r3, #3
 8009e96:	e04e      	b.n	8009f36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d037      	beq.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	2b80      	cmp	r3, #128	@ 0x80
 8009eaa:	d034      	beq.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	2b40      	cmp	r3, #64	@ 0x40
 8009eb0:	d031      	beq.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b08      	cmp	r3, #8
 8009ebe:	d110      	bne.n	8009ee2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2208      	movs	r2, #8
 8009ec6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009ec8:	68f8      	ldr	r0, [r7, #12]
 8009eca:	f000 f838 	bl	8009f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	e029      	b.n	8009f36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009ef0:	d111      	bne.n	8009f16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009efa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009efc:	68f8      	ldr	r0, [r7, #12]
 8009efe:	f000 f81e 	bl	8009f3e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	2220      	movs	r2, #32
 8009f06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009f12:	2303      	movs	r3, #3
 8009f14:	e00f      	b.n	8009f36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	69da      	ldr	r2, [r3, #28]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	4013      	ands	r3, r2
 8009f20:	68ba      	ldr	r2, [r7, #8]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	bf0c      	ite	eq
 8009f26:	2301      	moveq	r3, #1
 8009f28:	2300      	movne	r3, #0
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	79fb      	ldrb	r3, [r7, #7]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d0a0      	beq.n	8009e76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}

08009f3e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b095      	sub	sp, #84	@ 0x54
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f4e:	e853 3f00 	ldrex	r3, [r3]
 8009f52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f56:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	461a      	mov	r2, r3
 8009f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8009f66:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f68:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009f6a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009f6c:	e841 2300 	strex	r3, r2, [r1]
 8009f70:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1e6      	bne.n	8009f46 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3308      	adds	r3, #8
 8009f7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	e853 3f00 	ldrex	r3, [r3]
 8009f86:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f88:	69fb      	ldr	r3, [r7, #28]
 8009f8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f8e:	f023 0301 	bic.w	r3, r3, #1
 8009f92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	3308      	adds	r3, #8
 8009f9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009f9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009fa4:	e841 2300 	strex	r3, r2, [r1]
 8009fa8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d1e3      	bne.n	8009f78 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d118      	bne.n	8009fea <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	e853 3f00 	ldrex	r3, [r3]
 8009fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f023 0310 	bic.w	r3, r3, #16
 8009fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009fd6:	61bb      	str	r3, [r7, #24]
 8009fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fda:	6979      	ldr	r1, [r7, #20]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	e841 2300 	strex	r3, r2, [r1]
 8009fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1e6      	bne.n	8009fb8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	2220      	movs	r2, #32
 8009fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009ffe:	bf00      	nop
 800a000:	3754      	adds	r7, #84	@ 0x54
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b084      	sub	sp, #16
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a016:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a028:	68f8      	ldr	r0, [r7, #12]
 800a02a:	f7ff fb91 	bl	8009750 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a02e:	bf00      	nop
 800a030:	3710      	adds	r7, #16
 800a032:	46bd      	mov	sp, r7
 800a034:	bd80      	pop	{r7, pc}

0800a036 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b088      	sub	sp, #32
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	e853 3f00 	ldrex	r3, [r3]
 800a04a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a052:	61fb      	str	r3, [r7, #28]
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	461a      	mov	r2, r3
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	61bb      	str	r3, [r7, #24]
 800a05e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a060:	6979      	ldr	r1, [r7, #20]
 800a062:	69ba      	ldr	r2, [r7, #24]
 800a064:	e841 2300 	strex	r3, r2, [r1]
 800a068:	613b      	str	r3, [r7, #16]
   return(result);
 800a06a:	693b      	ldr	r3, [r7, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d1e6      	bne.n	800a03e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2220      	movs	r2, #32
 800a074:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2200      	movs	r2, #0
 800a07c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a07e:	6878      	ldr	r0, [r7, #4]
 800a080:	f7ff fb5c 	bl	800973c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a084:	bf00      	nop
 800a086:	3720      	adds	r7, #32
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d101      	bne.n	800a0de <HAL_UARTEx_DisableFifoMode+0x16>
 800a0da:	2302      	movs	r3, #2
 800a0dc:	e027      	b.n	800a12e <HAL_UARTEx_DisableFifoMode+0x66>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2224      	movs	r2, #36	@ 0x24
 800a0ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	f022 0201 	bic.w	r2, r2, #1
 800a104:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a10c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2200      	movs	r2, #0
 800a112:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2220      	movs	r2, #32
 800a120:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2200      	movs	r2, #0
 800a128:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3714      	adds	r7, #20
 800a132:	46bd      	mov	sp, r7
 800a134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a138:	4770      	bx	lr

0800a13a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b084      	sub	sp, #16
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a14e:	2302      	movs	r3, #2
 800a150:	e02d      	b.n	800a1ae <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2224      	movs	r2, #36	@ 0x24
 800a15e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f022 0201 	bic.w	r2, r2, #1
 800a178:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	683a      	ldr	r2, [r7, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f850 	bl	800a234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2220      	movs	r2, #32
 800a1a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	3710      	adds	r7, #16
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	bd80      	pop	{r7, pc}

0800a1b6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1b6:	b580      	push	{r7, lr}
 800a1b8:	b084      	sub	sp, #16
 800a1ba:	af00      	add	r7, sp, #0
 800a1bc:	6078      	str	r0, [r7, #4]
 800a1be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1c6:	2b01      	cmp	r3, #1
 800a1c8:	d101      	bne.n	800a1ce <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	e02d      	b.n	800a22a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	2224      	movs	r2, #36	@ 0x24
 800a1da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0201 	bic.w	r2, r2, #1
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	683a      	ldr	r2, [r7, #0]
 800a206:	430a      	orrs	r2, r1
 800a208:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f000 f812 	bl	800a234 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2220      	movs	r2, #32
 800a21c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a228:	2300      	movs	r3, #0
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3710      	adds	r7, #16
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a234:	b480      	push	{r7}
 800a236:	b085      	sub	sp, #20
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a240:	2b00      	cmp	r3, #0
 800a242:	d108      	bne.n	800a256 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a254:	e031      	b.n	800a2ba <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a256:	2308      	movs	r3, #8
 800a258:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a25a:	2308      	movs	r3, #8
 800a25c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	0e5b      	lsrs	r3, r3, #25
 800a266:	b2db      	uxtb	r3, r3
 800a268:	f003 0307 	and.w	r3, r3, #7
 800a26c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	0f5b      	lsrs	r3, r3, #29
 800a276:	b2db      	uxtb	r3, r3
 800a278:	f003 0307 	and.w	r3, r3, #7
 800a27c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a27e:	7bbb      	ldrb	r3, [r7, #14]
 800a280:	7b3a      	ldrb	r2, [r7, #12]
 800a282:	4911      	ldr	r1, [pc, #68]	@ (800a2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a284:	5c8a      	ldrb	r2, [r1, r2]
 800a286:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a28a:	7b3a      	ldrb	r2, [r7, #12]
 800a28c:	490f      	ldr	r1, [pc, #60]	@ (800a2cc <UARTEx_SetNbDataToProcess+0x98>)
 800a28e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a290:	fb93 f3f2 	sdiv	r3, r3, r2
 800a294:	b29a      	uxth	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a29c:	7bfb      	ldrb	r3, [r7, #15]
 800a29e:	7b7a      	ldrb	r2, [r7, #13]
 800a2a0:	4909      	ldr	r1, [pc, #36]	@ (800a2c8 <UARTEx_SetNbDataToProcess+0x94>)
 800a2a2:	5c8a      	ldrb	r2, [r1, r2]
 800a2a4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2a8:	7b7a      	ldrb	r2, [r7, #13]
 800a2aa:	4908      	ldr	r1, [pc, #32]	@ (800a2cc <UARTEx_SetNbDataToProcess+0x98>)
 800a2ac:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2b2:	b29a      	uxth	r2, r3
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2ba:	bf00      	nop
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr
 800a2c6:	bf00      	nop
 800a2c8:	080136dc 	.word	0x080136dc
 800a2cc:	080136e4 	.word	0x080136e4

0800a2d0 <LL_TIM_SetPrescaler>:
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a2e0:	bf00      	nop
 800a2e2:	370c      	adds	r7, #12
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ea:	4770      	bx	lr

0800a2ec <LL_TIM_SetAutoReload>:
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	683a      	ldr	r2, [r7, #0]
 800a2fa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <LL_TIM_SetRepetitionCounter>:
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
 800a310:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800a318:	bf00      	nop
 800a31a:	370c      	adds	r7, #12
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	695b      	ldr	r3, [r3, #20]
 800a330:	f043 0201 	orr.w	r2, r3, #1
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	615a      	str	r2, [r3, #20]
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr

0800a344 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a27      	ldr	r2, [pc, #156]	@ (800a3f4 <LL_TIM_Init+0xb0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d003      	beq.n	800a364 <LL_TIM_Init+0x20>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a362:	d106      	bne.n	800a372 <LL_TIM_Init+0x2e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	685b      	ldr	r3, [r3, #4]
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	4a1f      	ldr	r2, [pc, #124]	@ (800a3f4 <LL_TIM_Init+0xb0>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00b      	beq.n	800a392 <LL_TIM_Init+0x4e>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a380:	d007      	beq.n	800a392 <LL_TIM_Init+0x4e>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	4a1c      	ldr	r2, [pc, #112]	@ (800a3f8 <LL_TIM_Init+0xb4>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d003      	beq.n	800a392 <LL_TIM_Init+0x4e>
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	4a1b      	ldr	r2, [pc, #108]	@ (800a3fc <LL_TIM_Init+0xb8>)
 800a38e:	4293      	cmp	r3, r2
 800a390:	d106      	bne.n	800a3a0 <LL_TIM_Init+0x5c>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	4313      	orrs	r3, r2
 800a39e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	68fa      	ldr	r2, [r7, #12]
 800a3a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	689b      	ldr	r3, [r3, #8]
 800a3aa:	4619      	mov	r1, r3
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f7ff ff9d 	bl	800a2ec <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	881b      	ldrh	r3, [r3, #0]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f7ff ff89 	bl	800a2d0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a3f4 <LL_TIM_Init+0xb0>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d007      	beq.n	800a3d6 <LL_TIM_Init+0x92>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a0b      	ldr	r2, [pc, #44]	@ (800a3f8 <LL_TIM_Init+0xb4>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d003      	beq.n	800a3d6 <LL_TIM_Init+0x92>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	4a0a      	ldr	r2, [pc, #40]	@ (800a3fc <LL_TIM_Init+0xb8>)
 800a3d2:	4293      	cmp	r3, r2
 800a3d4:	d105      	bne.n	800a3e2 <LL_TIM_Init+0x9e>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	4619      	mov	r1, r3
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff93 	bl	800a308 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff ff9e 	bl	800a324 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800a3e8:	2300      	movs	r3, #0
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3710      	adds	r7, #16
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	40012c00 	.word	0x40012c00
 800a3f8:	40014400 	.word	0x40014400
 800a3fc:	40014800 	.word	0x40014800

0800a400 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2200      	movs	r2, #0
 800a40c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a410:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a414:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	b29a      	uxth	r2, r3
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	3714      	adds	r7, #20
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a42e:	b480      	push	{r7}
 800a430:	b085      	sub	sp, #20
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a436:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a43a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a442:	b29a      	uxth	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	b29b      	uxth	r3, r3
 800a448:	43db      	mvns	r3, r3
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	4013      	ands	r3, r2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a464:	b480      	push	{r7}
 800a466:	b085      	sub	sp, #20
 800a468:	af00      	add	r7, sp, #0
 800a46a:	60f8      	str	r0, [r7, #12]
 800a46c:	1d3b      	adds	r3, r7, #4
 800a46e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2201      	movs	r2, #1
 800a476:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2200      	movs	r2, #0
 800a48e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a492:	2300      	movs	r3, #0
}
 800a494:	4618      	mov	r0, r3
 800a496:	3714      	adds	r7, #20
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b09d      	sub	sp, #116	@ 0x74
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
 800a4a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a4b0:	687a      	ldr	r2, [r7, #4]
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	781b      	ldrb	r3, [r3, #0]
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800a4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a4c6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	78db      	ldrb	r3, [r3, #3]
 800a4ce:	2b03      	cmp	r3, #3
 800a4d0:	d81f      	bhi.n	800a512 <USB_ActivateEndpoint+0x72>
 800a4d2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4d8 <USB_ActivateEndpoint+0x38>)
 800a4d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d8:	0800a4e9 	.word	0x0800a4e9
 800a4dc:	0800a505 	.word	0x0800a505
 800a4e0:	0800a51b 	.word	0x0800a51b
 800a4e4:	0800a4f7 	.word	0x0800a4f7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a4e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a4ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a4f0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a4f4:	e012      	b.n	800a51c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a4f6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a4fa:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800a4fe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a502:	e00b      	b.n	800a51c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a504:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a508:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a50c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800a510:	e004      	b.n	800a51c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800a518:	e000      	b.n	800a51c <USB_ActivateEndpoint+0x7c>
      break;
 800a51a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	781b      	ldrb	r3, [r3, #0]
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	441a      	add	r2, r3
 800a526:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800a52a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a52e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a532:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	781b      	ldrb	r3, [r3, #0]
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	881b      	ldrh	r3, [r3, #0]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	b21b      	sxth	r3, r3
 800a54e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a556:	b21a      	sxth	r2, r3
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	b21b      	sxth	r3, r3
 800a55e:	4313      	orrs	r3, r2
 800a560:	b21b      	sxth	r3, r3
 800a562:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	441a      	add	r2, r3
 800a570:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800a574:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a578:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a57c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a580:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a584:	b29b      	uxth	r3, r3
 800a586:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	7b1b      	ldrb	r3, [r3, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	f040 8178 	bne.w	800a882 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 8084 	beq.w	800a6a4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	61bb      	str	r3, [r7, #24]
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	461a      	mov	r2, r3
 800a5aa:	69bb      	ldr	r3, [r7, #24]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	781b      	ldrb	r3, [r3, #0]
 800a5b4:	00da      	lsls	r2, r3, #3
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	88db      	ldrh	r3, [r3, #6]
 800a5c4:	085b      	lsrs	r3, r3, #1
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	005b      	lsls	r3, r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	827b      	strh	r3, [r7, #18]
 800a5de:	8a7b      	ldrh	r3, [r7, #18]
 800a5e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d01b      	beq.n	800a620 <USB_ActivateEndpoint+0x180>
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	881b      	ldrh	r3, [r3, #0]
 800a5f4:	b29b      	uxth	r3, r3
 800a5f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a5fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5fe:	823b      	strh	r3, [r7, #16]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	441a      	add	r2, r3
 800a60a:	8a3b      	ldrh	r3, [r7, #16]
 800a60c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a610:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a614:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a618:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a61c:	b29b      	uxth	r3, r3
 800a61e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	78db      	ldrb	r3, [r3, #3]
 800a624:	2b01      	cmp	r3, #1
 800a626:	d020      	beq.n	800a66a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	781b      	ldrb	r3, [r3, #0]
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a63a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63e:	81bb      	strh	r3, [r7, #12]
 800a640:	89bb      	ldrh	r3, [r7, #12]
 800a642:	f083 0320 	eor.w	r3, r3, #32
 800a646:	81bb      	strh	r3, [r7, #12]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	009b      	lsls	r3, r3, #2
 800a650:	441a      	add	r2, r3
 800a652:	89bb      	ldrh	r3, [r7, #12]
 800a654:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a658:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a65c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a664:	b29b      	uxth	r3, r3
 800a666:	8013      	strh	r3, [r2, #0]
 800a668:	e2d5      	b.n	800ac16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	781b      	ldrb	r3, [r3, #0]
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a67c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a680:	81fb      	strh	r3, [r7, #14]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	683b      	ldr	r3, [r7, #0]
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	009b      	lsls	r3, r3, #2
 800a68a:	441a      	add	r2, r3
 800a68c:	89fb      	ldrh	r3, [r7, #14]
 800a68e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a692:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a696:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a69a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a69e:	b29b      	uxth	r3, r3
 800a6a0:	8013      	strh	r3, [r2, #0]
 800a6a2:	e2b8      	b.n	800ac16 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b4:	4413      	add	r3, r2
 800a6b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	781b      	ldrb	r3, [r3, #0]
 800a6bc:	00da      	lsls	r2, r3, #3
 800a6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a6c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	88db      	ldrh	r3, [r3, #6]
 800a6cc:	085b      	lsrs	r3, r3, #1
 800a6ce:	b29b      	uxth	r3, r3
 800a6d0:	005b      	lsls	r3, r3, #1
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6e2:	b29b      	uxth	r3, r3
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e8:	4413      	add	r3, r2
 800a6ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	781b      	ldrb	r3, [r3, #0]
 800a6f0:	00da      	lsls	r2, r3, #3
 800a6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f4:	4413      	add	r3, r2
 800a6f6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	b29b      	uxth	r3, r3
 800a702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a706:	b29a      	uxth	r2, r3
 800a708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70a:	801a      	strh	r2, [r3, #0]
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	2b3e      	cmp	r3, #62	@ 0x3e
 800a712:	d91d      	bls.n	800a750 <USB_ActivateEndpoint+0x2b0>
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
 800a718:	095b      	lsrs	r3, r3, #5
 800a71a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	f003 031f 	and.w	r3, r3, #31
 800a724:	2b00      	cmp	r3, #0
 800a726:	d102      	bne.n	800a72e <USB_ActivateEndpoint+0x28e>
 800a728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a72a:	3b01      	subs	r3, #1
 800a72c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	b29a      	uxth	r2, r3
 800a734:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a736:	b29b      	uxth	r3, r3
 800a738:	029b      	lsls	r3, r3, #10
 800a73a:	b29b      	uxth	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a744:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a748:	b29a      	uxth	r2, r3
 800a74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a74c:	801a      	strh	r2, [r3, #0]
 800a74e:	e026      	b.n	800a79e <USB_ActivateEndpoint+0x2fe>
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	691b      	ldr	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10a      	bne.n	800a76e <USB_ActivateEndpoint+0x2ce>
 800a758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a75a:	881b      	ldrh	r3, [r3, #0]
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a766:	b29a      	uxth	r2, r3
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	801a      	strh	r2, [r3, #0]
 800a76c:	e017      	b.n	800a79e <USB_ActivateEndpoint+0x2fe>
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	691b      	ldr	r3, [r3, #16]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d002      	beq.n	800a788 <USB_ActivateEndpoint+0x2e8>
 800a782:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a784:	3301      	adds	r3, #1
 800a786:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a78a:	881b      	ldrh	r3, [r3, #0]
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a790:	b29b      	uxth	r3, r3
 800a792:	029b      	lsls	r3, r3, #10
 800a794:	b29b      	uxth	r3, r3
 800a796:	4313      	orrs	r3, r2
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a79c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	4413      	add	r3, r2
 800a7a8:	881b      	ldrh	r3, [r3, #0]
 800a7aa:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a7ac:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a7ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d01b      	beq.n	800a7ee <USB_ActivateEndpoint+0x34e>
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	4413      	add	r3, r2
 800a7c0:	881b      	ldrh	r3, [r3, #0]
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a7c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7cc:	843b      	strh	r3, [r7, #32]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	441a      	add	r2, r3
 800a7d8:	8c3b      	ldrh	r3, [r7, #32]
 800a7da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a7de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a7e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a7e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d124      	bne.n	800a840 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4413      	add	r3, r2
 800a800:	881b      	ldrh	r3, [r3, #0]
 800a802:	b29b      	uxth	r3, r3
 800a804:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a808:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a80c:	83bb      	strh	r3, [r7, #28]
 800a80e:	8bbb      	ldrh	r3, [r7, #28]
 800a810:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800a814:	83bb      	strh	r3, [r7, #28]
 800a816:	8bbb      	ldrh	r3, [r7, #28]
 800a818:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a81c:	83bb      	strh	r3, [r7, #28]
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	781b      	ldrb	r3, [r3, #0]
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	441a      	add	r2, r3
 800a828:	8bbb      	ldrh	r3, [r7, #28]
 800a82a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a82e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	8013      	strh	r3, [r2, #0]
 800a83e:	e1ea      	b.n	800ac16 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a840:	687a      	ldr	r2, [r7, #4]
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	009b      	lsls	r3, r3, #2
 800a848:	4413      	add	r3, r2
 800a84a:	881b      	ldrh	r3, [r3, #0]
 800a84c:	b29b      	uxth	r3, r3
 800a84e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a856:	83fb      	strh	r3, [r7, #30]
 800a858:	8bfb      	ldrh	r3, [r7, #30]
 800a85a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800a85e:	83fb      	strh	r3, [r7, #30]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	441a      	add	r2, r3
 800a86a:	8bfb      	ldrh	r3, [r7, #30]
 800a86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	8013      	strh	r3, [r2, #0]
 800a880:	e1c9      	b.n	800ac16 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	78db      	ldrb	r3, [r3, #3]
 800a886:	2b02      	cmp	r3, #2
 800a888:	d11e      	bne.n	800a8c8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29b      	uxth	r3, r3
 800a898:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a89c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8a0:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	441a      	add	r2, r3
 800a8ae:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800a8b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8ba:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a8be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	8013      	strh	r3, [r2, #0]
 800a8c6:	e01d      	b.n	800a904 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	781b      	ldrb	r3, [r3, #0]
 800a8ce:	009b      	lsls	r3, r3, #2
 800a8d0:	4413      	add	r3, r2
 800a8d2:	881b      	ldrh	r3, [r3, #0]
 800a8d4:	b29b      	uxth	r3, r3
 800a8d6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800a8da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8de:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	781b      	ldrb	r3, [r3, #0]
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	441a      	add	r2, r3
 800a8ec:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800a8f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a8f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a8f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a8fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a900:	b29b      	uxth	r3, r3
 800a902:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a90e:	b29b      	uxth	r3, r3
 800a910:	461a      	mov	r2, r3
 800a912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a914:	4413      	add	r3, r2
 800a916:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	00da      	lsls	r2, r3, #3
 800a91e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a920:	4413      	add	r3, r2
 800a922:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a926:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	891b      	ldrh	r3, [r3, #8]
 800a92c:	085b      	lsrs	r3, r3, #1
 800a92e:	b29b      	uxth	r3, r3
 800a930:	005b      	lsls	r3, r3, #1
 800a932:	b29a      	uxth	r2, r3
 800a934:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a936:	801a      	strh	r2, [r3, #0]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a942:	b29b      	uxth	r3, r3
 800a944:	461a      	mov	r2, r3
 800a946:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a948:	4413      	add	r3, r2
 800a94a:	657b      	str	r3, [r7, #84]	@ 0x54
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	00da      	lsls	r2, r3, #3
 800a952:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a954:	4413      	add	r3, r2
 800a956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800a95a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	895b      	ldrh	r3, [r3, #10]
 800a960:	085b      	lsrs	r3, r3, #1
 800a962:	b29b      	uxth	r3, r3
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	b29a      	uxth	r2, r3
 800a968:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a96a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b00      	cmp	r3, #0
 800a972:	f040 8093 	bne.w	800aa9c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	009b      	lsls	r3, r3, #2
 800a97e:	4413      	add	r3, r2
 800a980:	881b      	ldrh	r3, [r3, #0]
 800a982:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800a986:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800a98a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d01b      	beq.n	800a9ca <USB_ActivateEndpoint+0x52a>
 800a992:	687a      	ldr	r2, [r7, #4]
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	781b      	ldrb	r3, [r3, #0]
 800a998:	009b      	lsls	r3, r3, #2
 800a99a:	4413      	add	r3, r2
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	b29b      	uxth	r3, r3
 800a9a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9a8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800a9aa:	687a      	ldr	r2, [r7, #4]
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	441a      	add	r2, r3
 800a9b4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800a9b6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a9ba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a9be:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a9c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a9ca:	687a      	ldr	r2, [r7, #4]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800a9d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800a9da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d01b      	beq.n	800aa1a <USB_ActivateEndpoint+0x57a>
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	009b      	lsls	r3, r3, #2
 800a9ea:	4413      	add	r3, r2
 800a9ec:	881b      	ldrh	r3, [r3, #0]
 800a9ee:	b29b      	uxth	r3, r3
 800a9f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9f8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800a9fa:	687a      	ldr	r2, [r7, #4]
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	781b      	ldrb	r3, [r3, #0]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	441a      	add	r2, r3
 800aa04:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800aa06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa12:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800aa16:	b29b      	uxth	r3, r3
 800aa18:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	781b      	ldrb	r3, [r3, #0]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	4413      	add	r3, r2
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aa2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aa30:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aa32:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aa34:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800aa38:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aa3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aa3c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800aa40:	873b      	strh	r3, [r7, #56]	@ 0x38
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	441a      	add	r2, r3
 800aa4c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800aa4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa56:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aa74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa78:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	441a      	add	r2, r3
 800aa84:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aa8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aa8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	8013      	strh	r3, [r2, #0]
 800aa9a:	e0bc      	b.n	800ac16 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	009b      	lsls	r3, r3, #2
 800aaa4:	4413      	add	r3, r2
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800aaac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800aab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d01d      	beq.n	800aaf4 <USB_ActivateEndpoint+0x654>
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	781b      	ldrb	r3, [r3, #0]
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	4413      	add	r3, r2
 800aac2:	881b      	ldrh	r3, [r3, #0]
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aaca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aace:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	009b      	lsls	r3, r3, #2
 800aada:	441a      	add	r2, r3
 800aadc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800aae0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aae4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aae8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aaec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aaf4:	687a      	ldr	r2, [r7, #4]
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	009b      	lsls	r3, r3, #2
 800aafc:	4413      	add	r3, r2
 800aafe:	881b      	ldrh	r3, [r3, #0]
 800ab00:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800ab04:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800ab08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d01d      	beq.n	800ab4c <USB_ActivateEndpoint+0x6ac>
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	683b      	ldr	r3, [r7, #0]
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	009b      	lsls	r3, r3, #2
 800ab18:	4413      	add	r3, r2
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab26:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	441a      	add	r2, r3
 800ab34:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800ab38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	78db      	ldrb	r3, [r3, #3]
 800ab50:	2b01      	cmp	r3, #1
 800ab52:	d024      	beq.n	800ab9e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	009b      	lsls	r3, r3, #2
 800ab5c:	4413      	add	r3, r2
 800ab5e:	881b      	ldrh	r3, [r3, #0]
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ab66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ab6a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ab6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ab72:	f083 0320 	eor.w	r3, r3, #32
 800ab76:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	441a      	add	r2, r3
 800ab84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800ab88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ab8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ab90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab98:	b29b      	uxth	r3, r3
 800ab9a:	8013      	strh	r3, [r2, #0]
 800ab9c:	e01d      	b.n	800abda <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	009b      	lsls	r3, r3, #2
 800aba6:	4413      	add	r3, r2
 800aba8:	881b      	ldrh	r3, [r3, #0]
 800abaa:	b29b      	uxth	r3, r3
 800abac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800abb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	009b      	lsls	r3, r3, #2
 800abc0:	441a      	add	r2, r3
 800abc2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800abc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abd6:	b29b      	uxth	r3, r3
 800abd8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800abda:	687a      	ldr	r2, [r7, #4]
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	4413      	add	r3, r2
 800abe4:	881b      	ldrh	r3, [r3, #0]
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800abec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abf0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800abf4:	687a      	ldr	r2, [r7, #4]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	441a      	add	r2, r3
 800abfe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ac02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800ac16:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3774      	adds	r7, #116	@ 0x74
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
 800ac26:	bf00      	nop

0800ac28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b08d      	sub	sp, #52	@ 0x34
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	7b1b      	ldrb	r3, [r3, #12]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f040 808e 	bne.w	800ad58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	785b      	ldrb	r3, [r3, #1]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d044      	beq.n	800acce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac44:	687a      	ldr	r2, [r7, #4]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	881b      	ldrh	r3, [r3, #0]
 800ac50:	81bb      	strh	r3, [r7, #12]
 800ac52:	89bb      	ldrh	r3, [r7, #12]
 800ac54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d01b      	beq.n	800ac94 <USB_DeactivateEndpoint+0x6c>
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac72:	817b      	strh	r3, [r7, #10]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	441a      	add	r2, r3
 800ac7e:	897b      	ldrh	r3, [r7, #10]
 800ac80:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac84:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac8c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	009b      	lsls	r3, r3, #2
 800ac9c:	4413      	add	r3, r2
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	b29b      	uxth	r3, r3
 800aca2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aca6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800acaa:	813b      	strh	r3, [r7, #8]
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	441a      	add	r2, r3
 800acb6:	893b      	ldrh	r3, [r7, #8]
 800acb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800acbc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800acc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800acc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acc8:	b29b      	uxth	r3, r3
 800acca:	8013      	strh	r3, [r2, #0]
 800accc:	e192      	b.n	800aff4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800acce:	687a      	ldr	r2, [r7, #4]
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	009b      	lsls	r3, r3, #2
 800acd6:	4413      	add	r3, r2
 800acd8:	881b      	ldrh	r3, [r3, #0]
 800acda:	827b      	strh	r3, [r7, #18]
 800acdc:	8a7b      	ldrh	r3, [r7, #18]
 800acde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d01b      	beq.n	800ad1e <USB_DeactivateEndpoint+0xf6>
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	b29b      	uxth	r3, r3
 800acf4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acf8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800acfc:	823b      	strh	r3, [r7, #16]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	441a      	add	r2, r3
 800ad08:	8a3b      	ldrh	r3, [r7, #16]
 800ad0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad12:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800ad16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad1a:	b29b      	uxth	r3, r3
 800ad1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad1e:	687a      	ldr	r2, [r7, #4]
 800ad20:	683b      	ldr	r3, [r7, #0]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	009b      	lsls	r3, r3, #2
 800ad26:	4413      	add	r3, r2
 800ad28:	881b      	ldrh	r3, [r3, #0]
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ad30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad34:	81fb      	strh	r3, [r7, #14]
 800ad36:	687a      	ldr	r2, [r7, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	009b      	lsls	r3, r3, #2
 800ad3e:	441a      	add	r2, r3
 800ad40:	89fb      	ldrh	r3, [r7, #14]
 800ad42:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ad46:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ad4a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	8013      	strh	r3, [r2, #0]
 800ad56:	e14d      	b.n	800aff4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	785b      	ldrb	r3, [r3, #1]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	f040 80a5 	bne.w	800aeac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	781b      	ldrb	r3, [r3, #0]
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	4413      	add	r3, r2
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	843b      	strh	r3, [r7, #32]
 800ad70:	8c3b      	ldrh	r3, [r7, #32]
 800ad72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01b      	beq.n	800adb2 <USB_DeactivateEndpoint+0x18a>
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	683b      	ldr	r3, [r7, #0]
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	009b      	lsls	r3, r3, #2
 800ad82:	4413      	add	r3, r2
 800ad84:	881b      	ldrh	r3, [r3, #0]
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ad8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad90:	83fb      	strh	r3, [r7, #30]
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	441a      	add	r2, r3
 800ad9c:	8bfb      	ldrh	r3, [r7, #30]
 800ad9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ada2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ada6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800adaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adae:	b29b      	uxth	r3, r3
 800adb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800adb2:	687a      	ldr	r2, [r7, #4]
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	4413      	add	r3, r2
 800adbc:	881b      	ldrh	r3, [r3, #0]
 800adbe:	83bb      	strh	r3, [r7, #28]
 800adc0:	8bbb      	ldrh	r3, [r7, #28]
 800adc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d01b      	beq.n	800ae02 <USB_DeactivateEndpoint+0x1da>
 800adca:	687a      	ldr	r2, [r7, #4]
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4413      	add	r3, r2
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800addc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ade0:	837b      	strh	r3, [r7, #26]
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	683b      	ldr	r3, [r7, #0]
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	441a      	add	r2, r3
 800adec:	8b7b      	ldrh	r3, [r7, #26]
 800adee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800adf2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800adf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adfa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	4413      	add	r3, r2
 800ae0c:	881b      	ldrh	r3, [r3, #0]
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae18:	833b      	strh	r3, [r7, #24]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	441a      	add	r2, r3
 800ae24:	8b3b      	ldrh	r3, [r7, #24]
 800ae26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ae36:	b29b      	uxth	r3, r3
 800ae38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ae3a:	687a      	ldr	r2, [r7, #4]
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	781b      	ldrb	r3, [r3, #0]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	881b      	ldrh	r3, [r3, #0]
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ae4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ae50:	82fb      	strh	r3, [r7, #22]
 800ae52:	687a      	ldr	r2, [r7, #4]
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	441a      	add	r2, r3
 800ae5c:	8afb      	ldrh	r3, [r7, #22]
 800ae5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ae6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ae72:	687a      	ldr	r2, [r7, #4]
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	781b      	ldrb	r3, [r3, #0]
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	4413      	add	r3, r2
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae88:	82bb      	strh	r3, [r7, #20]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	009b      	lsls	r3, r3, #2
 800ae92:	441a      	add	r2, r3
 800ae94:	8abb      	ldrh	r3, [r7, #20]
 800ae96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ae9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ae9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	8013      	strh	r3, [r2, #0]
 800aeaa:	e0a3      	b.n	800aff4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aeac:	687a      	ldr	r2, [r7, #4]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	009b      	lsls	r3, r3, #2
 800aeb4:	4413      	add	r3, r2
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800aeba:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800aebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01b      	beq.n	800aefc <USB_DeactivateEndpoint+0x2d4>
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	009b      	lsls	r3, r3, #2
 800aecc:	4413      	add	r3, r2
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	b29b      	uxth	r3, r3
 800aed2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800aed6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aeda:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	009b      	lsls	r3, r3, #2
 800aee4:	441a      	add	r2, r3
 800aee6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800aee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800aeec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800aef0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800aef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aefc:	687a      	ldr	r2, [r7, #4]
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	4413      	add	r3, r2
 800af06:	881b      	ldrh	r3, [r3, #0]
 800af08:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800af0a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800af0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d01b      	beq.n	800af4c <USB_DeactivateEndpoint+0x324>
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	009b      	lsls	r3, r3, #2
 800af1c:	4413      	add	r3, r2
 800af1e:	881b      	ldrh	r3, [r3, #0]
 800af20:	b29b      	uxth	r3, r3
 800af22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af2a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800af2c:	687a      	ldr	r2, [r7, #4]
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	441a      	add	r2, r3
 800af36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800af38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800af44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800af48:	b29b      	uxth	r3, r3
 800af4a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800af4c:	687a      	ldr	r2, [r7, #4]
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	009b      	lsls	r3, r3, #2
 800af54:	4413      	add	r3, r2
 800af56:	881b      	ldrh	r3, [r3, #0]
 800af58:	b29b      	uxth	r3, r3
 800af5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800af62:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	009b      	lsls	r3, r3, #2
 800af6c:	441a      	add	r2, r3
 800af6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af70:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800af74:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800af78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800af7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af80:	b29b      	uxth	r3, r3
 800af82:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	b29b      	uxth	r3, r3
 800af92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800af96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800af9a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	683b      	ldr	r3, [r7, #0]
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	441a      	add	r2, r3
 800afa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800afa8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800afb8:	b29b      	uxth	r3, r3
 800afba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800afbc:	687a      	ldr	r2, [r7, #4]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	781b      	ldrb	r3, [r3, #0]
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	881b      	ldrh	r3, [r3, #0]
 800afc8:	b29b      	uxth	r3, r3
 800afca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800afce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afd2:	847b      	strh	r3, [r7, #34]	@ 0x22
 800afd4:	687a      	ldr	r2, [r7, #4]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	441a      	add	r2, r3
 800afde:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800afe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800afe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800afe8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800afec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800aff4:	2300      	movs	r3, #0
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3734      	adds	r7, #52	@ 0x34
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr

0800b002 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b0c2      	sub	sp, #264	@ 0x108
 800b006:	af00      	add	r7, sp, #0
 800b008:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b010:	6018      	str	r0, [r3, #0]
 800b012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b01c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	785b      	ldrb	r3, [r3, #1]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	f040 86b7 	bne.w	800bd9c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800b02e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	699a      	ldr	r2, [r3, #24]
 800b03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	429a      	cmp	r2, r3
 800b048:	d908      	bls.n	800b05c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800b04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b04e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b05a:	e007      	b.n	800b06c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800b05c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b060:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	699b      	ldr	r3, [r3, #24]
 800b068:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800b06c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b070:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	7b1b      	ldrb	r3, [r3, #12]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d13a      	bne.n	800b0f2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800b07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b080:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	6959      	ldr	r1, [r3, #20]
 800b088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b08c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	88da      	ldrh	r2, [r3, #6]
 800b094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b098:	b29b      	uxth	r3, r3
 800b09a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b09e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b0a2:	6800      	ldr	r0, [r0, #0]
 800b0a4:	f001 fc98 	bl	800c9d8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b0a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	613b      	str	r3, [r7, #16]
 800b0b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0c2:	b29b      	uxth	r3, r3
 800b0c4:	461a      	mov	r2, r3
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	613b      	str	r3, [r7, #16]
 800b0cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	00da      	lsls	r2, r3, #3
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b0e2:	60fb      	str	r3, [r7, #12]
 800b0e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0e8:	b29a      	uxth	r2, r3
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	801a      	strh	r2, [r3, #0]
 800b0ee:	f000 be1f 	b.w	800bd30 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800b0f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	78db      	ldrb	r3, [r3, #3]
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	f040 8462 	bne.w	800b9c8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800b104:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b108:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	6a1a      	ldr	r2, [r3, #32]
 800b110:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b114:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	429a      	cmp	r2, r3
 800b11e:	f240 83df 	bls.w	800b8e0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800b122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b130:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	009b      	lsls	r3, r3, #2
 800b13a:	4413      	add	r3, r2
 800b13c:	881b      	ldrh	r3, [r3, #0]
 800b13e:	b29b      	uxth	r3, r3
 800b140:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b144:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b148:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800b14c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b150:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b15a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	781b      	ldrb	r3, [r3, #0]
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	441a      	add	r2, r3
 800b166:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800b16a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b16e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b172:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800b176:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800b17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	6a1a      	ldr	r2, [r3, #32]
 800b18a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b18e:	1ad2      	subs	r2, r2, r3
 800b190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b19c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	781b      	ldrb	r3, [r3, #0]
 800b1b2:	009b      	lsls	r3, r3, #2
 800b1b4:	4413      	add	r3, r2
 800b1b6:	881b      	ldrh	r3, [r3, #0]
 800b1b8:	b29b      	uxth	r3, r3
 800b1ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	f000 81c7 	beq.w	800b552 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b1d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	785b      	ldrb	r3, [r3, #1]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d177      	bne.n	800b2d0 <USB_EPStartXfer+0x2ce>
 800b1e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	461a      	mov	r2, r3
 800b1fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b200:	4413      	add	r3, r2
 800b202:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b204:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b208:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	00da      	lsls	r2, r3, #3
 800b212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b214:	4413      	add	r3, r2
 800b216:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b21a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b21c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	b29b      	uxth	r3, r3
 800b222:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b226:	b29a      	uxth	r2, r3
 800b228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22a:	801a      	strh	r2, [r3, #0]
 800b22c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b230:	2b3e      	cmp	r3, #62	@ 0x3e
 800b232:	d921      	bls.n	800b278 <USB_EPStartXfer+0x276>
 800b234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b238:	095b      	lsrs	r3, r3, #5
 800b23a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b23e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b242:	f003 031f 	and.w	r3, r3, #31
 800b246:	2b00      	cmp	r3, #0
 800b248:	d104      	bne.n	800b254 <USB_EPStartXfer+0x252>
 800b24a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b24e:	3b01      	subs	r3, #1
 800b250:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	881b      	ldrh	r3, [r3, #0]
 800b258:	b29a      	uxth	r2, r3
 800b25a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b25e:	b29b      	uxth	r3, r3
 800b260:	029b      	lsls	r3, r3, #10
 800b262:	b29b      	uxth	r3, r3
 800b264:	4313      	orrs	r3, r2
 800b266:	b29b      	uxth	r3, r3
 800b268:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b26c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b270:	b29a      	uxth	r2, r3
 800b272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b274:	801a      	strh	r2, [r3, #0]
 800b276:	e050      	b.n	800b31a <USB_EPStartXfer+0x318>
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d10a      	bne.n	800b296 <USB_EPStartXfer+0x294>
 800b280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	b29b      	uxth	r3, r3
 800b286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b28a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b28e:	b29a      	uxth	r2, r3
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	801a      	strh	r2, [r3, #0]
 800b294:	e041      	b.n	800b31a <USB_EPStartXfer+0x318>
 800b296:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b29a:	085b      	lsrs	r3, r3, #1
 800b29c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d004      	beq.n	800b2b6 <USB_EPStartXfer+0x2b4>
 800b2ac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2b0:	3301      	adds	r3, #1
 800b2b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2b8:	881b      	ldrh	r3, [r3, #0]
 800b2ba:	b29a      	uxth	r2, r3
 800b2bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	029b      	lsls	r3, r3, #10
 800b2c4:	b29b      	uxth	r3, r3
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	b29a      	uxth	r2, r3
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2cc:	801a      	strh	r2, [r3, #0]
 800b2ce:	e024      	b.n	800b31a <USB_EPStartXfer+0x318>
 800b2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	785b      	ldrb	r3, [r3, #1]
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	d11c      	bne.n	800b31a <USB_EPStartXfer+0x318>
 800b2e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2f4:	4413      	add	r3, r2
 800b2f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	00da      	lsls	r2, r3, #3
 800b306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b308:	4413      	add	r3, r2
 800b30a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b30e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b314:	b29a      	uxth	r2, r3
 800b316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b318:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	895b      	ldrh	r3, [r3, #10]
 800b326:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b32a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	6959      	ldr	r1, [r3, #20]
 800b336:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b340:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b344:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b348:	6800      	ldr	r0, [r0, #0]
 800b34a:	f001 fb45 	bl	800c9d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800b34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	695a      	ldr	r2, [r3, #20]
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b35e:	441a      	add	r2, r3
 800b360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	6a1a      	ldr	r2, [r3, #32]
 800b378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	691b      	ldr	r3, [r3, #16]
 800b384:	429a      	cmp	r2, r3
 800b386:	d90f      	bls.n	800b3a8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800b388:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	6a1a      	ldr	r2, [r3, #32]
 800b394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b398:	1ad2      	subs	r2, r2, r3
 800b39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	621a      	str	r2, [r3, #32]
 800b3a6:	e00e      	b.n	800b3c6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6a1b      	ldr	r3, [r3, #32]
 800b3b4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b3b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b3c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	785b      	ldrb	r3, [r3, #1]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d177      	bne.n	800b4c6 <USB_EPStartXfer+0x4c4>
 800b3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	61bb      	str	r3, [r7, #24]
 800b3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3f0:	b29b      	uxth	r3, r3
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	69bb      	ldr	r3, [r7, #24]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	61bb      	str	r3, [r7, #24]
 800b3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	00da      	lsls	r2, r3, #3
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	4413      	add	r3, r2
 800b40c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	881b      	ldrh	r3, [r3, #0]
 800b416:	b29b      	uxth	r3, r3
 800b418:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	697b      	ldr	r3, [r7, #20]
 800b420:	801a      	strh	r2, [r3, #0]
 800b422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b426:	2b3e      	cmp	r3, #62	@ 0x3e
 800b428:	d921      	bls.n	800b46e <USB_EPStartXfer+0x46c>
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b42e:	095b      	lsrs	r3, r3, #5
 800b430:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b438:	f003 031f 	and.w	r3, r3, #31
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d104      	bne.n	800b44a <USB_EPStartXfer+0x448>
 800b440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b444:	3b01      	subs	r3, #1
 800b446:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	b29a      	uxth	r2, r3
 800b450:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b454:	b29b      	uxth	r3, r3
 800b456:	029b      	lsls	r3, r3, #10
 800b458:	b29b      	uxth	r3, r3
 800b45a:	4313      	orrs	r3, r2
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b462:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b466:	b29a      	uxth	r2, r3
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	801a      	strh	r2, [r3, #0]
 800b46c:	e056      	b.n	800b51c <USB_EPStartXfer+0x51a>
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b472:	2b00      	cmp	r3, #0
 800b474:	d10a      	bne.n	800b48c <USB_EPStartXfer+0x48a>
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	881b      	ldrh	r3, [r3, #0]
 800b47a:	b29b      	uxth	r3, r3
 800b47c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b480:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b484:	b29a      	uxth	r2, r3
 800b486:	697b      	ldr	r3, [r7, #20]
 800b488:	801a      	strh	r2, [r3, #0]
 800b48a:	e047      	b.n	800b51c <USB_EPStartXfer+0x51a>
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b490:	085b      	lsrs	r3, r3, #1
 800b492:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d004      	beq.n	800b4ac <USB_EPStartXfer+0x4aa>
 800b4a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	881b      	ldrh	r3, [r3, #0]
 800b4b0:	b29a      	uxth	r2, r3
 800b4b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	029b      	lsls	r3, r3, #10
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	697b      	ldr	r3, [r7, #20]
 800b4c2:	801a      	strh	r2, [r3, #0]
 800b4c4:	e02a      	b.n	800b51c <USB_EPStartXfer+0x51a>
 800b4c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	785b      	ldrb	r3, [r3, #1]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d122      	bne.n	800b51c <USB_EPStartXfer+0x51a>
 800b4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	623b      	str	r3, [r7, #32]
 800b4e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	461a      	mov	r2, r3
 800b4f4:	6a3b      	ldr	r3, [r7, #32]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	623b      	str	r3, [r7, #32]
 800b4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	781b      	ldrb	r3, [r3, #0]
 800b506:	00da      	lsls	r2, r3, #3
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	4413      	add	r3, r2
 800b50c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b510:	61fb      	str	r3, [r7, #28]
 800b512:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b516:	b29a      	uxth	r2, r3
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	891b      	ldrh	r3, [r3, #8]
 800b528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b52c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b530:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6959      	ldr	r1, [r3, #20]
 800b538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b542:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b546:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b54a:	6800      	ldr	r0, [r0, #0]
 800b54c:	f001 fa44 	bl	800c9d8 <USB_WritePMA>
 800b550:	e3ee      	b.n	800bd30 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	785b      	ldrb	r3, [r3, #1]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d177      	bne.n	800b652 <USB_EPStartXfer+0x650>
 800b562:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b572:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	461a      	mov	r2, r3
 800b580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b582:	4413      	add	r3, r2
 800b584:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b586:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b58a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	00da      	lsls	r2, r3, #3
 800b594:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b596:	4413      	add	r3, r2
 800b598:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b59c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5a0:	881b      	ldrh	r3, [r3, #0]
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800b5b4:	d921      	bls.n	800b5fa <USB_EPStartXfer+0x5f8>
 800b5b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5ba:	095b      	lsrs	r3, r3, #5
 800b5bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5c4:	f003 031f 	and.w	r3, r3, #31
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d104      	bne.n	800b5d6 <USB_EPStartXfer+0x5d4>
 800b5cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b5d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5d8:	881b      	ldrh	r3, [r3, #0]
 800b5da:	b29a      	uxth	r2, r3
 800b5dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	029b      	lsls	r3, r3, #10
 800b5e4:	b29b      	uxth	r3, r3
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5f2:	b29a      	uxth	r2, r3
 800b5f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e056      	b.n	800b6a8 <USB_EPStartXfer+0x6a6>
 800b5fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10a      	bne.n	800b618 <USB_EPStartXfer+0x616>
 800b602:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b604:	881b      	ldrh	r3, [r3, #0]
 800b606:	b29b      	uxth	r3, r3
 800b608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b60c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b610:	b29a      	uxth	r2, r3
 800b612:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b614:	801a      	strh	r2, [r3, #0]
 800b616:	e047      	b.n	800b6a8 <USB_EPStartXfer+0x6a6>
 800b618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b61c:	085b      	lsrs	r3, r3, #1
 800b61e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b622:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b626:	f003 0301 	and.w	r3, r3, #1
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d004      	beq.n	800b638 <USB_EPStartXfer+0x636>
 800b62e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b632:	3301      	adds	r3, #1
 800b634:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b63a:	881b      	ldrh	r3, [r3, #0]
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800b642:	b29b      	uxth	r3, r3
 800b644:	029b      	lsls	r3, r3, #10
 800b646:	b29b      	uxth	r3, r3
 800b648:	4313      	orrs	r3, r2
 800b64a:	b29a      	uxth	r2, r3
 800b64c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b64e:	801a      	strh	r2, [r3, #0]
 800b650:	e02a      	b.n	800b6a8 <USB_EPStartXfer+0x6a6>
 800b652:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	785b      	ldrb	r3, [r3, #1]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d122      	bne.n	800b6a8 <USB_EPStartXfer+0x6a6>
 800b662:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b666:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	653b      	str	r3, [r7, #80]	@ 0x50
 800b66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b672:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	461a      	mov	r2, r3
 800b680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b682:	4413      	add	r3, r2
 800b684:	653b      	str	r3, [r7, #80]	@ 0x50
 800b686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	00da      	lsls	r2, r3, #3
 800b694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b696:	4413      	add	r3, r2
 800b698:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b69c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6a2:	b29a      	uxth	r2, r3
 800b6a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b6a6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b6a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	891b      	ldrh	r3, [r3, #8]
 800b6b4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b6b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6959      	ldr	r1, [r3, #20]
 800b6c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6c8:	b29b      	uxth	r3, r3
 800b6ca:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b6ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b6d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b6d6:	6800      	ldr	r0, [r0, #0]
 800b6d8:	f001 f97e 	bl	800c9d8 <USB_WritePMA>
            ep->xfer_buff += len;
 800b6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	695a      	ldr	r2, [r3, #20]
 800b6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ec:	441a      	add	r2, r3
 800b6ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b6fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	6a1a      	ldr	r2, [r3, #32]
 800b706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	429a      	cmp	r2, r3
 800b714:	d90f      	bls.n	800b736 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800b716:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b71a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6a1a      	ldr	r2, [r3, #32]
 800b722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b726:	1ad2      	subs	r2, r2, r3
 800b728:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	621a      	str	r2, [r3, #32]
 800b734:	e00e      	b.n	800b754 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800b736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b73a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6a1b      	ldr	r3, [r3, #32]
 800b742:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800b746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b74a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2200      	movs	r2, #0
 800b752:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b754:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b758:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	785b      	ldrb	r3, [r3, #1]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d177      	bne.n	800b860 <USB_EPStartXfer+0x85e>
 800b770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b77c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	461a      	mov	r2, r3
 800b78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b790:	4413      	add	r3, r2
 800b792:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	781b      	ldrb	r3, [r3, #0]
 800b7a0:	00da      	lsls	r2, r3, #3
 800b7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7a4:	4413      	add	r3, r2
 800b7a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b7aa:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ae:	881b      	ldrh	r3, [r3, #0]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b7b6:	b29a      	uxth	r2, r3
 800b7b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7ba:	801a      	strh	r2, [r3, #0]
 800b7bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c0:	2b3e      	cmp	r3, #62	@ 0x3e
 800b7c2:	d921      	bls.n	800b808 <USB_EPStartXfer+0x806>
 800b7c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7c8:	095b      	lsrs	r3, r3, #5
 800b7ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b7ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d2:	f003 031f 	and.w	r3, r3, #31
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d104      	bne.n	800b7e4 <USB_EPStartXfer+0x7e2>
 800b7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7de:	3b01      	subs	r3, #1
 800b7e0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e6:	881b      	ldrh	r3, [r3, #0]
 800b7e8:	b29a      	uxth	r2, r3
 800b7ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	029b      	lsls	r3, r3, #10
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	b29b      	uxth	r3, r3
 800b7f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b800:	b29a      	uxth	r2, r3
 800b802:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b804:	801a      	strh	r2, [r3, #0]
 800b806:	e050      	b.n	800b8aa <USB_EPStartXfer+0x8a8>
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d10a      	bne.n	800b826 <USB_EPStartXfer+0x824>
 800b810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b812:	881b      	ldrh	r3, [r3, #0]
 800b814:	b29b      	uxth	r3, r3
 800b816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b81a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b81e:	b29a      	uxth	r2, r3
 800b820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b822:	801a      	strh	r2, [r3, #0]
 800b824:	e041      	b.n	800b8aa <USB_EPStartXfer+0x8a8>
 800b826:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b82a:	085b      	lsrs	r3, r3, #1
 800b82c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b834:	f003 0301 	and.w	r3, r3, #1
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d004      	beq.n	800b846 <USB_EPStartXfer+0x844>
 800b83c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b840:	3301      	adds	r3, #1
 800b842:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800b846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b848:	881b      	ldrh	r3, [r3, #0]
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800b850:	b29b      	uxth	r3, r3
 800b852:	029b      	lsls	r3, r3, #10
 800b854:	b29b      	uxth	r3, r3
 800b856:	4313      	orrs	r3, r2
 800b858:	b29a      	uxth	r2, r3
 800b85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b85c:	801a      	strh	r2, [r3, #0]
 800b85e:	e024      	b.n	800b8aa <USB_EPStartXfer+0x8a8>
 800b860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b864:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	785b      	ldrb	r3, [r3, #1]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d11c      	bne.n	800b8aa <USB_EPStartXfer+0x8a8>
 800b870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b874:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b87e:	b29b      	uxth	r3, r3
 800b880:	461a      	mov	r2, r3
 800b882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b884:	4413      	add	r3, r2
 800b886:	643b      	str	r3, [r7, #64]	@ 0x40
 800b888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	781b      	ldrb	r3, [r3, #0]
 800b894:	00da      	lsls	r2, r3, #3
 800b896:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b898:	4413      	add	r3, r2
 800b89a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b89e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8a4:	b29a      	uxth	r2, r3
 800b8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8a8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b8aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b8ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	6959      	ldr	r1, [r3, #20]
 800b8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b8d0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b8d4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b8d8:	6800      	ldr	r0, [r0, #0]
 800b8da:	f001 f87d 	bl	800c9d8 <USB_WritePMA>
 800b8de:	e227      	b.n	800bd30 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b8e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b8f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	881b      	ldrh	r3, [r3, #0]
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800b912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b916:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800b91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b91e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	781b      	ldrb	r3, [r3, #0]
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	441a      	add	r2, r3
 800b934:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800b938:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b93c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b940:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b948:	b29b      	uxth	r3, r3
 800b94a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b950:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b95c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b966:	b29b      	uxth	r3, r3
 800b968:	461a      	mov	r2, r3
 800b96a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b96c:	4413      	add	r3, r2
 800b96e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	00da      	lsls	r2, r3, #3
 800b97e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b980:	4413      	add	r3, r2
 800b982:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b986:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b98c:	b29a      	uxth	r2, r3
 800b98e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b990:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	891b      	ldrh	r3, [r3, #8]
 800b99e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6959      	ldr	r1, [r3, #20]
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b9b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b9bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b9c0:	6800      	ldr	r0, [r0, #0]
 800b9c2:	f001 f809 	bl	800c9d8 <USB_WritePMA>
 800b9c6:	e1b3      	b.n	800bd30 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b9c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	6a1a      	ldr	r2, [r3, #32]
 800b9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9d8:	1ad2      	subs	r2, r2, r3
 800b9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b9e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	009b      	lsls	r3, r3, #2
 800b9fe:	4413      	add	r3, r2
 800ba00:	881b      	ldrh	r3, [r3, #0]
 800ba02:	b29b      	uxth	r3, r3
 800ba04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 80c6 	beq.w	800bb9a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ba0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	673b      	str	r3, [r7, #112]	@ 0x70
 800ba1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	785b      	ldrb	r3, [r3, #1]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d177      	bne.n	800bb1a <USB_EPStartXfer+0xb18>
 800ba2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	461a      	mov	r2, r3
 800ba48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba4a:	4413      	add	r3, r2
 800ba4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ba4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	00da      	lsls	r2, r3, #3
 800ba5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ba5e:	4413      	add	r3, r2
 800ba60:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ba64:	667b      	str	r3, [r7, #100]	@ 0x64
 800ba66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba68:	881b      	ldrh	r3, [r3, #0]
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba70:	b29a      	uxth	r2, r3
 800ba72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ba74:	801a      	strh	r2, [r3, #0]
 800ba76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba7a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ba7c:	d921      	bls.n	800bac2 <USB_EPStartXfer+0xac0>
 800ba7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba82:	095b      	lsrs	r3, r3, #5
 800ba84:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ba8c:	f003 031f 	and.w	r3, r3, #31
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d104      	bne.n	800ba9e <USB_EPStartXfer+0xa9c>
 800ba94:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800baa0:	881b      	ldrh	r3, [r3, #0]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	029b      	lsls	r3, r3, #10
 800baac:	b29b      	uxth	r3, r3
 800baae:	4313      	orrs	r3, r2
 800bab0:	b29b      	uxth	r3, r3
 800bab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800baba:	b29a      	uxth	r2, r3
 800babc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800babe:	801a      	strh	r2, [r3, #0]
 800bac0:	e050      	b.n	800bb64 <USB_EPStartXfer+0xb62>
 800bac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <USB_EPStartXfer+0xade>
 800baca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bacc:	881b      	ldrh	r3, [r3, #0]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bad4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bad8:	b29a      	uxth	r2, r3
 800bada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800badc:	801a      	strh	r2, [r3, #0]
 800bade:	e041      	b.n	800bb64 <USB_EPStartXfer+0xb62>
 800bae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bae4:	085b      	lsrs	r3, r3, #1
 800bae6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800baee:	f003 0301 	and.w	r3, r3, #1
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d004      	beq.n	800bb00 <USB_EPStartXfer+0xafe>
 800baf6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bafa:	3301      	adds	r3, #1
 800bafc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bb00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb02:	881b      	ldrh	r3, [r3, #0]
 800bb04:	b29a      	uxth	r2, r3
 800bb06:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	029b      	lsls	r3, r3, #10
 800bb0e:	b29b      	uxth	r3, r3
 800bb10:	4313      	orrs	r3, r2
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb16:	801a      	strh	r2, [r3, #0]
 800bb18:	e024      	b.n	800bb64 <USB_EPStartXfer+0xb62>
 800bb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	785b      	ldrb	r3, [r3, #1]
 800bb26:	2b01      	cmp	r3, #1
 800bb28:	d11c      	bne.n	800bb64 <USB_EPStartXfer+0xb62>
 800bb2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb3e:	4413      	add	r3, r2
 800bb40:	673b      	str	r3, [r7, #112]	@ 0x70
 800bb42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	00da      	lsls	r2, r3, #3
 800bb50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800bb52:	4413      	add	r3, r2
 800bb54:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800bb58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bb5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb5e:	b29a      	uxth	r2, r3
 800bb60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bb62:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800bb64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	895b      	ldrh	r3, [r3, #10]
 800bb70:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bb74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6959      	ldr	r1, [r3, #20]
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bb84:	b29b      	uxth	r3, r3
 800bb86:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bb8a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bb8e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bb92:	6800      	ldr	r0, [r0, #0]
 800bb94:	f000 ff20 	bl	800c9d8 <USB_WritePMA>
 800bb98:	e0ca      	b.n	800bd30 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800bb9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bb9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	785b      	ldrb	r3, [r3, #1]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d177      	bne.n	800bc9a <USB_EPStartXfer+0xc98>
 800bbaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbca:	4413      	add	r3, r2
 800bbcc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800bbce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bbd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	00da      	lsls	r2, r3, #3
 800bbdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800bbde:	4413      	add	r3, r2
 800bbe0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bbe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bbe6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbe8:	881b      	ldrh	r3, [r3, #0]
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bbf0:	b29a      	uxth	r2, r3
 800bbf2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bbf4:	801a      	strh	r2, [r3, #0]
 800bbf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bbfa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bbfc:	d921      	bls.n	800bc42 <USB_EPStartXfer+0xc40>
 800bbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc0c:	f003 031f 	and.w	r3, r3, #31
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d104      	bne.n	800bc1e <USB_EPStartXfer+0xc1c>
 800bc14:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc20:	881b      	ldrh	r3, [r3, #0]
 800bc22:	b29a      	uxth	r2, r3
 800bc24:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	029b      	lsls	r3, r3, #10
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	b29b      	uxth	r3, r3
 800bc32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc3e:	801a      	strh	r2, [r3, #0]
 800bc40:	e05c      	b.n	800bcfc <USB_EPStartXfer+0xcfa>
 800bc42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <USB_EPStartXfer+0xc5e>
 800bc4a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc4c:	881b      	ldrh	r3, [r3, #0]
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc58:	b29a      	uxth	r2, r3
 800bc5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc5c:	801a      	strh	r2, [r3, #0]
 800bc5e:	e04d      	b.n	800bcfc <USB_EPStartXfer+0xcfa>
 800bc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc64:	085b      	lsrs	r3, r3, #1
 800bc66:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bc6e:	f003 0301 	and.w	r3, r3, #1
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d004      	beq.n	800bc80 <USB_EPStartXfer+0xc7e>
 800bc76:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bc80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29a      	uxth	r2, r3
 800bc86:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bc8a:	b29b      	uxth	r3, r3
 800bc8c:	029b      	lsls	r3, r3, #10
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	4313      	orrs	r3, r2
 800bc92:	b29a      	uxth	r2, r3
 800bc94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bc96:	801a      	strh	r2, [r3, #0]
 800bc98:	e030      	b.n	800bcfc <USB_EPStartXfer+0xcfa>
 800bc9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d128      	bne.n	800bcfc <USB_EPStartXfer+0xcfa>
 800bcaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bcb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcbc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bcc6:	b29b      	uxth	r3, r3
 800bcc8:	461a      	mov	r2, r3
 800bcca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bcce:	4413      	add	r3, r2
 800bcd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800bcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bcd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	781b      	ldrb	r3, [r3, #0]
 800bce0:	00da      	lsls	r2, r3, #3
 800bce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800bce6:	4413      	add	r3, r2
 800bce8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bcec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800bcf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bcf4:	b29a      	uxth	r2, r3
 800bcf6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800bcfa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800bcfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	891b      	ldrh	r3, [r3, #8]
 800bd08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800bd0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	6959      	ldr	r1, [r3, #20]
 800bd18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800bd22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800bd26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	f000 fe54 	bl	800c9d8 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800bd30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	009b      	lsls	r3, r3, #2
 800bd48:	4413      	add	r3, r2
 800bd4a:	881b      	ldrh	r3, [r3, #0]
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd56:	817b      	strh	r3, [r7, #10]
 800bd58:	897b      	ldrh	r3, [r7, #10]
 800bd5a:	f083 0310 	eor.w	r3, r3, #16
 800bd5e:	817b      	strh	r3, [r7, #10]
 800bd60:	897b      	ldrh	r3, [r7, #10]
 800bd62:	f083 0320 	eor.w	r3, r3, #32
 800bd66:	817b      	strh	r3, [r7, #10]
 800bd68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bd70:	681a      	ldr	r2, [r3, #0]
 800bd72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bd76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	441a      	add	r2, r3
 800bd82:	897b      	ldrh	r3, [r7, #10]
 800bd84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bd88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bd8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bd90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd94:	b29b      	uxth	r3, r3
 800bd96:	8013      	strh	r3, [r2, #0]
 800bd98:	f000 bcde 	b.w	800c758 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800bd9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bda0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	7b1b      	ldrb	r3, [r3, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 80bb 	bne.w	800bf24 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800bdae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	699a      	ldr	r2, [r3, #24]
 800bdba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	691b      	ldr	r3, [r3, #16]
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d917      	bls.n	800bdfa <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800bdca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800bdda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699a      	ldr	r2, [r3, #24]
 800bde6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	619a      	str	r2, [r3, #24]
 800bdf8:	e00e      	b.n	800be18 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800bdfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bdfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800be0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be0e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	2200      	movs	r2, #0
 800be16:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800be18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800be34:	b29b      	uxth	r3, r3
 800be36:	461a      	mov	r2, r3
 800be38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be3c:	4413      	add	r3, r2
 800be3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800be42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800be46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	781b      	ldrb	r3, [r3, #0]
 800be4e:	00da      	lsls	r2, r3, #3
 800be50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800be54:	4413      	add	r3, r2
 800be56:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800be5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800be5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	b29b      	uxth	r3, r3
 800be66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800be6a:	b29a      	uxth	r2, r3
 800be6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be70:	801a      	strh	r2, [r3, #0]
 800be72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be76:	2b3e      	cmp	r3, #62	@ 0x3e
 800be78:	d924      	bls.n	800bec4 <USB_EPStartXfer+0xec2>
 800be7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be7e:	095b      	lsrs	r3, r3, #5
 800be80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800be88:	f003 031f 	and.w	r3, r3, #31
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d104      	bne.n	800be9a <USB_EPStartXfer+0xe98>
 800be90:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800be94:	3b01      	subs	r3, #1
 800be96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800be9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800be9e:	881b      	ldrh	r3, [r3, #0]
 800bea0:	b29a      	uxth	r2, r3
 800bea2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	029b      	lsls	r3, r3, #10
 800beaa:	b29b      	uxth	r3, r3
 800beac:	4313      	orrs	r3, r2
 800beae:	b29b      	uxth	r3, r3
 800beb0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800beb4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800beb8:	b29a      	uxth	r2, r3
 800beba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bebe:	801a      	strh	r2, [r3, #0]
 800bec0:	f000 bc10 	b.w	800c6e4 <USB_EPStartXfer+0x16e2>
 800bec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d10c      	bne.n	800bee6 <USB_EPStartXfer+0xee4>
 800becc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bed0:	881b      	ldrh	r3, [r3, #0]
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bed8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bedc:	b29a      	uxth	r2, r3
 800bede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	e3fe      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
 800bee6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800beea:	085b      	lsrs	r3, r3, #1
 800beec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bef4:	f003 0301 	and.w	r3, r3, #1
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d004      	beq.n	800bf06 <USB_EPStartXfer+0xf04>
 800befc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf00:	3301      	adds	r3, #1
 800bf02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bf06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf0a:	881b      	ldrh	r3, [r3, #0]
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800bf12:	b29b      	uxth	r3, r3
 800bf14:	029b      	lsls	r3, r3, #10
 800bf16:	b29b      	uxth	r3, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	b29a      	uxth	r2, r3
 800bf1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800bf20:	801a      	strh	r2, [r3, #0]
 800bf22:	e3df      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800bf24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	78db      	ldrb	r3, [r3, #3]
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	f040 8218 	bne.w	800c366 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800bf36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	785b      	ldrb	r3, [r3, #1]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	f040 809d 	bne.w	800c082 <USB_EPStartXfer+0x1080>
 800bf48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800bf64:	b29b      	uxth	r3, r3
 800bf66:	461a      	mov	r2, r3
 800bf68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf6c:	4413      	add	r3, r2
 800bf6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800bf72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bf76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	00da      	lsls	r2, r3, #3
 800bf80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800bf84:	4413      	add	r3, r2
 800bf86:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800bf8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800bf8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bf92:	881b      	ldrh	r3, [r3, #0]
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfa0:	801a      	strh	r2, [r3, #0]
 800bfa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	691b      	ldr	r3, [r3, #16]
 800bfae:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfb0:	d92b      	bls.n	800c00a <USB_EPStartXfer+0x1008>
 800bfb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	691b      	ldr	r3, [r3, #16]
 800bfbe:	095b      	lsrs	r3, r3, #5
 800bfc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bfc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	691b      	ldr	r3, [r3, #16]
 800bfd0:	f003 031f 	and.w	r3, r3, #31
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d104      	bne.n	800bfe2 <USB_EPStartXfer+0xfe0>
 800bfd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfdc:	3b01      	subs	r3, #1
 800bfde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bfe2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800bfe6:	881b      	ldrh	r3, [r3, #0]
 800bfe8:	b29a      	uxth	r2, r3
 800bfea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bfee:	b29b      	uxth	r3, r3
 800bff0:	029b      	lsls	r3, r3, #10
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	4313      	orrs	r3, r2
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bffc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c000:	b29a      	uxth	r2, r3
 800c002:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c006:	801a      	strh	r2, [r3, #0]
 800c008:	e070      	b.n	800c0ec <USB_EPStartXfer+0x10ea>
 800c00a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c00e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	691b      	ldr	r3, [r3, #16]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d10c      	bne.n	800c034 <USB_EPStartXfer+0x1032>
 800c01a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c01e:	881b      	ldrh	r3, [r3, #0]
 800c020:	b29b      	uxth	r3, r3
 800c022:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c026:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c030:	801a      	strh	r2, [r3, #0]
 800c032:	e05b      	b.n	800c0ec <USB_EPStartXfer+0x10ea>
 800c034:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c038:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	691b      	ldr	r3, [r3, #16]
 800c040:	085b      	lsrs	r3, r3, #1
 800c042:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c04a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	691b      	ldr	r3, [r3, #16]
 800c052:	f003 0301 	and.w	r3, r3, #1
 800c056:	2b00      	cmp	r3, #0
 800c058:	d004      	beq.n	800c064 <USB_EPStartXfer+0x1062>
 800c05a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c05e:	3301      	adds	r3, #1
 800c060:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800c064:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c068:	881b      	ldrh	r3, [r3, #0]
 800c06a:	b29a      	uxth	r2, r3
 800c06c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c070:	b29b      	uxth	r3, r3
 800c072:	029b      	lsls	r3, r3, #10
 800c074:	b29b      	uxth	r3, r3
 800c076:	4313      	orrs	r3, r2
 800c078:	b29a      	uxth	r2, r3
 800c07a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800c07e:	801a      	strh	r2, [r3, #0]
 800c080:	e034      	b.n	800c0ec <USB_EPStartXfer+0x10ea>
 800c082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	785b      	ldrb	r3, [r3, #1]
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d12c      	bne.n	800c0ec <USB_EPStartXfer+0x10ea>
 800c092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c096:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c0ae:	b29b      	uxth	r3, r3
 800c0b0:	461a      	mov	r2, r3
 800c0b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c0bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	00da      	lsls	r2, r3, #3
 800c0ca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800c0ce:	4413      	add	r3, r2
 800c0d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c0d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c0d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	691b      	ldr	r3, [r3, #16]
 800c0e4:	b29a      	uxth	r2, r3
 800c0e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800c0ea:	801a      	strh	r2, [r3, #0]
 800c0ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c0fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c0fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	785b      	ldrb	r3, [r3, #1]
 800c106:	2b00      	cmp	r3, #0
 800c108:	f040 809d 	bne.w	800c246 <USB_EPStartXfer+0x1244>
 800c10c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c110:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c11a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c11e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c128:	b29b      	uxth	r3, r3
 800c12a:	461a      	mov	r2, r3
 800c12c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c130:	4413      	add	r3, r2
 800c132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c136:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c13a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	00da      	lsls	r2, r3, #3
 800c144:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c148:	4413      	add	r3, r2
 800c14a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c14e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c152:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	b29b      	uxth	r3, r3
 800c15a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c15e:	b29a      	uxth	r2, r3
 800c160:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c164:	801a      	strh	r2, [r3, #0]
 800c166:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c16a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	691b      	ldr	r3, [r3, #16]
 800c172:	2b3e      	cmp	r3, #62	@ 0x3e
 800c174:	d92b      	bls.n	800c1ce <USB_EPStartXfer+0x11cc>
 800c176:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c17a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	095b      	lsrs	r3, r3, #5
 800c184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c188:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c18c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	691b      	ldr	r3, [r3, #16]
 800c194:	f003 031f 	and.w	r3, r3, #31
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <USB_EPStartXfer+0x11a4>
 800c19c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c1a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	b29a      	uxth	r2, r3
 800c1ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	029b      	lsls	r3, r3, #10
 800c1b6:	b29b      	uxth	r3, r3
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1c4:	b29a      	uxth	r2, r3
 800c1c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1ca:	801a      	strh	r2, [r3, #0]
 800c1cc:	e069      	b.n	800c2a2 <USB_EPStartXfer+0x12a0>
 800c1ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10c      	bne.n	800c1f8 <USB_EPStartXfer+0x11f6>
 800c1de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1e2:	881b      	ldrh	r3, [r3, #0]
 800c1e4:	b29b      	uxth	r3, r3
 800c1e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c1ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c1ee:	b29a      	uxth	r2, r3
 800c1f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c1f4:	801a      	strh	r2, [r3, #0]
 800c1f6:	e054      	b.n	800c2a2 <USB_EPStartXfer+0x12a0>
 800c1f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c1fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	691b      	ldr	r3, [r3, #16]
 800c204:	085b      	lsrs	r3, r3, #1
 800c206:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c20a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c20e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	691b      	ldr	r3, [r3, #16]
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d004      	beq.n	800c228 <USB_EPStartXfer+0x1226>
 800c21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c222:	3301      	adds	r3, #1
 800c224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800c228:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c22c:	881b      	ldrh	r3, [r3, #0]
 800c22e:	b29a      	uxth	r2, r3
 800c230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c234:	b29b      	uxth	r3, r3
 800c236:	029b      	lsls	r3, r3, #10
 800c238:	b29b      	uxth	r3, r3
 800c23a:	4313      	orrs	r3, r2
 800c23c:	b29a      	uxth	r2, r3
 800c23e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c242:	801a      	strh	r2, [r3, #0]
 800c244:	e02d      	b.n	800c2a2 <USB_EPStartXfer+0x12a0>
 800c246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	785b      	ldrb	r3, [r3, #1]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d125      	bne.n	800c2a2 <USB_EPStartXfer+0x12a0>
 800c256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c25a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c264:	b29b      	uxth	r3, r3
 800c266:	461a      	mov	r2, r3
 800c268:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c26c:	4413      	add	r3, r2
 800c26e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c272:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c276:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	00da      	lsls	r2, r3, #3
 800c280:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800c284:	4413      	add	r3, r2
 800c286:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c28a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c28e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c292:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	b29a      	uxth	r2, r3
 800c29c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c2a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800c2a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	69db      	ldr	r3, [r3, #28]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f000 8218 	beq.w	800c6e4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800c2b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c2bc:	681a      	ldr	r2, [r3, #0]
 800c2be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c2c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	781b      	ldrb	r3, [r3, #0]
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	881b      	ldrh	r3, [r3, #0]
 800c2d0:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2d4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c2d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d005      	beq.n	800c2ec <USB_EPStartXfer+0x12ea>
 800c2e0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c2e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d10d      	bne.n	800c308 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c2ec:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c2f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f040 81f5 	bne.w	800c6e4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800c2fa:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800c2fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c302:	2b00      	cmp	r3, #0
 800c304:	f040 81ee 	bne.w	800c6e4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800c308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c30c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c310:	681a      	ldr	r2, [r3, #0]
 800c312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	4413      	add	r3, r2
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	b29b      	uxth	r3, r3
 800c326:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c32a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c32e:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800c332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c336:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	441a      	add	r2, r3
 800c34c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800c350:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c354:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c358:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c35c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c360:	b29b      	uxth	r3, r3
 800c362:	8013      	strh	r3, [r2, #0]
 800c364:	e1be      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800c366:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c36a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	78db      	ldrb	r3, [r3, #3]
 800c372:	2b01      	cmp	r3, #1
 800c374:	f040 81b4 	bne.w	800c6e0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800c378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c37c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	699a      	ldr	r2, [r3, #24]
 800c384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	429a      	cmp	r2, r3
 800c392:	d917      	bls.n	800c3c4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800c394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800c3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	699a      	ldr	r2, [r3, #24]
 800c3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c3b4:	1ad2      	subs	r2, r2, r3
 800c3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	619a      	str	r2, [r3, #24]
 800c3c2:	e00e      	b.n	800c3e2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800c3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800c3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800c3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	785b      	ldrb	r3, [r3, #1]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	f040 8085 	bne.w	800c4fe <USB_EPStartXfer+0x14fc>
 800c3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c410:	b29b      	uxth	r3, r3
 800c412:	461a      	mov	r2, r3
 800c414:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c418:	4413      	add	r3, r2
 800c41a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c41e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	00da      	lsls	r2, r3, #3
 800c42c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800c430:	4413      	add	r3, r2
 800c432:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c436:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c43a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c43e:	881b      	ldrh	r3, [r3, #0]
 800c440:	b29b      	uxth	r3, r3
 800c442:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c446:	b29a      	uxth	r2, r3
 800c448:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c44c:	801a      	strh	r2, [r3, #0]
 800c44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c452:	2b3e      	cmp	r3, #62	@ 0x3e
 800c454:	d923      	bls.n	800c49e <USB_EPStartXfer+0x149c>
 800c456:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c45a:	095b      	lsrs	r3, r3, #5
 800c45c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c464:	f003 031f 	and.w	r3, r3, #31
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d104      	bne.n	800c476 <USB_EPStartXfer+0x1474>
 800c46c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c470:	3b01      	subs	r3, #1
 800c472:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c476:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c47a:	881b      	ldrh	r3, [r3, #0]
 800c47c:	b29a      	uxth	r2, r3
 800c47e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c482:	b29b      	uxth	r3, r3
 800c484:	029b      	lsls	r3, r3, #10
 800c486:	b29b      	uxth	r3, r3
 800c488:	4313      	orrs	r3, r2
 800c48a:	b29b      	uxth	r3, r3
 800c48c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c494:	b29a      	uxth	r2, r3
 800c496:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c49a:	801a      	strh	r2, [r3, #0]
 800c49c:	e060      	b.n	800c560 <USB_EPStartXfer+0x155e>
 800c49e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d10c      	bne.n	800c4c0 <USB_EPStartXfer+0x14be>
 800c4a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4aa:	881b      	ldrh	r3, [r3, #0]
 800c4ac:	b29b      	uxth	r3, r3
 800c4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c4b6:	b29a      	uxth	r2, r3
 800c4b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4bc:	801a      	strh	r2, [r3, #0]
 800c4be:	e04f      	b.n	800c560 <USB_EPStartXfer+0x155e>
 800c4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4c4:	085b      	lsrs	r3, r3, #1
 800c4c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d004      	beq.n	800c4e0 <USB_EPStartXfer+0x14de>
 800c4d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4da:	3301      	adds	r3, #1
 800c4dc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800c4e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4e4:	881b      	ldrh	r3, [r3, #0]
 800c4e6:	b29a      	uxth	r2, r3
 800c4e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	029b      	lsls	r3, r3, #10
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	4313      	orrs	r3, r2
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800c4fa:	801a      	strh	r2, [r3, #0]
 800c4fc:	e030      	b.n	800c560 <USB_EPStartXfer+0x155e>
 800c4fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	785b      	ldrb	r3, [r3, #1]
 800c50a:	2b01      	cmp	r3, #1
 800c50c:	d128      	bne.n	800c560 <USB_EPStartXfer+0x155e>
 800c50e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c51c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c52a:	b29b      	uxth	r3, r3
 800c52c:	461a      	mov	r2, r3
 800c52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c532:	4413      	add	r3, r2
 800c534:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800c538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c53c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	00da      	lsls	r2, r3, #3
 800c546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c54a:	4413      	add	r3, r2
 800c54c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800c550:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c558:	b29a      	uxth	r2, r3
 800c55a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800c55e:	801a      	strh	r2, [r3, #0]
 800c560:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c564:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c56e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c572:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	785b      	ldrb	r3, [r3, #1]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	f040 8085 	bne.w	800c68a <USB_EPStartXfer+0x1688>
 800c580:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c584:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c58e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c592:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	00da      	lsls	r2, r3, #3
 800c5b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800c5bc:	4413      	add	r3, r2
 800c5be:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c5c2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c5c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5ca:	881b      	ldrh	r3, [r3, #0]
 800c5cc:	b29b      	uxth	r3, r3
 800c5ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c5d8:	801a      	strh	r2, [r3, #0]
 800c5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5de:	2b3e      	cmp	r3, #62	@ 0x3e
 800c5e0:	d923      	bls.n	800c62a <USB_EPStartXfer+0x1628>
 800c5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5e6:	095b      	lsrs	r3, r3, #5
 800c5e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c5ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c5f0:	f003 031f 	and.w	r3, r3, #31
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d104      	bne.n	800c602 <USB_EPStartXfer+0x1600>
 800c5f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c5fc:	3b01      	subs	r3, #1
 800c5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c602:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c606:	881b      	ldrh	r3, [r3, #0]
 800c608:	b29a      	uxth	r2, r3
 800c60a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c60e:	b29b      	uxth	r3, r3
 800c610:	029b      	lsls	r3, r3, #10
 800c612:	b29b      	uxth	r3, r3
 800c614:	4313      	orrs	r3, r2
 800c616:	b29b      	uxth	r3, r3
 800c618:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c61c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c620:	b29a      	uxth	r2, r3
 800c622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c626:	801a      	strh	r2, [r3, #0]
 800c628:	e05c      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
 800c62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d10c      	bne.n	800c64c <USB_EPStartXfer+0x164a>
 800c632:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	b29b      	uxth	r3, r3
 800c63a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c63e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c642:	b29a      	uxth	r2, r3
 800c644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c648:	801a      	strh	r2, [r3, #0]
 800c64a:	e04b      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
 800c64c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c650:	085b      	lsrs	r3, r3, #1
 800c652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c656:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c65a:	f003 0301 	and.w	r3, r3, #1
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d004      	beq.n	800c66c <USB_EPStartXfer+0x166a>
 800c662:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c666:	3301      	adds	r3, #1
 800c668:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800c66c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c670:	881b      	ldrh	r3, [r3, #0]
 800c672:	b29a      	uxth	r2, r3
 800c674:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c678:	b29b      	uxth	r3, r3
 800c67a:	029b      	lsls	r3, r3, #10
 800c67c:	b29b      	uxth	r3, r3
 800c67e:	4313      	orrs	r3, r2
 800c680:	b29a      	uxth	r2, r3
 800c682:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800c686:	801a      	strh	r2, [r3, #0]
 800c688:	e02c      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
 800c68a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c68e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	785b      	ldrb	r3, [r3, #1]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d124      	bne.n	800c6e4 <USB_EPStartXfer+0x16e2>
 800c69a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c69e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c6b0:	4413      	add	r3, r2
 800c6b2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	00da      	lsls	r2, r3, #3
 800c6c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800c6ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c6d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800c6d6:	b29a      	uxth	r2, r3
 800c6d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800c6dc:	801a      	strh	r2, [r3, #0]
 800c6de:	e001      	b.n	800c6e4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800c6e0:	2301      	movs	r3, #1
 800c6e2:	e03a      	b.n	800c75a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c6e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c6ec:	681a      	ldr	r2, [r3, #0]
 800c6ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c6f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	4413      	add	r3, r2
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	b29b      	uxth	r3, r3
 800c702:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c706:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c70a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c70e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c712:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c716:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c71a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c71e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c722:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800c726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c72a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800c72e:	681a      	ldr	r2, [r3, #0]
 800c730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800c734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	009b      	lsls	r3, r3, #2
 800c73e:	441a      	add	r2, r3
 800c740:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800c744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c74c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c754:	b29b      	uxth	r3, r3
 800c756:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c758:	2300      	movs	r3, #0
}
 800c75a:	4618      	mov	r0, r3
 800c75c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c764:	b480      	push	{r7}
 800c766:	b085      	sub	sp, #20
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
 800c76c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800c76e:	683b      	ldr	r3, [r7, #0]
 800c770:	785b      	ldrb	r3, [r3, #1]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d020      	beq.n	800c7b8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	009b      	lsls	r3, r3, #2
 800c77e:	4413      	add	r3, r2
 800c780:	881b      	ldrh	r3, [r3, #0]
 800c782:	b29b      	uxth	r3, r3
 800c784:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c788:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c78c:	81bb      	strh	r3, [r7, #12]
 800c78e:	89bb      	ldrh	r3, [r7, #12]
 800c790:	f083 0310 	eor.w	r3, r3, #16
 800c794:	81bb      	strh	r3, [r7, #12]
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	009b      	lsls	r3, r3, #2
 800c79e:	441a      	add	r2, r3
 800c7a0:	89bb      	ldrh	r3, [r7, #12]
 800c7a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	8013      	strh	r3, [r2, #0]
 800c7b6:	e01f      	b.n	800c7f8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	781b      	ldrb	r3, [r3, #0]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	4413      	add	r3, r2
 800c7c2:	881b      	ldrh	r3, [r3, #0]
 800c7c4:	b29b      	uxth	r3, r3
 800c7c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c7ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7ce:	81fb      	strh	r3, [r7, #14]
 800c7d0:	89fb      	ldrh	r3, [r7, #14]
 800c7d2:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c7d6:	81fb      	strh	r3, [r7, #14]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	441a      	add	r2, r3
 800c7e2:	89fb      	ldrh	r3, [r7, #14]
 800c7e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c7e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c7ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c7f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c7f4:	b29b      	uxth	r3, r3
 800c7f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800c7f8:	2300      	movs	r3, #0
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3714      	adds	r7, #20
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c806:	b480      	push	{r7}
 800c808:	b087      	sub	sp, #28
 800c80a:	af00      	add	r7, sp, #0
 800c80c:	6078      	str	r0, [r7, #4]
 800c80e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	7b1b      	ldrb	r3, [r3, #12]
 800c814:	2b00      	cmp	r3, #0
 800c816:	f040 809d 	bne.w	800c954 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	785b      	ldrb	r3, [r3, #1]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d04c      	beq.n	800c8bc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c822:	687a      	ldr	r2, [r7, #4]
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	009b      	lsls	r3, r3, #2
 800c82a:	4413      	add	r3, r2
 800c82c:	881b      	ldrh	r3, [r3, #0]
 800c82e:	823b      	strh	r3, [r7, #16]
 800c830:	8a3b      	ldrh	r3, [r7, #16]
 800c832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c836:	2b00      	cmp	r3, #0
 800c838:	d01b      	beq.n	800c872 <USB_EPClearStall+0x6c>
 800c83a:	687a      	ldr	r2, [r7, #4]
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	781b      	ldrb	r3, [r3, #0]
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	881b      	ldrh	r3, [r3, #0]
 800c846:	b29b      	uxth	r3, r3
 800c848:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c84c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c850:	81fb      	strh	r3, [r7, #14]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	441a      	add	r2, r3
 800c85c:	89fb      	ldrh	r3, [r7, #14]
 800c85e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c862:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c866:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c86a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800c86e:	b29b      	uxth	r3, r3
 800c870:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	78db      	ldrb	r3, [r3, #3]
 800c876:	2b01      	cmp	r3, #1
 800c878:	d06c      	beq.n	800c954 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4413      	add	r3, r2
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	b29b      	uxth	r3, r3
 800c888:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c88c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c890:	81bb      	strh	r3, [r7, #12]
 800c892:	89bb      	ldrh	r3, [r7, #12]
 800c894:	f083 0320 	eor.w	r3, r3, #32
 800c898:	81bb      	strh	r3, [r7, #12]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	781b      	ldrb	r3, [r3, #0]
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	441a      	add	r2, r3
 800c8a4:	89bb      	ldrh	r3, [r7, #12]
 800c8a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c8ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c8b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c8b6:	b29b      	uxth	r3, r3
 800c8b8:	8013      	strh	r3, [r2, #0]
 800c8ba:	e04b      	b.n	800c954 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	4413      	add	r3, r2
 800c8c6:	881b      	ldrh	r3, [r3, #0]
 800c8c8:	82fb      	strh	r3, [r7, #22]
 800c8ca:	8afb      	ldrh	r3, [r7, #22]
 800c8cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d01b      	beq.n	800c90c <USB_EPClearStall+0x106>
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	009b      	lsls	r3, r3, #2
 800c8dc:	4413      	add	r3, r2
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c8e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c8ea:	82bb      	strh	r3, [r7, #20]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	009b      	lsls	r3, r3, #2
 800c8f4:	441a      	add	r2, r3
 800c8f6:	8abb      	ldrh	r3, [r7, #20]
 800c8f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c8fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c900:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c904:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c908:	b29b      	uxth	r3, r3
 800c90a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	009b      	lsls	r3, r3, #2
 800c914:	4413      	add	r3, r2
 800c916:	881b      	ldrh	r3, [r3, #0]
 800c918:	b29b      	uxth	r3, r3
 800c91a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c91e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c922:	827b      	strh	r3, [r7, #18]
 800c924:	8a7b      	ldrh	r3, [r7, #18]
 800c926:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800c92a:	827b      	strh	r3, [r7, #18]
 800c92c:	8a7b      	ldrh	r3, [r7, #18]
 800c92e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800c932:	827b      	strh	r3, [r7, #18]
 800c934:	687a      	ldr	r2, [r7, #4]
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	441a      	add	r2, r3
 800c93e:	8a7b      	ldrh	r3, [r7, #18]
 800c940:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800c944:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800c948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c94c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c950:	b29b      	uxth	r3, r3
 800c952:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	371c      	adds	r7, #28
 800c95a:	46bd      	mov	sp, r7
 800c95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c960:	4770      	bx	lr

0800c962 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c962:	b480      	push	{r7}
 800c964:	b083      	sub	sp, #12
 800c966:	af00      	add	r7, sp, #0
 800c968:	6078      	str	r0, [r7, #4]
 800c96a:	460b      	mov	r3, r1
 800c96c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800c96e:	78fb      	ldrb	r3, [r7, #3]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d103      	bne.n	800c97c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2280      	movs	r2, #128	@ 0x80
 800c978:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c97c:	2300      	movs	r3, #0
}
 800c97e:	4618      	mov	r0, r3
 800c980:	370c      	adds	r7, #12
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr

0800c98a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c98a:	b480      	push	{r7}
 800c98c:	b083      	sub	sp, #12
 800c98e:	af00      	add	r7, sp, #0
 800c990:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c998:	b29b      	uxth	r3, r3
 800c99a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800c99e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800c9a2:	b29a      	uxth	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800c9aa:	2300      	movs	r3, #0
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800c9c6:	b29b      	uxth	r3, r3
 800c9c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
}
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b08b      	sub	sp, #44	@ 0x2c
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	60f8      	str	r0, [r7, #12]
 800c9e0:	60b9      	str	r1, [r7, #8]
 800c9e2:	4611      	mov	r1, r2
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	80fb      	strh	r3, [r7, #6]
 800c9ea:	4613      	mov	r3, r2
 800c9ec:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c9ee:	88bb      	ldrh	r3, [r7, #4]
 800c9f0:	3301      	adds	r3, #1
 800c9f2:	085b      	lsrs	r3, r3, #1
 800c9f4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c9fe:	88fa      	ldrh	r2, [r7, #6]
 800ca00:	697b      	ldr	r3, [r7, #20]
 800ca02:	4413      	add	r3, r2
 800ca04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca08:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca0e:	e01b      	b.n	800ca48 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ca10:	69fb      	ldr	r3, [r7, #28]
 800ca12:	781b      	ldrb	r3, [r3, #0]
 800ca14:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	3301      	adds	r3, #1
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	021b      	lsls	r3, r3, #8
 800ca1e:	b21a      	sxth	r2, r3
 800ca20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ca24:	4313      	orrs	r3, r2
 800ca26:	b21b      	sxth	r3, r3
 800ca28:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	8a7a      	ldrh	r2, [r7, #18]
 800ca2e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ca30:	6a3b      	ldr	r3, [r7, #32]
 800ca32:	3302      	adds	r3, #2
 800ca34:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ca36:	69fb      	ldr	r3, [r7, #28]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ca3c:	69fb      	ldr	r3, [r7, #28]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ca42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca44:	3b01      	subs	r3, #1
 800ca46:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d1e0      	bne.n	800ca10 <USB_WritePMA+0x38>
  }
}
 800ca4e:	bf00      	nop
 800ca50:	bf00      	nop
 800ca52:	372c      	adds	r7, #44	@ 0x2c
 800ca54:	46bd      	mov	sp, r7
 800ca56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5a:	4770      	bx	lr

0800ca5c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b08b      	sub	sp, #44	@ 0x2c
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	4611      	mov	r1, r2
 800ca68:	461a      	mov	r2, r3
 800ca6a:	460b      	mov	r3, r1
 800ca6c:	80fb      	strh	r3, [r7, #6]
 800ca6e:	4613      	mov	r3, r2
 800ca70:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ca72:	88bb      	ldrh	r3, [r7, #4]
 800ca74:	085b      	lsrs	r3, r3, #1
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ca82:	88fa      	ldrh	r2, [r7, #6]
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	4413      	add	r3, r2
 800ca88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca8c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ca8e:	69bb      	ldr	r3, [r7, #24]
 800ca90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca92:	e018      	b.n	800cac6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800ca94:	6a3b      	ldr	r3, [r7, #32]
 800ca96:	881b      	ldrh	r3, [r3, #0]
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	3302      	adds	r3, #2
 800caa0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	b2da      	uxtb	r2, r3
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	3301      	adds	r3, #1
 800caae:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	0a1b      	lsrs	r3, r3, #8
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	69fb      	ldr	r3, [r7, #28]
 800cab8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800caba:	69fb      	ldr	r3, [r7, #28]
 800cabc:	3301      	adds	r3, #1
 800cabe:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800cac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac2:	3b01      	subs	r3, #1
 800cac4:	627b      	str	r3, [r7, #36]	@ 0x24
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e3      	bne.n	800ca94 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800cacc:	88bb      	ldrh	r3, [r7, #4]
 800cace:	f003 0301 	and.w	r3, r3, #1
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d007      	beq.n	800cae8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800cad8:	6a3b      	ldr	r3, [r7, #32]
 800cada:	881b      	ldrh	r3, [r3, #0]
 800cadc:	b29b      	uxth	r3, r3
 800cade:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800cae0:	693b      	ldr	r3, [r7, #16]
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	701a      	strb	r2, [r3, #0]
  }
}
 800cae8:	bf00      	nop
 800caea:	372c      	adds	r7, #44	@ 0x2c
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb00:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800cb04:	f005 fcb6 	bl	8012474 <USBD_static_malloc>
 800cb08:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d109      	bne.n	800cb24 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	32b0      	adds	r2, #176	@ 0xb0
 800cb1a:	2100      	movs	r1, #0
 800cb1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cb20:	2302      	movs	r3, #2
 800cb22:	e0d4      	b.n	800ccce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cb24:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800cb28:	2100      	movs	r1, #0
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f005 ff9c 	bl	8012a68 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	32b0      	adds	r2, #176	@ 0xb0
 800cb3a:	68f9      	ldr	r1, [r7, #12]
 800cb3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	32b0      	adds	r2, #176	@ 0xb0
 800cb4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	7c1b      	ldrb	r3, [r3, #16]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d138      	bne.n	800cbce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cb5c:	4b5e      	ldr	r3, [pc, #376]	@ (800ccd8 <USBD_CDC_Init+0x1e4>)
 800cb5e:	7819      	ldrb	r1, [r3, #0]
 800cb60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb64:	2202      	movs	r2, #2
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f005 fb2b 	bl	80121c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cb6c:	4b5a      	ldr	r3, [pc, #360]	@ (800ccd8 <USBD_CDC_Init+0x1e4>)
 800cb6e:	781b      	ldrb	r3, [r3, #0]
 800cb70:	f003 020f 	and.w	r2, r3, #15
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	4613      	mov	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	3324      	adds	r3, #36	@ 0x24
 800cb82:	2201      	movs	r2, #1
 800cb84:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cb86:	4b55      	ldr	r3, [pc, #340]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800cb88:	7819      	ldrb	r1, [r3, #0]
 800cb8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb8e:	2202      	movs	r2, #2
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f005 fb16 	bl	80121c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cb96:	4b51      	ldr	r3, [pc, #324]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800cb98:	781b      	ldrb	r3, [r3, #0]
 800cb9a:	f003 020f 	and.w	r2, r3, #15
 800cb9e:	6879      	ldr	r1, [r7, #4]
 800cba0:	4613      	mov	r3, r2
 800cba2:	009b      	lsls	r3, r3, #2
 800cba4:	4413      	add	r3, r2
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	440b      	add	r3, r1
 800cbaa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cbae:	2201      	movs	r2, #1
 800cbb0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cbb2:	4b4b      	ldr	r3, [pc, #300]	@ (800cce0 <USBD_CDC_Init+0x1ec>)
 800cbb4:	781b      	ldrb	r3, [r3, #0]
 800cbb6:	f003 020f 	and.w	r2, r3, #15
 800cbba:	6879      	ldr	r1, [r7, #4]
 800cbbc:	4613      	mov	r3, r2
 800cbbe:	009b      	lsls	r3, r3, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	009b      	lsls	r3, r3, #2
 800cbc4:	440b      	add	r3, r1
 800cbc6:	3326      	adds	r3, #38	@ 0x26
 800cbc8:	2210      	movs	r2, #16
 800cbca:	801a      	strh	r2, [r3, #0]
 800cbcc:	e035      	b.n	800cc3a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cbce:	4b42      	ldr	r3, [pc, #264]	@ (800ccd8 <USBD_CDC_Init+0x1e4>)
 800cbd0:	7819      	ldrb	r1, [r3, #0]
 800cbd2:	2340      	movs	r3, #64	@ 0x40
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f005 faf3 	bl	80121c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cbdc:	4b3e      	ldr	r3, [pc, #248]	@ (800ccd8 <USBD_CDC_Init+0x1e4>)
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	f003 020f 	and.w	r2, r3, #15
 800cbe4:	6879      	ldr	r1, [r7, #4]
 800cbe6:	4613      	mov	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	4413      	add	r3, r2
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	440b      	add	r3, r1
 800cbf0:	3324      	adds	r3, #36	@ 0x24
 800cbf2:	2201      	movs	r2, #1
 800cbf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cbf6:	4b39      	ldr	r3, [pc, #228]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800cbf8:	7819      	ldrb	r1, [r3, #0]
 800cbfa:	2340      	movs	r3, #64	@ 0x40
 800cbfc:	2202      	movs	r2, #2
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f005 fadf 	bl	80121c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cc04:	4b35      	ldr	r3, [pc, #212]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800cc06:	781b      	ldrb	r3, [r3, #0]
 800cc08:	f003 020f 	and.w	r2, r3, #15
 800cc0c:	6879      	ldr	r1, [r7, #4]
 800cc0e:	4613      	mov	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	4413      	add	r3, r2
 800cc14:	009b      	lsls	r3, r3, #2
 800cc16:	440b      	add	r3, r1
 800cc18:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cc20:	4b2f      	ldr	r3, [pc, #188]	@ (800cce0 <USBD_CDC_Init+0x1ec>)
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	f003 020f 	and.w	r2, r3, #15
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	4613      	mov	r3, r2
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	4413      	add	r3, r2
 800cc30:	009b      	lsls	r3, r3, #2
 800cc32:	440b      	add	r3, r1
 800cc34:	3326      	adds	r3, #38	@ 0x26
 800cc36:	2210      	movs	r2, #16
 800cc38:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc3a:	4b29      	ldr	r3, [pc, #164]	@ (800cce0 <USBD_CDC_Init+0x1ec>)
 800cc3c:	7819      	ldrb	r1, [r3, #0]
 800cc3e:	2308      	movs	r3, #8
 800cc40:	2203      	movs	r2, #3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f005 fabd 	bl	80121c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cc48:	4b25      	ldr	r3, [pc, #148]	@ (800cce0 <USBD_CDC_Init+0x1ec>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	6879      	ldr	r1, [r7, #4]
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	440b      	add	r3, r1
 800cc5c:	3324      	adds	r3, #36	@ 0x24
 800cc5e:	2201      	movs	r2, #1
 800cc60:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc70:	687a      	ldr	r2, [r7, #4]
 800cc72:	33b0      	adds	r3, #176	@ 0xb0
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4413      	add	r3, r2
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cc98:	2302      	movs	r3, #2
 800cc9a:	e018      	b.n	800ccce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7c1b      	ldrb	r3, [r3, #16]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10a      	bne.n	800ccba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cca4:	4b0d      	ldr	r3, [pc, #52]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800cca6:	7819      	ldrb	r1, [r3, #0]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ccae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f005 fb74 	bl	80123a0 <USBD_LL_PrepareReceive>
 800ccb8:	e008      	b.n	800cccc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccba:	4b08      	ldr	r3, [pc, #32]	@ (800ccdc <USBD_CDC_Init+0x1e8>)
 800ccbc:	7819      	ldrb	r1, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ccc4:	2340      	movs	r3, #64	@ 0x40
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f005 fb6a 	bl	80123a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	200000b3 	.word	0x200000b3
 800ccdc:	200000b4 	.word	0x200000b4
 800cce0:	200000b5 	.word	0x200000b5

0800cce4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b082      	sub	sp, #8
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	460b      	mov	r3, r1
 800ccee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ccf0:	4b3a      	ldr	r3, [pc, #232]	@ (800cddc <USBD_CDC_DeInit+0xf8>)
 800ccf2:	781b      	ldrb	r3, [r3, #0]
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f005 fa89 	bl	801220e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ccfc:	4b37      	ldr	r3, [pc, #220]	@ (800cddc <USBD_CDC_DeInit+0xf8>)
 800ccfe:	781b      	ldrb	r3, [r3, #0]
 800cd00:	f003 020f 	and.w	r2, r3, #15
 800cd04:	6879      	ldr	r1, [r7, #4]
 800cd06:	4613      	mov	r3, r2
 800cd08:	009b      	lsls	r3, r3, #2
 800cd0a:	4413      	add	r3, r2
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	440b      	add	r3, r1
 800cd10:	3324      	adds	r3, #36	@ 0x24
 800cd12:	2200      	movs	r2, #0
 800cd14:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cd16:	4b32      	ldr	r3, [pc, #200]	@ (800cde0 <USBD_CDC_DeInit+0xfc>)
 800cd18:	781b      	ldrb	r3, [r3, #0]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f005 fa76 	bl	801220e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cd22:	4b2f      	ldr	r3, [pc, #188]	@ (800cde0 <USBD_CDC_DeInit+0xfc>)
 800cd24:	781b      	ldrb	r3, [r3, #0]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cd3e:	4b29      	ldr	r3, [pc, #164]	@ (800cde4 <USBD_CDC_DeInit+0x100>)
 800cd40:	781b      	ldrb	r3, [r3, #0]
 800cd42:	4619      	mov	r1, r3
 800cd44:	6878      	ldr	r0, [r7, #4]
 800cd46:	f005 fa62 	bl	801220e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cd4a:	4b26      	ldr	r3, [pc, #152]	@ (800cde4 <USBD_CDC_DeInit+0x100>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	f003 020f 	and.w	r2, r3, #15
 800cd52:	6879      	ldr	r1, [r7, #4]
 800cd54:	4613      	mov	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	4413      	add	r3, r2
 800cd5a:	009b      	lsls	r3, r3, #2
 800cd5c:	440b      	add	r3, r1
 800cd5e:	3324      	adds	r3, #36	@ 0x24
 800cd60:	2200      	movs	r2, #0
 800cd62:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cd64:	4b1f      	ldr	r3, [pc, #124]	@ (800cde4 <USBD_CDC_DeInit+0x100>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 020f 	and.w	r2, r3, #15
 800cd6c:	6879      	ldr	r1, [r7, #4]
 800cd6e:	4613      	mov	r3, r2
 800cd70:	009b      	lsls	r3, r3, #2
 800cd72:	4413      	add	r3, r2
 800cd74:	009b      	lsls	r3, r3, #2
 800cd76:	440b      	add	r3, r1
 800cd78:	3326      	adds	r3, #38	@ 0x26
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	32b0      	adds	r2, #176	@ 0xb0
 800cd88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d01f      	beq.n	800cdd0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	33b0      	adds	r3, #176	@ 0xb0
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	4413      	add	r3, r2
 800cd9e:	685b      	ldr	r3, [r3, #4]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	32b0      	adds	r2, #176	@ 0xb0
 800cdae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	f005 fb6c 	bl	8012490 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	32b0      	adds	r2, #176	@ 0xb0
 800cdc2:	2100      	movs	r1, #0
 800cdc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	2200      	movs	r2, #0
 800cdcc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3708      	adds	r7, #8
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	bd80      	pop	{r7, pc}
 800cdda:	bf00      	nop
 800cddc:	200000b3 	.word	0x200000b3
 800cde0:	200000b4 	.word	0x200000b4
 800cde4:	200000b5 	.word	0x200000b5

0800cde8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b086      	sub	sp, #24
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	32b0      	adds	r2, #176	@ 0xb0
 800cdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce00:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ce02:	2300      	movs	r3, #0
 800ce04:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ce06:	2300      	movs	r3, #0
 800ce08:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d101      	bne.n	800ce18 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ce14:	2303      	movs	r3, #3
 800ce16:	e0bf      	b.n	800cf98 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	781b      	ldrb	r3, [r3, #0]
 800ce1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d050      	beq.n	800cec6 <USBD_CDC_Setup+0xde>
 800ce24:	2b20      	cmp	r3, #32
 800ce26:	f040 80af 	bne.w	800cf88 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	88db      	ldrh	r3, [r3, #6]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d03a      	beq.n	800cea8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	b25b      	sxtb	r3, r3
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	da1b      	bge.n	800ce74 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ce42:	687a      	ldr	r2, [r7, #4]
 800ce44:	33b0      	adds	r3, #176	@ 0xb0
 800ce46:	009b      	lsls	r3, r3, #2
 800ce48:	4413      	add	r3, r2
 800ce4a:	685b      	ldr	r3, [r3, #4]
 800ce4c:	689b      	ldr	r3, [r3, #8]
 800ce4e:	683a      	ldr	r2, [r7, #0]
 800ce50:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ce52:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	88d2      	ldrh	r2, [r2, #6]
 800ce58:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ce5a:	683b      	ldr	r3, [r7, #0]
 800ce5c:	88db      	ldrh	r3, [r3, #6]
 800ce5e:	2b07      	cmp	r3, #7
 800ce60:	bf28      	it	cs
 800ce62:	2307      	movcs	r3, #7
 800ce64:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	89fa      	ldrh	r2, [r7, #14]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f001 fd1f 	bl	800e8b0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ce72:	e090      	b.n	800cf96 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ce74:	683b      	ldr	r3, [r7, #0]
 800ce76:	785a      	ldrb	r2, [r3, #1]
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	88db      	ldrh	r3, [r3, #6]
 800ce82:	2b3f      	cmp	r3, #63	@ 0x3f
 800ce84:	d803      	bhi.n	800ce8e <USBD_CDC_Setup+0xa6>
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	88db      	ldrh	r3, [r3, #6]
 800ce8a:	b2da      	uxtb	r2, r3
 800ce8c:	e000      	b.n	800ce90 <USBD_CDC_Setup+0xa8>
 800ce8e:	2240      	movs	r2, #64	@ 0x40
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ce96:	6939      	ldr	r1, [r7, #16]
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ce9e:	461a      	mov	r2, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 fd31 	bl	800e908 <USBD_CtlPrepareRx>
      break;
 800cea6:	e076      	b.n	800cf96 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	33b0      	adds	r3, #176	@ 0xb0
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	689b      	ldr	r3, [r3, #8]
 800ceba:	683a      	ldr	r2, [r7, #0]
 800cebc:	7850      	ldrb	r0, [r2, #1]
 800cebe:	2200      	movs	r2, #0
 800cec0:	6839      	ldr	r1, [r7, #0]
 800cec2:	4798      	blx	r3
      break;
 800cec4:	e067      	b.n	800cf96 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	785b      	ldrb	r3, [r3, #1]
 800ceca:	2b0b      	cmp	r3, #11
 800cecc:	d851      	bhi.n	800cf72 <USBD_CDC_Setup+0x18a>
 800cece:	a201      	add	r2, pc, #4	@ (adr r2, 800ced4 <USBD_CDC_Setup+0xec>)
 800ced0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced4:	0800cf05 	.word	0x0800cf05
 800ced8:	0800cf81 	.word	0x0800cf81
 800cedc:	0800cf73 	.word	0x0800cf73
 800cee0:	0800cf73 	.word	0x0800cf73
 800cee4:	0800cf73 	.word	0x0800cf73
 800cee8:	0800cf73 	.word	0x0800cf73
 800ceec:	0800cf73 	.word	0x0800cf73
 800cef0:	0800cf73 	.word	0x0800cf73
 800cef4:	0800cf73 	.word	0x0800cf73
 800cef8:	0800cf73 	.word	0x0800cf73
 800cefc:	0800cf2f 	.word	0x0800cf2f
 800cf00:	0800cf59 	.word	0x0800cf59
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d107      	bne.n	800cf20 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf10:	f107 030a 	add.w	r3, r7, #10
 800cf14:	2202      	movs	r2, #2
 800cf16:	4619      	mov	r1, r3
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f001 fcc9 	bl	800e8b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf1e:	e032      	b.n	800cf86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf20:	6839      	ldr	r1, [r7, #0]
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f001 fc53 	bl	800e7ce <USBD_CtlError>
            ret = USBD_FAIL;
 800cf28:	2303      	movs	r3, #3
 800cf2a:	75fb      	strb	r3, [r7, #23]
          break;
 800cf2c:	e02b      	b.n	800cf86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	2b03      	cmp	r3, #3
 800cf38:	d107      	bne.n	800cf4a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cf3a:	f107 030d 	add.w	r3, r7, #13
 800cf3e:	2201      	movs	r2, #1
 800cf40:	4619      	mov	r1, r3
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	f001 fcb4 	bl	800e8b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cf48:	e01d      	b.n	800cf86 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cf4a:	6839      	ldr	r1, [r7, #0]
 800cf4c:	6878      	ldr	r0, [r7, #4]
 800cf4e:	f001 fc3e 	bl	800e7ce <USBD_CtlError>
            ret = USBD_FAIL;
 800cf52:	2303      	movs	r3, #3
 800cf54:	75fb      	strb	r3, [r7, #23]
          break;
 800cf56:	e016      	b.n	800cf86 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b03      	cmp	r3, #3
 800cf62:	d00f      	beq.n	800cf84 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f001 fc31 	bl	800e7ce <USBD_CtlError>
            ret = USBD_FAIL;
 800cf6c:	2303      	movs	r3, #3
 800cf6e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cf70:	e008      	b.n	800cf84 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f001 fc2a 	bl	800e7ce <USBD_CtlError>
          ret = USBD_FAIL;
 800cf7a:	2303      	movs	r3, #3
 800cf7c:	75fb      	strb	r3, [r7, #23]
          break;
 800cf7e:	e002      	b.n	800cf86 <USBD_CDC_Setup+0x19e>
          break;
 800cf80:	bf00      	nop
 800cf82:	e008      	b.n	800cf96 <USBD_CDC_Setup+0x1ae>
          break;
 800cf84:	bf00      	nop
      }
      break;
 800cf86:	e006      	b.n	800cf96 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cf88:	6839      	ldr	r1, [r7, #0]
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f001 fc1f 	bl	800e7ce <USBD_CtlError>
      ret = USBD_FAIL;
 800cf90:	2303      	movs	r3, #3
 800cf92:	75fb      	strb	r3, [r7, #23]
      break;
 800cf94:	bf00      	nop
  }

  return (uint8_t)ret;
 800cf96:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3718      	adds	r7, #24
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800cfb2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	32b0      	adds	r2, #176	@ 0xb0
 800cfbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d101      	bne.n	800cfca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cfc6:	2303      	movs	r3, #3
 800cfc8:	e065      	b.n	800d096 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	32b0      	adds	r2, #176	@ 0xb0
 800cfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cfda:	78fb      	ldrb	r3, [r7, #3]
 800cfdc:	f003 020f 	and.w	r2, r3, #15
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	4613      	mov	r3, r2
 800cfe4:	009b      	lsls	r3, r3, #2
 800cfe6:	4413      	add	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	440b      	add	r3, r1
 800cfec:	3318      	adds	r3, #24
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d02f      	beq.n	800d054 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cff4:	78fb      	ldrb	r3, [r7, #3]
 800cff6:	f003 020f 	and.w	r2, r3, #15
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	440b      	add	r3, r1
 800d006:	3318      	adds	r3, #24
 800d008:	681a      	ldr	r2, [r3, #0]
 800d00a:	78fb      	ldrb	r3, [r7, #3]
 800d00c:	f003 010f 	and.w	r1, r3, #15
 800d010:	68f8      	ldr	r0, [r7, #12]
 800d012:	460b      	mov	r3, r1
 800d014:	009b      	lsls	r3, r3, #2
 800d016:	440b      	add	r3, r1
 800d018:	00db      	lsls	r3, r3, #3
 800d01a:	4403      	add	r3, r0
 800d01c:	3320      	adds	r3, #32
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	fbb2 f1f3 	udiv	r1, r2, r3
 800d024:	fb01 f303 	mul.w	r3, r1, r3
 800d028:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d112      	bne.n	800d054 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d02e:	78fb      	ldrb	r3, [r7, #3]
 800d030:	f003 020f 	and.w	r2, r3, #15
 800d034:	6879      	ldr	r1, [r7, #4]
 800d036:	4613      	mov	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	440b      	add	r3, r1
 800d040:	3318      	adds	r3, #24
 800d042:	2200      	movs	r2, #0
 800d044:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d046:	78f9      	ldrb	r1, [r7, #3]
 800d048:	2300      	movs	r3, #0
 800d04a:	2200      	movs	r2, #0
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f005 f986 	bl	801235e <USBD_LL_Transmit>
 800d052:	e01f      	b.n	800d094 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	2200      	movs	r2, #0
 800d058:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	33b0      	adds	r3, #176	@ 0xb0
 800d066:	009b      	lsls	r3, r3, #2
 800d068:	4413      	add	r3, r2
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	691b      	ldr	r3, [r3, #16]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d010      	beq.n	800d094 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d078:	687a      	ldr	r2, [r7, #4]
 800d07a:	33b0      	adds	r3, #176	@ 0xb0
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	691b      	ldr	r3, [r3, #16]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800d08a:	68ba      	ldr	r2, [r7, #8]
 800d08c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800d090:	78fa      	ldrb	r2, [r7, #3]
 800d092:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3710      	adds	r7, #16
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}

0800d09e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d09e:	b580      	push	{r7, lr}
 800d0a0:	b084      	sub	sp, #16
 800d0a2:	af00      	add	r7, sp, #0
 800d0a4:	6078      	str	r0, [r7, #4]
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	32b0      	adds	r2, #176	@ 0xb0
 800d0b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	32b0      	adds	r2, #176	@ 0xb0
 800d0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d101      	bne.n	800d0d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d0cc:	2303      	movs	r3, #3
 800d0ce:	e01a      	b.n	800d106 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d0d0:	78fb      	ldrb	r3, [r7, #3]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f005 f984 	bl	80123e2 <USBD_LL_GetRxDataSize>
 800d0da:	4602      	mov	r2, r0
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	33b0      	adds	r3, #176	@ 0xb0
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4413      	add	r3, r2
 800d0f0:	685b      	ldr	r3, [r3, #4]
 800d0f2:	68db      	ldr	r3, [r3, #12]
 800d0f4:	68fa      	ldr	r2, [r7, #12]
 800d0f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800d100:	4611      	mov	r1, r2
 800d102:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}

0800d10e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d10e:	b580      	push	{r7, lr}
 800d110:	b084      	sub	sp, #16
 800d112:	af00      	add	r7, sp, #0
 800d114:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	32b0      	adds	r2, #176	@ 0xb0
 800d120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d124:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d101      	bne.n	800d130 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e024      	b.n	800d17a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d136:	687a      	ldr	r2, [r7, #4]
 800d138:	33b0      	adds	r3, #176	@ 0xb0
 800d13a:	009b      	lsls	r3, r3, #2
 800d13c:	4413      	add	r3, r2
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d019      	beq.n	800d178 <USBD_CDC_EP0_RxReady+0x6a>
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800d14a:	2bff      	cmp	r3, #255	@ 0xff
 800d14c:	d014      	beq.n	800d178 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d154:	687a      	ldr	r2, [r7, #4]
 800d156:	33b0      	adds	r3, #176	@ 0xb0
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	689b      	ldr	r3, [r3, #8]
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d166:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d168:	68fa      	ldr	r2, [r7, #12]
 800d16a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d16e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	22ff      	movs	r2, #255	@ 0xff
 800d174:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d178:	2300      	movs	r3, #0
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
	...

0800d184 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b086      	sub	sp, #24
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d18c:	2182      	movs	r1, #130	@ 0x82
 800d18e:	4818      	ldr	r0, [pc, #96]	@ (800d1f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d190:	f000 fcbd 	bl	800db0e <USBD_GetEpDesc>
 800d194:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d196:	2101      	movs	r1, #1
 800d198:	4815      	ldr	r0, [pc, #84]	@ (800d1f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d19a:	f000 fcb8 	bl	800db0e <USBD_GetEpDesc>
 800d19e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d1a0:	2181      	movs	r1, #129	@ 0x81
 800d1a2:	4813      	ldr	r0, [pc, #76]	@ (800d1f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d1a4:	f000 fcb3 	bl	800db0e <USBD_GetEpDesc>
 800d1a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d1aa:	697b      	ldr	r3, [r7, #20]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d002      	beq.n	800d1b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	2210      	movs	r2, #16
 800d1b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d006      	beq.n	800d1ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	2200      	movs	r2, #0
 800d1c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1c4:	711a      	strb	r2, [r3, #4]
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d006      	beq.n	800d1de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d1d8:	711a      	strb	r2, [r3, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2243      	movs	r2, #67	@ 0x43
 800d1e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d1e4:	4b02      	ldr	r3, [pc, #8]	@ (800d1f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3718      	adds	r7, #24
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop
 800d1f0:	20000070 	.word	0x20000070

0800d1f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b086      	sub	sp, #24
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d1fc:	2182      	movs	r1, #130	@ 0x82
 800d1fe:	4818      	ldr	r0, [pc, #96]	@ (800d260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d200:	f000 fc85 	bl	800db0e <USBD_GetEpDesc>
 800d204:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d206:	2101      	movs	r1, #1
 800d208:	4815      	ldr	r0, [pc, #84]	@ (800d260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d20a:	f000 fc80 	bl	800db0e <USBD_GetEpDesc>
 800d20e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d210:	2181      	movs	r1, #129	@ 0x81
 800d212:	4813      	ldr	r0, [pc, #76]	@ (800d260 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d214:	f000 fc7b 	bl	800db0e <USBD_GetEpDesc>
 800d218:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d21a:	697b      	ldr	r3, [r7, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d002      	beq.n	800d226 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	2210      	movs	r2, #16
 800d224:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d006      	beq.n	800d23a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	2200      	movs	r2, #0
 800d230:	711a      	strb	r2, [r3, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	f042 0202 	orr.w	r2, r2, #2
 800d238:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d006      	beq.n	800d24e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	2200      	movs	r2, #0
 800d244:	711a      	strb	r2, [r3, #4]
 800d246:	2200      	movs	r2, #0
 800d248:	f042 0202 	orr.w	r2, r2, #2
 800d24c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	2243      	movs	r2, #67	@ 0x43
 800d252:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d254:	4b02      	ldr	r3, [pc, #8]	@ (800d260 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20000070 	.word	0x20000070

0800d264 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b086      	sub	sp, #24
 800d268:	af00      	add	r7, sp, #0
 800d26a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d26c:	2182      	movs	r1, #130	@ 0x82
 800d26e:	4818      	ldr	r0, [pc, #96]	@ (800d2d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d270:	f000 fc4d 	bl	800db0e <USBD_GetEpDesc>
 800d274:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d276:	2101      	movs	r1, #1
 800d278:	4815      	ldr	r0, [pc, #84]	@ (800d2d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d27a:	f000 fc48 	bl	800db0e <USBD_GetEpDesc>
 800d27e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d280:	2181      	movs	r1, #129	@ 0x81
 800d282:	4813      	ldr	r0, [pc, #76]	@ (800d2d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d284:	f000 fc43 	bl	800db0e <USBD_GetEpDesc>
 800d288:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	2210      	movs	r2, #16
 800d294:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d296:	693b      	ldr	r3, [r7, #16]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d006      	beq.n	800d2aa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d29c:	693b      	ldr	r3, [r7, #16]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2a4:	711a      	strb	r2, [r3, #4]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d006      	beq.n	800d2be <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d2b8:	711a      	strb	r2, [r3, #4]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2243      	movs	r2, #67	@ 0x43
 800d2c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d2c4:	4b02      	ldr	r3, [pc, #8]	@ (800d2d0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	3718      	adds	r7, #24
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	bd80      	pop	{r7, pc}
 800d2ce:	bf00      	nop
 800d2d0:	20000070 	.word	0x20000070

0800d2d4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d2d4:	b480      	push	{r7}
 800d2d6:	b083      	sub	sp, #12
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	220a      	movs	r2, #10
 800d2e0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d2e2:	4b03      	ldr	r3, [pc, #12]	@ (800d2f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	370c      	adds	r7, #12
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ee:	4770      	bx	lr
 800d2f0:	2000002c 	.word	0x2000002c

0800d2f4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d2f4:	b480      	push	{r7}
 800d2f6:	b083      	sub	sp, #12
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d101      	bne.n	800d308 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d304:	2303      	movs	r3, #3
 800d306:	e009      	b.n	800d31c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	33b0      	adds	r3, #176	@ 0xb0
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	4413      	add	r3, r2
 800d316:	683a      	ldr	r2, [r7, #0]
 800d318:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d31a:	2300      	movs	r3, #0
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d328:	b480      	push	{r7}
 800d32a:	b087      	sub	sp, #28
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	60f8      	str	r0, [r7, #12]
 800d330:	60b9      	str	r1, [r7, #8]
 800d332:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	32b0      	adds	r2, #176	@ 0xb0
 800d33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d342:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d101      	bne.n	800d34e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e008      	b.n	800d360 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d34e:	697b      	ldr	r3, [r7, #20]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	687a      	ldr	r2, [r7, #4]
 800d35a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d35e:	2300      	movs	r3, #0
}
 800d360:	4618      	mov	r0, r3
 800d362:	371c      	adds	r7, #28
 800d364:	46bd      	mov	sp, r7
 800d366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d36a:	4770      	bx	lr

0800d36c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	32b0      	adds	r2, #176	@ 0xb0
 800d380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d384:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d101      	bne.n	800d390 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d38c:	2303      	movs	r3, #3
 800d38e:	e004      	b.n	800d39a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	683a      	ldr	r2, [r7, #0]
 800d394:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d398:	2300      	movs	r3, #0
}
 800d39a:	4618      	mov	r0, r3
 800d39c:	3714      	adds	r7, #20
 800d39e:	46bd      	mov	sp, r7
 800d3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a4:	4770      	bx	lr
	...

0800d3a8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	32b0      	adds	r2, #176	@ 0xb0
 800d3ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3be:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d3ca:	2303      	movs	r3, #3
 800d3cc:	e025      	b.n	800d41a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d11f      	bne.n	800d418 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d3d8:	68bb      	ldr	r3, [r7, #8]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d3e0:	4b10      	ldr	r3, [pc, #64]	@ (800d424 <USBD_CDC_TransmitPacket+0x7c>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	f003 020f 	and.w	r2, r3, #15
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d3ee:	6878      	ldr	r0, [r7, #4]
 800d3f0:	4613      	mov	r3, r2
 800d3f2:	009b      	lsls	r3, r3, #2
 800d3f4:	4413      	add	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4403      	add	r3, r0
 800d3fa:	3318      	adds	r3, #24
 800d3fc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d3fe:	4b09      	ldr	r3, [pc, #36]	@ (800d424 <USBD_CDC_TransmitPacket+0x7c>)
 800d400:	7819      	ldrb	r1, [r3, #0]
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f004 ffa5 	bl	801235e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d414:	2300      	movs	r3, #0
 800d416:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d418:	7bfb      	ldrb	r3, [r7, #15]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	200000b3 	.word	0x200000b3

0800d428 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	32b0      	adds	r2, #176	@ 0xb0
 800d43a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d43e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	32b0      	adds	r2, #176	@ 0xb0
 800d44a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d101      	bne.n	800d456 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d452:	2303      	movs	r3, #3
 800d454:	e018      	b.n	800d488 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	7c1b      	ldrb	r3, [r3, #16]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d45e:	4b0c      	ldr	r3, [pc, #48]	@ (800d490 <USBD_CDC_ReceivePacket+0x68>)
 800d460:	7819      	ldrb	r1, [r3, #0]
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	f004 ff97 	bl	80123a0 <USBD_LL_PrepareReceive>
 800d472:	e008      	b.n	800d486 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d474:	4b06      	ldr	r3, [pc, #24]	@ (800d490 <USBD_CDC_ReceivePacket+0x68>)
 800d476:	7819      	ldrb	r1, [r3, #0]
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d47e:	2340      	movs	r3, #64	@ 0x40
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f004 ff8d 	bl	80123a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d486:	2300      	movs	r3, #0
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	200000b4 	.word	0x200000b4

0800d494 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b086      	sub	sp, #24
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	4613      	mov	r3, r2
 800d4a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d101      	bne.n	800d4ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d4a8:	2303      	movs	r3, #3
 800d4aa:	e01f      	b.n	800d4ec <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2200      	movs	r2, #0
 800d4c0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d003      	beq.n	800d4d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	79fa      	ldrb	r2, [r7, #7]
 800d4de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f004 fdf1 	bl	80120c8 <USBD_LL_Init>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
 800d4fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4fe:	2300      	movs	r3, #0
 800d500:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d508:	2303      	movs	r3, #3
 800d50a:	e025      	b.n	800d558 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	32ae      	adds	r2, #174	@ 0xae
 800d51e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d524:	2b00      	cmp	r3, #0
 800d526:	d00f      	beq.n	800d548 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	32ae      	adds	r2, #174	@ 0xae
 800d532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d536:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d538:	f107 020e 	add.w	r2, r7, #14
 800d53c:	4610      	mov	r0, r2
 800d53e:	4798      	blx	r3
 800d540:	4602      	mov	r2, r0
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d54e:	1c5a      	adds	r2, r3, #1
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d556:	2300      	movs	r3, #0
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3710      	adds	r7, #16
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f004 fe0f 	bl	801218c <USBD_LL_Start>
 800d56e:	4603      	mov	r3, r0
}
 800d570:	4618      	mov	r0, r3
 800d572:	3708      	adds	r7, #8
 800d574:	46bd      	mov	sp, r7
 800d576:	bd80      	pop	{r7, pc}

0800d578 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d578:	b480      	push	{r7}
 800d57a:	b083      	sub	sp, #12
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d580:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d582:	4618      	mov	r0, r3
 800d584:	370c      	adds	r7, #12
 800d586:	46bd      	mov	sp, r7
 800d588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58c:	4770      	bx	lr

0800d58e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d58e:	b580      	push	{r7, lr}
 800d590:	b084      	sub	sp, #16
 800d592:	af00      	add	r7, sp, #0
 800d594:	6078      	str	r0, [r7, #4]
 800d596:	460b      	mov	r3, r1
 800d598:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	78fa      	ldrb	r2, [r7, #3]
 800d5b2:	4611      	mov	r1, r2
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	4798      	blx	r3
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3710      	adds	r7, #16
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
 800d5ce:	460b      	mov	r3, r1
 800d5d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	4611      	mov	r1, r2
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	4798      	blx	r3
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d001      	beq.n	800d5f0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d5ec:	2303      	movs	r3, #3
 800d5ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	3710      	adds	r7, #16
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}

0800d5fa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d5fa:	b580      	push	{r7, lr}
 800d5fc:	b084      	sub	sp, #16
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d60a:	6839      	ldr	r1, [r7, #0]
 800d60c:	4618      	mov	r0, r3
 800d60e:	f001 f8a4 	bl	800e75a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2201      	movs	r2, #1
 800d616:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d620:	461a      	mov	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d62e:	f003 031f 	and.w	r3, r3, #31
 800d632:	2b02      	cmp	r3, #2
 800d634:	d01a      	beq.n	800d66c <USBD_LL_SetupStage+0x72>
 800d636:	2b02      	cmp	r3, #2
 800d638:	d822      	bhi.n	800d680 <USBD_LL_SetupStage+0x86>
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <USBD_LL_SetupStage+0x4a>
 800d63e:	2b01      	cmp	r3, #1
 800d640:	d00a      	beq.n	800d658 <USBD_LL_SetupStage+0x5e>
 800d642:	e01d      	b.n	800d680 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d64a:	4619      	mov	r1, r3
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 fad1 	bl	800dbf4 <USBD_StdDevReq>
 800d652:	4603      	mov	r3, r0
 800d654:	73fb      	strb	r3, [r7, #15]
      break;
 800d656:	e020      	b.n	800d69a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d65e:	4619      	mov	r1, r3
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 fb39 	bl	800dcd8 <USBD_StdItfReq>
 800d666:	4603      	mov	r3, r0
 800d668:	73fb      	strb	r3, [r7, #15]
      break;
 800d66a:	e016      	b.n	800d69a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d672:	4619      	mov	r1, r3
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fb9b 	bl	800ddb0 <USBD_StdEPReq>
 800d67a:	4603      	mov	r3, r0
 800d67c:	73fb      	strb	r3, [r7, #15]
      break;
 800d67e:	e00c      	b.n	800d69a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d686:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d68a:	b2db      	uxtb	r3, r3
 800d68c:	4619      	mov	r1, r3
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f004 fddc 	bl	801224c <USBD_LL_StallEP>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]
      break;
 800d698:	bf00      	nop
  }

  return ret;
 800d69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69c:	4618      	mov	r0, r3
 800d69e:	3710      	adds	r7, #16
 800d6a0:	46bd      	mov	sp, r7
 800d6a2:	bd80      	pop	{r7, pc}

0800d6a4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b086      	sub	sp, #24
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	460b      	mov	r3, r1
 800d6ae:	607a      	str	r2, [r7, #4]
 800d6b0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d6b6:	7afb      	ldrb	r3, [r7, #11]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d16e      	bne.n	800d79a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d6c2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d6ca:	2b03      	cmp	r3, #3
 800d6cc:	f040 8098 	bne.w	800d800 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6d0:	693b      	ldr	r3, [r7, #16]
 800d6d2:	689a      	ldr	r2, [r3, #8]
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	429a      	cmp	r2, r3
 800d6da:	d913      	bls.n	800d704 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	689a      	ldr	r2, [r3, #8]
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	1ad2      	subs	r2, r2, r3
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d6ea:	693b      	ldr	r3, [r7, #16]
 800d6ec:	68da      	ldr	r2, [r3, #12]
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	4293      	cmp	r3, r2
 800d6f4:	bf28      	it	cs
 800d6f6:	4613      	movcs	r3, r2
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	68f8      	ldr	r0, [r7, #12]
 800d6fe:	f001 f920 	bl	800e942 <USBD_CtlContinueRx>
 800d702:	e07d      	b.n	800d800 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d70a:	f003 031f 	and.w	r3, r3, #31
 800d70e:	2b02      	cmp	r3, #2
 800d710:	d014      	beq.n	800d73c <USBD_LL_DataOutStage+0x98>
 800d712:	2b02      	cmp	r3, #2
 800d714:	d81d      	bhi.n	800d752 <USBD_LL_DataOutStage+0xae>
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <USBD_LL_DataOutStage+0x7c>
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d003      	beq.n	800d726 <USBD_LL_DataOutStage+0x82>
 800d71e:	e018      	b.n	800d752 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d720:	2300      	movs	r3, #0
 800d722:	75bb      	strb	r3, [r7, #22]
            break;
 800d724:	e018      	b.n	800d758 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d72c:	b2db      	uxtb	r3, r3
 800d72e:	4619      	mov	r1, r3
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f000 f9d2 	bl	800dada <USBD_CoreFindIF>
 800d736:	4603      	mov	r3, r0
 800d738:	75bb      	strb	r3, [r7, #22]
            break;
 800d73a:	e00d      	b.n	800d758 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d742:	b2db      	uxtb	r3, r3
 800d744:	4619      	mov	r1, r3
 800d746:	68f8      	ldr	r0, [r7, #12]
 800d748:	f000 f9d4 	bl	800daf4 <USBD_CoreFindEP>
 800d74c:	4603      	mov	r3, r0
 800d74e:	75bb      	strb	r3, [r7, #22]
            break;
 800d750:	e002      	b.n	800d758 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d752:	2300      	movs	r3, #0
 800d754:	75bb      	strb	r3, [r7, #22]
            break;
 800d756:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d758:	7dbb      	ldrb	r3, [r7, #22]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d119      	bne.n	800d792 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	2b03      	cmp	r3, #3
 800d768:	d113      	bne.n	800d792 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d76a:	7dba      	ldrb	r2, [r7, #22]
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	32ae      	adds	r2, #174	@ 0xae
 800d770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d774:	691b      	ldr	r3, [r3, #16]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00b      	beq.n	800d792 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d77a:	7dba      	ldrb	r2, [r7, #22]
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d782:	7dba      	ldrb	r2, [r7, #22]
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	32ae      	adds	r2, #174	@ 0xae
 800d788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d78c:	691b      	ldr	r3, [r3, #16]
 800d78e:	68f8      	ldr	r0, [r7, #12]
 800d790:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f001 f8e6 	bl	800e964 <USBD_CtlSendStatus>
 800d798:	e032      	b.n	800d800 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d79a:	7afb      	ldrb	r3, [r7, #11]
 800d79c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d7a0:	b2db      	uxtb	r3, r3
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f9a5 	bl	800daf4 <USBD_CoreFindEP>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7ae:	7dbb      	ldrb	r3, [r7, #22]
 800d7b0:	2bff      	cmp	r3, #255	@ 0xff
 800d7b2:	d025      	beq.n	800d800 <USBD_LL_DataOutStage+0x15c>
 800d7b4:	7dbb      	ldrb	r3, [r7, #22]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d122      	bne.n	800d800 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7c0:	b2db      	uxtb	r3, r3
 800d7c2:	2b03      	cmp	r3, #3
 800d7c4:	d117      	bne.n	800d7f6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d7c6:	7dba      	ldrb	r2, [r7, #22]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	32ae      	adds	r2, #174	@ 0xae
 800d7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7d0:	699b      	ldr	r3, [r3, #24]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00f      	beq.n	800d7f6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d7d6:	7dba      	ldrb	r2, [r7, #22]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d7de:	7dba      	ldrb	r2, [r7, #22]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	32ae      	adds	r2, #174	@ 0xae
 800d7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	7afa      	ldrb	r2, [r7, #11]
 800d7ec:	4611      	mov	r1, r2
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	4798      	blx	r3
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d7f6:	7dfb      	ldrb	r3, [r7, #23]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d001      	beq.n	800d800 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d7fc:	7dfb      	ldrb	r3, [r7, #23]
 800d7fe:	e000      	b.n	800d802 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d800:	2300      	movs	r3, #0
}
 800d802:	4618      	mov	r0, r3
 800d804:	3718      	adds	r7, #24
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b086      	sub	sp, #24
 800d80e:	af00      	add	r7, sp, #0
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	460b      	mov	r3, r1
 800d814:	607a      	str	r2, [r7, #4]
 800d816:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d818:	7afb      	ldrb	r3, [r7, #11]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d16f      	bne.n	800d8fe <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	3314      	adds	r3, #20
 800d822:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d82a:	2b02      	cmp	r3, #2
 800d82c:	d15a      	bne.n	800d8e4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d82e:	693b      	ldr	r3, [r7, #16]
 800d830:	689a      	ldr	r2, [r3, #8]
 800d832:	693b      	ldr	r3, [r7, #16]
 800d834:	68db      	ldr	r3, [r3, #12]
 800d836:	429a      	cmp	r2, r3
 800d838:	d914      	bls.n	800d864 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	689a      	ldr	r2, [r3, #8]
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	68db      	ldr	r3, [r3, #12]
 800d842:	1ad2      	subs	r2, r2, r3
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d848:	693b      	ldr	r3, [r7, #16]
 800d84a:	689b      	ldr	r3, [r3, #8]
 800d84c:	461a      	mov	r2, r3
 800d84e:	6879      	ldr	r1, [r7, #4]
 800d850:	68f8      	ldr	r0, [r7, #12]
 800d852:	f001 f848 	bl	800e8e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d856:	2300      	movs	r3, #0
 800d858:	2200      	movs	r2, #0
 800d85a:	2100      	movs	r1, #0
 800d85c:	68f8      	ldr	r0, [r7, #12]
 800d85e:	f004 fd9f 	bl	80123a0 <USBD_LL_PrepareReceive>
 800d862:	e03f      	b.n	800d8e4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	689b      	ldr	r3, [r3, #8]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d11c      	bne.n	800d8aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	685a      	ldr	r2, [r3, #4]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d878:	429a      	cmp	r2, r3
 800d87a:	d316      	bcc.n	800d8aa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d87c:	693b      	ldr	r3, [r7, #16]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d886:	429a      	cmp	r2, r3
 800d888:	d20f      	bcs.n	800d8aa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d88a:	2200      	movs	r2, #0
 800d88c:	2100      	movs	r1, #0
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f001 f829 	bl	800e8e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	2200      	movs	r2, #0
 800d898:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d89c:	2300      	movs	r3, #0
 800d89e:	2200      	movs	r2, #0
 800d8a0:	2100      	movs	r1, #0
 800d8a2:	68f8      	ldr	r0, [r7, #12]
 800d8a4:	f004 fd7c 	bl	80123a0 <USBD_LL_PrepareReceive>
 800d8a8:	e01c      	b.n	800d8e4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b03      	cmp	r3, #3
 800d8b4:	d10f      	bne.n	800d8d6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8bc:	68db      	ldr	r3, [r3, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d009      	beq.n	800d8d6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	68f8      	ldr	r0, [r7, #12]
 800d8d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d8d6:	2180      	movs	r1, #128	@ 0x80
 800d8d8:	68f8      	ldr	r0, [r7, #12]
 800d8da:	f004 fcb7 	bl	801224c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f001 f853 	bl	800e98a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d03a      	beq.n	800d964 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f7ff fe42 	bl	800d578 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	2200      	movs	r2, #0
 800d8f8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d8fc:	e032      	b.n	800d964 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d8fe:	7afb      	ldrb	r3, [r7, #11]
 800d900:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d904:	b2db      	uxtb	r3, r3
 800d906:	4619      	mov	r1, r3
 800d908:	68f8      	ldr	r0, [r7, #12]
 800d90a:	f000 f8f3 	bl	800daf4 <USBD_CoreFindEP>
 800d90e:	4603      	mov	r3, r0
 800d910:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d912:	7dfb      	ldrb	r3, [r7, #23]
 800d914:	2bff      	cmp	r3, #255	@ 0xff
 800d916:	d025      	beq.n	800d964 <USBD_LL_DataInStage+0x15a>
 800d918:	7dfb      	ldrb	r3, [r7, #23]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d122      	bne.n	800d964 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d924:	b2db      	uxtb	r3, r3
 800d926:	2b03      	cmp	r3, #3
 800d928:	d11c      	bne.n	800d964 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d92a:	7dfa      	ldrb	r2, [r7, #23]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	32ae      	adds	r2, #174	@ 0xae
 800d930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d934:	695b      	ldr	r3, [r3, #20]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d014      	beq.n	800d964 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d93a:	7dfa      	ldrb	r2, [r7, #23]
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d942:	7dfa      	ldrb	r2, [r7, #23]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	32ae      	adds	r2, #174	@ 0xae
 800d948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d94c:	695b      	ldr	r3, [r3, #20]
 800d94e:	7afa      	ldrb	r2, [r7, #11]
 800d950:	4611      	mov	r1, r2
 800d952:	68f8      	ldr	r0, [r7, #12]
 800d954:	4798      	blx	r3
 800d956:	4603      	mov	r3, r0
 800d958:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d95a:	7dbb      	ldrb	r3, [r7, #22]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d001      	beq.n	800d964 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d960:	7dbb      	ldrb	r3, [r7, #22]
 800d962:	e000      	b.n	800d966 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	3718      	adds	r7, #24
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}

0800d96e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d96e:	b580      	push	{r7, lr}
 800d970:	b084      	sub	sp, #16
 800d972:	af00      	add	r7, sp, #0
 800d974:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d976:	2300      	movs	r3, #0
 800d978:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2201      	movs	r2, #1
 800d97e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2200      	movs	r2, #0
 800d986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	2200      	movs	r2, #0
 800d98e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d014      	beq.n	800d9d4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	6852      	ldr	r2, [r2, #4]
 800d9c2:	b2d2      	uxtb	r2, r2
 800d9c4:	4611      	mov	r1, r2
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	4798      	blx	r3
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d001      	beq.n	800d9d4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d9d0:	2303      	movs	r3, #3
 800d9d2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9d4:	2340      	movs	r3, #64	@ 0x40
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	2100      	movs	r1, #0
 800d9da:	6878      	ldr	r0, [r7, #4]
 800d9dc:	f004 fbf1 	bl	80121c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2240      	movs	r2, #64	@ 0x40
 800d9ec:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d9f0:	2340      	movs	r3, #64	@ 0x40
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	2180      	movs	r1, #128	@ 0x80
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f004 fbe3 	bl	80121c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2240      	movs	r2, #64	@ 0x40
 800da06:	621a      	str	r2, [r3, #32]

  return ret;
 800da08:	7bfb      	ldrb	r3, [r7, #15]
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3710      	adds	r7, #16
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}

0800da12 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800da12:	b480      	push	{r7}
 800da14:	b083      	sub	sp, #12
 800da16:	af00      	add	r7, sp, #0
 800da18:	6078      	str	r0, [r7, #4]
 800da1a:	460b      	mov	r3, r1
 800da1c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	78fa      	ldrb	r2, [r7, #3]
 800da22:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	370c      	adds	r7, #12
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800da32:	b480      	push	{r7}
 800da34:	b083      	sub	sp, #12
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da40:	b2db      	uxtb	r3, r3
 800da42:	2b04      	cmp	r3, #4
 800da44:	d006      	beq.n	800da54 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4c:	b2da      	uxtb	r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2204      	movs	r2, #4
 800da58:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800da5c:	2300      	movs	r3, #0
}
 800da5e:	4618      	mov	r0, r3
 800da60:	370c      	adds	r7, #12
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr

0800da6a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	2b04      	cmp	r3, #4
 800da7c:	d106      	bne.n	800da8c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800da84:	b2da      	uxtb	r2, r3
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800da8c:	2300      	movs	r3, #0
}
 800da8e:	4618      	mov	r0, r3
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800daa8:	b2db      	uxtb	r3, r3
 800daaa:	2b03      	cmp	r3, #3
 800daac:	d110      	bne.n	800dad0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d00b      	beq.n	800dad0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dabe:	69db      	ldr	r3, [r3, #28]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d005      	beq.n	800dad0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800daca:	69db      	ldr	r3, [r3, #28]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dad0:	2300      	movs	r3, #0
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dada:	b480      	push	{r7}
 800dadc:	b083      	sub	sp, #12
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	460b      	mov	r3, r1
 800dae4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dae6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dae8:	4618      	mov	r0, r3
 800daea:	370c      	adds	r7, #12
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr

0800daf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800daf4:	b480      	push	{r7}
 800daf6:	b083      	sub	sp, #12
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
 800dafc:	460b      	mov	r3, r1
 800dafe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800db00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800db02:	4618      	mov	r0, r3
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800db0e:	b580      	push	{r7, lr}
 800db10:	b086      	sub	sp, #24
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800db22:	2300      	movs	r3, #0
 800db24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	885b      	ldrh	r3, [r3, #2]
 800db2a:	b29b      	uxth	r3, r3
 800db2c:	68fa      	ldr	r2, [r7, #12]
 800db2e:	7812      	ldrb	r2, [r2, #0]
 800db30:	4293      	cmp	r3, r2
 800db32:	d91f      	bls.n	800db74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db3a:	e013      	b.n	800db64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db3c:	f107 030a 	add.w	r3, r7, #10
 800db40:	4619      	mov	r1, r3
 800db42:	6978      	ldr	r0, [r7, #20]
 800db44:	f000 f81b 	bl	800db7e <USBD_GetNextDesc>
 800db48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	785b      	ldrb	r3, [r3, #1]
 800db4e:	2b05      	cmp	r3, #5
 800db50:	d108      	bne.n	800db64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	789b      	ldrb	r3, [r3, #2]
 800db5a:	78fa      	ldrb	r2, [r7, #3]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	d008      	beq.n	800db72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db60:	2300      	movs	r3, #0
 800db62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	885b      	ldrh	r3, [r3, #2]
 800db68:	b29a      	uxth	r2, r3
 800db6a:	897b      	ldrh	r3, [r7, #10]
 800db6c:	429a      	cmp	r2, r3
 800db6e:	d8e5      	bhi.n	800db3c <USBD_GetEpDesc+0x2e>
 800db70:	e000      	b.n	800db74 <USBD_GetEpDesc+0x66>
          break;
 800db72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db74:	693b      	ldr	r3, [r7, #16]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3718      	adds	r7, #24
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db7e:	b480      	push	{r7}
 800db80:	b085      	sub	sp, #20
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	881b      	ldrh	r3, [r3, #0]
 800db90:	68fa      	ldr	r2, [r7, #12]
 800db92:	7812      	ldrb	r2, [r2, #0]
 800db94:	4413      	add	r3, r2
 800db96:	b29a      	uxth	r2, r3
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	781b      	ldrb	r3, [r3, #0]
 800dba0:	461a      	mov	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	4413      	add	r3, r2
 800dba6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800dba8:	68fb      	ldr	r3, [r7, #12]
}
 800dbaa:	4618      	mov	r0, r3
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr

0800dbb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800dbb6:	b480      	push	{r7}
 800dbb8:	b087      	sub	sp, #28
 800dbba:	af00      	add	r7, sp, #0
 800dbbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dbc2:	697b      	ldr	r3, [r7, #20]
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	781b      	ldrb	r3, [r3, #0]
 800dbd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbd4:	8a3b      	ldrh	r3, [r7, #16]
 800dbd6:	021b      	lsls	r3, r3, #8
 800dbd8:	b21a      	sxth	r2, r3
 800dbda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	b21b      	sxth	r3, r3
 800dbe2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dbe4:	89fb      	ldrh	r3, [r7, #14]
}
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	371c      	adds	r7, #28
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
	...

0800dbf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbfe:	2300      	movs	r3, #0
 800dc00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	781b      	ldrb	r3, [r3, #0]
 800dc06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dc0a:	2b40      	cmp	r3, #64	@ 0x40
 800dc0c:	d005      	beq.n	800dc1a <USBD_StdDevReq+0x26>
 800dc0e:	2b40      	cmp	r3, #64	@ 0x40
 800dc10:	d857      	bhi.n	800dcc2 <USBD_StdDevReq+0xce>
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d00f      	beq.n	800dc36 <USBD_StdDevReq+0x42>
 800dc16:	2b20      	cmp	r3, #32
 800dc18:	d153      	bne.n	800dcc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	32ae      	adds	r2, #174	@ 0xae
 800dc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc28:	689b      	ldr	r3, [r3, #8]
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	4798      	blx	r3
 800dc30:	4603      	mov	r3, r0
 800dc32:	73fb      	strb	r3, [r7, #15]
      break;
 800dc34:	e04a      	b.n	800dccc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	785b      	ldrb	r3, [r3, #1]
 800dc3a:	2b09      	cmp	r3, #9
 800dc3c:	d83b      	bhi.n	800dcb6 <USBD_StdDevReq+0xc2>
 800dc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800dc44 <USBD_StdDevReq+0x50>)
 800dc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc44:	0800dc99 	.word	0x0800dc99
 800dc48:	0800dcad 	.word	0x0800dcad
 800dc4c:	0800dcb7 	.word	0x0800dcb7
 800dc50:	0800dca3 	.word	0x0800dca3
 800dc54:	0800dcb7 	.word	0x0800dcb7
 800dc58:	0800dc77 	.word	0x0800dc77
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dcb7 	.word	0x0800dcb7
 800dc64:	0800dc8f 	.word	0x0800dc8f
 800dc68:	0800dc81 	.word	0x0800dc81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	f000 fa3c 	bl	800e0ec <USBD_GetDescriptor>
          break;
 800dc74:	e024      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc76:	6839      	ldr	r1, [r7, #0]
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f000 fbcb 	bl	800e414 <USBD_SetAddress>
          break;
 800dc7e:	e01f      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc80:	6839      	ldr	r1, [r7, #0]
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f000 fc0a 	bl	800e49c <USBD_SetConfig>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	73fb      	strb	r3, [r7, #15]
          break;
 800dc8c:	e018      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fcad 	bl	800e5f0 <USBD_GetConfig>
          break;
 800dc96:	e013      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc98:	6839      	ldr	r1, [r7, #0]
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 fcde 	bl	800e65c <USBD_GetStatus>
          break;
 800dca0:	e00e      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dca2:	6839      	ldr	r1, [r7, #0]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 fd0d 	bl	800e6c4 <USBD_SetFeature>
          break;
 800dcaa:	e009      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dcac:	6839      	ldr	r1, [r7, #0]
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fd31 	bl	800e716 <USBD_ClrFeature>
          break;
 800dcb4:	e004      	b.n	800dcc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dcb6:	6839      	ldr	r1, [r7, #0]
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f000 fd88 	bl	800e7ce <USBD_CtlError>
          break;
 800dcbe:	bf00      	nop
      }
      break;
 800dcc0:	e004      	b.n	800dccc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 fd82 	bl	800e7ce <USBD_CtlError>
      break;
 800dcca:	bf00      	nop
  }

  return ret;
 800dccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
 800dcd6:	bf00      	nop

0800dcd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b084      	sub	sp, #16
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	6078      	str	r0, [r7, #4]
 800dce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dce2:	2300      	movs	r3, #0
 800dce4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	781b      	ldrb	r3, [r3, #0]
 800dcea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dcee:	2b40      	cmp	r3, #64	@ 0x40
 800dcf0:	d005      	beq.n	800dcfe <USBD_StdItfReq+0x26>
 800dcf2:	2b40      	cmp	r3, #64	@ 0x40
 800dcf4:	d852      	bhi.n	800dd9c <USBD_StdItfReq+0xc4>
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <USBD_StdItfReq+0x26>
 800dcfa:	2b20      	cmp	r3, #32
 800dcfc:	d14e      	bne.n	800dd9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	3b01      	subs	r3, #1
 800dd08:	2b02      	cmp	r3, #2
 800dd0a:	d840      	bhi.n	800dd8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	889b      	ldrh	r3, [r3, #4]
 800dd10:	b2db      	uxtb	r3, r3
 800dd12:	2b01      	cmp	r3, #1
 800dd14:	d836      	bhi.n	800dd84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dd16:	683b      	ldr	r3, [r7, #0]
 800dd18:	889b      	ldrh	r3, [r3, #4]
 800dd1a:	b2db      	uxtb	r3, r3
 800dd1c:	4619      	mov	r1, r3
 800dd1e:	6878      	ldr	r0, [r7, #4]
 800dd20:	f7ff fedb 	bl	800dada <USBD_CoreFindIF>
 800dd24:	4603      	mov	r3, r0
 800dd26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd28:	7bbb      	ldrb	r3, [r7, #14]
 800dd2a:	2bff      	cmp	r3, #255	@ 0xff
 800dd2c:	d01d      	beq.n	800dd6a <USBD_StdItfReq+0x92>
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d11a      	bne.n	800dd6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd34:	7bba      	ldrb	r2, [r7, #14]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	32ae      	adds	r2, #174	@ 0xae
 800dd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd3e:	689b      	ldr	r3, [r3, #8]
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d00f      	beq.n	800dd64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd44:	7bba      	ldrb	r2, [r7, #14]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd4c:	7bba      	ldrb	r2, [r7, #14]
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	32ae      	adds	r2, #174	@ 0xae
 800dd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd56:	689b      	ldr	r3, [r3, #8]
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	4798      	blx	r3
 800dd5e:	4603      	mov	r3, r0
 800dd60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd62:	e004      	b.n	800dd6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd64:	2303      	movs	r3, #3
 800dd66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd68:	e001      	b.n	800dd6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd6a:	2303      	movs	r3, #3
 800dd6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd6e:	683b      	ldr	r3, [r7, #0]
 800dd70:	88db      	ldrh	r3, [r3, #6]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d110      	bne.n	800dd98 <USBD_StdItfReq+0xc0>
 800dd76:	7bfb      	ldrb	r3, [r7, #15]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d10d      	bne.n	800dd98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 fdf1 	bl	800e964 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd82:	e009      	b.n	800dd98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 fd21 	bl	800e7ce <USBD_CtlError>
          break;
 800dd8c:	e004      	b.n	800dd98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dd8e:	6839      	ldr	r1, [r7, #0]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 fd1c 	bl	800e7ce <USBD_CtlError>
          break;
 800dd96:	e000      	b.n	800dd9a <USBD_StdItfReq+0xc2>
          break;
 800dd98:	bf00      	nop
      }
      break;
 800dd9a:	e004      	b.n	800dda6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dd9c:	6839      	ldr	r1, [r7, #0]
 800dd9e:	6878      	ldr	r0, [r7, #4]
 800dda0:	f000 fd15 	bl	800e7ce <USBD_CtlError>
      break;
 800dda4:	bf00      	nop
  }

  return ret;
 800dda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda8:	4618      	mov	r0, r3
 800ddaa:	3710      	adds	r7, #16
 800ddac:	46bd      	mov	sp, r7
 800ddae:	bd80      	pop	{r7, pc}

0800ddb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	889b      	ldrh	r3, [r3, #4]
 800ddc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ddcc:	2b40      	cmp	r3, #64	@ 0x40
 800ddce:	d007      	beq.n	800dde0 <USBD_StdEPReq+0x30>
 800ddd0:	2b40      	cmp	r3, #64	@ 0x40
 800ddd2:	f200 817f 	bhi.w	800e0d4 <USBD_StdEPReq+0x324>
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d02a      	beq.n	800de30 <USBD_StdEPReq+0x80>
 800ddda:	2b20      	cmp	r3, #32
 800dddc:	f040 817a 	bne.w	800e0d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f7ff fe85 	bl	800daf4 <USBD_CoreFindEP>
 800ddea:	4603      	mov	r3, r0
 800ddec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddee:	7b7b      	ldrb	r3, [r7, #13]
 800ddf0:	2bff      	cmp	r3, #255	@ 0xff
 800ddf2:	f000 8174 	beq.w	800e0de <USBD_StdEPReq+0x32e>
 800ddf6:	7b7b      	ldrb	r3, [r7, #13]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f040 8170 	bne.w	800e0de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ddfe:	7b7a      	ldrb	r2, [r7, #13]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800de06:	7b7a      	ldrb	r2, [r7, #13]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	32ae      	adds	r2, #174	@ 0xae
 800de0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de10:	689b      	ldr	r3, [r3, #8]
 800de12:	2b00      	cmp	r3, #0
 800de14:	f000 8163 	beq.w	800e0de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800de18:	7b7a      	ldrb	r2, [r7, #13]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	32ae      	adds	r2, #174	@ 0xae
 800de1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	4798      	blx	r3
 800de2a:	4603      	mov	r3, r0
 800de2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de2e:	e156      	b.n	800e0de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de30:	683b      	ldr	r3, [r7, #0]
 800de32:	785b      	ldrb	r3, [r3, #1]
 800de34:	2b03      	cmp	r3, #3
 800de36:	d008      	beq.n	800de4a <USBD_StdEPReq+0x9a>
 800de38:	2b03      	cmp	r3, #3
 800de3a:	f300 8145 	bgt.w	800e0c8 <USBD_StdEPReq+0x318>
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 809b 	beq.w	800df7a <USBD_StdEPReq+0x1ca>
 800de44:	2b01      	cmp	r3, #1
 800de46:	d03c      	beq.n	800dec2 <USBD_StdEPReq+0x112>
 800de48:	e13e      	b.n	800e0c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de50:	b2db      	uxtb	r3, r3
 800de52:	2b02      	cmp	r3, #2
 800de54:	d002      	beq.n	800de5c <USBD_StdEPReq+0xac>
 800de56:	2b03      	cmp	r3, #3
 800de58:	d016      	beq.n	800de88 <USBD_StdEPReq+0xd8>
 800de5a:	e02c      	b.n	800deb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de5c:	7bbb      	ldrb	r3, [r7, #14]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d00d      	beq.n	800de7e <USBD_StdEPReq+0xce>
 800de62:	7bbb      	ldrb	r3, [r7, #14]
 800de64:	2b80      	cmp	r3, #128	@ 0x80
 800de66:	d00a      	beq.n	800de7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	4619      	mov	r1, r3
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f004 f9ed 	bl	801224c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de72:	2180      	movs	r1, #128	@ 0x80
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f004 f9e9 	bl	801224c <USBD_LL_StallEP>
 800de7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de7c:	e020      	b.n	800dec0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de7e:	6839      	ldr	r1, [r7, #0]
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 fca4 	bl	800e7ce <USBD_CtlError>
              break;
 800de86:	e01b      	b.n	800dec0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	885b      	ldrh	r3, [r3, #2]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d10e      	bne.n	800deae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00b      	beq.n	800deae <USBD_StdEPReq+0xfe>
 800de96:	7bbb      	ldrb	r3, [r7, #14]
 800de98:	2b80      	cmp	r3, #128	@ 0x80
 800de9a:	d008      	beq.n	800deae <USBD_StdEPReq+0xfe>
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	88db      	ldrh	r3, [r3, #6]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d104      	bne.n	800deae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dea4:	7bbb      	ldrb	r3, [r7, #14]
 800dea6:	4619      	mov	r1, r3
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f004 f9cf 	bl	801224c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f000 fd58 	bl	800e964 <USBD_CtlSendStatus>

              break;
 800deb4:	e004      	b.n	800dec0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800deb6:	6839      	ldr	r1, [r7, #0]
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fc88 	bl	800e7ce <USBD_CtlError>
              break;
 800debe:	bf00      	nop
          }
          break;
 800dec0:	e107      	b.n	800e0d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dec8:	b2db      	uxtb	r3, r3
 800deca:	2b02      	cmp	r3, #2
 800decc:	d002      	beq.n	800ded4 <USBD_StdEPReq+0x124>
 800dece:	2b03      	cmp	r3, #3
 800ded0:	d016      	beq.n	800df00 <USBD_StdEPReq+0x150>
 800ded2:	e04b      	b.n	800df6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d00d      	beq.n	800def6 <USBD_StdEPReq+0x146>
 800deda:	7bbb      	ldrb	r3, [r7, #14]
 800dedc:	2b80      	cmp	r3, #128	@ 0x80
 800dede:	d00a      	beq.n	800def6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	4619      	mov	r1, r3
 800dee4:	6878      	ldr	r0, [r7, #4]
 800dee6:	f004 f9b1 	bl	801224c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800deea:	2180      	movs	r1, #128	@ 0x80
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f004 f9ad 	bl	801224c <USBD_LL_StallEP>
 800def2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800def4:	e040      	b.n	800df78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 fc68 	bl	800e7ce <USBD_CtlError>
              break;
 800defe:	e03b      	b.n	800df78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	885b      	ldrh	r3, [r3, #2]
 800df04:	2b00      	cmp	r3, #0
 800df06:	d136      	bne.n	800df76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800df08:	7bbb      	ldrb	r3, [r7, #14]
 800df0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d004      	beq.n	800df1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800df12:	7bbb      	ldrb	r3, [r7, #14]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f004 f9b7 	bl	801228a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fd21 	bl	800e964 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	4619      	mov	r1, r3
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f7ff fde4 	bl	800daf4 <USBD_CoreFindEP>
 800df2c:	4603      	mov	r3, r0
 800df2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df30:	7b7b      	ldrb	r3, [r7, #13]
 800df32:	2bff      	cmp	r3, #255	@ 0xff
 800df34:	d01f      	beq.n	800df76 <USBD_StdEPReq+0x1c6>
 800df36:	7b7b      	ldrb	r3, [r7, #13]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d11c      	bne.n	800df76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df3c:	7b7a      	ldrb	r2, [r7, #13]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df44:	7b7a      	ldrb	r2, [r7, #13]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	32ae      	adds	r2, #174	@ 0xae
 800df4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d010      	beq.n	800df76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df54:	7b7a      	ldrb	r2, [r7, #13]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	32ae      	adds	r2, #174	@ 0xae
 800df5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df5e:	689b      	ldr	r3, [r3, #8]
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	4798      	blx	r3
 800df66:	4603      	mov	r3, r0
 800df68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df6a:	e004      	b.n	800df76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fc2d 	bl	800e7ce <USBD_CtlError>
              break;
 800df74:	e000      	b.n	800df78 <USBD_StdEPReq+0x1c8>
              break;
 800df76:	bf00      	nop
          }
          break;
 800df78:	e0ab      	b.n	800e0d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df80:	b2db      	uxtb	r3, r3
 800df82:	2b02      	cmp	r3, #2
 800df84:	d002      	beq.n	800df8c <USBD_StdEPReq+0x1dc>
 800df86:	2b03      	cmp	r3, #3
 800df88:	d032      	beq.n	800dff0 <USBD_StdEPReq+0x240>
 800df8a:	e097      	b.n	800e0bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df8c:	7bbb      	ldrb	r3, [r7, #14]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d007      	beq.n	800dfa2 <USBD_StdEPReq+0x1f2>
 800df92:	7bbb      	ldrb	r3, [r7, #14]
 800df94:	2b80      	cmp	r3, #128	@ 0x80
 800df96:	d004      	beq.n	800dfa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800df98:	6839      	ldr	r1, [r7, #0]
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 fc17 	bl	800e7ce <USBD_CtlError>
                break;
 800dfa0:	e091      	b.n	800e0c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da0b      	bge.n	800dfc2 <USBD_StdEPReq+0x212>
 800dfaa:	7bbb      	ldrb	r3, [r7, #14]
 800dfac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	3310      	adds	r3, #16
 800dfba:	687a      	ldr	r2, [r7, #4]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	3304      	adds	r3, #4
 800dfc0:	e00b      	b.n	800dfda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dfc2:	7bbb      	ldrb	r3, [r7, #14]
 800dfc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfc8:	4613      	mov	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	3304      	adds	r3, #4
 800dfda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	2200      	movs	r2, #0
 800dfe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	2202      	movs	r2, #2
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fc61 	bl	800e8b0 <USBD_CtlSendData>
              break;
 800dfee:	e06a      	b.n	800e0c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	da11      	bge.n	800e01c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dff8:	7bbb      	ldrb	r3, [r7, #14]
 800dffa:	f003 020f 	and.w	r2, r3, #15
 800dffe:	6879      	ldr	r1, [r7, #4]
 800e000:	4613      	mov	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	4413      	add	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	440b      	add	r3, r1
 800e00a:	3324      	adds	r3, #36	@ 0x24
 800e00c:	881b      	ldrh	r3, [r3, #0]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d117      	bne.n	800e042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fbda 	bl	800e7ce <USBD_CtlError>
                  break;
 800e01a:	e054      	b.n	800e0c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e01c:	7bbb      	ldrb	r3, [r7, #14]
 800e01e:	f003 020f 	and.w	r2, r3, #15
 800e022:	6879      	ldr	r1, [r7, #4]
 800e024:	4613      	mov	r3, r2
 800e026:	009b      	lsls	r3, r3, #2
 800e028:	4413      	add	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	440b      	add	r3, r1
 800e02e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e032:	881b      	ldrh	r3, [r3, #0]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d104      	bne.n	800e042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e038:	6839      	ldr	r1, [r7, #0]
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 fbc7 	bl	800e7ce <USBD_CtlError>
                  break;
 800e040:	e041      	b.n	800e0c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e046:	2b00      	cmp	r3, #0
 800e048:	da0b      	bge.n	800e062 <USBD_StdEPReq+0x2b2>
 800e04a:	7bbb      	ldrb	r3, [r7, #14]
 800e04c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e050:	4613      	mov	r3, r2
 800e052:	009b      	lsls	r3, r3, #2
 800e054:	4413      	add	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	3310      	adds	r3, #16
 800e05a:	687a      	ldr	r2, [r7, #4]
 800e05c:	4413      	add	r3, r2
 800e05e:	3304      	adds	r3, #4
 800e060:	e00b      	b.n	800e07a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e062:	7bbb      	ldrb	r3, [r7, #14]
 800e064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e068:	4613      	mov	r3, r2
 800e06a:	009b      	lsls	r3, r3, #2
 800e06c:	4413      	add	r3, r2
 800e06e:	009b      	lsls	r3, r3, #2
 800e070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e074:	687a      	ldr	r2, [r7, #4]
 800e076:	4413      	add	r3, r2
 800e078:	3304      	adds	r3, #4
 800e07a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e07c:	7bbb      	ldrb	r3, [r7, #14]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <USBD_StdEPReq+0x2d8>
 800e082:	7bbb      	ldrb	r3, [r7, #14]
 800e084:	2b80      	cmp	r3, #128	@ 0x80
 800e086:	d103      	bne.n	800e090 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e088:	68bb      	ldr	r3, [r7, #8]
 800e08a:	2200      	movs	r2, #0
 800e08c:	601a      	str	r2, [r3, #0]
 800e08e:	e00e      	b.n	800e0ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e090:	7bbb      	ldrb	r3, [r7, #14]
 800e092:	4619      	mov	r1, r3
 800e094:	6878      	ldr	r0, [r7, #4]
 800e096:	f004 f917 	bl	80122c8 <USBD_LL_IsStallEP>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d003      	beq.n	800e0a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	601a      	str	r2, [r3, #0]
 800e0a6:	e002      	b.n	800e0ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	2202      	movs	r2, #2
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fbfb 	bl	800e8b0 <USBD_CtlSendData>
              break;
 800e0ba:	e004      	b.n	800e0c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e0bc:	6839      	ldr	r1, [r7, #0]
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 fb85 	bl	800e7ce <USBD_CtlError>
              break;
 800e0c4:	bf00      	nop
          }
          break;
 800e0c6:	e004      	b.n	800e0d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fb7f 	bl	800e7ce <USBD_CtlError>
          break;
 800e0d0:	bf00      	nop
      }
      break;
 800e0d2:	e005      	b.n	800e0e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e0d4:	6839      	ldr	r1, [r7, #0]
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 fb79 	bl	800e7ce <USBD_CtlError>
      break;
 800e0dc:	e000      	b.n	800e0e0 <USBD_StdEPReq+0x330>
      break;
 800e0de:	bf00      	nop
  }

  return ret;
 800e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
	...

0800e0ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b084      	sub	sp, #16
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
 800e0f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0fe:	2300      	movs	r3, #0
 800e100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	885b      	ldrh	r3, [r3, #2]
 800e106:	0a1b      	lsrs	r3, r3, #8
 800e108:	b29b      	uxth	r3, r3
 800e10a:	3b01      	subs	r3, #1
 800e10c:	2b0e      	cmp	r3, #14
 800e10e:	f200 8152 	bhi.w	800e3b6 <USBD_GetDescriptor+0x2ca>
 800e112:	a201      	add	r2, pc, #4	@ (adr r2, 800e118 <USBD_GetDescriptor+0x2c>)
 800e114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e118:	0800e189 	.word	0x0800e189
 800e11c:	0800e1a1 	.word	0x0800e1a1
 800e120:	0800e1e1 	.word	0x0800e1e1
 800e124:	0800e3b7 	.word	0x0800e3b7
 800e128:	0800e3b7 	.word	0x0800e3b7
 800e12c:	0800e357 	.word	0x0800e357
 800e130:	0800e383 	.word	0x0800e383
 800e134:	0800e3b7 	.word	0x0800e3b7
 800e138:	0800e3b7 	.word	0x0800e3b7
 800e13c:	0800e3b7 	.word	0x0800e3b7
 800e140:	0800e3b7 	.word	0x0800e3b7
 800e144:	0800e3b7 	.word	0x0800e3b7
 800e148:	0800e3b7 	.word	0x0800e3b7
 800e14c:	0800e3b7 	.word	0x0800e3b7
 800e150:	0800e155 	.word	0x0800e155
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e15a:	69db      	ldr	r3, [r3, #28]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d00b      	beq.n	800e178 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e166:	69db      	ldr	r3, [r3, #28]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	7c12      	ldrb	r2, [r2, #16]
 800e16c:	f107 0108 	add.w	r1, r7, #8
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e176:	e126      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	f000 fb27 	bl	800e7ce <USBD_CtlError>
        err++;
 800e180:	7afb      	ldrb	r3, [r7, #11]
 800e182:	3301      	adds	r3, #1
 800e184:	72fb      	strb	r3, [r7, #11]
      break;
 800e186:	e11e      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	7c12      	ldrb	r2, [r2, #16]
 800e194:	f107 0108 	add.w	r1, r7, #8
 800e198:	4610      	mov	r0, r2
 800e19a:	4798      	blx	r3
 800e19c:	60f8      	str	r0, [r7, #12]
      break;
 800e19e:	e112      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	7c1b      	ldrb	r3, [r3, #16]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d10d      	bne.n	800e1c4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1b0:	f107 0208 	add.w	r2, r7, #8
 800e1b4:	4610      	mov	r0, r2
 800e1b6:	4798      	blx	r3
 800e1b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	2202      	movs	r2, #2
 800e1c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e1c2:	e100      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1cc:	f107 0208 	add.w	r2, r7, #8
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
 800e1d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	3301      	adds	r3, #1
 800e1da:	2202      	movs	r2, #2
 800e1dc:	701a      	strb	r2, [r3, #0]
      break;
 800e1de:	e0f2      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	885b      	ldrh	r3, [r3, #2]
 800e1e4:	b2db      	uxtb	r3, r3
 800e1e6:	2b05      	cmp	r3, #5
 800e1e8:	f200 80ac 	bhi.w	800e344 <USBD_GetDescriptor+0x258>
 800e1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f4 <USBD_GetDescriptor+0x108>)
 800e1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f2:	bf00      	nop
 800e1f4:	0800e20d 	.word	0x0800e20d
 800e1f8:	0800e241 	.word	0x0800e241
 800e1fc:	0800e275 	.word	0x0800e275
 800e200:	0800e2a9 	.word	0x0800e2a9
 800e204:	0800e2dd 	.word	0x0800e2dd
 800e208:	0800e311 	.word	0x0800e311
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d00b      	beq.n	800e230 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e21e:	685b      	ldr	r3, [r3, #4]
 800e220:	687a      	ldr	r2, [r7, #4]
 800e222:	7c12      	ldrb	r2, [r2, #16]
 800e224:	f107 0108 	add.w	r1, r7, #8
 800e228:	4610      	mov	r0, r2
 800e22a:	4798      	blx	r3
 800e22c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e22e:	e091      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e230:	6839      	ldr	r1, [r7, #0]
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f000 facb 	bl	800e7ce <USBD_CtlError>
            err++;
 800e238:	7afb      	ldrb	r3, [r7, #11]
 800e23a:	3301      	adds	r3, #1
 800e23c:	72fb      	strb	r3, [r7, #11]
          break;
 800e23e:	e089      	b.n	800e354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d00b      	beq.n	800e264 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e252:	689b      	ldr	r3, [r3, #8]
 800e254:	687a      	ldr	r2, [r7, #4]
 800e256:	7c12      	ldrb	r2, [r2, #16]
 800e258:	f107 0108 	add.w	r1, r7, #8
 800e25c:	4610      	mov	r0, r2
 800e25e:	4798      	blx	r3
 800e260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e262:	e077      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e264:	6839      	ldr	r1, [r7, #0]
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fab1 	bl	800e7ce <USBD_CtlError>
            err++;
 800e26c:	7afb      	ldrb	r3, [r7, #11]
 800e26e:	3301      	adds	r3, #1
 800e270:	72fb      	strb	r3, [r7, #11]
          break;
 800e272:	e06f      	b.n	800e354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e27a:	68db      	ldr	r3, [r3, #12]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d00b      	beq.n	800e298 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	7c12      	ldrb	r2, [r2, #16]
 800e28c:	f107 0108 	add.w	r1, r7, #8
 800e290:	4610      	mov	r0, r2
 800e292:	4798      	blx	r3
 800e294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e296:	e05d      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e298:	6839      	ldr	r1, [r7, #0]
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f000 fa97 	bl	800e7ce <USBD_CtlError>
            err++;
 800e2a0:	7afb      	ldrb	r3, [r7, #11]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2a6:	e055      	b.n	800e354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ae:	691b      	ldr	r3, [r3, #16]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d00b      	beq.n	800e2cc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	687a      	ldr	r2, [r7, #4]
 800e2be:	7c12      	ldrb	r2, [r2, #16]
 800e2c0:	f107 0108 	add.w	r1, r7, #8
 800e2c4:	4610      	mov	r0, r2
 800e2c6:	4798      	blx	r3
 800e2c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2ca:	e043      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2cc:	6839      	ldr	r1, [r7, #0]
 800e2ce:	6878      	ldr	r0, [r7, #4]
 800e2d0:	f000 fa7d 	bl	800e7ce <USBD_CtlError>
            err++;
 800e2d4:	7afb      	ldrb	r3, [r7, #11]
 800e2d6:	3301      	adds	r3, #1
 800e2d8:	72fb      	strb	r3, [r7, #11]
          break;
 800e2da:	e03b      	b.n	800e354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2e2:	695b      	ldr	r3, [r3, #20]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d00b      	beq.n	800e300 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ee:	695b      	ldr	r3, [r3, #20]
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	7c12      	ldrb	r2, [r2, #16]
 800e2f4:	f107 0108 	add.w	r1, r7, #8
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	4798      	blx	r3
 800e2fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2fe:	e029      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e300:	6839      	ldr	r1, [r7, #0]
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f000 fa63 	bl	800e7ce <USBD_CtlError>
            err++;
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	3301      	adds	r3, #1
 800e30c:	72fb      	strb	r3, [r7, #11]
          break;
 800e30e:	e021      	b.n	800e354 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e316:	699b      	ldr	r3, [r3, #24]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d00b      	beq.n	800e334 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	687a      	ldr	r2, [r7, #4]
 800e326:	7c12      	ldrb	r2, [r2, #16]
 800e328:	f107 0108 	add.w	r1, r7, #8
 800e32c:	4610      	mov	r0, r2
 800e32e:	4798      	blx	r3
 800e330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e332:	e00f      	b.n	800e354 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e334:	6839      	ldr	r1, [r7, #0]
 800e336:	6878      	ldr	r0, [r7, #4]
 800e338:	f000 fa49 	bl	800e7ce <USBD_CtlError>
            err++;
 800e33c:	7afb      	ldrb	r3, [r7, #11]
 800e33e:	3301      	adds	r3, #1
 800e340:	72fb      	strb	r3, [r7, #11]
          break;
 800e342:	e007      	b.n	800e354 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e344:	6839      	ldr	r1, [r7, #0]
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 fa41 	bl	800e7ce <USBD_CtlError>
          err++;
 800e34c:	7afb      	ldrb	r3, [r7, #11]
 800e34e:	3301      	adds	r3, #1
 800e350:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e352:	bf00      	nop
      }
      break;
 800e354:	e037      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	7c1b      	ldrb	r3, [r3, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d109      	bne.n	800e372 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e366:	f107 0208 	add.w	r2, r7, #8
 800e36a:	4610      	mov	r0, r2
 800e36c:	4798      	blx	r3
 800e36e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e370:	e029      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	6878      	ldr	r0, [r7, #4]
 800e376:	f000 fa2a 	bl	800e7ce <USBD_CtlError>
        err++;
 800e37a:	7afb      	ldrb	r3, [r7, #11]
 800e37c:	3301      	adds	r3, #1
 800e37e:	72fb      	strb	r3, [r7, #11]
      break;
 800e380:	e021      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	7c1b      	ldrb	r3, [r3, #16]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d10d      	bne.n	800e3a6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e392:	f107 0208 	add.w	r2, r7, #8
 800e396:	4610      	mov	r0, r2
 800e398:	4798      	blx	r3
 800e39a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	3301      	adds	r3, #1
 800e3a0:	2207      	movs	r2, #7
 800e3a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e3a4:	e00f      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 fa10 	bl	800e7ce <USBD_CtlError>
        err++;
 800e3ae:	7afb      	ldrb	r3, [r7, #11]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	72fb      	strb	r3, [r7, #11]
      break;
 800e3b4:	e007      	b.n	800e3c6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e3b6:	6839      	ldr	r1, [r7, #0]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 fa08 	bl	800e7ce <USBD_CtlError>
      err++;
 800e3be:	7afb      	ldrb	r3, [r7, #11]
 800e3c0:	3301      	adds	r3, #1
 800e3c2:	72fb      	strb	r3, [r7, #11]
      break;
 800e3c4:	bf00      	nop
  }

  if (err != 0U)
 800e3c6:	7afb      	ldrb	r3, [r7, #11]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d11e      	bne.n	800e40a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e3cc:	683b      	ldr	r3, [r7, #0]
 800e3ce:	88db      	ldrh	r3, [r3, #6]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d016      	beq.n	800e402 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e3d4:	893b      	ldrh	r3, [r7, #8]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d00e      	beq.n	800e3f8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	88da      	ldrh	r2, [r3, #6]
 800e3de:	893b      	ldrh	r3, [r7, #8]
 800e3e0:	4293      	cmp	r3, r2
 800e3e2:	bf28      	it	cs
 800e3e4:	4613      	movcs	r3, r2
 800e3e6:	b29b      	uxth	r3, r3
 800e3e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3ea:	893b      	ldrh	r3, [r7, #8]
 800e3ec:	461a      	mov	r2, r3
 800e3ee:	68f9      	ldr	r1, [r7, #12]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fa5d 	bl	800e8b0 <USBD_CtlSendData>
 800e3f6:	e009      	b.n	800e40c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f9e7 	bl	800e7ce <USBD_CtlError>
 800e400:	e004      	b.n	800e40c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 faae 	bl	800e964 <USBD_CtlSendStatus>
 800e408:	e000      	b.n	800e40c <USBD_GetDescriptor+0x320>
    return;
 800e40a:	bf00      	nop
  }
}
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop

0800e414 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e41e:	683b      	ldr	r3, [r7, #0]
 800e420:	889b      	ldrh	r3, [r3, #4]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d131      	bne.n	800e48a <USBD_SetAddress+0x76>
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	88db      	ldrh	r3, [r3, #6]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d12d      	bne.n	800e48a <USBD_SetAddress+0x76>
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	885b      	ldrh	r3, [r3, #2]
 800e432:	2b7f      	cmp	r3, #127	@ 0x7f
 800e434:	d829      	bhi.n	800e48a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	885b      	ldrh	r3, [r3, #2]
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e440:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d104      	bne.n	800e458 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f000 f9bc 	bl	800e7ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e456:	e01d      	b.n	800e494 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	7bfa      	ldrb	r2, [r7, #15]
 800e45c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e460:	7bfb      	ldrb	r3, [r7, #15]
 800e462:	4619      	mov	r1, r3
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f003 ff5b 	bl	8012320 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e46a:	6878      	ldr	r0, [r7, #4]
 800e46c:	f000 fa7a 	bl	800e964 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e470:	7bfb      	ldrb	r3, [r7, #15]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d004      	beq.n	800e480 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	2202      	movs	r2, #2
 800e47a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e47e:	e009      	b.n	800e494 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2201      	movs	r2, #1
 800e484:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e488:	e004      	b.n	800e494 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e48a:	6839      	ldr	r1, [r7, #0]
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f99e 	bl	800e7ce <USBD_CtlError>
  }
}
 800e492:	bf00      	nop
 800e494:	bf00      	nop
 800e496:	3710      	adds	r7, #16
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	b084      	sub	sp, #16
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e4aa:	683b      	ldr	r3, [r7, #0]
 800e4ac:	885b      	ldrh	r3, [r3, #2]
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	4b4e      	ldr	r3, [pc, #312]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e4b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e4b4:	4b4d      	ldr	r3, [pc, #308]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b01      	cmp	r3, #1
 800e4ba:	d905      	bls.n	800e4c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f985 	bl	800e7ce <USBD_CtlError>
    return USBD_FAIL;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e08c      	b.n	800e5e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4ce:	b2db      	uxtb	r3, r3
 800e4d0:	2b02      	cmp	r3, #2
 800e4d2:	d002      	beq.n	800e4da <USBD_SetConfig+0x3e>
 800e4d4:	2b03      	cmp	r3, #3
 800e4d6:	d029      	beq.n	800e52c <USBD_SetConfig+0x90>
 800e4d8:	e075      	b.n	800e5c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4da:	4b44      	ldr	r3, [pc, #272]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d020      	beq.n	800e524 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4e2:	4b42      	ldr	r3, [pc, #264]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4ec:	4b3f      	ldr	r3, [pc, #252]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e4ee:	781b      	ldrb	r3, [r3, #0]
 800e4f0:	4619      	mov	r1, r3
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7ff f84b 	bl	800d58e <USBD_SetClassConfig>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d008      	beq.n	800e514 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f000 f962 	bl	800e7ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	2202      	movs	r2, #2
 800e50e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e512:	e065      	b.n	800e5e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f000 fa25 	bl	800e964 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2203      	movs	r2, #3
 800e51e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e522:	e05d      	b.n	800e5e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f000 fa1d 	bl	800e964 <USBD_CtlSendStatus>
      break;
 800e52a:	e059      	b.n	800e5e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e52c:	4b2f      	ldr	r3, [pc, #188]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e52e:	781b      	ldrb	r3, [r3, #0]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d112      	bne.n	800e55a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2202      	movs	r2, #2
 800e538:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e53c:	4b2b      	ldr	r3, [pc, #172]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e53e:	781b      	ldrb	r3, [r3, #0]
 800e540:	461a      	mov	r2, r3
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e546:	4b29      	ldr	r3, [pc, #164]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e548:	781b      	ldrb	r3, [r3, #0]
 800e54a:	4619      	mov	r1, r3
 800e54c:	6878      	ldr	r0, [r7, #4]
 800e54e:	f7ff f83a 	bl	800d5c6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e552:	6878      	ldr	r0, [r7, #4]
 800e554:	f000 fa06 	bl	800e964 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e558:	e042      	b.n	800e5e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e55a:	4b24      	ldr	r3, [pc, #144]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e55c:	781b      	ldrb	r3, [r3, #0]
 800e55e:	461a      	mov	r2, r3
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	429a      	cmp	r2, r3
 800e566:	d02a      	beq.n	800e5be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	685b      	ldr	r3, [r3, #4]
 800e56c:	b2db      	uxtb	r3, r3
 800e56e:	4619      	mov	r1, r3
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff f828 	bl	800d5c6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e576:	4b1d      	ldr	r3, [pc, #116]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	461a      	mov	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e580:	4b1a      	ldr	r3, [pc, #104]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	4619      	mov	r1, r3
 800e586:	6878      	ldr	r0, [r7, #4]
 800e588:	f7ff f801 	bl	800d58e <USBD_SetClassConfig>
 800e58c:	4603      	mov	r3, r0
 800e58e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e590:	7bfb      	ldrb	r3, [r7, #15]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d00f      	beq.n	800e5b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 f918 	bl	800e7ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	685b      	ldr	r3, [r3, #4]
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f7ff f80d 	bl	800d5c6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e5b4:	e014      	b.n	800e5e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e5b6:	6878      	ldr	r0, [r7, #4]
 800e5b8:	f000 f9d4 	bl	800e964 <USBD_CtlSendStatus>
      break;
 800e5bc:	e010      	b.n	800e5e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f9d0 	bl	800e964 <USBD_CtlSendStatus>
      break;
 800e5c4:	e00c      	b.n	800e5e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f000 f900 	bl	800e7ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5ce:	4b07      	ldr	r3, [pc, #28]	@ (800e5ec <USBD_SetConfig+0x150>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fe fff6 	bl	800d5c6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5da:	2303      	movs	r3, #3
 800e5dc:	73fb      	strb	r3, [r7, #15]
      break;
 800e5de:	bf00      	nop
  }

  return ret;
 800e5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}
 800e5ea:	bf00      	nop
 800e5ec:	20000400 	.word	0x20000400

0800e5f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b082      	sub	sp, #8
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	88db      	ldrh	r3, [r3, #6]
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d004      	beq.n	800e60c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e602:	6839      	ldr	r1, [r7, #0]
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f000 f8e2 	bl	800e7ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e60a:	e023      	b.n	800e654 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b02      	cmp	r3, #2
 800e616:	dc02      	bgt.n	800e61e <USBD_GetConfig+0x2e>
 800e618:	2b00      	cmp	r3, #0
 800e61a:	dc03      	bgt.n	800e624 <USBD_GetConfig+0x34>
 800e61c:	e015      	b.n	800e64a <USBD_GetConfig+0x5a>
 800e61e:	2b03      	cmp	r3, #3
 800e620:	d00b      	beq.n	800e63a <USBD_GetConfig+0x4a>
 800e622:	e012      	b.n	800e64a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2200      	movs	r2, #0
 800e628:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	3308      	adds	r3, #8
 800e62e:	2201      	movs	r2, #1
 800e630:	4619      	mov	r1, r3
 800e632:	6878      	ldr	r0, [r7, #4]
 800e634:	f000 f93c 	bl	800e8b0 <USBD_CtlSendData>
        break;
 800e638:	e00c      	b.n	800e654 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	3304      	adds	r3, #4
 800e63e:	2201      	movs	r2, #1
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f934 	bl	800e8b0 <USBD_CtlSendData>
        break;
 800e648:	e004      	b.n	800e654 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e64a:	6839      	ldr	r1, [r7, #0]
 800e64c:	6878      	ldr	r0, [r7, #4]
 800e64e:	f000 f8be 	bl	800e7ce <USBD_CtlError>
        break;
 800e652:	bf00      	nop
}
 800e654:	bf00      	nop
 800e656:	3708      	adds	r7, #8
 800e658:	46bd      	mov	sp, r7
 800e65a:	bd80      	pop	{r7, pc}

0800e65c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b082      	sub	sp, #8
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e66c:	b2db      	uxtb	r3, r3
 800e66e:	3b01      	subs	r3, #1
 800e670:	2b02      	cmp	r3, #2
 800e672:	d81e      	bhi.n	800e6b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e674:	683b      	ldr	r3, [r7, #0]
 800e676:	88db      	ldrh	r3, [r3, #6]
 800e678:	2b02      	cmp	r3, #2
 800e67a:	d004      	beq.n	800e686 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f000 f8a5 	bl	800e7ce <USBD_CtlError>
        break;
 800e684:	e01a      	b.n	800e6bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	2201      	movs	r2, #1
 800e68a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e692:	2b00      	cmp	r3, #0
 800e694:	d005      	beq.n	800e6a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	f043 0202 	orr.w	r2, r3, #2
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	330c      	adds	r3, #12
 800e6a6:	2202      	movs	r2, #2
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f000 f900 	bl	800e8b0 <USBD_CtlSendData>
      break;
 800e6b0:	e004      	b.n	800e6bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e6b2:	6839      	ldr	r1, [r7, #0]
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f000 f88a 	bl	800e7ce <USBD_CtlError>
      break;
 800e6ba:	bf00      	nop
  }
}
 800e6bc:	bf00      	nop
 800e6be:	3708      	adds	r7, #8
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b082      	sub	sp, #8
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	885b      	ldrh	r3, [r3, #2]
 800e6d2:	2b01      	cmp	r3, #1
 800e6d4:	d107      	bne.n	800e6e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2201      	movs	r2, #1
 800e6da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6de:	6878      	ldr	r0, [r7, #4]
 800e6e0:	f000 f940 	bl	800e964 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6e4:	e013      	b.n	800e70e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6e6:	683b      	ldr	r3, [r7, #0]
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	2b02      	cmp	r3, #2
 800e6ec:	d10b      	bne.n	800e706 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	889b      	ldrh	r3, [r3, #4]
 800e6f2:	0a1b      	lsrs	r3, r3, #8
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	b2da      	uxtb	r2, r3
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f930 	bl	800e964 <USBD_CtlSendStatus>
}
 800e704:	e003      	b.n	800e70e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e706:	6839      	ldr	r1, [r7, #0]
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f000 f860 	bl	800e7ce <USBD_CtlError>
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}

0800e716 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e716:	b580      	push	{r7, lr}
 800e718:	b082      	sub	sp, #8
 800e71a:	af00      	add	r7, sp, #0
 800e71c:	6078      	str	r0, [r7, #4]
 800e71e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e726:	b2db      	uxtb	r3, r3
 800e728:	3b01      	subs	r3, #1
 800e72a:	2b02      	cmp	r3, #2
 800e72c:	d80b      	bhi.n	800e746 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	885b      	ldrh	r3, [r3, #2]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d10c      	bne.n	800e750 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f910 	bl	800e964 <USBD_CtlSendStatus>
      }
      break;
 800e744:	e004      	b.n	800e750 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e746:	6839      	ldr	r1, [r7, #0]
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f000 f840 	bl	800e7ce <USBD_CtlError>
      break;
 800e74e:	e000      	b.n	800e752 <USBD_ClrFeature+0x3c>
      break;
 800e750:	bf00      	nop
  }
}
 800e752:	bf00      	nop
 800e754:	3708      	adds	r7, #8
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}

0800e75a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b084      	sub	sp, #16
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
 800e762:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	781a      	ldrb	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3301      	adds	r3, #1
 800e774:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	781a      	ldrb	r2, [r3, #0]
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	3301      	adds	r3, #1
 800e782:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f7ff fa16 	bl	800dbb6 <SWAPBYTE>
 800e78a:	4603      	mov	r3, r0
 800e78c:	461a      	mov	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	3301      	adds	r3, #1
 800e796:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3301      	adds	r3, #1
 800e79c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff fa09 	bl	800dbb6 <SWAPBYTE>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	461a      	mov	r2, r3
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	3301      	adds	r3, #1
 800e7b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e7b8:	68f8      	ldr	r0, [r7, #12]
 800e7ba:	f7ff f9fc 	bl	800dbb6 <SWAPBYTE>
 800e7be:	4603      	mov	r3, r0
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	80da      	strh	r2, [r3, #6]
}
 800e7c6:	bf00      	nop
 800e7c8:	3710      	adds	r7, #16
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}

0800e7ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7ce:	b580      	push	{r7, lr}
 800e7d0:	b082      	sub	sp, #8
 800e7d2:	af00      	add	r7, sp, #0
 800e7d4:	6078      	str	r0, [r7, #4]
 800e7d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7d8:	2180      	movs	r1, #128	@ 0x80
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f003 fd36 	bl	801224c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f003 fd32 	bl	801224c <USBD_LL_StallEP>
}
 800e7e8:	bf00      	nop
 800e7ea:	3708      	adds	r7, #8
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}

0800e7f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	b086      	sub	sp, #24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	60f8      	str	r0, [r7, #12]
 800e7f8:	60b9      	str	r1, [r7, #8]
 800e7fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d036      	beq.n	800e874 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e80a:	6938      	ldr	r0, [r7, #16]
 800e80c:	f000 f836 	bl	800e87c <USBD_GetLen>
 800e810:	4603      	mov	r3, r0
 800e812:	3301      	adds	r3, #1
 800e814:	b29b      	uxth	r3, r3
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	b29a      	uxth	r2, r3
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e81e:	7dfb      	ldrb	r3, [r7, #23]
 800e820:	68ba      	ldr	r2, [r7, #8]
 800e822:	4413      	add	r3, r2
 800e824:	687a      	ldr	r2, [r7, #4]
 800e826:	7812      	ldrb	r2, [r2, #0]
 800e828:	701a      	strb	r2, [r3, #0]
  idx++;
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	3301      	adds	r3, #1
 800e82e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e830:	7dfb      	ldrb	r3, [r7, #23]
 800e832:	68ba      	ldr	r2, [r7, #8]
 800e834:	4413      	add	r3, r2
 800e836:	2203      	movs	r2, #3
 800e838:	701a      	strb	r2, [r3, #0]
  idx++;
 800e83a:	7dfb      	ldrb	r3, [r7, #23]
 800e83c:	3301      	adds	r3, #1
 800e83e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e840:	e013      	b.n	800e86a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e842:	7dfb      	ldrb	r3, [r7, #23]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	4413      	add	r3, r2
 800e848:	693a      	ldr	r2, [r7, #16]
 800e84a:	7812      	ldrb	r2, [r2, #0]
 800e84c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e84e:	693b      	ldr	r3, [r7, #16]
 800e850:	3301      	adds	r3, #1
 800e852:	613b      	str	r3, [r7, #16]
    idx++;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	3301      	adds	r3, #1
 800e858:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e85a:	7dfb      	ldrb	r3, [r7, #23]
 800e85c:	68ba      	ldr	r2, [r7, #8]
 800e85e:	4413      	add	r3, r2
 800e860:	2200      	movs	r2, #0
 800e862:	701a      	strb	r2, [r3, #0]
    idx++;
 800e864:	7dfb      	ldrb	r3, [r7, #23]
 800e866:	3301      	adds	r3, #1
 800e868:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d1e7      	bne.n	800e842 <USBD_GetString+0x52>
 800e872:	e000      	b.n	800e876 <USBD_GetString+0x86>
    return;
 800e874:	bf00      	nop
  }
}
 800e876:	3718      	adds	r7, #24
 800e878:	46bd      	mov	sp, r7
 800e87a:	bd80      	pop	{r7, pc}

0800e87c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e87c:	b480      	push	{r7}
 800e87e:	b085      	sub	sp, #20
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e884:	2300      	movs	r3, #0
 800e886:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e88c:	e005      	b.n	800e89a <USBD_GetLen+0x1e>
  {
    len++;
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
 800e890:	3301      	adds	r3, #1
 800e892:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	3301      	adds	r3, #1
 800e898:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	781b      	ldrb	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d1f5      	bne.n	800e88e <USBD_GetLen+0x12>
  }

  return len;
 800e8a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	3714      	adds	r7, #20
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ae:	4770      	bx	lr

0800e8b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b084      	sub	sp, #16
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	60f8      	str	r0, [r7, #12]
 800e8b8:	60b9      	str	r1, [r7, #8]
 800e8ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	68ba      	ldr	r2, [r7, #8]
 800e8d4:	2100      	movs	r1, #0
 800e8d6:	68f8      	ldr	r0, [r7, #12]
 800e8d8:	f003 fd41 	bl	801235e <USBD_LL_Transmit>

  return USBD_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3710      	adds	r7, #16
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}

0800e8e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8e6:	b580      	push	{r7, lr}
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	af00      	add	r7, sp, #0
 800e8ec:	60f8      	str	r0, [r7, #12]
 800e8ee:	60b9      	str	r1, [r7, #8]
 800e8f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	2100      	movs	r1, #0
 800e8f8:	68f8      	ldr	r0, [r7, #12]
 800e8fa:	f003 fd30 	bl	801235e <USBD_LL_Transmit>

  return USBD_OK;
 800e8fe:	2300      	movs	r3, #0
}
 800e900:	4618      	mov	r0, r3
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2203      	movs	r2, #3
 800e918:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	687a      	ldr	r2, [r7, #4]
 800e920:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	687a      	ldr	r2, [r7, #4]
 800e928:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	2100      	movs	r1, #0
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f003 fd34 	bl	80123a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e938:	2300      	movs	r3, #0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e942:	b580      	push	{r7, lr}
 800e944:	b084      	sub	sp, #16
 800e946:	af00      	add	r7, sp, #0
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	68ba      	ldr	r2, [r7, #8]
 800e952:	2100      	movs	r1, #0
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f003 fd23 	bl	80123a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2204      	movs	r2, #4
 800e970:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e974:	2300      	movs	r3, #0
 800e976:	2200      	movs	r2, #0
 800e978:	2100      	movs	r1, #0
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f003 fcef 	bl	801235e <USBD_LL_Transmit>

  return USBD_OK;
 800e980:	2300      	movs	r3, #0
}
 800e982:	4618      	mov	r0, r3
 800e984:	3708      	adds	r7, #8
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}

0800e98a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e98a:	b580      	push	{r7, lr}
 800e98c:	b082      	sub	sp, #8
 800e98e:	af00      	add	r7, sp, #0
 800e990:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2205      	movs	r2, #5
 800e996:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e99a:	2300      	movs	r3, #0
 800e99c:	2200      	movs	r2, #0
 800e99e:	2100      	movs	r1, #0
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f003 fcfd 	bl	80123a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e9a6:	2300      	movs	r3, #0
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3708      	adds	r7, #8
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}

0800e9b0 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b088      	sub	sp, #32
 800e9b4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e9ba:	f107 0308 	add.w	r3, r7, #8
 800e9be:	2218      	movs	r2, #24
 800e9c0:	2100      	movs	r1, #0
 800e9c2:	4618      	mov	r0, r3
 800e9c4:	f001 f92d 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800e9c8:	233f      	movs	r3, #63	@ 0x3f
 800e9ca:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800e9cc:	2381      	movs	r3, #129	@ 0x81
 800e9ce:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800e9d0:	1dfb      	adds	r3, r7, #7
 800e9d2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e9d8:	f107 0308 	add.w	r3, r7, #8
 800e9dc:	2100      	movs	r1, #0
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f001 fba8 	bl	8010134 <hci_send_req>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	da01      	bge.n	800e9ee <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800e9ea:	23ff      	movs	r3, #255	@ 0xff
 800e9ec:	e000      	b.n	800e9f0 <aci_gap_set_non_discoverable+0x40>
  return status;
 800e9ee:	79fb      	ldrb	r3, [r7, #7]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3720      	adds	r7, #32
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	bd80      	pop	{r7, pc}

0800e9f8 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800e9f8:	b5b0      	push	{r4, r5, r7, lr}
 800e9fa:	b0ce      	sub	sp, #312	@ 0x138
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	4605      	mov	r5, r0
 800ea00:	460c      	mov	r4, r1
 800ea02:	4610      	mov	r0, r2
 800ea04:	4619      	mov	r1, r3
 800ea06:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea0a:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800ea0e:	462a      	mov	r2, r5
 800ea10:	701a      	strb	r2, [r3, #0]
 800ea12:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea16:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800ea1a:	4622      	mov	r2, r4
 800ea1c:	801a      	strh	r2, [r3, #0]
 800ea1e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea22:	f5a3 739b 	sub.w	r3, r3, #310	@ 0x136
 800ea26:	4602      	mov	r2, r0
 800ea28:	801a      	strh	r2, [r3, #0]
 800ea2a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea2e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800ea32:	460a      	mov	r2, r1
 800ea34:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800ea36:	f107 0310 	add.w	r3, r7, #16
 800ea3a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800ea3e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800ea42:	3308      	adds	r3, #8
 800ea44:	f107 0210 	add.w	r2, r7, #16
 800ea48:	4413      	add	r3, r2
 800ea4a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800ea4e:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800ea52:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800ea56:	4413      	add	r3, r2
 800ea58:	3309      	adds	r3, #9
 800ea5a:	f107 0210 	add.w	r2, r7, #16
 800ea5e:	4413      	add	r3, r2
 800ea60:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ea64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ea68:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ea70:	2300      	movs	r3, #0
 800ea72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Type = Advertising_Type;
 800ea76:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea7a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ea7e:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800ea82:	7812      	ldrb	r2, [r2, #0]
 800ea84:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ea86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea8a:	3301      	adds	r3, #1
 800ea8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800ea90:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800ea94:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ea98:	f5a2 729a 	sub.w	r2, r2, #308	@ 0x134
 800ea9c:	8812      	ldrh	r2, [r2, #0]
 800ea9e:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800eaa2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaa6:	3302      	adds	r3, #2
 800eaa8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800eaac:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eab0:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800eab4:	f5a2 729b 	sub.w	r2, r2, #310	@ 0x136
 800eab8:	8812      	ldrh	r2, [r2, #0]
 800eaba:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800eabe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eac2:	3302      	adds	r3, #2
 800eac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800eac8:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eacc:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800ead0:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800ead4:	7812      	ldrb	r2, [r2, #0]
 800ead6:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ead8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eadc:	3301      	adds	r3, #1
 800eade:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800eae2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eae6:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800eaea:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800eaec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800eaf6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eafa:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eafe:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800eb00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb04:	3301      	adds	r3, #1
 800eb06:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800eb0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800eb0e:	3308      	adds	r3, #8
 800eb10:	f897 214c 	ldrb.w	r2, [r7, #332]	@ 0x14c
 800eb14:	f8d7 1150 	ldr.w	r1, [r7, #336]	@ 0x150
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f001 f872 	bl	800fc02 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800eb1e:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 800eb22:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eb26:	4413      	add	r3, r2
 800eb28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800eb2c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eb30:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800eb34:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800eb36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb3a:	3301      	adds	r3, #1
 800eb3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800eb40:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800eb44:	3301      	adds	r3, #1
 800eb46:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800eb4a:	f8d7 1158 	ldr.w	r1, [r7, #344]	@ 0x158
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f001 f857 	bl	800fc02 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800eb54:	f897 3154 	ldrb.w	r3, [r7, #340]	@ 0x154
 800eb58:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800eb5c:	4413      	add	r3, r2
 800eb5e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800eb62:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb66:	f8b7 215c 	ldrh.w	r2, [r7, #348]	@ 0x15c
 800eb6a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800eb6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb70:	3302      	adds	r3, #2
 800eb72:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800eb76:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800eb7a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	@ 0x160
 800eb7e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800eb80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb84:	3302      	adds	r3, #2
 800eb86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800eb8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eb8e:	2218      	movs	r2, #24
 800eb90:	2100      	movs	r1, #0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f001 f845 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800eb98:	233f      	movs	r3, #63	@ 0x3f
 800eb9a:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x083;
 800eb9e:	2383      	movs	r3, #131	@ 0x83
 800eba0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eba4:	f107 0310 	add.w	r3, r7, #16
 800eba8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ebac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ebb0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ebb4:	f107 030f 	add.w	r3, r7, #15
 800ebb8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ebc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ebc6:	2100      	movs	r1, #0
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f001 fab3 	bl	8010134 <hci_send_req>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	da01      	bge.n	800ebd8 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800ebd4:	23ff      	movs	r3, #255	@ 0xff
 800ebd6:	e004      	b.n	800ebe2 <aci_gap_set_discoverable+0x1ea>
  return status;
 800ebd8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800ebdc:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ebe0:	781b      	ldrb	r3, [r3, #0]
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bdb0      	pop	{r4, r5, r7, pc}

0800ebec <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b0cc      	sub	sp, #304	@ 0x130
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ebf8:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ebfc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800ebfe:	f107 0310 	add.w	r3, r7, #16
 800ec02:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ec06:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec0a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ec0e:	2200      	movs	r2, #0
 800ec10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ec12:	2300      	movs	r3, #0
 800ec14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->IO_Capability = IO_Capability;
 800ec18:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ec1c:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ec20:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ec24:	7812      	ldrb	r2, [r2, #0]
 800ec26:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ec28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec2c:	3301      	adds	r3, #1
 800ec2e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ec32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec36:	2218      	movs	r2, #24
 800ec38:	2100      	movs	r1, #0
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f000 fff1 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ec40:	233f      	movs	r3, #63	@ 0x3f
 800ec42:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x085;
 800ec46:	2385      	movs	r3, #133	@ 0x85
 800ec48:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800ec4c:	f107 0310 	add.w	r3, r7, #16
 800ec50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800ec54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ec58:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ec5c:	f107 030f 	add.w	r3, r7, #15
 800ec60:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800ec64:	2301      	movs	r3, #1
 800ec66:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ec6a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ec6e:	2100      	movs	r1, #0
 800ec70:	4618      	mov	r0, r3
 800ec72:	f001 fa5f 	bl	8010134 <hci_send_req>
 800ec76:	4603      	mov	r3, r0
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	da01      	bge.n	800ec80 <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ec7c:	23ff      	movs	r3, #255	@ 0xff
 800ec7e:	e004      	b.n	800ec8a <aci_gap_set_io_capability+0x9e>
  return status;
 800ec80:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ec84:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ec88:	781b      	ldrb	r3, [r3, #0]
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ec90:	46bd      	mov	sp, r7
 800ec92:	bd80      	pop	{r7, pc}

0800ec94 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ec94:	b5b0      	push	{r4, r5, r7, lr}
 800ec96:	b0cc      	sub	sp, #304	@ 0x130
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	4605      	mov	r5, r0
 800ec9c:	460c      	mov	r4, r1
 800ec9e:	4610      	mov	r0, r2
 800eca0:	4619      	mov	r1, r3
 800eca2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eca6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ecaa:	462a      	mov	r2, r5
 800ecac:	701a      	strb	r2, [r3, #0]
 800ecae:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecb2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ecb6:	4622      	mov	r2, r4
 800ecb8:	701a      	strb	r2, [r3, #0]
 800ecba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecbe:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ecc2:	4602      	mov	r2, r0
 800ecc4:	701a      	strb	r2, [r3, #0]
 800ecc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecca:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800ecce:	460a      	mov	r2, r1
 800ecd0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ecd2:	f107 0310 	add.w	r3, r7, #16
 800ecd6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ecda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ecde:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ece2:	2200      	movs	r2, #0
 800ece4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ece6:	2300      	movs	r3, #0
 800ece8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800ecec:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ecf0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ecf4:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ecf8:	7812      	ldrb	r2, [r2, #0]
 800ecfa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ecfc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed00:	3301      	adds	r3, #1
 800ed02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->MITM_Mode = MITM_Mode;
 800ed06:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed0a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed0e:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ed12:	7812      	ldrb	r2, [r2, #0]
 800ed14:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ed16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->SC_Support = SC_Support;
 800ed20:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed24:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed28:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ed2c:	7812      	ldrb	r2, [r2, #0]
 800ed2e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ed30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed34:	3301      	adds	r3, #1
 800ed36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800ed3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed3e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ed42:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800ed46:	7812      	ldrb	r2, [r2, #0]
 800ed48:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800ed4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed4e:	3301      	adds	r3, #1
 800ed50:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800ed54:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed58:	f897 2140 	ldrb.w	r2, [r7, #320]	@ 0x140
 800ed5c:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800ed5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed62:	3301      	adds	r3, #1
 800ed64:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800ed68:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed6c:	f897 2144 	ldrb.w	r2, [r7, #324]	@ 0x144
 800ed70:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800ed72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed76:	3301      	adds	r3, #1
 800ed78:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800ed7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed80:	f897 2148 	ldrb.w	r2, [r7, #328]	@ 0x148
 800ed84:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800ed86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800ed90:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ed94:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800ed98:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800ed9c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eda0:	3304      	adds	r3, #4
 800eda2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800eda6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800edaa:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800edae:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800edb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edb4:	3301      	adds	r3, #1
 800edb6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800edba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800edbe:	2218      	movs	r2, #24
 800edc0:	2100      	movs	r1, #0
 800edc2:	4618      	mov	r0, r3
 800edc4:	f000 ff2d 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800edc8:	233f      	movs	r3, #63	@ 0x3f
 800edca:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x086;
 800edce:	2386      	movs	r3, #134	@ 0x86
 800edd0:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800edd4:	f107 0310 	add.w	r3, r7, #16
 800edd8:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ede0:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800ede4:	f107 030f 	add.w	r3, r7, #15
 800ede8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800edec:	2301      	movs	r3, #1
 800edee:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800edf2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800edf6:	2100      	movs	r1, #0
 800edf8:	4618      	mov	r0, r3
 800edfa:	f001 f99b 	bl	8010134 <hci_send_req>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	da01      	bge.n	800ee08 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800ee04:	23ff      	movs	r3, #255	@ 0xff
 800ee06:	e004      	b.n	800ee12 <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800ee08:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee0c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ee10:	781b      	ldrb	r3, [r3, #0]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bdb0      	pop	{r4, r5, r7, pc}

0800ee1c <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	b0cc      	sub	sp, #304	@ 0x130
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	4602      	mov	r2, r0
 800ee24:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee28:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800ee2c:	6019      	str	r1, [r3, #0]
 800ee2e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee32:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ee36:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800ee38:	f107 0310 	add.w	r3, r7, #16
 800ee3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800ee40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ee44:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800ee48:	2200      	movs	r2, #0
 800ee4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800ee52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ee5a:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ee5e:	8812      	ldrh	r2, [r2, #0]
 800ee60:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800ee62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee66:	3302      	adds	r3, #2
 800ee68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Pass_Key = Pass_Key;
 800ee6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ee70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ee74:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800ee78:	6812      	ldr	r2, [r2, #0]
 800ee7a:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800ee7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee82:	3304      	adds	r3, #4
 800ee84:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ee88:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ee8c:	2218      	movs	r2, #24
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	f000 fec6 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ee96:	233f      	movs	r3, #63	@ 0x3f
 800ee98:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x088;
 800ee9c:	2388      	movs	r3, #136	@ 0x88
 800ee9e:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800eea2:	f107 0310 	add.w	r3, r7, #16
 800eea6:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800eeaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eeae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800eeb2:	f107 030f 	add.w	r3, r7, #15
 800eeb6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800eeba:	2301      	movs	r3, #1
 800eebc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800eec0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800eec4:	2100      	movs	r1, #0
 800eec6:	4618      	mov	r0, r3
 800eec8:	f001 f934 	bl	8010134 <hci_send_req>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	da01      	bge.n	800eed6 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800eed2:	23ff      	movs	r3, #255	@ 0xff
 800eed4:	e004      	b.n	800eee0 <aci_gap_pass_key_resp+0xc4>
  return status;
 800eed6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800eeda:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800eede:	781b      	ldrb	r3, [r3, #0]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800eeea:	b590      	push	{r4, r7, lr}
 800eeec:	b0cd      	sub	sp, #308	@ 0x134
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	4604      	mov	r4, r0
 800eef2:	4608      	mov	r0, r1
 800eef4:	4611      	mov	r1, r2
 800eef6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800eefa:	f5a2 7298 	sub.w	r2, r2, #304	@ 0x130
 800eefe:	6013      	str	r3, [r2, #0]
 800ef00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef04:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800ef08:	4622      	mov	r2, r4
 800ef0a:	701a      	strb	r2, [r3, #0]
 800ef0c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef10:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800ef14:	4602      	mov	r2, r0
 800ef16:	701a      	strb	r2, [r3, #0]
 800ef18:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ef1c:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800ef20:	460a      	mov	r2, r1
 800ef22:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800ef24:	f107 0310 	add.w	r3, r7, #16
 800ef28:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800ef2c:	f107 0308 	add.w	r3, r7, #8
 800ef30:	2207      	movs	r2, #7
 800ef32:	2100      	movs	r1, #0
 800ef34:	4618      	mov	r0, r3
 800ef36:	f000 fe74 	bl	800fc22 <Osal_MemSet>
  int index_input = 0;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Role = Role;
 800ef40:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef44:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef48:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800ef4c:	7812      	ldrb	r2, [r2, #0]
 800ef4e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ef50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef54:	3301      	adds	r3, #1
 800ef56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->privacy_enabled = privacy_enabled;
 800ef5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef5e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef62:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800ef66:	7812      	ldrb	r2, [r2, #0]
 800ef68:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ef6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef6e:	3301      	adds	r3, #1
 800ef70:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->device_name_char_len = device_name_char_len;
 800ef74:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800ef78:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800ef7c:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800ef80:	7812      	ldrb	r2, [r2, #0]
 800ef82:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ef84:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ef88:	3301      	adds	r3, #1
 800ef8a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ef8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800ef92:	2218      	movs	r2, #24
 800ef94:	2100      	movs	r1, #0
 800ef96:	4618      	mov	r0, r3
 800ef98:	f000 fe43 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ef9c:	233f      	movs	r3, #63	@ 0x3f
 800ef9e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08a;
 800efa2:	238a      	movs	r3, #138	@ 0x8a
 800efa4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800efa8:	f107 0310 	add.w	r3, r7, #16
 800efac:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800efb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800efb4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800efb8:	f107 0308 	add.w	r3, r7, #8
 800efbc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800efc0:	2307      	movs	r3, #7
 800efc2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800efc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800efca:	2100      	movs	r1, #0
 800efcc:	4618      	mov	r0, r3
 800efce:	f001 f8b1 	bl	8010134 <hci_send_req>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	da01      	bge.n	800efdc <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800efd8:	23ff      	movs	r3, #255	@ 0xff
 800efda:	e02e      	b.n	800f03a <aci_gap_init+0x150>
  if ( resp.Status )
 800efdc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800efe0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800efe4:	781b      	ldrb	r3, [r3, #0]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d005      	beq.n	800eff6 <aci_gap_init+0x10c>
    return resp.Status;
 800efea:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800efee:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800eff2:	781b      	ldrb	r3, [r3, #0]
 800eff4:	e021      	b.n	800f03a <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800eff6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800effa:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800effe:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f002:	b29a      	uxth	r2, r3
 800f004:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f008:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800f010:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f014:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f018:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800f01c:	b29a      	uxth	r2, r3
 800f01e:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800f022:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800f024:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f028:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800f02c:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800f030:	b29a      	uxth	r2, r3
 800f032:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 800f036:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f040:	46bd      	mov	sp, r7
 800f042:	bd90      	pop	{r4, r7, pc}

0800f044 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800f044:	b580      	push	{r7, lr}
 800f046:	b0cc      	sub	sp, #304	@ 0x130
 800f048:	af00      	add	r7, sp, #0
 800f04a:	4602      	mov	r2, r0
 800f04c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f050:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f054:	6019      	str	r1, [r3, #0]
 800f056:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f05a:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f05e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800f060:	f107 0310 	add.w	r3, r7, #16
 800f064:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f068:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f06c:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f070:	2200      	movs	r2, #0
 800f072:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f074:	2300      	movs	r3, #0
 800f076:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->AdvDataLen = AdvDataLen;
 800f07a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f07e:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f082:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f086:	7812      	ldrb	r2, [r2, #0]
 800f088:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f08a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f08e:	3301      	adds	r3, #1
 800f090:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800f094:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f098:	1c58      	adds	r0, r3, #1
 800f09a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f09e:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f0a2:	781a      	ldrb	r2, [r3, #0]
 800f0a4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0a8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f0ac:	6819      	ldr	r1, [r3, #0]
 800f0ae:	f000 fda8 	bl	800fc02 <Osal_MemCpy>
  index_input += AdvDataLen;
 800f0b2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f0b6:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f0ba:	781b      	ldrb	r3, [r3, #0]
 800f0bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f0c0:	4413      	add	r3, r2
 800f0c2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f0c6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f0ca:	2218      	movs	r2, #24
 800f0cc:	2100      	movs	r1, #0
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f000 fda7 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f0d4:	233f      	movs	r3, #63	@ 0x3f
 800f0d6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x08e;
 800f0da:	238e      	movs	r3, #142	@ 0x8e
 800f0dc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f0e0:	f107 0310 	add.w	r3, r7, #16
 800f0e4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f0e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f0ec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f0f0:	f107 030f 	add.w	r3, r7, #15
 800f0f4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f0f8:	2301      	movs	r3, #1
 800f0fa:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f0fe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f102:	2100      	movs	r1, #0
 800f104:	4618      	mov	r0, r3
 800f106:	f001 f815 	bl	8010134 <hci_send_req>
 800f10a:	4603      	mov	r3, r0
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	da01      	bge.n	800f114 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800f110:	23ff      	movs	r3, #255	@ 0xff
 800f112:	e004      	b.n	800f11e <aci_gap_update_adv_data+0xda>
  return status;
 800f114:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f118:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f11c:	781b      	ldrb	r3, [r3, #0]
}
 800f11e:	4618      	mov	r0, r3
 800f120:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}

0800f128 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b088      	sub	sp, #32
 800f12c:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f12e:	2300      	movs	r3, #0
 800f130:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f132:	f107 0308 	add.w	r3, r7, #8
 800f136:	2218      	movs	r2, #24
 800f138:	2100      	movs	r1, #0
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 fd71 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f140:	233f      	movs	r3, #63	@ 0x3f
 800f142:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800f144:	2392      	movs	r3, #146	@ 0x92
 800f146:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f148:	1dfb      	adds	r3, r7, #7
 800f14a:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f14c:	2301      	movs	r3, #1
 800f14e:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f150:	f107 0308 	add.w	r3, r7, #8
 800f154:	2100      	movs	r1, #0
 800f156:	4618      	mov	r0, r3
 800f158:	f000 ffec 	bl	8010134 <hci_send_req>
 800f15c:	4603      	mov	r3, r0
 800f15e:	2b00      	cmp	r3, #0
 800f160:	da01      	bge.n	800f166 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800f162:	23ff      	movs	r3, #255	@ 0xff
 800f164:	e000      	b.n	800f168 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800f166:	79fb      	ldrb	r3, [r7, #7]
}
 800f168:	4618      	mov	r0, r3
 800f16a:	3720      	adds	r7, #32
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b0cc      	sub	sp, #304	@ 0x130
 800f174:	af00      	add	r7, sp, #0
 800f176:	4602      	mov	r2, r0
 800f178:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f17c:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f180:	801a      	strh	r2, [r3, #0]
 800f182:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f186:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800f18a:	460a      	mov	r2, r1
 800f18c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800f18e:	f107 0310 	add.w	r3, r7, #16
 800f192:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f196:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f19a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f19e:	2200      	movs	r2, #0
 800f1a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f1a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f1ac:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f1b0:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f1b4:	8812      	ldrh	r2, [r2, #0]
 800f1b6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f1b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f1bc:	3302      	adds	r3, #2
 800f1be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800f1c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f1c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f1ca:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800f1ce:	7812      	ldrb	r2, [r2, #0]
 800f1d0:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f1d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f1d6:	3301      	adds	r3, #1
 800f1d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f1dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f1e0:	2218      	movs	r2, #24
 800f1e2:	2100      	movs	r1, #0
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f000 fd1c 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f1ea:	233f      	movs	r3, #63	@ 0x3f
 800f1ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x0a5;
 800f1f0:	23a5      	movs	r3, #165	@ 0xa5
 800f1f2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f1f6:	f107 0310 	add.w	r3, r7, #16
 800f1fa:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f1fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f202:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f206:	f107 030f 	add.w	r3, r7, #15
 800f20a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f20e:	2301      	movs	r3, #1
 800f210:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f214:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f218:	2100      	movs	r1, #0
 800f21a:	4618      	mov	r0, r3
 800f21c:	f000 ff8a 	bl	8010134 <hci_send_req>
 800f220:	4603      	mov	r3, r0
 800f222:	2b00      	cmp	r3, #0
 800f224:	da01      	bge.n	800f22a <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800f226:	23ff      	movs	r3, #255	@ 0xff
 800f228:	e004      	b.n	800f234 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800f22a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f22e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f232:	781b      	ldrb	r3, [r3, #0]
}
 800f234:	4618      	mov	r0, r3
 800f236:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}

0800f23e <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800f23e:	b580      	push	{r7, lr}
 800f240:	b088      	sub	sp, #32
 800f242:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800f244:	2300      	movs	r3, #0
 800f246:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f248:	f107 0308 	add.w	r3, r7, #8
 800f24c:	2218      	movs	r2, #24
 800f24e:	2100      	movs	r1, #0
 800f250:	4618      	mov	r0, r3
 800f252:	f000 fce6 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f256:	233f      	movs	r3, #63	@ 0x3f
 800f258:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800f25a:	f240 1301 	movw	r3, #257	@ 0x101
 800f25e:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800f260:	1dfb      	adds	r3, r7, #7
 800f262:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800f264:	2301      	movs	r3, #1
 800f266:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f268:	f107 0308 	add.w	r3, r7, #8
 800f26c:	2100      	movs	r1, #0
 800f26e:	4618      	mov	r0, r3
 800f270:	f000 ff60 	bl	8010134 <hci_send_req>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	da01      	bge.n	800f27e <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800f27a:	23ff      	movs	r3, #255	@ 0xff
 800f27c:	e000      	b.n	800f280 <aci_gatt_init+0x42>
  return status;
 800f27e:	79fb      	ldrb	r3, [r7, #7]
}
 800f280:	4618      	mov	r0, r3
 800f282:	3720      	adds	r7, #32
 800f284:	46bd      	mov	sp, r7
 800f286:	bd80      	pop	{r7, pc}

0800f288 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b0cf      	sub	sp, #316	@ 0x13c
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	4604      	mov	r4, r0
 800f290:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 800f294:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800f298:	6001      	str	r1, [r0, #0]
 800f29a:	4610      	mov	r0, r2
 800f29c:	4619      	mov	r1, r3
 800f29e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2a2:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	701a      	strb	r2, [r3, #0]
 800f2aa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2ae:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f2b2:	4602      	mov	r2, r0
 800f2b4:	701a      	strb	r2, [r3, #0]
 800f2b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2ba:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f2be:	460a      	mov	r2, r1
 800f2c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800f2c2:	f107 0310 	add.w	r3, r7, #16
 800f2c6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800f2ca:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2ce:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d00a      	beq.n	800f2ee <aci_gatt_add_service+0x66>
 800f2d8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f2dc:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f2e0:	781b      	ldrb	r3, [r3, #0]
 800f2e2:	2b02      	cmp	r3, #2
 800f2e4:	d101      	bne.n	800f2ea <aci_gatt_add_service+0x62>
 800f2e6:	2311      	movs	r3, #17
 800f2e8:	e002      	b.n	800f2f0 <aci_gatt_add_service+0x68>
 800f2ea:	2301      	movs	r3, #1
 800f2ec:	e000      	b.n	800f2f0 <aci_gatt_add_service+0x68>
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	f107 0210 	add.w	r2, r7, #16
 800f2f4:	4413      	add	r3, r2
 800f2f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f2fa:	f107 030c 	add.w	r3, r7, #12
 800f2fe:	2203      	movs	r2, #3
 800f300:	2100      	movs	r1, #0
 800f302:	4618      	mov	r0, r3
 800f304:	f000 fc8d 	bl	800fc22 <Osal_MemSet>
  int index_input = 0;
 800f308:	2300      	movs	r3, #0
 800f30a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800f30e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f312:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f316:	f2a2 1231 	subw	r2, r2, #305	@ 0x131
 800f31a:	7812      	ldrb	r2, [r2, #0]
 800f31c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f31e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f322:	3301      	adds	r3, #1
 800f324:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800f328:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f32c:	f2a3 1331 	subw	r3, r3, #305	@ 0x131
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b01      	cmp	r3, #1
 800f334:	d002      	beq.n	800f33c <aci_gatt_add_service+0xb4>
 800f336:	2b02      	cmp	r3, #2
 800f338:	d004      	beq.n	800f344 <aci_gatt_add_service+0xbc>
 800f33a:	e007      	b.n	800f34c <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800f33c:	2302      	movs	r3, #2
 800f33e:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f342:	e005      	b.n	800f350 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800f344:	2310      	movs	r3, #16
 800f346:	f887 3137 	strb.w	r3, [r7, #311]	@ 0x137
 800f34a:	e001      	b.n	800f350 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800f34c:	2397      	movs	r3, #151	@ 0x97
 800f34e:	e06c      	b.n	800f42a <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800f350:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f354:	1c58      	adds	r0, r3, #1
 800f356:	f897 2137 	ldrb.w	r2, [r7, #311]	@ 0x137
 800f35a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f35e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f362:	6819      	ldr	r1, [r3, #0]
 800f364:	f000 fc4d 	bl	800fc02 <Osal_MemCpy>
    index_input += size;
 800f368:	f897 3137 	ldrb.w	r3, [r7, #311]	@ 0x137
 800f36c:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f370:	4413      	add	r3, r2
 800f372:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Service_Type = Service_Type;
 800f376:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f37a:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f37e:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f382:	7812      	ldrb	r2, [r2, #0]
 800f384:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800f386:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f38a:	3301      	adds	r3, #1
 800f38c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800f390:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f394:	f507 729c 	add.w	r2, r7, #312	@ 0x138
 800f398:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f39c:	7812      	ldrb	r2, [r2, #0]
 800f39e:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800f3a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f3a4:	3301      	adds	r3, #1
 800f3a6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f3aa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3ae:	2218      	movs	r2, #24
 800f3b0:	2100      	movs	r1, #0
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f000 fc35 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f3b8:	233f      	movs	r3, #63	@ 0x3f
 800f3ba:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x102;
 800f3be:	f44f 7381 	mov.w	r3, #258	@ 0x102
 800f3c2:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f3c6:	f107 0310 	add.w	r3, r7, #16
 800f3ca:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f3ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f3d2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &resp;
 800f3d6:	f107 030c 	add.w	r3, r7, #12
 800f3da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = sizeof(resp);
 800f3de:	2303      	movs	r3, #3
 800f3e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f3e4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f3e8:	2100      	movs	r1, #0
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	f000 fea2 	bl	8010134 <hci_send_req>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	da01      	bge.n	800f3fa <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800f3f6:	23ff      	movs	r3, #255	@ 0xff
 800f3f8:	e017      	b.n	800f42a <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800f3fa:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f3fe:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d005      	beq.n	800f414 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800f408:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f40c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	e00a      	b.n	800f42a <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800f414:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800f418:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f41c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f420:	b29a      	uxth	r2, r3
 800f422:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 800f426:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f428:	2300      	movs	r3, #0
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	f507 779e 	add.w	r7, r7, #316	@ 0x13c
 800f430:	46bd      	mov	sp, r7
 800f432:	bd90      	pop	{r4, r7, pc}

0800f434 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800f434:	b590      	push	{r4, r7, lr}
 800f436:	b0d1      	sub	sp, #324	@ 0x144
 800f438:	af00      	add	r7, sp, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	f507 71a0 	add.w	r1, r7, #320	@ 0x140
 800f442:	f5a1 719c 	sub.w	r1, r1, #312	@ 0x138
 800f446:	600a      	str	r2, [r1, #0]
 800f448:	4619      	mov	r1, r3
 800f44a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f44e:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 800f452:	4622      	mov	r2, r4
 800f454:	801a      	strh	r2, [r3, #0]
 800f456:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f45a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f45e:	4602      	mov	r2, r0
 800f460:	701a      	strb	r2, [r3, #0]
 800f462:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f466:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800f46a:	460a      	mov	r2, r1
 800f46c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800f46e:	f107 0318 	add.w	r3, r7, #24
 800f472:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800f476:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f47a:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f47e:	781b      	ldrb	r3, [r3, #0]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d00a      	beq.n	800f49a <aci_gatt_add_char+0x66>
 800f484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f488:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d101      	bne.n	800f496 <aci_gatt_add_char+0x62>
 800f492:	2313      	movs	r3, #19
 800f494:	e002      	b.n	800f49c <aci_gatt_add_char+0x68>
 800f496:	2303      	movs	r3, #3
 800f498:	e000      	b.n	800f49c <aci_gatt_add_char+0x68>
 800f49a:	2305      	movs	r3, #5
 800f49c:	f107 0218 	add.w	r2, r7, #24
 800f4a0:	4413      	add	r3, r2
 800f4a2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800f4a6:	f107 0314 	add.w	r3, r7, #20
 800f4aa:	2203      	movs	r2, #3
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 fbb7 	bl	800fc22 <Osal_MemSet>
  int index_input = 0;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Service_Handle = Service_Handle;
 800f4ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f4be:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f4c2:	f5a2 7299 	sub.w	r2, r2, #306	@ 0x132
 800f4c6:	8812      	ldrh	r2, [r2, #0]
 800f4c8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f4ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4ce:	3302      	adds	r3, #2
 800f4d0:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800f4d4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f4d8:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f4dc:	f2a2 1233 	subw	r2, r2, #307	@ 0x133
 800f4e0:	7812      	ldrb	r2, [r2, #0]
 800f4e2:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800f4e4:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800f4ee:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f4f2:	f2a3 1333 	subw	r3, r3, #307	@ 0x133
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d002      	beq.n	800f502 <aci_gatt_add_char+0xce>
 800f4fc:	2b02      	cmp	r3, #2
 800f4fe:	d004      	beq.n	800f50a <aci_gatt_add_char+0xd6>
 800f500:	e007      	b.n	800f512 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800f502:	2302      	movs	r3, #2
 800f504:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f508:	e005      	b.n	800f516 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800f50a:	2310      	movs	r3, #16
 800f50c:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f
 800f510:	e001      	b.n	800f516 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800f512:	2397      	movs	r3, #151	@ 0x97
 800f514:	e091      	b.n	800f63a <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800f516:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800f51a:	1cd8      	adds	r0, r3, #3
 800f51c:	f897 213f 	ldrb.w	r2, [r7, #319]	@ 0x13f
 800f520:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f524:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800f528:	6819      	ldr	r1, [r3, #0]
 800f52a:	f000 fb6a 	bl	800fc02 <Osal_MemCpy>
    index_input += size;
 800f52e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800f532:	f8d7 2130 	ldr.w	r2, [r7, #304]	@ 0x130
 800f536:	4413      	add	r3, r2
 800f538:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800f53c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f540:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 800f544:	f5a2 729d 	sub.w	r2, r2, #314	@ 0x13a
 800f548:	8812      	ldrh	r2, [r2, #0]
 800f54a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800f54c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f550:	3302      	adds	r3, #2
 800f552:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800f556:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f55a:	f897 2150 	ldrb.w	r2, [r7, #336]	@ 0x150
 800f55e:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800f560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f564:	3301      	adds	r3, #1
 800f566:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800f56a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f56e:	f897 2154 	ldrb.w	r2, [r7, #340]	@ 0x154
 800f572:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800f574:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f578:	3301      	adds	r3, #1
 800f57a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800f57e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f582:	f897 2158 	ldrb.w	r2, [r7, #344]	@ 0x158
 800f586:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800f588:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f58c:	3301      	adds	r3, #1
 800f58e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800f592:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f596:	f897 215c 	ldrb.w	r2, [r7, #348]	@ 0x15c
 800f59a:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800f59c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5a0:	3301      	adds	r3, #1
 800f5a2:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800f5a6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800f5aa:	f897 2160 	ldrb.w	r2, [r7, #352]	@ 0x160
 800f5ae:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800f5b0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5b4:	3301      	adds	r3, #1
 800f5b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f5ba:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f5be:	2218      	movs	r2, #24
 800f5c0:	2100      	movs	r1, #0
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f000 fb2d 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f5c8:	233f      	movs	r3, #63	@ 0x3f
 800f5ca:	f8a7 3118 	strh.w	r3, [r7, #280]	@ 0x118
  rq.ocf = 0x104;
 800f5ce:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f5d2:	f8a7 311a 	strh.w	r3, [r7, #282]	@ 0x11a
  rq.cparam = cmd_buffer;
 800f5d6:	f107 0318 	add.w	r3, r7, #24
 800f5da:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.clen = index_input;
 800f5de:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800f5e2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  rq.rparam = &resp;
 800f5e6:	f107 0314 	add.w	r3, r7, #20
 800f5ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  rq.rlen = sizeof(resp);
 800f5ee:	2303      	movs	r3, #3
 800f5f0:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f5f4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800f5f8:	2100      	movs	r1, #0
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f000 fd9a 	bl	8010134 <hci_send_req>
 800f600:	4603      	mov	r3, r0
 800f602:	2b00      	cmp	r3, #0
 800f604:	da01      	bge.n	800f60a <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800f606:	23ff      	movs	r3, #255	@ 0xff
 800f608:	e017      	b.n	800f63a <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800f60a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f60e:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f612:	781b      	ldrb	r3, [r3, #0]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d005      	beq.n	800f624 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800f618:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f61c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f620:	781b      	ldrb	r3, [r3, #0]
 800f622:	e00a      	b.n	800f63a <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800f624:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800f628:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f62c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f630:	b29a      	uxth	r2, r3
 800f632:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800f636:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800f638:	2300      	movs	r3, #0
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800f640:	46bd      	mov	sp, r7
 800f642:	bd90      	pop	{r4, r7, pc}

0800f644 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800f644:	b5b0      	push	{r4, r5, r7, lr}
 800f646:	b0cc      	sub	sp, #304	@ 0x130
 800f648:	af00      	add	r7, sp, #0
 800f64a:	4605      	mov	r5, r0
 800f64c:	460c      	mov	r4, r1
 800f64e:	4610      	mov	r0, r2
 800f650:	4619      	mov	r1, r3
 800f652:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f656:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f65a:	462a      	mov	r2, r5
 800f65c:	801a      	strh	r2, [r3, #0]
 800f65e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f662:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800f666:	4622      	mov	r2, r4
 800f668:	801a      	strh	r2, [r3, #0]
 800f66a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f66e:	f2a3 132d 	subw	r3, r3, #301	@ 0x12d
 800f672:	4602      	mov	r2, r0
 800f674:	701a      	strb	r2, [r3, #0]
 800f676:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f67a:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f67e:	460a      	mov	r2, r1
 800f680:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800f682:	f107 0310 	add.w	r3, r7, #16
 800f686:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f68a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f68e:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f692:	2200      	movs	r2, #0
 800f694:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f696:	2300      	movs	r3, #0
 800f698:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Service_Handle = Service_Handle;
 800f69c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f6a8:	8812      	ldrh	r2, [r2, #0]
 800f6aa:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f6ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f6b0:	3302      	adds	r3, #2
 800f6b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Handle = Char_Handle;
 800f6b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6ba:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6be:	f5a2 7296 	sub.w	r2, r2, #300	@ 0x12c
 800f6c2:	8812      	ldrh	r2, [r2, #0]
 800f6c4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800f6c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f6ca:	3302      	adds	r3, #2
 800f6cc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Val_Offset = Val_Offset;
 800f6d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6d4:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6d8:	f2a2 122d 	subw	r2, r2, #301	@ 0x12d
 800f6dc:	7812      	ldrb	r2, [r2, #0]
 800f6de:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800f6e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800f6ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f6ee:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f6f2:	f5a2 7297 	sub.w	r2, r2, #302	@ 0x12e
 800f6f6:	7812      	ldrb	r2, [r2, #0]
 800f6f8:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800f6fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f6fe:	3301      	adds	r3, #1
 800f700:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800f704:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f708:	1d98      	adds	r0, r3, #6
 800f70a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f70e:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	461a      	mov	r2, r3
 800f716:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800f71a:	f000 fa72 	bl	800fc02 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800f71e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f722:	f5a3 7397 	sub.w	r3, r3, #302	@ 0x12e
 800f726:	781b      	ldrb	r3, [r3, #0]
 800f728:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f72c:	4413      	add	r3, r2
 800f72e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f732:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f736:	2218      	movs	r2, #24
 800f738:	2100      	movs	r1, #0
 800f73a:	4618      	mov	r0, r3
 800f73c:	f000 fa71 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f740:	233f      	movs	r3, #63	@ 0x3f
 800f742:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x106;
 800f746:	f44f 7383 	mov.w	r3, #262	@ 0x106
 800f74a:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f74e:	f107 0310 	add.w	r3, r7, #16
 800f752:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f756:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f75a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f75e:	f107 030f 	add.w	r3, r7, #15
 800f762:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f766:	2301      	movs	r3, #1
 800f768:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f76c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f770:	2100      	movs	r1, #0
 800f772:	4618      	mov	r0, r3
 800f774:	f000 fcde 	bl	8010134 <hci_send_req>
 800f778:	4603      	mov	r3, r0
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	da01      	bge.n	800f782 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800f77e:	23ff      	movs	r3, #255	@ 0xff
 800f780:	e004      	b.n	800f78c <aci_gatt_update_char_value+0x148>
  return status;
 800f782:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f786:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f78a:	781b      	ldrb	r3, [r3, #0]
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f792:	46bd      	mov	sp, r7
 800f794:	bdb0      	pop	{r4, r5, r7, pc}

0800f796 <aci_gatt_confirm_indication>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_confirm_indication( uint16_t Connection_Handle )
{
 800f796:	b580      	push	{r7, lr}
 800f798:	b0cc      	sub	sp, #304	@ 0x130
 800f79a:	af00      	add	r7, sp, #0
 800f79c:	4602      	mov	r2, r0
 800f79e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7a2:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f7a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_confirm_indication_cp0 *cp0 = (aci_gatt_confirm_indication_cp0*)(cmd_buffer);
 800f7a8:	f107 0310 	add.w	r3, r7, #16
 800f7ac:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f7b0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f7b4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Connection_Handle = Connection_Handle;
 800f7c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f7c6:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f7ca:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f7ce:	8812      	ldrh	r2, [r2, #0]
 800f7d0:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800f7d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f7d6:	3302      	adds	r3, #2
 800f7d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f7dc:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f7e0:	2218      	movs	r2, #24
 800f7e2:	2100      	movs	r1, #0
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	f000 fa1c 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f7ea:	233f      	movs	r3, #63	@ 0x3f
 800f7ec:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x125;
 800f7f0:	f240 1325 	movw	r3, #293	@ 0x125
 800f7f4:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f7f8:	f107 0310 	add.w	r3, r7, #16
 800f7fc:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f804:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f808:	f107 030f 	add.w	r3, r7, #15
 800f80c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f810:	2301      	movs	r3, #1
 800f812:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f816:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f81a:	2100      	movs	r1, #0
 800f81c:	4618      	mov	r0, r3
 800f81e:	f000 fc89 	bl	8010134 <hci_send_req>
 800f822:	4603      	mov	r3, r0
 800f824:	2b00      	cmp	r3, #0
 800f826:	da01      	bge.n	800f82c <aci_gatt_confirm_indication+0x96>
    return BLE_STATUS_TIMEOUT;
 800f828:	23ff      	movs	r3, #255	@ 0xff
 800f82a:	e004      	b.n	800f836 <aci_gatt_confirm_indication+0xa0>
  return status;
 800f82c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f830:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f834:	781b      	ldrb	r3, [r3, #0]
}
 800f836:	4618      	mov	r0, r3
 800f838:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f83c:	46bd      	mov	sp, r7
 800f83e:	bd80      	pop	{r7, pc}

0800f840 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800f840:	b580      	push	{r7, lr}
 800f842:	b0cc      	sub	sp, #304	@ 0x130
 800f844:	af00      	add	r7, sp, #0
 800f846:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f84a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f84e:	601a      	str	r2, [r3, #0]
 800f850:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f854:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f858:	4602      	mov	r2, r0
 800f85a:	701a      	strb	r2, [r3, #0]
 800f85c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f860:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f864:	460a      	mov	r2, r1
 800f866:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800f868:	f107 0310 	add.w	r3, r7, #16
 800f86c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f870:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f874:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f878:	2200      	movs	r2, #0
 800f87a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f87c:	2300      	movs	r3, #0
 800f87e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Offset = Offset;
 800f882:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f886:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f88a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f88e:	7812      	ldrb	r2, [r2, #0]
 800f890:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f892:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f896:	3301      	adds	r3, #1
 800f898:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Length = Length;
 800f89c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f8a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f8a8:	7812      	ldrb	r2, [r2, #0]
 800f8aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f8ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f8b0:	3301      	adds	r3, #1
 800f8b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800f8b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f8ba:	1c98      	adds	r0, r3, #2
 800f8bc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8c0:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f8c4:	781a      	ldrb	r2, [r3, #0]
 800f8c6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8ca:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800f8ce:	6819      	ldr	r1, [r3, #0]
 800f8d0:	f000 f997 	bl	800fc02 <Osal_MemCpy>
  index_input += Length;
 800f8d4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f8d8:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800f8e2:	4413      	add	r3, r2
 800f8e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f8e8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f8ec:	2218      	movs	r2, #24
 800f8ee:	2100      	movs	r1, #0
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f000 f996 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f8f6:	233f      	movs	r3, #63	@ 0x3f
 800f8f8:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00c;
 800f8fc:	230c      	movs	r3, #12
 800f8fe:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f902:	f107 0310 	add.w	r3, r7, #16
 800f906:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f90a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f90e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f912:	f107 030f 	add.w	r3, r7, #15
 800f916:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f91a:	2301      	movs	r3, #1
 800f91c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f920:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f924:	2100      	movs	r1, #0
 800f926:	4618      	mov	r0, r3
 800f928:	f000 fc04 	bl	8010134 <hci_send_req>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	da01      	bge.n	800f936 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800f932:	23ff      	movs	r3, #255	@ 0xff
 800f934:	e004      	b.n	800f940 <aci_hal_write_config_data+0x100>
  return status;
 800f936:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f93a:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f93e:	781b      	ldrb	r3, [r3, #0]
}
 800f940:	4618      	mov	r0, r3
 800f942:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b0cc      	sub	sp, #304	@ 0x130
 800f94e:	af00      	add	r7, sp, #0
 800f950:	4602      	mov	r2, r0
 800f952:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f956:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800f95a:	701a      	strb	r2, [r3, #0]
 800f95c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f960:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800f964:	460a      	mov	r2, r1
 800f966:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800f968:	f107 0310 	add.w	r3, r7, #16
 800f96c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800f970:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800f974:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800f978:	2200      	movs	r2, #0
 800f97a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800f97c:	2300      	movs	r3, #0
 800f97e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->En_High_Power = En_High_Power;
 800f982:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f986:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f98a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800f98e:	7812      	ldrb	r2, [r2, #0]
 800f990:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800f992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f996:	3301      	adds	r3, #1
 800f998:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->PA_Level = PA_Level;
 800f99c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800f9a0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800f9a4:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800f9a8:	7812      	ldrb	r2, [r2, #0]
 800f9aa:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800f9ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9b0:	3301      	adds	r3, #1
 800f9b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800f9b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f9ba:	2218      	movs	r2, #24
 800f9bc:	2100      	movs	r1, #0
 800f9be:	4618      	mov	r0, r3
 800f9c0:	f000 f92f 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800f9c4:	233f      	movs	r3, #63	@ 0x3f
 800f9c6:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x00f;
 800f9ca:	230f      	movs	r3, #15
 800f9cc:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800f9d0:	f107 0310 	add.w	r3, r7, #16
 800f9d4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800f9d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f9dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800f9e0:	f107 030f 	add.w	r3, r7, #15
 800f9e4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800f9ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800f9f2:	2100      	movs	r1, #0
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f000 fb9d 	bl	8010134 <hci_send_req>
 800f9fa:	4603      	mov	r3, r0
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	da01      	bge.n	800fa04 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800fa00:	23ff      	movs	r3, #255	@ 0xff
 800fa02:	e004      	b.n	800fa0e <aci_hal_set_tx_power_level+0xc4>
  return status;
 800fa04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa08:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa0c:	781b      	ldrb	r3, [r3, #0]
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fa14:	46bd      	mov	sp, r7
 800fa16:	bd80      	pop	{r7, pc}

0800fa18 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b0cc      	sub	sp, #304	@ 0x130
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	4602      	mov	r2, r0
 800fa20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fa28:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800fa2a:	f107 0310 	add.w	r3, r7, #16
 800fa2e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fa32:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fa36:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fa3a:	2200      	movs	r2, #0
 800fa3c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800fa44:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fa48:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fa4c:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fa50:	8812      	ldrh	r2, [r2, #0]
 800fa52:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800fa54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa58:	3302      	adds	r3, #2
 800fa5a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fa5e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa62:	2218      	movs	r2, #24
 800fa64:	2100      	movs	r1, #0
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 f8db 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x3f;
 800fa6c:	233f      	movs	r3, #63	@ 0x3f
 800fa6e:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x018;
 800fa72:	2318      	movs	r3, #24
 800fa74:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fa78:	f107 0310 	add.w	r3, r7, #16
 800fa7c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fa80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fa84:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fa88:	f107 030f 	add.w	r3, r7, #15
 800fa8c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fa90:	2301      	movs	r3, #1
 800fa92:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fa96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fa9a:	2100      	movs	r1, #0
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f000 fb49 	bl	8010134 <hci_send_req>
 800faa2:	4603      	mov	r3, r0
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	da01      	bge.n	800faac <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800faa8:	23ff      	movs	r3, #255	@ 0xff
 800faaa:	e004      	b.n	800fab6 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800faac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fab0:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fab4:	781b      	ldrb	r3, [r3, #0]
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800fabc:	46bd      	mov	sp, r7
 800fabe:	bd80      	pop	{r7, pc}

0800fac0 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b088      	sub	sp, #32
 800fac4:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800faca:	f107 0308 	add.w	r3, r7, #8
 800face:	2218      	movs	r2, #24
 800fad0:	2100      	movs	r1, #0
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 f8a5 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x03;
 800fad8:	2303      	movs	r3, #3
 800fada:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800fadc:	2303      	movs	r3, #3
 800fade:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800fae0:	1dfb      	adds	r3, r7, #7
 800fae2:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800fae4:	2301      	movs	r3, #1
 800fae6:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fae8:	f107 0308 	add.w	r3, r7, #8
 800faec:	2100      	movs	r1, #0
 800faee:	4618      	mov	r0, r3
 800faf0:	f000 fb20 	bl	8010134 <hci_send_req>
 800faf4:	4603      	mov	r3, r0
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	da01      	bge.n	800fafe <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800fafa:	23ff      	movs	r3, #255	@ 0xff
 800fafc:	e000      	b.n	800fb00 <hci_reset+0x40>
  return status;
 800fafe:	79fb      	ldrb	r3, [r7, #7]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3720      	adds	r7, #32
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}

0800fb08 <hci_le_set_default_phy>:
}

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b0cd      	sub	sp, #308	@ 0x134
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	4604      	mov	r4, r0
 800fb10:	4608      	mov	r0, r1
 800fb12:	4611      	mov	r1, r2
 800fb14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb18:	f2a3 1329 	subw	r3, r3, #297	@ 0x129
 800fb1c:	4622      	mov	r2, r4
 800fb1e:	701a      	strb	r2, [r3, #0]
 800fb20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb24:	f5a3 7395 	sub.w	r3, r3, #298	@ 0x12a
 800fb28:	4602      	mov	r2, r0
 800fb2a:	701a      	strb	r2, [r3, #0]
 800fb2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb30:	f2a3 132b 	subw	r3, r3, #299	@ 0x12b
 800fb34:	460a      	mov	r2, r1
 800fb36:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800fb38:	f107 0310 	add.w	r3, r7, #16
 800fb3c:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  tBleStatus status = 0;
 800fb40:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fb44:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fb48:	2200      	movs	r2, #0
 800fb4a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800fb52:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb56:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb5a:	f2a2 1229 	subw	r2, r2, #297	@ 0x129
 800fb5e:	7812      	ldrb	r2, [r2, #0]
 800fb60:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800fb62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb66:	3301      	adds	r3, #1
 800fb68:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->TX_PHYS = TX_PHYS;
 800fb6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb70:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb74:	f5a2 7295 	sub.w	r2, r2, #298	@ 0x12a
 800fb78:	7812      	ldrb	r2, [r2, #0]
 800fb7a:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800fb7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb80:	3301      	adds	r3, #1
 800fb82:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  cp0->RX_PHYS = RX_PHYS;
 800fb86:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800fb8a:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800fb8e:	f2a2 122b 	subw	r2, r2, #299	@ 0x12b
 800fb92:	7812      	ldrb	r2, [r2, #0]
 800fb94:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800fb96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800fba0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fba4:	2218      	movs	r2, #24
 800fba6:	2100      	movs	r1, #0
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f000 f83a 	bl	800fc22 <Osal_MemSet>
  rq.ogf = 0x08;
 800fbae:	2308      	movs	r3, #8
 800fbb0:	f8a7 3110 	strh.w	r3, [r7, #272]	@ 0x110
  rq.ocf = 0x031;
 800fbb4:	2331      	movs	r3, #49	@ 0x31
 800fbb6:	f8a7 3112 	strh.w	r3, [r7, #274]	@ 0x112
  rq.cparam = cmd_buffer;
 800fbba:	f107 0310 	add.w	r3, r7, #16
 800fbbe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
  rq.clen = index_input;
 800fbc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800fbc6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
  rq.rparam = &status;
 800fbca:	f107 030f 	add.w	r3, r7, #15
 800fbce:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
  rq.rlen = 1;
 800fbd2:	2301      	movs	r3, #1
 800fbd4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800fbd8:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800fbdc:	2100      	movs	r1, #0
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f000 faa8 	bl	8010134 <hci_send_req>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	da01      	bge.n	800fbee <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800fbea:	23ff      	movs	r3, #255	@ 0xff
 800fbec:	e004      	b.n	800fbf8 <hci_le_set_default_phy+0xf0>
  return status;
 800fbee:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800fbf2:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 800fbf6:	781b      	ldrb	r3, [r3, #0]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd90      	pop	{r4, r7, pc}

0800fc02 <Osal_MemCpy>:
 * Osal_MemCpy
 *
 */

void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800fc02:	b580      	push	{r7, lr}
 800fc04:	b084      	sub	sp, #16
 800fc06:	af00      	add	r7, sp, #0
 800fc08:	60f8      	str	r0, [r7, #12]
 800fc0a:	60b9      	str	r1, [r7, #8]
 800fc0c:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size );
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	68b9      	ldr	r1, [r7, #8]
 800fc12:	68f8      	ldr	r0, [r7, #12]
 800fc14:	f002 ff5c 	bl	8012ad0 <memcpy>
 800fc18:	4603      	mov	r3, r0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3710      	adds	r7, #16
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <Osal_MemSet>:
 * Osal_MemSet
 *
 */

void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800fc22:	b580      	push	{r7, lr}
 800fc24:	b084      	sub	sp, #16
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	60f8      	str	r0, [r7, #12]
 800fc2a:	60b9      	str	r1, [r7, #8]
 800fc2c:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800fc2e:	687a      	ldr	r2, [r7, #4]
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f002 ff18 	bl	8012a68 <memset>
 800fc38:	4603      	mov	r3, r0
}
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	3710      	adds	r7, #16
 800fc3e:	46bd      	mov	sp, r7
 800fc40:	bd80      	pop	{r7, pc}

0800fc42 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800fc42:	b480      	push	{r7}
 800fc44:	af00      	add	r7, sp, #0
  return;
 800fc46:	bf00      	nop
}
 800fc48:	46bd      	mov	sp, r7
 800fc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4e:	4770      	bx	lr

0800fc50 <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800fc50:	b480      	push	{r7}
 800fc52:	af00      	add	r7, sp, #0
  return;
 800fc54:	bf00      	nop
}
 800fc56:	46bd      	mov	sp, r7
 800fc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5c:	4770      	bx	lr

0800fc5e <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800fc5e:	b480      	push	{r7}
 800fc60:	af00      	add	r7, sp, #0
  return;
 800fc62:	bf00      	nop
}
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr

0800fc6c <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800fc6c:	b480      	push	{r7}
 800fc6e:	af00      	add	r7, sp, #0
  return;
 800fc70:	bf00      	nop
}
 800fc72:	46bd      	mov	sp, r7
 800fc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800fc7a:	b480      	push	{r7}
 800fc7c:	af00      	add	r7, sp, #0
  return;
 800fc7e:	bf00      	nop
}
 800fc80:	46bd      	mov	sp, r7
 800fc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc86:	4770      	bx	lr

0800fc88 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800fc88:	b480      	push	{r7}
 800fc8a:	af00      	add	r7, sp, #0
  return;
 800fc8c:	bf00      	nop
}
 800fc8e:	46bd      	mov	sp, r7
 800fc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc94:	4770      	bx	lr

0800fc96 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800fc96:	b480      	push	{r7}
 800fc98:	af00      	add	r7, sp, #0
  return;
 800fc9a:	bf00      	nop
}
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800fca4:	b480      	push	{r7}
 800fca6:	af00      	add	r7, sp, #0
  return;
 800fca8:	bf00      	nop
}
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb0:	4770      	bx	lr

0800fcb2 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800fcb2:	b480      	push	{r7}
 800fcb4:	af00      	add	r7, sp, #0
  return;
 800fcb6:	bf00      	nop
}
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr

0800fcc0 <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800fcc0:	b480      	push	{r7}
 800fcc2:	af00      	add	r7, sp, #0
  return;
 800fcc4:	bf00      	nop
}
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr

0800fcce <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800fcce:	b480      	push	{r7}
 800fcd0:	af00      	add	r7, sp, #0
  return;
 800fcd2:	bf00      	nop
}
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800fcdc:	b480      	push	{r7}
 800fcde:	af00      	add	r7, sp, #0
  return;
 800fce0:	bf00      	nop
}
 800fce2:	46bd      	mov	sp, r7
 800fce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce8:	4770      	bx	lr

0800fcea <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 800fcea:	b480      	push	{r7}
 800fcec:	af00      	add	r7, sp, #0
  return;
 800fcee:	bf00      	nop
}
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf6:	4770      	bx	lr

0800fcf8 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 800fcf8:	b480      	push	{r7}
 800fcfa:	af00      	add	r7, sp, #0
  return;
 800fcfc:	bf00      	nop
}
 800fcfe:	46bd      	mov	sp, r7
 800fd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd04:	4770      	bx	lr

0800fd06 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800fd06:	b480      	push	{r7}
 800fd08:	af00      	add	r7, sp, #0
  return;
 800fd0a:	bf00      	nop
}
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800fd14:	b480      	push	{r7}
 800fd16:	af00      	add	r7, sp, #0
  return;
 800fd18:	bf00      	nop
}
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd20:	4770      	bx	lr

0800fd22 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800fd22:	b480      	push	{r7}
 800fd24:	af00      	add	r7, sp, #0
  return;
 800fd26:	bf00      	nop
}
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800fd34:	4b04      	ldr	r3, [pc, #16]	@ (800fd48 <SVCCTL_Init+0x18>)
 800fd36:	2200      	movs	r2, #0
 800fd38:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800fd3a:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <SVCCTL_Init+0x1c>)
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800fd40:	f000 f806 	bl	800fd50 <SVCCTL_SvcInit>

  return;
 800fd44:	bf00      	nop
}
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	20000188 	.word	0x20000188
 800fd4c:	200001a8 	.word	0x200001a8

0800fd50 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	af00      	add	r7, sp, #0
  BAS_Init();
 800fd54:	f7ff ff75 	bl	800fc42 <BAS_Init>

  BLS_Init();
 800fd58:	f7ff ff7a 	bl	800fc50 <BLS_Init>

  CRS_STM_Init();
 800fd5c:	f7ff ff7f 	bl	800fc5e <CRS_STM_Init>

  DIS_Init();
 800fd60:	f7ff ff84 	bl	800fc6c <DIS_Init>

  EDS_STM_Init();
 800fd64:	f7ff ff89 	bl	800fc7a <EDS_STM_Init>

  HIDS_Init();
 800fd68:	f7ff ff8e 	bl	800fc88 <HIDS_Init>

  HRS_Init();
 800fd6c:	f7ff ff93 	bl	800fc96 <HRS_Init>

  HTS_Init();
 800fd70:	f7ff ff98 	bl	800fca4 <HTS_Init>

  IAS_Init();
 800fd74:	f7ff ff9d 	bl	800fcb2 <IAS_Init>

  LLS_Init();
 800fd78:	f7ff ffa2 	bl	800fcc0 <LLS_Init>

  TPS_Init();
 800fd7c:	f7ff ffa7 	bl	800fcce <TPS_Init>

  MOTENV_STM_Init();
 800fd80:	f7ff ffac 	bl	800fcdc <MOTENV_STM_Init>

  P2PS_STM_Init();
 800fd84:	f7ff ffb1 	bl	800fcea <P2PS_STM_Init>

  ZDD_STM_Init();
 800fd88:	f7ff ffb6 	bl	800fcf8 <ZDD_STM_Init>

  OTAS_STM_Init();
 800fd8c:	f7ff ffbb 	bl	800fd06 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800fd90:	f7ff ffc7 	bl	800fd22 <BVOPUS_STM_Init>

  MESH_Init();
 800fd94:	f7ff ffbe 	bl	800fd14 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800fd98:	f001 fb5a 	bl	8011450 <SVCCTL_InitCustomSvc>
  
  return;
 800fd9c:	bf00      	nop
}
 800fd9e:	bd80      	pop	{r7, pc}

0800fda0 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800fda8:	4b09      	ldr	r3, [pc, #36]	@ (800fdd0 <SVCCTL_RegisterSvcHandler+0x30>)
 800fdaa:	7f1b      	ldrb	r3, [r3, #28]
 800fdac:	4619      	mov	r1, r3
 800fdae:	4a08      	ldr	r2, [pc, #32]	@ (800fdd0 <SVCCTL_RegisterSvcHandler+0x30>)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800fdb6:	4b06      	ldr	r3, [pc, #24]	@ (800fdd0 <SVCCTL_RegisterSvcHandler+0x30>)
 800fdb8:	7f1b      	ldrb	r3, [r3, #28]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	b2da      	uxtb	r2, r3
 800fdbe:	4b04      	ldr	r3, [pc, #16]	@ (800fdd0 <SVCCTL_RegisterSvcHandler+0x30>)
 800fdc0:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800fdc2:	bf00      	nop
}
 800fdc4:	370c      	adds	r7, #12
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	20000188 	.word	0x20000188

0800fdd4 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	3301      	adds	r3, #1
 800fde0:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800fde2:	2300      	movs	r3, #0
 800fde4:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	781b      	ldrb	r3, [r3, #0]
 800fdea:	2bff      	cmp	r3, #255	@ 0xff
 800fdec:	d125      	bne.n	800fe3a <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	3302      	adds	r3, #2
 800fdf2:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	881b      	ldrh	r3, [r3, #0]
 800fdf8:	b29b      	uxth	r3, r3
 800fdfa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fdfe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800fe02:	d118      	bne.n	800fe36 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fe04:	2300      	movs	r3, #0
 800fe06:	757b      	strb	r3, [r7, #21]
 800fe08:	e00d      	b.n	800fe26 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800fe0a:	7d7b      	ldrb	r3, [r7, #21]
 800fe0c:	4a1a      	ldr	r2, [pc, #104]	@ (800fe78 <SVCCTL_UserEvtRx+0xa4>)
 800fe0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	4798      	blx	r3
 800fe16:	4603      	mov	r3, r0
 800fe18:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800fe1a:	7dfb      	ldrb	r3, [r7, #23]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d108      	bne.n	800fe32 <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800fe20:	7d7b      	ldrb	r3, [r7, #21]
 800fe22:	3301      	adds	r3, #1
 800fe24:	757b      	strb	r3, [r7, #21]
 800fe26:	4b14      	ldr	r3, [pc, #80]	@ (800fe78 <SVCCTL_UserEvtRx+0xa4>)
 800fe28:	7f1b      	ldrb	r3, [r3, #28]
 800fe2a:	7d7a      	ldrb	r2, [r7, #21]
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	d3ec      	bcc.n	800fe0a <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800fe30:	e002      	b.n	800fe38 <SVCCTL_UserEvtRx+0x64>
              break;
 800fe32:	bf00      	nop
          break;
 800fe34:	e000      	b.n	800fe38 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800fe36:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800fe38:	e000      	b.n	800fe3c <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800fe3a:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	d00f      	beq.n	800fe62 <SVCCTL_UserEvtRx+0x8e>
 800fe42:	2b02      	cmp	r3, #2
 800fe44:	dc10      	bgt.n	800fe68 <SVCCTL_UserEvtRx+0x94>
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d002      	beq.n	800fe50 <SVCCTL_UserEvtRx+0x7c>
 800fe4a:	2b01      	cmp	r3, #1
 800fe4c:	d006      	beq.n	800fe5c <SVCCTL_UserEvtRx+0x88>
 800fe4e:	e00b      	b.n	800fe68 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f000 ff85 	bl	8010d60 <SVCCTL_App_Notification>
 800fe56:	4603      	mov	r3, r0
 800fe58:	75bb      	strb	r3, [r7, #22]
      break;
 800fe5a:	e008      	b.n	800fe6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fe5c:	2301      	movs	r3, #1
 800fe5e:	75bb      	strb	r3, [r7, #22]
      break;
 800fe60:	e005      	b.n	800fe6e <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800fe62:	2300      	movs	r3, #0
 800fe64:	75bb      	strb	r3, [r7, #22]
      break;
 800fe66:	e002      	b.n	800fe6e <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800fe68:	2301      	movs	r3, #1
 800fe6a:	75bb      	strb	r3, [r7, #22]
      break;
 800fe6c:	bf00      	nop
  }

  return (return_status);
 800fe6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800fe70:	4618      	mov	r0, r3
 800fe72:	3718      	adds	r7, #24
 800fe74:	46bd      	mov	sp, r7
 800fe76:	bd80      	pop	{r7, pc}
 800fe78:	20000188 	.word	0x20000188

0800fe7c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b088      	sub	sp, #32
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800fe84:	f107 030c 	add.w	r3, r7, #12
 800fe88:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800fe90:	69fb      	ldr	r3, [r7, #28]
 800fe92:	212e      	movs	r1, #46	@ 0x2e
 800fe94:	f64f 4066 	movw	r0, #64614	@ 0xfc66
 800fe98:	f000 fae8 	bl	801046c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800fe9c:	69fb      	ldr	r3, [r7, #28]
 800fe9e:	330b      	adds	r3, #11
 800fea0:	78db      	ldrb	r3, [r3, #3]
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3720      	adds	r7, #32
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}

0800feaa <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800feaa:	b580      	push	{r7, lr}
 800feac:	b088      	sub	sp, #32
 800feae:	af00      	add	r7, sp, #0
 800feb0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800feb2:	f107 030c 	add.w	r3, r7, #12
 800feb6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	210f      	movs	r1, #15
 800fec2:	f64f 4068 	movw	r0, #64616	@ 0xfc68
 800fec6:	f000 fad1 	bl	801046c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	330b      	adds	r3, #11
 800fece:	78db      	ldrb	r3, [r3, #3]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3720      	adds	r7, #32
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b088      	sub	sp, #32
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800fee0:	f107 030c 	add.w	r3, r7, #12
 800fee4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800fee6:	69fb      	ldr	r3, [r7, #28]
 800fee8:	687a      	ldr	r2, [r7, #4]
 800feea:	2110      	movs	r1, #16
 800feec:	f64f 4075 	movw	r0, #64629	@ 0xfc75
 800fef0:	f000 fabc 	bl	801046c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800fef4:	69fb      	ldr	r3, [r7, #28]
 800fef6:	330b      	adds	r3, #11
 800fef8:	78db      	ldrb	r3, [r3, #3]
}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3720      	adds	r7, #32
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}
	...

0800ff04 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800ff04:	b480      	push	{r7}
 800ff06:	b08b      	sub	sp, #44	@ 0x2c
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800ff14:	2300      	movs	r3, #0
 800ff16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800ff24:	2300      	movs	r3, #0
 800ff26:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800ff28:	2300      	movs	r3, #0
 800ff2a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800ff2c:	4b4a      	ldr	r3, [pc, #296]	@ (8010058 <SHCI_GetWirelessFwInfo+0x154>)
 800ff2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff30:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ff34:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800ff36:	693b      	ldr	r3, [r7, #16]
 800ff38:	009b      	lsls	r3, r3, #2
 800ff3a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ff3e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	681b      	ldr	r3, [r3, #0]
 800ff4a:	4a44      	ldr	r2, [pc, #272]	@ (801005c <SHCI_GetWirelessFwInfo+0x158>)
 800ff4c:	4293      	cmp	r3, r2
 800ff4e:	d10f      	bne.n	800ff70 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	695b      	ldr	r3, [r3, #20]
 800ff54:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	699b      	ldr	r3, [r3, #24]
 800ff5a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800ff5c:	68bb      	ldr	r3, [r7, #8]
 800ff5e:	69db      	ldr	r3, [r3, #28]
 800ff60:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800ff62:	68bb      	ldr	r3, [r7, #8]
 800ff64:	68db      	ldr	r3, [r3, #12]
 800ff66:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	691b      	ldr	r3, [r3, #16]
 800ff6c:	617b      	str	r3, [r7, #20]
 800ff6e:	e01a      	b.n	800ffa6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	009b      	lsls	r3, r3, #2
 800ff74:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800ff78:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800ff7c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	691b      	ldr	r3, [r3, #16]
 800ff84:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	695b      	ldr	r3, [r3, #20]
 800ff8c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	699b      	ldr	r3, [r3, #24]
 800ff94:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	685b      	ldr	r3, [r3, #4]
 800ff9c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	689b      	ldr	r3, [r3, #8]
 800ffa4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffa8:	0e1b      	lsrs	r3, r3, #24
 800ffaa:	b2da      	uxtb	r2, r3
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffb2:	0c1b      	lsrs	r3, r3, #16
 800ffb4:	b2da      	uxtb	r2, r3
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800ffba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffbc:	0a1b      	lsrs	r3, r3, #8
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800ffc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc6:	091b      	lsrs	r3, r3, #4
 800ffc8:	b2db      	uxtb	r3, r3
 800ffca:	f003 030f 	and.w	r3, r3, #15
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800ffd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	f003 030f 	and.w	r3, r3, #15
 800ffdc:	b2da      	uxtb	r2, r3
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800ffe2:	6a3b      	ldr	r3, [r7, #32]
 800ffe4:	0e1b      	lsrs	r3, r3, #24
 800ffe6:	b2da      	uxtb	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800ffec:	6a3b      	ldr	r3, [r7, #32]
 800ffee:	0c1b      	lsrs	r3, r3, #16
 800fff0:	b2da      	uxtb	r2, r3
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800fff6:	6a3b      	ldr	r3, [r7, #32]
 800fff8:	0a1b      	lsrs	r3, r3, #8
 800fffa:	b2da      	uxtb	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010000:	6a3b      	ldr	r3, [r7, #32]
 8010002:	b2da      	uxtb	r2, r3
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8010008:	69fb      	ldr	r3, [r7, #28]
 801000a:	b2da      	uxtb	r2, r3
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8010010:	69bb      	ldr	r3, [r7, #24]
 8010012:	0e1b      	lsrs	r3, r3, #24
 8010014:	b2da      	uxtb	r2, r3
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801001a:	69bb      	ldr	r3, [r7, #24]
 801001c:	0c1b      	lsrs	r3, r3, #16
 801001e:	b2da      	uxtb	r2, r3
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	0a1b      	lsrs	r3, r3, #8
 8010028:	b2da      	uxtb	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	0e1b      	lsrs	r3, r3, #24
 8010032:	b2da      	uxtb	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8010038:	697b      	ldr	r3, [r7, #20]
 801003a:	0c1b      	lsrs	r3, r3, #16
 801003c:	b2da      	uxtb	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	b2da      	uxtb	r2, r3
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801004a:	2300      	movs	r3, #0
}
 801004c:	4618      	mov	r0, r3
 801004e:	372c      	adds	r7, #44	@ 0x2c
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr
 8010058:	58004000 	.word	0x58004000
 801005c:	a94656b9 	.word	0xa94656b9

08010060 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010060:	b580      	push	{r7, lr}
 8010062:	b082      	sub	sp, #8
 8010064:	af00      	add	r7, sp, #0
 8010066:	6078      	str	r0, [r7, #4]
 8010068:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 801006a:	683b      	ldr	r3, [r7, #0]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	4a08      	ldr	r2, [pc, #32]	@ (8010090 <hci_init+0x30>)
 8010070:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8010072:	4a08      	ldr	r2, [pc, #32]	@ (8010094 <hci_init+0x34>)
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8010078:	4806      	ldr	r0, [pc, #24]	@ (8010094 <hci_init+0x34>)
 801007a:	f000 f979 	bl	8010370 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	681b      	ldr	r3, [r3, #0]
 8010082:	4618      	mov	r0, r3
 8010084:	f000 f8da 	bl	801023c <TlInit>

  return;
 8010088:	bf00      	nop
}
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}
 8010090:	2000042c 	.word	0x2000042c
 8010094:	20000404 	.word	0x20000404

08010098 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 801009e:	4822      	ldr	r0, [pc, #136]	@ (8010128 <hci_user_evt_proc+0x90>)
 80100a0:	f000 fd32 	bl	8010b08 <LST_is_empty>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d12b      	bne.n	8010102 <hci_user_evt_proc+0x6a>
 80100aa:	4b20      	ldr	r3, [pc, #128]	@ (801012c <hci_user_evt_proc+0x94>)
 80100ac:	781b      	ldrb	r3, [r3, #0]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d027      	beq.n	8010102 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80100b2:	f107 030c 	add.w	r3, r7, #12
 80100b6:	4619      	mov	r1, r3
 80100b8:	481b      	ldr	r0, [pc, #108]	@ (8010128 <hci_user_evt_proc+0x90>)
 80100ba:	f000 fdb4 	bl	8010c26 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 80100be:	4b1c      	ldr	r3, [pc, #112]	@ (8010130 <hci_user_evt_proc+0x98>)
 80100c0:	69db      	ldr	r3, [r3, #28]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00c      	beq.n	80100e0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 80100ca:	2301      	movs	r3, #1
 80100cc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 80100ce:	4b18      	ldr	r3, [pc, #96]	@ (8010130 <hci_user_evt_proc+0x98>)
 80100d0:	69db      	ldr	r3, [r3, #28]
 80100d2:	1d3a      	adds	r2, r7, #4
 80100d4:	4610      	mov	r0, r2
 80100d6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 80100d8:	793a      	ldrb	r2, [r7, #4]
 80100da:	4b14      	ldr	r3, [pc, #80]	@ (801012c <hci_user_evt_proc+0x94>)
 80100dc:	701a      	strb	r2, [r3, #0]
 80100de:	e002      	b.n	80100e6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 80100e0:	4b12      	ldr	r3, [pc, #72]	@ (801012c <hci_user_evt_proc+0x94>)
 80100e2:	2201      	movs	r2, #1
 80100e4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 80100e6:	4b11      	ldr	r3, [pc, #68]	@ (801012c <hci_user_evt_proc+0x94>)
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d004      	beq.n	80100f8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 fc0d 	bl	8010910 <TL_MM_EvtDone>
 80100f6:	e004      	b.n	8010102 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	4619      	mov	r1, r3
 80100fc:	480a      	ldr	r0, [pc, #40]	@ (8010128 <hci_user_evt_proc+0x90>)
 80100fe:	f000 fd25 	bl	8010b4c <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8010102:	4809      	ldr	r0, [pc, #36]	@ (8010128 <hci_user_evt_proc+0x90>)
 8010104:	f000 fd00 	bl	8010b08 <LST_is_empty>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d107      	bne.n	801011e <hci_user_evt_proc+0x86>
 801010e:	4b07      	ldr	r3, [pc, #28]	@ (801012c <hci_user_evt_proc+0x94>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d003      	beq.n	801011e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8010116:	4804      	ldr	r0, [pc, #16]	@ (8010128 <hci_user_evt_proc+0x90>)
 8010118:	f001 f848 	bl	80111ac <hci_notify_asynch_evt>
  }


  return;
 801011c:	bf00      	nop
 801011e:	bf00      	nop
}
 8010120:	3710      	adds	r7, #16
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	200001b0 	.word	0x200001b0
 801012c:	200001bc 	.word	0x200001bc
 8010130:	20000404 	.word	0x20000404

08010134 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b088      	sub	sp, #32
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	460b      	mov	r3, r1
 801013e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8010140:	2000      	movs	r0, #0
 8010142:	f000 f8d1 	bl	80102e8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8010146:	2300      	movs	r3, #0
 8010148:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	885b      	ldrh	r3, [r3, #2]
 801014e:	b21b      	sxth	r3, r3
 8010150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010154:	b21a      	sxth	r2, r3
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	029b      	lsls	r3, r3, #10
 801015c:	b21b      	sxth	r3, r3
 801015e:	4313      	orrs	r3, r2
 8010160:	b21b      	sxth	r3, r3
 8010162:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8010164:	4b33      	ldr	r3, [pc, #204]	@ (8010234 <hci_send_req+0x100>)
 8010166:	2201      	movs	r2, #1
 8010168:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	68db      	ldr	r3, [r3, #12]
 801016e:	b2d9      	uxtb	r1, r3
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	689a      	ldr	r2, [r3, #8]
 8010174:	8bbb      	ldrh	r3, [r7, #28]
 8010176:	4618      	mov	r0, r3
 8010178:	f000 f890 	bl	801029c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 801017c:	e04e      	b.n	801021c <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 801017e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 8010182:	f001 f82a 	bl	80111da <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010186:	e043      	b.n	8010210 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8010188:	f107 030c 	add.w	r3, r7, #12
 801018c:	4619      	mov	r1, r3
 801018e:	482a      	ldr	r0, [pc, #168]	@ (8010238 <hci_send_req+0x104>)
 8010190:	f000 fd49 	bl	8010c26 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	7a5b      	ldrb	r3, [r3, #9]
 8010198:	2b0f      	cmp	r3, #15
 801019a:	d114      	bne.n	80101c6 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	330b      	adds	r3, #11
 80101a0:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80101a2:	693b      	ldr	r3, [r7, #16]
 80101a4:	885b      	ldrh	r3, [r3, #2]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	8bba      	ldrh	r2, [r7, #28]
 80101aa:	429a      	cmp	r2, r3
 80101ac:	d104      	bne.n	80101b8 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	691b      	ldr	r3, [r3, #16]
 80101b2:	693a      	ldr	r2, [r7, #16]
 80101b4:	7812      	ldrb	r2, [r2, #0]
 80101b6:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	785b      	ldrb	r3, [r3, #1]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d027      	beq.n	8010210 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 80101c0:	2301      	movs	r3, #1
 80101c2:	77fb      	strb	r3, [r7, #31]
 80101c4:	e024      	b.n	8010210 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	330b      	adds	r3, #11
 80101ca:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 80101cc:	69bb      	ldr	r3, [r7, #24]
 80101ce:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80101d2:	b29b      	uxth	r3, r3
 80101d4:	8bba      	ldrh	r2, [r7, #28]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d114      	bne.n	8010204 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	7a9b      	ldrb	r3, [r3, #10]
 80101de:	3b03      	subs	r3, #3
 80101e0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	695a      	ldr	r2, [r3, #20]
 80101e6:	7dfb      	ldrb	r3, [r7, #23]
 80101e8:	429a      	cmp	r2, r3
 80101ea:	bfa8      	it	ge
 80101ec:	461a      	movge	r2, r3
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	6918      	ldr	r0, [r3, #16]
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	1cd9      	adds	r1, r3, #3
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	695b      	ldr	r3, [r3, #20]
 80101fe:	461a      	mov	r2, r3
 8010200:	f002 fc66 	bl	8012ad0 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8010204:	69bb      	ldr	r3, [r7, #24]
 8010206:	781b      	ldrb	r3, [r3, #0]
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 801020c:	2301      	movs	r3, #1
 801020e:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8010210:	4809      	ldr	r0, [pc, #36]	@ (8010238 <hci_send_req+0x104>)
 8010212:	f000 fc79 	bl	8010b08 <LST_is_empty>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d0b5      	beq.n	8010188 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 801021c:	7ffb      	ldrb	r3, [r7, #31]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d0ad      	beq.n	801017e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8010222:	2001      	movs	r0, #1
 8010224:	f000 f860 	bl	80102e8 <NotifyCmdStatus>

  return 0;
 8010228:	2300      	movs	r3, #0
}
 801022a:	4618      	mov	r0, r3
 801022c:	3720      	adds	r7, #32
 801022e:	46bd      	mov	sp, r7
 8010230:	bd80      	pop	{r7, pc}
 8010232:	bf00      	nop
 8010234:	20000430 	.word	0x20000430
 8010238:	20000424 	.word	0x20000424

0801023c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b086      	sub	sp, #24
 8010240:	af00      	add	r7, sp, #0
 8010242:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8010244:	480f      	ldr	r0, [pc, #60]	@ (8010284 <TlInit+0x48>)
 8010246:	f000 fc4f 	bl	8010ae8 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 801024a:	4a0f      	ldr	r2, [pc, #60]	@ (8010288 <TlInit+0x4c>)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8010250:	480e      	ldr	r0, [pc, #56]	@ (801028c <TlInit+0x50>)
 8010252:	f000 fc49 	bl	8010ae8 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8010256:	4b0e      	ldr	r3, [pc, #56]	@ (8010290 <TlInit+0x54>)
 8010258:	2201      	movs	r2, #1
 801025a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 801025c:	4b0d      	ldr	r3, [pc, #52]	@ (8010294 <TlInit+0x58>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d00a      	beq.n	801027a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8010268:	4b0b      	ldr	r3, [pc, #44]	@ (8010298 <TlInit+0x5c>)
 801026a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 801026c:	4b09      	ldr	r3, [pc, #36]	@ (8010294 <TlInit+0x58>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f107 0208 	add.w	r2, r7, #8
 8010274:	4610      	mov	r0, r2
 8010276:	4798      	blx	r3
  }

  return;
 8010278:	bf00      	nop
 801027a:	bf00      	nop
}
 801027c:	3718      	adds	r7, #24
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20000424 	.word	0x20000424
 8010288:	200001b8 	.word	0x200001b8
 801028c:	200001b0 	.word	0x200001b0
 8010290:	200001bc 	.word	0x200001bc
 8010294:	20000404 	.word	0x20000404
 8010298:	08010329 	.word	0x08010329

0801029c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 801029c:	b580      	push	{r7, lr}
 801029e:	b082      	sub	sp, #8
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	4603      	mov	r3, r0
 80102a4:	603a      	str	r2, [r7, #0]
 80102a6:	80fb      	strh	r3, [r7, #6]
 80102a8:	460b      	mov	r3, r1
 80102aa:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80102ac:	4b0c      	ldr	r3, [pc, #48]	@ (80102e0 <SendCmd+0x44>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	88fa      	ldrh	r2, [r7, #6]
 80102b2:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80102b6:	4b0a      	ldr	r3, [pc, #40]	@ (80102e0 <SendCmd+0x44>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	797a      	ldrb	r2, [r7, #5]
 80102bc:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 80102be:	4b08      	ldr	r3, [pc, #32]	@ (80102e0 <SendCmd+0x44>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	330c      	adds	r3, #12
 80102c4:	797a      	ldrb	r2, [r7, #5]
 80102c6:	6839      	ldr	r1, [r7, #0]
 80102c8:	4618      	mov	r0, r3
 80102ca:	f002 fc01 	bl	8012ad0 <memcpy>

  hciContext.io.Send(0,0);
 80102ce:	4b05      	ldr	r3, [pc, #20]	@ (80102e4 <SendCmd+0x48>)
 80102d0:	691b      	ldr	r3, [r3, #16]
 80102d2:	2100      	movs	r1, #0
 80102d4:	2000      	movs	r0, #0
 80102d6:	4798      	blx	r3

  return;
 80102d8:	bf00      	nop
}
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	200001b8 	.word	0x200001b8
 80102e4:	20000404 	.word	0x20000404

080102e8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 80102e8:	b580      	push	{r7, lr}
 80102ea:	b082      	sub	sp, #8
 80102ec:	af00      	add	r7, sp, #0
 80102ee:	4603      	mov	r3, r0
 80102f0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 80102f2:	79fb      	ldrb	r3, [r7, #7]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d108      	bne.n	801030a <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 80102f8:	4b0a      	ldr	r3, [pc, #40]	@ (8010324 <NotifyCmdStatus+0x3c>)
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00d      	beq.n	801031c <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8010300:	4b08      	ldr	r3, [pc, #32]	@ (8010324 <NotifyCmdStatus+0x3c>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2000      	movs	r0, #0
 8010306:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8010308:	e008      	b.n	801031c <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 801030a:	4b06      	ldr	r3, [pc, #24]	@ (8010324 <NotifyCmdStatus+0x3c>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d004      	beq.n	801031c <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8010312:	4b04      	ldr	r3, [pc, #16]	@ (8010324 <NotifyCmdStatus+0x3c>)
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	2001      	movs	r0, #1
 8010318:	4798      	blx	r3
  return;
 801031a:	bf00      	nop
 801031c:	bf00      	nop
}
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	2000042c 	.word	0x2000042c

08010328 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b082      	sub	sp, #8
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	7a5b      	ldrb	r3, [r3, #9]
 8010334:	2b0f      	cmp	r3, #15
 8010336:	d003      	beq.n	8010340 <TlEvtReceived+0x18>
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	7a5b      	ldrb	r3, [r3, #9]
 801033c:	2b0e      	cmp	r3, #14
 801033e:	d107      	bne.n	8010350 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8010340:	6879      	ldr	r1, [r7, #4]
 8010342:	4809      	ldr	r0, [pc, #36]	@ (8010368 <TlEvtReceived+0x40>)
 8010344:	f000 fc28 	bl	8010b98 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8010348:	2000      	movs	r0, #0
 801034a:	f000 ff3b 	bl	80111c4 <hci_cmd_resp_release>
 801034e:	e006      	b.n	801035e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8010350:	6879      	ldr	r1, [r7, #4]
 8010352:	4806      	ldr	r0, [pc, #24]	@ (801036c <TlEvtReceived+0x44>)
 8010354:	f000 fc20 	bl	8010b98 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8010358:	4804      	ldr	r0, [pc, #16]	@ (801036c <TlEvtReceived+0x44>)
 801035a:	f000 ff27 	bl	80111ac <hci_notify_asynch_evt>
  }

  return;
 801035e:	bf00      	nop
}
 8010360:	3708      	adds	r7, #8
 8010362:	46bd      	mov	sp, r7
 8010364:	bd80      	pop	{r7, pc}
 8010366:	bf00      	nop
 8010368:	20000424 	.word	0x20000424
 801036c:	200001b0 	.word	0x200001b0

08010370 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8010370:	b480      	push	{r7}
 8010372:	b083      	sub	sp, #12
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	4a05      	ldr	r2, [pc, #20]	@ (8010390 <hci_register_io_bus+0x20>)
 801037c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	4a04      	ldr	r2, [pc, #16]	@ (8010394 <hci_register_io_bus+0x24>)
 8010382:	611a      	str	r2, [r3, #16]

  return;
 8010384:	bf00      	nop
}
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr
 8010390:	08010689 	.word	0x08010689
 8010394:	080106f1 	.word	0x080106f1

08010398 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b082      	sub	sp, #8
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80103a2:	683b      	ldr	r3, [r7, #0]
 80103a4:	685b      	ldr	r3, [r3, #4]
 80103a6:	4a08      	ldr	r2, [pc, #32]	@ (80103c8 <shci_init+0x30>)
 80103a8:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80103aa:	4a08      	ldr	r2, [pc, #32]	@ (80103cc <shci_init+0x34>)
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80103b0:	4806      	ldr	r0, [pc, #24]	@ (80103cc <shci_init+0x34>)
 80103b2:	f000 f915 	bl	80105e0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f000 f898 	bl	80104f0 <TlInit>

  return;
 80103c0:	bf00      	nop
}
 80103c2:	3708      	adds	r7, #8
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	20000454 	.word	0x20000454
 80103cc:	20000434 	.word	0x20000434

080103d0 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80103d6:	4822      	ldr	r0, [pc, #136]	@ (8010460 <shci_user_evt_proc+0x90>)
 80103d8:	f000 fb96 	bl	8010b08 <LST_is_empty>
 80103dc:	4603      	mov	r3, r0
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d12b      	bne.n	801043a <shci_user_evt_proc+0x6a>
 80103e2:	4b20      	ldr	r3, [pc, #128]	@ (8010464 <shci_user_evt_proc+0x94>)
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d027      	beq.n	801043a <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80103ea:	f107 030c 	add.w	r3, r7, #12
 80103ee:	4619      	mov	r1, r3
 80103f0:	481b      	ldr	r0, [pc, #108]	@ (8010460 <shci_user_evt_proc+0x90>)
 80103f2:	f000 fc18 	bl	8010c26 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80103f6:	4b1c      	ldr	r3, [pc, #112]	@ (8010468 <shci_user_evt_proc+0x98>)
 80103f8:	69db      	ldr	r3, [r3, #28]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d00c      	beq.n	8010418 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80103fe:	68fb      	ldr	r3, [r7, #12]
 8010400:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8010402:	2301      	movs	r3, #1
 8010404:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8010406:	4b18      	ldr	r3, [pc, #96]	@ (8010468 <shci_user_evt_proc+0x98>)
 8010408:	69db      	ldr	r3, [r3, #28]
 801040a:	1d3a      	adds	r2, r7, #4
 801040c:	4610      	mov	r0, r2
 801040e:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8010410:	793a      	ldrb	r2, [r7, #4]
 8010412:	4b14      	ldr	r3, [pc, #80]	@ (8010464 <shci_user_evt_proc+0x94>)
 8010414:	701a      	strb	r2, [r3, #0]
 8010416:	e002      	b.n	801041e <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8010418:	4b12      	ldr	r3, [pc, #72]	@ (8010464 <shci_user_evt_proc+0x94>)
 801041a:	2201      	movs	r2, #1
 801041c:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801041e:	4b11      	ldr	r3, [pc, #68]	@ (8010464 <shci_user_evt_proc+0x94>)
 8010420:	781b      	ldrb	r3, [r3, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d004      	beq.n	8010430 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	4618      	mov	r0, r3
 801042a:	f000 fa71 	bl	8010910 <TL_MM_EvtDone>
 801042e:	e004      	b.n	801043a <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	4619      	mov	r1, r3
 8010434:	480a      	ldr	r0, [pc, #40]	@ (8010460 <shci_user_evt_proc+0x90>)
 8010436:	f000 fb89 	bl	8010b4c <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 801043a:	4809      	ldr	r0, [pc, #36]	@ (8010460 <shci_user_evt_proc+0x90>)
 801043c:	f000 fb64 	bl	8010b08 <LST_is_empty>
 8010440:	4603      	mov	r3, r0
 8010442:	2b00      	cmp	r3, #0
 8010444:	d107      	bne.n	8010456 <shci_user_evt_proc+0x86>
 8010446:	4b07      	ldr	r3, [pc, #28]	@ (8010464 <shci_user_evt_proc+0x94>)
 8010448:	781b      	ldrb	r3, [r3, #0]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d003      	beq.n	8010456 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801044e:	4804      	ldr	r0, [pc, #16]	@ (8010460 <shci_user_evt_proc+0x90>)
 8010450:	f7f1 fae7 	bl	8001a22 <shci_notify_asynch_evt>
  }


  return;
 8010454:	bf00      	nop
 8010456:	bf00      	nop
}
 8010458:	3710      	adds	r7, #16
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	200001c0 	.word	0x200001c0
 8010464:	200001d0 	.word	0x200001d0
 8010468:	20000434 	.word	0x20000434

0801046c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 801046c:	b580      	push	{r7, lr}
 801046e:	b084      	sub	sp, #16
 8010470:	af00      	add	r7, sp, #0
 8010472:	60ba      	str	r2, [r7, #8]
 8010474:	607b      	str	r3, [r7, #4]
 8010476:	4603      	mov	r3, r0
 8010478:	81fb      	strh	r3, [r7, #14]
 801047a:	460b      	mov	r3, r1
 801047c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801047e:	2000      	movs	r0, #0
 8010480:	f000 f868 	bl	8010554 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8010484:	4b17      	ldr	r3, [pc, #92]	@ (80104e4 <shci_send+0x78>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	89fa      	ldrh	r2, [r7, #14]
 801048a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801048e:	4b15      	ldr	r3, [pc, #84]	@ (80104e4 <shci_send+0x78>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	7b7a      	ldrb	r2, [r7, #13]
 8010494:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8010496:	4b13      	ldr	r3, [pc, #76]	@ (80104e4 <shci_send+0x78>)
 8010498:	681b      	ldr	r3, [r3, #0]
 801049a:	330c      	adds	r3, #12
 801049c:	7b7a      	ldrb	r2, [r7, #13]
 801049e:	68b9      	ldr	r1, [r7, #8]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f002 fb15 	bl	8012ad0 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80104a6:	4b10      	ldr	r3, [pc, #64]	@ (80104e8 <shci_send+0x7c>)
 80104a8:	2201      	movs	r2, #1
 80104aa:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80104ac:	4b0f      	ldr	r3, [pc, #60]	@ (80104ec <shci_send+0x80>)
 80104ae:	691b      	ldr	r3, [r3, #16]
 80104b0:	2100      	movs	r1, #0
 80104b2:	2000      	movs	r0, #0
 80104b4:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80104b6:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80104ba:	f7f1 fac9 	bl	8001a50 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f103 0008 	add.w	r0, r3, #8
 80104c4:	4b07      	ldr	r3, [pc, #28]	@ (80104e4 <shci_send+0x78>)
 80104c6:	6819      	ldr	r1, [r3, #0]
 80104c8:	4b06      	ldr	r3, [pc, #24]	@ (80104e4 <shci_send+0x78>)
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	789b      	ldrb	r3, [r3, #2]
 80104ce:	3303      	adds	r3, #3
 80104d0:	461a      	mov	r2, r3
 80104d2:	f002 fafd 	bl	8012ad0 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80104d6:	2001      	movs	r0, #1
 80104d8:	f000 f83c 	bl	8010554 <Cmd_SetStatus>

  return;
 80104dc:	bf00      	nop
}
 80104de:	3710      	adds	r7, #16
 80104e0:	46bd      	mov	sp, r7
 80104e2:	bd80      	pop	{r7, pc}
 80104e4:	200001cc 	.word	0x200001cc
 80104e8:	20000458 	.word	0x20000458
 80104ec:	20000434 	.word	0x20000434

080104f0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b086      	sub	sp, #24
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80104f8:	4a10      	ldr	r2, [pc, #64]	@ (801053c <TlInit+0x4c>)
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80104fe:	4810      	ldr	r0, [pc, #64]	@ (8010540 <TlInit+0x50>)
 8010500:	f000 faf2 	bl	8010ae8 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8010504:	2001      	movs	r0, #1
 8010506:	f000 f825 	bl	8010554 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 801050a:	4b0e      	ldr	r3, [pc, #56]	@ (8010544 <TlInit+0x54>)
 801050c:	2201      	movs	r2, #1
 801050e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8010510:	4b0d      	ldr	r3, [pc, #52]	@ (8010548 <TlInit+0x58>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d00c      	beq.n	8010532 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 801051c:	4b0b      	ldr	r3, [pc, #44]	@ (801054c <TlInit+0x5c>)
 801051e:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8010520:	4b0b      	ldr	r3, [pc, #44]	@ (8010550 <TlInit+0x60>)
 8010522:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8010524:	4b08      	ldr	r3, [pc, #32]	@ (8010548 <TlInit+0x58>)
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	f107 020c 	add.w	r2, r7, #12
 801052c:	4610      	mov	r0, r2
 801052e:	4798      	blx	r3
  }

  return;
 8010530:	bf00      	nop
 8010532:	bf00      	nop
}
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}
 801053a:	bf00      	nop
 801053c:	200001cc 	.word	0x200001cc
 8010540:	200001c0 	.word	0x200001c0
 8010544:	200001d0 	.word	0x200001d0
 8010548:	20000434 	.word	0x20000434
 801054c:	080105a5 	.word	0x080105a5
 8010550:	080105bd 	.word	0x080105bd

08010554 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b082      	sub	sp, #8
 8010558:	af00      	add	r7, sp, #0
 801055a:	4603      	mov	r3, r0
 801055c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801055e:	79fb      	ldrb	r3, [r7, #7]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d10b      	bne.n	801057c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8010564:	4b0d      	ldr	r3, [pc, #52]	@ (801059c <Cmd_SetStatus+0x48>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d003      	beq.n	8010574 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801056c:	4b0b      	ldr	r3, [pc, #44]	@ (801059c <Cmd_SetStatus+0x48>)
 801056e:	681b      	ldr	r3, [r3, #0]
 8010570:	2000      	movs	r0, #0
 8010572:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8010574:	4b0a      	ldr	r3, [pc, #40]	@ (80105a0 <Cmd_SetStatus+0x4c>)
 8010576:	2200      	movs	r2, #0
 8010578:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801057a:	e00b      	b.n	8010594 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 801057c:	4b08      	ldr	r3, [pc, #32]	@ (80105a0 <Cmd_SetStatus+0x4c>)
 801057e:	2201      	movs	r2, #1
 8010580:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8010582:	4b06      	ldr	r3, [pc, #24]	@ (801059c <Cmd_SetStatus+0x48>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d004      	beq.n	8010594 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801058a:	4b04      	ldr	r3, [pc, #16]	@ (801059c <Cmd_SetStatus+0x48>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	2001      	movs	r0, #1
 8010590:	4798      	blx	r3
  return;
 8010592:	bf00      	nop
 8010594:	bf00      	nop
}
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}
 801059c:	20000454 	.word	0x20000454
 80105a0:	200001c8 	.word	0x200001c8

080105a4 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80105a4:	b580      	push	{r7, lr}
 80105a6:	b082      	sub	sp, #8
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80105ac:	2000      	movs	r0, #0
 80105ae:	f7f1 fa44 	bl	8001a3a <shci_cmd_resp_release>

  return;
 80105b2:	bf00      	nop
}
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
	...

080105bc <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80105bc:	b580      	push	{r7, lr}
 80105be:	b082      	sub	sp, #8
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80105c4:	6879      	ldr	r1, [r7, #4]
 80105c6:	4805      	ldr	r0, [pc, #20]	@ (80105dc <TlUserEvtReceived+0x20>)
 80105c8:	f000 fae6 	bl	8010b98 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80105cc:	4803      	ldr	r0, [pc, #12]	@ (80105dc <TlUserEvtReceived+0x20>)
 80105ce:	f7f1 fa28 	bl	8001a22 <shci_notify_asynch_evt>

  return;
 80105d2:	bf00      	nop
}
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	200001c0 	.word	0x200001c0

080105e0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80105e0:	b480      	push	{r7}
 80105e2:	b083      	sub	sp, #12
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	4a05      	ldr	r2, [pc, #20]	@ (8010600 <shci_register_io_bus+0x20>)
 80105ec:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4a04      	ldr	r2, [pc, #16]	@ (8010604 <shci_register_io_bus+0x24>)
 80105f2:	611a      	str	r2, [r3, #16]

  return;
 80105f4:	bf00      	nop
}
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr
 8010600:	0801079d 	.word	0x0801079d
 8010604:	080107f1 	.word	0x080107f1

08010608 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 801060c:	f001 f94a 	bl	80118a4 <HW_IPCC_Enable>

  return;
 8010610:	bf00      	nop
}
 8010612:	bd80      	pop	{r7, pc}

08010614 <TL_Init>:


void TL_Init( void )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8010618:	4b10      	ldr	r3, [pc, #64]	@ (801065c <TL_Init+0x48>)
 801061a:	4a11      	ldr	r2, [pc, #68]	@ (8010660 <TL_Init+0x4c>)
 801061c:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801061e:	4b0f      	ldr	r3, [pc, #60]	@ (801065c <TL_Init+0x48>)
 8010620:	4a10      	ldr	r2, [pc, #64]	@ (8010664 <TL_Init+0x50>)
 8010622:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8010624:	4b0d      	ldr	r3, [pc, #52]	@ (801065c <TL_Init+0x48>)
 8010626:	4a10      	ldr	r2, [pc, #64]	@ (8010668 <TL_Init+0x54>)
 8010628:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 801062a:	4b0c      	ldr	r3, [pc, #48]	@ (801065c <TL_Init+0x48>)
 801062c:	4a0f      	ldr	r2, [pc, #60]	@ (801066c <TL_Init+0x58>)
 801062e:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 8010630:	4b0a      	ldr	r3, [pc, #40]	@ (801065c <TL_Init+0x48>)
 8010632:	4a0f      	ldr	r2, [pc, #60]	@ (8010670 <TL_Init+0x5c>)
 8010634:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8010636:	4b09      	ldr	r3, [pc, #36]	@ (801065c <TL_Init+0x48>)
 8010638:	4a0e      	ldr	r2, [pc, #56]	@ (8010674 <TL_Init+0x60>)
 801063a:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 801063c:	4b07      	ldr	r3, [pc, #28]	@ (801065c <TL_Init+0x48>)
 801063e:	4a0e      	ldr	r2, [pc, #56]	@ (8010678 <TL_Init+0x64>)
 8010640:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8010642:	4b06      	ldr	r3, [pc, #24]	@ (801065c <TL_Init+0x48>)
 8010644:	4a0d      	ldr	r2, [pc, #52]	@ (801067c <TL_Init+0x68>)
 8010646:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8010648:	4b04      	ldr	r3, [pc, #16]	@ (801065c <TL_Init+0x48>)
 801064a:	4a0d      	ldr	r2, [pc, #52]	@ (8010680 <TL_Init+0x6c>)
 801064c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801064e:	4b03      	ldr	r3, [pc, #12]	@ (801065c <TL_Init+0x48>)
 8010650:	4a0c      	ldr	r2, [pc, #48]	@ (8010684 <TL_Init+0x70>)
 8010652:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8010654:	f001 f93a 	bl	80118cc <HW_IPCC_Init>

  return;
 8010658:	bf00      	nop
}
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20030000 	.word	0x20030000
 8010660:	20030028 	.word	0x20030028
 8010664:	20030048 	.word	0x20030048
 8010668:	20030058 	.word	0x20030058
 801066c:	20030068 	.word	0x20030068
 8010670:	20030070 	.word	0x20030070
 8010674:	20030078 	.word	0x20030078
 8010678:	20030080 	.word	0x20030080
 801067c:	2003009c 	.word	0x2003009c
 8010680:	200300a0 	.word	0x200300a0
 8010684:	200300ac 	.word	0x200300ac

08010688 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b084      	sub	sp, #16
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8010694:	4811      	ldr	r0, [pc, #68]	@ (80106dc <TL_BLE_Init+0x54>)
 8010696:	f000 fa27 	bl	8010ae8 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801069a:	4b11      	ldr	r3, [pc, #68]	@ (80106e0 <TL_BLE_Init+0x58>)
 801069c:	685b      	ldr	r3, [r3, #4]
 801069e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	689a      	ldr	r2, [r3, #8]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	68da      	ldr	r2, [r3, #12]
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 80106b0:	68bb      	ldr	r3, [r7, #8]
 80106b2:	4a0c      	ldr	r2, [pc, #48]	@ (80106e4 <TL_BLE_Init+0x5c>)
 80106b4:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	4a08      	ldr	r2, [pc, #32]	@ (80106dc <TL_BLE_Init+0x54>)
 80106ba:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 80106bc:	f001 f91c 	bl	80118f8 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	681b      	ldr	r3, [r3, #0]
 80106c4:	4a08      	ldr	r2, [pc, #32]	@ (80106e8 <TL_BLE_Init+0x60>)
 80106c6:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	685b      	ldr	r3, [r3, #4]
 80106cc:	4a07      	ldr	r2, [pc, #28]	@ (80106ec <TL_BLE_Init+0x64>)
 80106ce:	6013      	str	r3, [r2, #0]

  return 0;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3710      	adds	r7, #16
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	200300c8 	.word	0x200300c8
 80106e0:	20030000 	.word	0x20030000
 80106e4:	20030a58 	.word	0x20030a58
 80106e8:	20000464 	.word	0x20000464
 80106ec:	20000468 	.word	0x20000468

080106f0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80106f0:	b580      	push	{r7, lr}
 80106f2:	b082      	sub	sp, #8
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]
 80106f8:	460b      	mov	r3, r1
 80106fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80106fc:	4b09      	ldr	r3, [pc, #36]	@ (8010724 <TL_BLE_SendCmd+0x34>)
 80106fe:	685b      	ldr	r3, [r3, #4]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	2201      	movs	r2, #1
 8010704:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8010706:	4b07      	ldr	r3, [pc, #28]	@ (8010724 <TL_BLE_SendCmd+0x34>)
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4619      	mov	r1, r3
 801070e:	2001      	movs	r0, #1
 8010710:	f000 f96c 	bl	80109ec <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8010714:	f001 f8fa 	bl	801190c <HW_IPCC_BLE_SendCmd>

  return 0;
 8010718:	2300      	movs	r3, #0
}
 801071a:	4618      	mov	r0, r3
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	20030000 	.word	0x20030000

08010728 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8010728:	b580      	push	{r7, lr}
 801072a:	b082      	sub	sp, #8
 801072c:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801072e:	e01c      	b.n	801076a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8010730:	1d3b      	adds	r3, r7, #4
 8010732:	4619      	mov	r1, r3
 8010734:	4812      	ldr	r0, [pc, #72]	@ (8010780 <HW_IPCC_BLE_RxEvtNot+0x58>)
 8010736:	f000 fa76 	bl	8010c26 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	7a5b      	ldrb	r3, [r3, #9]
 801073e:	2b0f      	cmp	r3, #15
 8010740:	d003      	beq.n	801074a <HW_IPCC_BLE_RxEvtNot+0x22>
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	7a5b      	ldrb	r3, [r3, #9]
 8010746:	2b0e      	cmp	r3, #14
 8010748:	d105      	bne.n	8010756 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	4619      	mov	r1, r3
 801074e:	2002      	movs	r0, #2
 8010750:	f000 f94c 	bl	80109ec <OutputDbgTrace>
 8010754:	e004      	b.n	8010760 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	4619      	mov	r1, r3
 801075a:	2003      	movs	r0, #3
 801075c:	f000 f946 	bl	80109ec <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8010760:	4b08      	ldr	r3, [pc, #32]	@ (8010784 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	687a      	ldr	r2, [r7, #4]
 8010766:	4610      	mov	r0, r2
 8010768:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801076a:	4805      	ldr	r0, [pc, #20]	@ (8010780 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801076c:	f000 f9cc 	bl	8010b08 <LST_is_empty>
 8010770:	4603      	mov	r3, r0
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0dc      	beq.n	8010730 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8010776:	bf00      	nop
}
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	200300c8 	.word	0x200300c8
 8010784:	20000464 	.word	0x20000464

08010788 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801078c:	4b02      	ldr	r3, [pc, #8]	@ (8010798 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	4798      	blx	r3

  return;
 8010792:	bf00      	nop
}
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	20000468 	.word	0x20000468

0801079c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 80107a8:	480d      	ldr	r0, [pc, #52]	@ (80107e0 <TL_SYS_Init+0x44>)
 80107aa:	f000 f99d 	bl	8010ae8 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 80107ae:	4b0d      	ldr	r3, [pc, #52]	@ (80107e4 <TL_SYS_Init+0x48>)
 80107b0:	68db      	ldr	r3, [r3, #12]
 80107b2:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	689a      	ldr	r2, [r3, #8]
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	4a08      	ldr	r2, [pc, #32]	@ (80107e0 <TL_SYS_Init+0x44>)
 80107c0:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 80107c2:	f001 f8c5 	bl	8011950 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	681b      	ldr	r3, [r3, #0]
 80107ca:	4a07      	ldr	r2, [pc, #28]	@ (80107e8 <TL_SYS_Init+0x4c>)
 80107cc:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	4a06      	ldr	r2, [pc, #24]	@ (80107ec <TL_SYS_Init+0x50>)
 80107d4:	6013      	str	r3, [r2, #0]

  return 0;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}
 80107e0:	200300d0 	.word	0x200300d0
 80107e4:	20030000 	.word	0x20030000
 80107e8:	2000046c 	.word	0x2000046c
 80107ec:	20000470 	.word	0x20000470

080107f0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	460b      	mov	r3, r1
 80107fa:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80107fc:	4b09      	ldr	r3, [pc, #36]	@ (8010824 <TL_SYS_SendCmd+0x34>)
 80107fe:	68db      	ldr	r3, [r3, #12]
 8010800:	681b      	ldr	r3, [r3, #0]
 8010802:	2210      	movs	r2, #16
 8010804:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8010806:	4b07      	ldr	r3, [pc, #28]	@ (8010824 <TL_SYS_SendCmd+0x34>)
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	4619      	mov	r1, r3
 801080e:	2004      	movs	r0, #4
 8010810:	f000 f8ec 	bl	80109ec <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8010814:	f001 f8a6 	bl	8011964 <HW_IPCC_SYS_SendCmd>

  return 0;
 8010818:	2300      	movs	r3, #0
}
 801081a:	4618      	mov	r0, r3
 801081c:	3708      	adds	r7, #8
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	20030000 	.word	0x20030000

08010828 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801082c:	4b07      	ldr	r3, [pc, #28]	@ (801084c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801082e:	68db      	ldr	r3, [r3, #12]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4619      	mov	r1, r3
 8010834:	2005      	movs	r0, #5
 8010836:	f000 f8d9 	bl	80109ec <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 801083a:	4b05      	ldr	r3, [pc, #20]	@ (8010850 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	4a03      	ldr	r2, [pc, #12]	@ (801084c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8010840:	68d2      	ldr	r2, [r2, #12]
 8010842:	6812      	ldr	r2, [r2, #0]
 8010844:	4610      	mov	r0, r2
 8010846:	4798      	blx	r3

  return;
 8010848:	bf00      	nop
}
 801084a:	bd80      	pop	{r7, pc}
 801084c:	20030000 	.word	0x20030000
 8010850:	2000046c 	.word	0x2000046c

08010854 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801085a:	e00e      	b.n	801087a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801085c:	1d3b      	adds	r3, r7, #4
 801085e:	4619      	mov	r1, r3
 8010860:	480b      	ldr	r0, [pc, #44]	@ (8010890 <HW_IPCC_SYS_EvtNot+0x3c>)
 8010862:	f000 f9e0 	bl	8010c26 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	4619      	mov	r1, r3
 801086a:	2006      	movs	r0, #6
 801086c:	f000 f8be 	bl	80109ec <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8010870:	4b08      	ldr	r3, [pc, #32]	@ (8010894 <HW_IPCC_SYS_EvtNot+0x40>)
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	4610      	mov	r0, r2
 8010878:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801087a:	4805      	ldr	r0, [pc, #20]	@ (8010890 <HW_IPCC_SYS_EvtNot+0x3c>)
 801087c:	f000 f944 	bl	8010b08 <LST_is_empty>
 8010880:	4603      	mov	r3, r0
 8010882:	2b00      	cmp	r3, #0
 8010884:	d0ea      	beq.n	801085c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8010886:	bf00      	nop
}
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	200300d0 	.word	0x200300d0
 8010894:	20000470 	.word	0x20000470

08010898 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8010898:	b580      	push	{r7, lr}
 801089a:	b082      	sub	sp, #8
 801089c:	af00      	add	r7, sp, #0
 801089e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80108a0:	4817      	ldr	r0, [pc, #92]	@ (8010900 <TL_MM_Init+0x68>)
 80108a2:	f000 f921 	bl	8010ae8 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80108a6:	4817      	ldr	r0, [pc, #92]	@ (8010904 <TL_MM_Init+0x6c>)
 80108a8:	f000 f91e 	bl	8010ae8 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80108ac:	4b16      	ldr	r3, [pc, #88]	@ (8010908 <TL_MM_Init+0x70>)
 80108ae:	691b      	ldr	r3, [r3, #16]
 80108b0:	4a16      	ldr	r2, [pc, #88]	@ (801090c <TL_MM_Init+0x74>)
 80108b2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80108b4:	4b15      	ldr	r3, [pc, #84]	@ (801090c <TL_MM_Init+0x74>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	687a      	ldr	r2, [r7, #4]
 80108ba:	6892      	ldr	r2, [r2, #8]
 80108bc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80108be:	4b13      	ldr	r3, [pc, #76]	@ (801090c <TL_MM_Init+0x74>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	687a      	ldr	r2, [r7, #4]
 80108c4:	68d2      	ldr	r2, [r2, #12]
 80108c6:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 80108c8:	4b10      	ldr	r3, [pc, #64]	@ (801090c <TL_MM_Init+0x74>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4a0c      	ldr	r2, [pc, #48]	@ (8010900 <TL_MM_Init+0x68>)
 80108ce:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80108d0:	4b0e      	ldr	r3, [pc, #56]	@ (801090c <TL_MM_Init+0x74>)
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	687a      	ldr	r2, [r7, #4]
 80108d6:	6812      	ldr	r2, [r2, #0]
 80108d8:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80108da:	4b0c      	ldr	r3, [pc, #48]	@ (801090c <TL_MM_Init+0x74>)
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	687a      	ldr	r2, [r7, #4]
 80108e0:	6852      	ldr	r2, [r2, #4]
 80108e2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80108e4:	4b09      	ldr	r3, [pc, #36]	@ (801090c <TL_MM_Init+0x74>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	687a      	ldr	r2, [r7, #4]
 80108ea:	6912      	ldr	r2, [r2, #16]
 80108ec:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80108ee:	4b07      	ldr	r3, [pc, #28]	@ (801090c <TL_MM_Init+0x74>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	687a      	ldr	r2, [r7, #4]
 80108f4:	6952      	ldr	r2, [r2, #20]
 80108f6:	619a      	str	r2, [r3, #24]

  return;
 80108f8:	bf00      	nop
}
 80108fa:	3708      	adds	r7, #8
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}
 8010900:	200300b8 	.word	0x200300b8
 8010904:	2000045c 	.word	0x2000045c
 8010908:	20030000 	.word	0x20030000
 801090c:	20000474 	.word	0x20000474

08010910 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8010910:	b580      	push	{r7, lr}
 8010912:	b082      	sub	sp, #8
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8010918:	6879      	ldr	r1, [r7, #4]
 801091a:	4807      	ldr	r0, [pc, #28]	@ (8010938 <TL_MM_EvtDone+0x28>)
 801091c:	f000 f93c 	bl	8010b98 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8010920:	6879      	ldr	r1, [r7, #4]
 8010922:	2000      	movs	r0, #0
 8010924:	f000 f862 	bl	80109ec <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8010928:	4804      	ldr	r0, [pc, #16]	@ (801093c <TL_MM_EvtDone+0x2c>)
 801092a:	f001 f841 	bl	80119b0 <HW_IPCC_MM_SendFreeBuf>

  return;
 801092e:	bf00      	nop
}
 8010930:	3708      	adds	r7, #8
 8010932:	46bd      	mov	sp, r7
 8010934:	bd80      	pop	{r7, pc}
 8010936:	bf00      	nop
 8010938:	2000045c 	.word	0x2000045c
 801093c:	08010941 	.word	0x08010941

08010940 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8010940:	b580      	push	{r7, lr}
 8010942:	b082      	sub	sp, #8
 8010944:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010946:	e00c      	b.n	8010962 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8010948:	1d3b      	adds	r3, r7, #4
 801094a:	4619      	mov	r1, r3
 801094c:	480a      	ldr	r0, [pc, #40]	@ (8010978 <SendFreeBuf+0x38>)
 801094e:	f000 f96a 	bl	8010c26 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8010952:	4b0a      	ldr	r3, [pc, #40]	@ (801097c <SendFreeBuf+0x3c>)
 8010954:	691b      	ldr	r3, [r3, #16]
 8010956:	691b      	ldr	r3, [r3, #16]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	4611      	mov	r1, r2
 801095c:	4618      	mov	r0, r3
 801095e:	f000 f91b 	bl	8010b98 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8010962:	4805      	ldr	r0, [pc, #20]	@ (8010978 <SendFreeBuf+0x38>)
 8010964:	f000 f8d0 	bl	8010b08 <LST_is_empty>
 8010968:	4603      	mov	r3, r0
 801096a:	2b00      	cmp	r3, #0
 801096c:	d0ec      	beq.n	8010948 <SendFreeBuf+0x8>
  }

  return;
 801096e:	bf00      	nop
}
 8010970:	3708      	adds	r7, #8
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}
 8010976:	bf00      	nop
 8010978:	2000045c 	.word	0x2000045c
 801097c:	20030000 	.word	0x20030000

08010980 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8010980:	b580      	push	{r7, lr}
 8010982:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8010984:	4805      	ldr	r0, [pc, #20]	@ (801099c <TL_TRACES_Init+0x1c>)
 8010986:	f000 f8af 	bl	8010ae8 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801098a:	4b05      	ldr	r3, [pc, #20]	@ (80109a0 <TL_TRACES_Init+0x20>)
 801098c:	695b      	ldr	r3, [r3, #20]
 801098e:	4a03      	ldr	r2, [pc, #12]	@ (801099c <TL_TRACES_Init+0x1c>)
 8010990:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8010992:	f001 f843 	bl	8011a1c <HW_IPCC_TRACES_Init>

  return;
 8010996:	bf00      	nop
}
 8010998:	bd80      	pop	{r7, pc}
 801099a:	bf00      	nop
 801099c:	200300c0 	.word	0x200300c0
 80109a0:	20030000 	.word	0x20030000

080109a4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80109aa:	e008      	b.n	80109be <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80109ac:	1d3b      	adds	r3, r7, #4
 80109ae:	4619      	mov	r1, r3
 80109b0:	4808      	ldr	r0, [pc, #32]	@ (80109d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80109b2:	f000 f938 	bl	8010c26 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f000 f80d 	bl	80109d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80109be:	4805      	ldr	r0, [pc, #20]	@ (80109d4 <HW_IPCC_TRACES_EvtNot+0x30>)
 80109c0:	f000 f8a2 	bl	8010b08 <LST_is_empty>
 80109c4:	4603      	mov	r3, r0
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d0f0      	beq.n	80109ac <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 80109ca:	bf00      	nop
}
 80109cc:	3708      	adds	r7, #8
 80109ce:	46bd      	mov	sp, r7
 80109d0:	bd80      	pop	{r7, pc}
 80109d2:	bf00      	nop
 80109d4:	200300c0 	.word	0x200300c0

080109d8 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80109d8:	b480      	push	{r7}
 80109da:	b083      	sub	sp, #12
 80109dc:	af00      	add	r7, sp, #0
 80109de:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80109e0:	bf00      	nop
 80109e2:	370c      	adds	r7, #12
 80109e4:	46bd      	mov	sp, r7
 80109e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ea:	4770      	bx	lr

080109ec <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	4603      	mov	r3, r0
 80109f4:	6039      	str	r1, [r7, #0]
 80109f6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80109f8:	79fb      	ldrb	r3, [r7, #7]
 80109fa:	2b06      	cmp	r3, #6
 80109fc:	d845      	bhi.n	8010a8a <OutputDbgTrace+0x9e>
 80109fe:	a201      	add	r2, pc, #4	@ (adr r2, 8010a04 <OutputDbgTrace+0x18>)
 8010a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a04:	08010a21 	.word	0x08010a21
 8010a08:	08010a45 	.word	0x08010a45
 8010a0c:	08010a4b 	.word	0x08010a4b
 8010a10:	08010a5f 	.word	0x08010a5f
 8010a14:	08010a6b 	.word	0x08010a6b
 8010a18:	08010a71 	.word	0x08010a71
 8010a1c:	08010a7f 	.word	0x08010a7f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	7a5b      	ldrb	r3, [r3, #9]
 8010a28:	2bff      	cmp	r3, #255	@ 0xff
 8010a2a:	d005      	beq.n	8010a38 <OutputDbgTrace+0x4c>
 8010a2c:	2bff      	cmp	r3, #255	@ 0xff
 8010a2e:	dc05      	bgt.n	8010a3c <OutputDbgTrace+0x50>
 8010a30:	2b0e      	cmp	r3, #14
 8010a32:	d005      	beq.n	8010a40 <OutputDbgTrace+0x54>
 8010a34:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8010a36:	e001      	b.n	8010a3c <OutputDbgTrace+0x50>
          break;
 8010a38:	bf00      	nop
 8010a3a:	e027      	b.n	8010a8c <OutputDbgTrace+0xa0>
          break;
 8010a3c:	bf00      	nop
 8010a3e:	e025      	b.n	8010a8c <OutputDbgTrace+0xa0>
          break;
 8010a40:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8010a42:	e023      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010a44:	683b      	ldr	r3, [r7, #0]
 8010a46:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010a48:	e020      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	7a5b      	ldrb	r3, [r3, #9]
 8010a52:	2b0e      	cmp	r3, #14
 8010a54:	d001      	beq.n	8010a5a <OutputDbgTrace+0x6e>
 8010a56:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010a58:	e000      	b.n	8010a5c <OutputDbgTrace+0x70>
          break;
 8010a5a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010a5c:	e016      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a5e:	683b      	ldr	r3, [r7, #0]
 8010a60:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	7a5b      	ldrb	r3, [r3, #9]
 8010a66:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010a68:	e010      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8010a6e:	e00d      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	7a5b      	ldrb	r3, [r3, #9]
 8010a78:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8010a7a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010a7c:	e006      	b.n	8010a8c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	7a5b      	ldrb	r3, [r3, #9]
 8010a86:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8010a88:	e000      	b.n	8010a8c <OutputDbgTrace+0xa0>

    default:
      break;
 8010a8a:	bf00      	nop
  }

  return;
 8010a8c:	bf00      	nop
}
 8010a8e:	3714      	adds	r7, #20
 8010a90:	46bd      	mov	sp, r7
 8010a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a96:	4770      	bx	lr

08010a98 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b085      	sub	sp, #20
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8010aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8010ae0 <OTP_Read+0x48>)
 8010aa4:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010aa6:	e002      	b.n	8010aae <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	3b08      	subs	r3, #8
 8010aac:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	3307      	adds	r3, #7
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	79fa      	ldrb	r2, [r7, #7]
 8010ab6:	429a      	cmp	r2, r3
 8010ab8:	d003      	beq.n	8010ac2 <OTP_Read+0x2a>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	4a09      	ldr	r2, [pc, #36]	@ (8010ae4 <OTP_Read+0x4c>)
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d1f2      	bne.n	8010aa8 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	3307      	adds	r3, #7
 8010ac6:	781b      	ldrb	r3, [r3, #0]
 8010ac8:	79fa      	ldrb	r2, [r7, #7]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d001      	beq.n	8010ad2 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8010ace:	2300      	movs	r3, #0
 8010ad0:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8010ad2:	68fb      	ldr	r3, [r7, #12]
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3714      	adds	r7, #20
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ade:	4770      	bx	lr
 8010ae0:	1fff73f8 	.word	0x1fff73f8
 8010ae4:	1fff7000 	.word	0x1fff7000

08010ae8 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b083      	sub	sp, #12
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	687a      	ldr	r2, [r7, #4]
 8010af4:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	687a      	ldr	r2, [r7, #4]
 8010afa:	605a      	str	r2, [r3, #4]
}
 8010afc:	bf00      	nop
 8010afe:	370c      	adds	r7, #12
 8010b00:	46bd      	mov	sp, r7
 8010b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b06:	4770      	bx	lr

08010b08 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8010b08:	b480      	push	{r7}
 8010b0a:	b087      	sub	sp, #28
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b10:	f3ef 8310 	mrs	r3, PRIMASK
 8010b14:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b16:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010b18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b1a:	b672      	cpsid	i
}
 8010b1c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	681b      	ldr	r3, [r3, #0]
 8010b22:	687a      	ldr	r2, [r7, #4]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d102      	bne.n	8010b2e <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	75fb      	strb	r3, [r7, #23]
 8010b2c:	e001      	b.n	8010b32 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	75fb      	strb	r3, [r7, #23]
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b36:	68bb      	ldr	r3, [r7, #8]
 8010b38:	f383 8810 	msr	PRIMASK, r3
}
 8010b3c:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8010b3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	371c      	adds	r7, #28
 8010b44:	46bd      	mov	sp, r7
 8010b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4a:	4770      	bx	lr

08010b4c <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8010b4c:	b480      	push	{r7}
 8010b4e:	b087      	sub	sp, #28
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010b56:	f3ef 8310 	mrs	r3, PRIMASK
 8010b5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8010b5c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010b5e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010b60:	b672      	cpsid	i
}
 8010b62:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681a      	ldr	r2, [r3, #0]
 8010b68:	683b      	ldr	r3, [r7, #0]
 8010b6a:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8010b6c:	683b      	ldr	r3, [r7, #0]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	683a      	ldr	r2, [r7, #0]
 8010b76:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	683a      	ldr	r2, [r7, #0]
 8010b7e:	605a      	str	r2, [r3, #4]
 8010b80:	697b      	ldr	r3, [r7, #20]
 8010b82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010b84:	693b      	ldr	r3, [r7, #16]
 8010b86:	f383 8810 	msr	PRIMASK, r3
}
 8010b8a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010b8c:	bf00      	nop
 8010b8e:	371c      	adds	r7, #28
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010ba2:	f3ef 8310 	mrs	r3, PRIMASK
 8010ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8010ba8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010baa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bac:	b672      	cpsid	i
}
 8010bae:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	687a      	ldr	r2, [r7, #4]
 8010bb4:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	685a      	ldr	r2, [r3, #4]
 8010bba:	683b      	ldr	r3, [r7, #0]
 8010bbc:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	683a      	ldr	r2, [r7, #0]
 8010bca:	601a      	str	r2, [r3, #0]
 8010bcc:	697b      	ldr	r3, [r7, #20]
 8010bce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010bd0:	693b      	ldr	r3, [r7, #16]
 8010bd2:	f383 8810 	msr	PRIMASK, r3
}
 8010bd6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010bd8:	bf00      	nop
 8010bda:	371c      	adds	r7, #28
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr

08010be4 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b087      	sub	sp, #28
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010bec:	f3ef 8310 	mrs	r3, PRIMASK
 8010bf0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010bf2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010bf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010bf6:	b672      	cpsid	i
}
 8010bf8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	687a      	ldr	r2, [r7, #4]
 8010c00:	6812      	ldr	r2, [r2, #0]
 8010c02:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	687a      	ldr	r2, [r7, #4]
 8010c0a:	6852      	ldr	r2, [r2, #4]
 8010c0c:	605a      	str	r2, [r3, #4]
 8010c0e:	697b      	ldr	r3, [r7, #20]
 8010c10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	f383 8810 	msr	PRIMASK, r3
}
 8010c18:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010c1a:	bf00      	nop
 8010c1c:	371c      	adds	r7, #28
 8010c1e:	46bd      	mov	sp, r7
 8010c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c24:	4770      	bx	lr

08010c26 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8010c26:	b580      	push	{r7, lr}
 8010c28:	b086      	sub	sp, #24
 8010c2a:	af00      	add	r7, sp, #0
 8010c2c:	6078      	str	r0, [r7, #4]
 8010c2e:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010c30:	f3ef 8310 	mrs	r3, PRIMASK
 8010c34:	60fb      	str	r3, [r7, #12]
  return(result);
 8010c36:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8010c38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8010c3a:	b672      	cpsid	i
}
 8010c3c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	681a      	ldr	r2, [r3, #0]
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7ff ffca 	bl	8010be4 <LST_remove_node>
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	f383 8810 	msr	PRIMASK, r3
}
 8010c5a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8010c5c:	bf00      	nop
 8010c5e:	3718      	adds	r7, #24
 8010c60:	46bd      	mov	sp, r7
 8010c62:	bd80      	pop	{r7, pc}

08010c64 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8010c64:	b480      	push	{r7}
 8010c66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8010c68:	4b03      	ldr	r3, [pc, #12]	@ (8010c78 <LL_FLASH_GetUDN+0x14>)
 8010c6a:	681b      	ldr	r3, [r3, #0]
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	46bd      	mov	sp, r7
 8010c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c74:	4770      	bx	lr
 8010c76:	bf00      	nop
 8010c78:	1fff7580 	.word	0x1fff7580

08010c7c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8010c80:	4b03      	ldr	r3, [pc, #12]	@ (8010c90 <LL_FLASH_GetDeviceID+0x14>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	b2db      	uxtb	r3, r3
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	46bd      	mov	sp, r7
 8010c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c8e:	4770      	bx	lr
 8010c90:	1fff7584 	.word	0x1fff7584

08010c94 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8010c94:	b480      	push	{r7}
 8010c96:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8010c98:	4b03      	ldr	r3, [pc, #12]	@ (8010ca8 <LL_FLASH_GetSTCompanyID+0x14>)
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	0a1b      	lsrs	r3, r3, #8
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr
 8010ca8:	1fff7584 	.word	0x1fff7584

08010cac <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8010cac:	b5b0      	push	{r4, r5, r7, lr}
 8010cae:	b090      	sub	sp, #64	@ 0x40
 8010cb0:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010cb2:	2392      	movs	r3, #146	@ 0x92
 8010cb4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8010cb8:	4b25      	ldr	r3, [pc, #148]	@ (8010d50 <APP_BLE_Init+0xa4>)
 8010cba:	1d3c      	adds	r4, r7, #4
 8010cbc:	461d      	mov	r5, r3
 8010cbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010cc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010cca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8010cce:	c403      	stmia	r4!, {r0, r1}
 8010cd0:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 8010cd2:	f000 f913 	bl	8010efc <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8010cd6:	2101      	movs	r1, #1
 8010cd8:	2002      	movs	r0, #2
 8010cda:	f001 fc27 	bl	801252c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8010cde:	4a1d      	ldr	r2, [pc, #116]	@ (8010d54 <APP_BLE_Init+0xa8>)
 8010ce0:	2100      	movs	r1, #0
 8010ce2:	2002      	movs	r0, #2
 8010ce4:	f001 fd4e 	bl	8012784 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 8010ce8:	1d3b      	adds	r3, r7, #4
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7ff f8c6 	bl	800fe7c <SHCI_C2_BLE_Init>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (status != SHCI_Success)
 8010cf6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d001      	beq.n	8010d02 <APP_BLE_Init+0x56>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 8010cfe:	f7f1 fb83 	bl	8002408 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8010d02:	f000 f911 	bl	8010f28 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8010d06:	f7ff f813 	bl	800fd30 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010d0a:	4b13      	ldr	r3, [pc, #76]	@ (8010d58 <APP_BLE_Init+0xac>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8010d12:	4b11      	ldr	r3, [pc, #68]	@ (8010d58 <APP_BLE_Init+0xac>)
 8010d14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010d18:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */

  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8010d1a:	4a10      	ldr	r2, [pc, #64]	@ (8010d5c <APP_BLE_Init+0xb0>)
 8010d1c:	2100      	movs	r1, #0
 8010d1e:	2001      	movs	r0, #1
 8010d20:	f001 fd30 	bl	8012784 <UTIL_SEQ_RegTask>

  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 8010d24:	2006      	movs	r0, #6
 8010d26:	f7fe fe77 	bl	800fa18 <aci_hal_set_radio_activity_mask>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 8010d30:	f000 facc 	bl	80112cc <Custom_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8010d34:	4b08      	ldr	r3, [pc, #32]	@ (8010d58 <APP_BLE_Init+0xac>)
 8010d36:	2200      	movs	r2, #0
 8010d38:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8010d3a:	4b07      	ldr	r3, [pc, #28]	@ (8010d58 <APP_BLE_Init+0xac>)
 8010d3c:	2200      	movs	r2, #0
 8010d3e:	761a      	strb	r2, [r3, #24]

  /**
   * Start to Advertise to be connected by a Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8010d40:	2001      	movs	r0, #1
 8010d42:	f000 f9a5 	bl	8011090 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 8010d46:	bf00      	nop
}
 8010d48:	3740      	adds	r7, #64	@ 0x40
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	08013464 	.word	0x08013464
 8010d54:	08010099 	.word	0x08010099
 8010d58:	20000480 	.word	0x20000480
 8010d5c:	08011179 	.word	0x08011179

08010d60 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b08a      	sub	sp, #40	@ 0x28
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 8010d68:	2392      	movs	r3, #146	@ 0x92
 8010d6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	3301      	adds	r3, #1
 8010d72:	623b      	str	r3, [r7, #32]

  switch (p_event_pckt->evt)
 8010d74:	6a3b      	ldr	r3, [r7, #32]
 8010d76:	781b      	ldrb	r3, [r3, #0]
 8010d78:	2bff      	cmp	r3, #255	@ 0xff
 8010d7a:	d053      	beq.n	8010e24 <SVCCTL_App_Notification+0xc4>
 8010d7c:	2bff      	cmp	r3, #255	@ 0xff
 8010d7e:	f300 80af 	bgt.w	8010ee0 <SVCCTL_App_Notification+0x180>
 8010d82:	2b05      	cmp	r3, #5
 8010d84:	d002      	beq.n	8010d8c <SVCCTL_App_Notification+0x2c>
 8010d86:	2b3e      	cmp	r3, #62	@ 0x3e
 8010d88:	d020      	beq.n	8010dcc <SVCCTL_App_Notification+0x6c>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8010d8a:	e0a9      	b.n	8010ee0 <SVCCTL_App_Notification+0x180>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8010d8c:	6a3b      	ldr	r3, [r7, #32]
 8010d8e:	3302      	adds	r3, #2
 8010d90:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010d98:	b29a      	uxth	r2, r3
 8010d9a:	4b55      	ldr	r3, [pc, #340]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010d9c:	8adb      	ldrh	r3, [r3, #22]
 8010d9e:	429a      	cmp	r2, r3
 8010da0:	d106      	bne.n	8010db0 <SVCCTL_App_Notification+0x50>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8010da2:	4b53      	ldr	r3, [pc, #332]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010da4:	2200      	movs	r2, #0
 8010da6:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8010da8:	4b51      	ldr	r3, [pc, #324]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010daa:	2200      	movs	r2, #0
 8010dac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
      Adv_Request(APP_BLE_FAST_ADV);
 8010db0:	2001      	movs	r0, #1
 8010db2:	f000 f96d 	bl	8011090 <Adv_Request>
      HandleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8010db6:	4b4f      	ldr	r3, [pc, #316]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010db8:	2201      	movs	r2, #1
 8010dba:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010dbc:	4b4c      	ldr	r3, [pc, #304]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010dbe:	8ada      	ldrh	r2, [r3, #22]
 8010dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010dc2:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&HandleNotification);
 8010dc4:	484b      	ldr	r0, [pc, #300]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010dc6:	f000 fa6d 	bl	80112a4 <Custom_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8010dca:	e08c      	b.n	8010ee6 <SVCCTL_App_Notification+0x186>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8010dcc:	6a3b      	ldr	r3, [r7, #32]
 8010dce:	3302      	adds	r3, #2
 8010dd0:	617b      	str	r3, [r7, #20]
      switch (p_meta_evt->subevent)
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d001      	beq.n	8010dde <SVCCTL_App_Notification+0x7e>
 8010dda:	2b03      	cmp	r3, #3
          break;
 8010ddc:	e021      	b.n	8010e22 <SVCCTL_App_Notification+0xc2>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	3301      	adds	r3, #1
 8010de2:	613b      	str	r3, [r7, #16]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8010de4:	4b42      	ldr	r3, [pc, #264]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010de6:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8010dea:	2b04      	cmp	r3, #4
 8010dec:	d104      	bne.n	8010df8 <SVCCTL_App_Notification+0x98>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8010dee:	4b40      	ldr	r3, [pc, #256]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010df0:	2206      	movs	r2, #6
 8010df2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8010df6:	e003      	b.n	8010e00 <SVCCTL_App_Notification+0xa0>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8010df8:	4b3d      	ldr	r3, [pc, #244]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010dfa:	2205      	movs	r2, #5
 8010dfc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8010e00:	693b      	ldr	r3, [r7, #16]
 8010e02:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010e06:	b29a      	uxth	r2, r3
 8010e08:	4b39      	ldr	r3, [pc, #228]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010e0a:	82da      	strh	r2, [r3, #22]
          HandleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8010e0c:	4b39      	ldr	r3, [pc, #228]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010e0e:	2200      	movs	r2, #0
 8010e10:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8010e12:	4b37      	ldr	r3, [pc, #220]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010e14:	8ada      	ldrh	r2, [r3, #22]
 8010e16:	4b37      	ldr	r3, [pc, #220]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010e18:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&HandleNotification);
 8010e1a:	4836      	ldr	r0, [pc, #216]	@ (8010ef4 <SVCCTL_App_Notification+0x194>)
 8010e1c:	f000 fa42 	bl	80112a4 <Custom_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8010e20:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8010e22:	e060      	b.n	8010ee6 <SVCCTL_App_Notification+0x186>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8010e24:	6a3b      	ldr	r3, [r7, #32]
 8010e26:	3302      	adds	r3, #2
 8010e28:	61fb      	str	r3, [r7, #28]
      switch (p_blecore_evt->ecode)
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	881b      	ldrh	r3, [r3, #0]
 8010e2e:	b29b      	uxth	r3, r3
 8010e30:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8010e34:	4293      	cmp	r3, r2
 8010e36:	d047      	beq.n	8010ec8 <SVCCTL_App_Notification+0x168>
 8010e38:	f640 420e 	movw	r2, #3086	@ 0xc0e
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	dc51      	bgt.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e44:	d046      	beq.n	8010ed4 <SVCCTL_App_Notification+0x174>
 8010e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e4a:	dc4b      	bgt.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e4c:	2b04      	cmp	r3, #4
 8010e4e:	d043      	beq.n	8010ed8 <SVCCTL_App_Notification+0x178>
 8010e50:	2b04      	cmp	r3, #4
 8010e52:	db47      	blt.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e54:	f240 420a 	movw	r2, #1034	@ 0x40a
 8010e58:	4293      	cmp	r3, r2
 8010e5a:	dc43      	bgt.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010e60:	dd40      	ble.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e62:	f2a3 4301 	subw	r3, r3, #1025	@ 0x401
 8010e66:	2b09      	cmp	r3, #9
 8010e68:	d83c      	bhi.n	8010ee4 <SVCCTL_App_Notification+0x184>
 8010e6a:	a201      	add	r2, pc, #4	@ (adr r2, 8010e70 <SVCCTL_App_Notification+0x110>)
 8010e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e70:	08010ec1 	.word	0x08010ec1
 8010e74:	08010e99 	.word	0x08010e99
 8010e78:	08010ee5 	.word	0x08010ee5
 8010e7c:	08010ee5 	.word	0x08010ee5
 8010e80:	08010ee5 	.word	0x08010ee5
 8010e84:	08010ee5 	.word	0x08010ee5
 8010e88:	08010edd 	.word	0x08010edd
 8010e8c:	08010ee5 	.word	0x08010ee5
 8010e90:	08010ead 	.word	0x08010ead
 8010e94:	08010edd 	.word	0x08010edd
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8010e98:	4b15      	ldr	r3, [pc, #84]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010e9a:	8adb      	ldrh	r3, [r3, #22]
 8010e9c:	4916      	ldr	r1, [pc, #88]	@ (8010ef8 <SVCCTL_App_Notification+0x198>)
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f7fd ffbc 	bl	800ee1c <aci_gap_pass_key_resp>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010eaa:	e018      	b.n	8010ede <SVCCTL_App_Notification+0x17e>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8010eac:	4b10      	ldr	r3, [pc, #64]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010eae:	8adb      	ldrh	r3, [r3, #22]
 8010eb0:	2101      	movs	r1, #1
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fe f95c 	bl	800f170 <aci_gap_numeric_comparison_value_confirm_yesno>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010ebe:	e00e      	b.n	8010ede <SVCCTL_App_Notification+0x17e>
          p_pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	3302      	adds	r3, #2
 8010ec4:	61bb      	str	r3, [r7, #24]
          break;
 8010ec6:	e00a      	b.n	8010ede <SVCCTL_App_Notification+0x17e>
          aci_gatt_confirm_indication(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8010ec8:	4b09      	ldr	r3, [pc, #36]	@ (8010ef0 <SVCCTL_App_Notification+0x190>)
 8010eca:	8adb      	ldrh	r3, [r3, #22]
 8010ecc:	4618      	mov	r0, r3
 8010ece:	f7fe fc62 	bl	800f796 <aci_gatt_confirm_indication>
        break;
 8010ed2:	e004      	b.n	8010ede <SVCCTL_App_Notification+0x17e>
          break;
 8010ed4:	bf00      	nop
 8010ed6:	e005      	b.n	8010ee4 <SVCCTL_App_Notification+0x184>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8010ed8:	bf00      	nop
 8010eda:	e003      	b.n	8010ee4 <SVCCTL_App_Notification+0x184>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8010edc:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010ede:	e001      	b.n	8010ee4 <SVCCTL_App_Notification+0x184>
      break;
 8010ee0:	bf00      	nop
 8010ee2:	e000      	b.n	8010ee6 <SVCCTL_App_Notification+0x186>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8010ee4:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8010ee6:	2301      	movs	r3, #1
}
 8010ee8:	4618      	mov	r0, r3
 8010eea:	3728      	adds	r7, #40	@ 0x28
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	20000480 	.word	0x20000480
 8010ef4:	20000504 	.word	0x20000504
 8010ef8:	0001b207 	.word	0x0001b207

08010efc <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8010f02:	4b06      	ldr	r3, [pc, #24]	@ (8010f1c <Ble_Tl_Init+0x20>)
 8010f04:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8010f06:	4b06      	ldr	r3, [pc, #24]	@ (8010f20 <Ble_Tl_Init+0x24>)
 8010f08:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8010f0a:	463b      	mov	r3, r7
 8010f0c:	4619      	mov	r1, r3
 8010f0e:	4805      	ldr	r0, [pc, #20]	@ (8010f24 <Ble_Tl_Init+0x28>)
 8010f10:	f7ff f8a6 	bl	8010060 <hci_init>

  return;
 8010f14:	bf00      	nop
}
 8010f16:	3708      	adds	r7, #8
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}
 8010f1c:	200300d8 	.word	0x200300d8
 8010f20:	08011229 	.word	0x08011229
 8010f24:	080111f1 	.word	0x080111f1

08010f28 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8010f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f2a:	b08d      	sub	sp, #52	@ 0x34
 8010f2c:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8010f2e:	2300      	movs	r3, #0
 8010f30:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8010f32:	2392      	movs	r3, #146	@ 0x92
 8010f34:	75fb      	strb	r3, [r7, #23]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8010f36:	f7fe fdc3 	bl	800fac0 <hci_reset>
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8010f3e:	f000 f8d7 	bl	80110f0 <BleGetBdAddress>
 8010f42:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8010f44:	693a      	ldr	r2, [r7, #16]
 8010f46:	2106      	movs	r1, #6
 8010f48:	2000      	movs	r0, #0
 8010f4a:	f7fe fc79 	bl	800f840 <aci_hal_write_config_data>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	75fb      	strb	r3, [r7, #23]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8010f52:	4a4a      	ldr	r2, [pc, #296]	@ (801107c <Ble_Hci_Gap_Gatt_Init+0x154>)
 8010f54:	2110      	movs	r1, #16
 8010f56:	2018      	movs	r0, #24
 8010f58:	f7fe fc72 	bl	800f840 <aci_hal_write_config_data>
 8010f5c:	4603      	mov	r3, r0
 8010f5e:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8010f60:	4a47      	ldr	r2, [pc, #284]	@ (8011080 <Ble_Hci_Gap_Gatt_Init+0x158>)
 8010f62:	2110      	movs	r1, #16
 8010f64:	2008      	movs	r0, #8
 8010f66:	f7fe fc6b 	bl	800f840 <aci_hal_write_config_data>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8010f6e:	211f      	movs	r1, #31
 8010f70:	2001      	movs	r0, #1
 8010f72:	f7fe fcea 	bl	800f94a <aci_hal_set_tx_power_level>
 8010f76:	4603      	mov	r3, r0
 8010f78:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8010f7a:	f7fe f960 	bl	800f23e <aci_gatt_init>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8010f86:	7bfb      	ldrb	r3, [r7, #15]
 8010f88:	f043 0301 	orr.w	r3, r3, #1
 8010f8c:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8010f8e:	7bfb      	ldrb	r3, [r7, #15]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d01f      	beq.n	8010fd4 <Ble_Hci_Gap_Gatt_Init+0xac>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 8010f94:	4b3b      	ldr	r3, [pc, #236]	@ (8011084 <Ble_Hci_Gap_Gatt_Init+0x15c>)
 8010f96:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8010f98:	1dba      	adds	r2, r7, #6
 8010f9a:	7bf8      	ldrb	r0, [r7, #15]
 8010f9c:	1cbb      	adds	r3, r7, #2
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	1d3b      	adds	r3, r7, #4
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	4613      	mov	r3, r2
 8010fa6:	2208      	movs	r2, #8
 8010fa8:	2100      	movs	r1, #0
 8010faa:	f7fd ff9e 	bl	800eeea <aci_gap_init>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	75fb      	strb	r3, [r7, #23]
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8010fb2:	88fc      	ldrh	r4, [r7, #6]
 8010fb4:	88bd      	ldrh	r5, [r7, #4]
 8010fb6:	68b8      	ldr	r0, [r7, #8]
 8010fb8:	f7ef f8e2 	bl	8000180 <strlen>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	b2da      	uxtb	r2, r3
 8010fc0:	68bb      	ldr	r3, [r7, #8]
 8010fc2:	9300      	str	r3, [sp, #0]
 8010fc4:	4613      	mov	r3, r2
 8010fc6:	2200      	movs	r2, #0
 8010fc8:	4629      	mov	r1, r5
 8010fca:	4620      	mov	r0, r4
 8010fcc:	f7fe fb3a 	bl	800f644 <aci_gatt_update_char_value>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8010fd4:	88f8      	ldrh	r0, [r7, #6]
 8010fd6:	8879      	ldrh	r1, [r7, #2]
 8010fd8:	463b      	mov	r3, r7
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	2302      	movs	r3, #2
 8010fde:	2200      	movs	r2, #0
 8010fe0:	f7fe fb30 	bl	800f644 <aci_gatt_update_char_value>
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8010fe8:	2202      	movs	r2, #2
 8010fea:	2102      	movs	r1, #2
 8010fec:	2000      	movs	r0, #0
 8010fee:	f7fe fd8b 	bl	800fb08 <hci_le_set_default_phy>
 8010ff2:	4603      	mov	r3, r0
 8010ff4:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8010ff6:	4b24      	ldr	r3, [pc, #144]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8010ffc:	4b22      	ldr	r3, [pc, #136]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8010ffe:	781b      	ldrb	r3, [r3, #0]
 8011000:	4618      	mov	r0, r3
 8011002:	f7fd fdf3 	bl	800ebec <aci_gap_set_io_capability>
 8011006:	4603      	mov	r3, r0
 8011008:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 801100a:	4b1f      	ldr	r3, [pc, #124]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801100c:	2201      	movs	r2, #1
 801100e:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8011010:	4b1d      	ldr	r3, [pc, #116]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011012:	2208      	movs	r2, #8
 8011014:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8011016:	4b1c      	ldr	r3, [pc, #112]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011018:	2210      	movs	r2, #16
 801101a:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 801101c:	4b1a      	ldr	r3, [pc, #104]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801101e:	2200      	movs	r2, #0
 8011020:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8011022:	4b19      	ldr	r3, [pc, #100]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011024:	4a19      	ldr	r2, [pc, #100]	@ (801108c <Ble_Hci_Gap_Gatt_Init+0x164>)
 8011026:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8011028:	4b17      	ldr	r3, [pc, #92]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801102a:	2200      	movs	r2, #0
 801102c:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 801102e:	4b16      	ldr	r3, [pc, #88]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011030:	789c      	ldrb	r4, [r3, #2]
 8011032:	4b15      	ldr	r3, [pc, #84]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011034:	785d      	ldrb	r5, [r3, #1]
 8011036:	4b14      	ldr	r3, [pc, #80]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011038:	791b      	ldrb	r3, [r3, #4]
 801103a:	4a13      	ldr	r2, [pc, #76]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 801103c:	7952      	ldrb	r2, [r2, #5]
 801103e:	4912      	ldr	r1, [pc, #72]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011040:	78c9      	ldrb	r1, [r1, #3]
 8011042:	4811      	ldr	r0, [pc, #68]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011044:	6880      	ldr	r0, [r0, #8]
 8011046:	2600      	movs	r6, #0
 8011048:	9604      	str	r6, [sp, #16]
 801104a:	9003      	str	r0, [sp, #12]
 801104c:	9102      	str	r1, [sp, #8]
 801104e:	9201      	str	r2, [sp, #4]
 8011050:	9300      	str	r3, [sp, #0]
 8011052:	2300      	movs	r3, #0
 8011054:	2201      	movs	r2, #1
 8011056:	4629      	mov	r1, r5
 8011058:	4620      	mov	r0, r4
 801105a:	f7fd fe1b 	bl	800ec94 <aci_gap_set_authentication_requirement>
 801105e:	4603      	mov	r3, r0
 8011060:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8011062:	4b09      	ldr	r3, [pc, #36]	@ (8011088 <Ble_Hci_Gap_Gatt_Init+0x160>)
 8011064:	789b      	ldrb	r3, [r3, #2]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d003      	beq.n	8011072 <Ble_Hci_Gap_Gatt_Init+0x14a>
  {
    ret = aci_gap_configure_whitelist();
 801106a:	f7fe f85d 	bl	800f128 <aci_gap_configure_filter_accept_list>
 801106e:	4603      	mov	r3, r0
 8011070:	75fb      	strb	r3, [r7, #23]
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
}
 8011072:	bf00      	nop
 8011074:	371c      	adds	r7, #28
 8011076:	46bd      	mov	sp, r7
 8011078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801107a:	bf00      	nop
 801107c:	080136f4 	.word	0x080136f4
 8011080:	08013704 	.word	0x08013704
 8011084:	080134a0 	.word	0x080134a0
 8011088:	20000480 	.word	0x20000480
 801108c:	0001b207 	.word	0x0001b207

08011090 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b08c      	sub	sp, #48	@ 0x30
 8011094:	af08      	add	r7, sp, #32
 8011096:	4603      	mov	r3, r0
 8011098:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 801109a:	2392      	movs	r3, #146	@ 0x92
 801109c:	73fb      	strb	r3, [r7, #15]

  BleApplicationContext.Device_Connection_Status = NewStatus;
 801109e:	4a12      	ldr	r2, [pc, #72]	@ (80110e8 <Adv_Request+0x58>)
 80110a0:	79fb      	ldrb	r3, [r7, #7]
 80110a2:	f882 3080 	strb.w	r3, [r2, #128]	@ 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_TYPE,
 80110a6:	2300      	movs	r3, #0
 80110a8:	9306      	str	r3, [sp, #24]
 80110aa:	2300      	movs	r3, #0
 80110ac:	9305      	str	r3, [sp, #20]
 80110ae:	2300      	movs	r3, #0
 80110b0:	9304      	str	r3, [sp, #16]
 80110b2:	2300      	movs	r3, #0
 80110b4:	9303      	str	r3, [sp, #12]
 80110b6:	2300      	movs	r3, #0
 80110b8:	9302      	str	r3, [sp, #8]
 80110ba:	2300      	movs	r3, #0
 80110bc:	9301      	str	r3, [sp, #4]
 80110be:	2300      	movs	r3, #0
 80110c0:	9300      	str	r3, [sp, #0]
 80110c2:	2300      	movs	r3, #0
 80110c4:	22a0      	movs	r2, #160	@ 0xa0
 80110c6:	2180      	movs	r1, #128	@ 0x80
 80110c8:	2000      	movs	r0, #0
 80110ca:	f7fd fc95 	bl	800e9f8 <aci_gap_set_discoverable>
 80110ce:	4603      	mov	r3, r0
 80110d0:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN Adv_Request_1*/

/* USER CODE END Adv_Request_1*/

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_AdvData), (uint8_t*) a_AdvData);
 80110d2:	4906      	ldr	r1, [pc, #24]	@ (80110ec <Adv_Request+0x5c>)
 80110d4:	200b      	movs	r0, #11
 80110d6:	f7fd ffb5 	bl	800f044 <aci_gap_update_adv_data>
 80110da:	4603      	mov	r3, r0
 80110dc:	73fb      	strb	r3, [r7, #15]
  else
  {
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
  }

  return;
 80110de:	bf00      	nop
}
 80110e0:	3710      	adds	r7, #16
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd80      	pop	{r7, pc}
 80110e6:	bf00      	nop
 80110e8:	20000480 	.word	0x20000480
 80110ec:	200000b8 	.word	0x200000b8

080110f0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b086      	sub	sp, #24
 80110f4:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80110f6:	f7ff fdb5 	bl	8010c64 <LL_FLASH_GetUDN>
 80110fa:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80110fc:	693b      	ldr	r3, [r7, #16]
 80110fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8011102:	d023      	beq.n	801114c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8011104:	f7ff fdc6 	bl	8010c94 <LL_FLASH_GetSTCompanyID>
 8011108:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 801110a:	f7ff fdb7 	bl	8010c7c <LL_FLASH_GetDeviceID>
 801110e:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	b2da      	uxtb	r2, r3
 8011114:	4b16      	ldr	r3, [pc, #88]	@ (8011170 <BleGetBdAddress+0x80>)
 8011116:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	0a1b      	lsrs	r3, r3, #8
 801111c:	b2da      	uxtb	r2, r3
 801111e:	4b14      	ldr	r3, [pc, #80]	@ (8011170 <BleGetBdAddress+0x80>)
 8011120:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	b2da      	uxtb	r2, r3
 8011126:	4b12      	ldr	r3, [pc, #72]	@ (8011170 <BleGetBdAddress+0x80>)
 8011128:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	b2da      	uxtb	r2, r3
 801112e:	4b10      	ldr	r3, [pc, #64]	@ (8011170 <BleGetBdAddress+0x80>)
 8011130:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	0a1b      	lsrs	r3, r3, #8
 8011136:	b2da      	uxtb	r2, r3
 8011138:	4b0d      	ldr	r3, [pc, #52]	@ (8011170 <BleGetBdAddress+0x80>)
 801113a:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 801113c:	68bb      	ldr	r3, [r7, #8]
 801113e:	0c1b      	lsrs	r3, r3, #16
 8011140:	b2da      	uxtb	r2, r3
 8011142:	4b0b      	ldr	r3, [pc, #44]	@ (8011170 <BleGetBdAddress+0x80>)
 8011144:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8011146:	4b0a      	ldr	r3, [pc, #40]	@ (8011170 <BleGetBdAddress+0x80>)
 8011148:	617b      	str	r3, [r7, #20]
 801114a:	e00b      	b.n	8011164 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 801114c:	2000      	movs	r0, #0
 801114e:	f7ff fca3 	bl	8010a98 <OTP_Read>
 8011152:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d002      	beq.n	8011160 <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	617b      	str	r3, [r7, #20]
 801115e:	e001      	b.n	8011164 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 8011160:	4b04      	ldr	r3, [pc, #16]	@ (8011174 <BleGetBdAddress+0x84>)
 8011162:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8011164:	697b      	ldr	r3, [r7, #20]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3718      	adds	r7, #24
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	20000478 	.word	0x20000478
 8011174:	080136ec 	.word	0x080136ec

08011178 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b082      	sub	sp, #8
 801117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */

  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 801117e:	4b0a      	ldr	r3, [pc, #40]	@ (80111a8 <Adv_Cancel+0x30>)
 8011180:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011184:	2b05      	cmp	r3, #5
 8011186:	d00a      	beq.n	801119e <Adv_Cancel+0x26>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011188:	2392      	movs	r3, #146	@ 0x92
 801118a:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 801118c:	f7fd fc10 	bl	800e9b0 <aci_gap_set_non_discoverable>
 8011190:	4603      	mov	r3, r0
 8011192:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8011194:	4b04      	ldr	r3, [pc, #16]	@ (80111a8 <Adv_Cancel+0x30>)
 8011196:	2200      	movs	r2, #0
 8011198:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 801119c:	bf00      	nop
 801119e:	bf00      	nop
}
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
 80111a6:	bf00      	nop
 80111a8:	20000480 	.word	0x20000480

080111ac <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b082      	sub	sp, #8
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80111b4:	2100      	movs	r1, #0
 80111b6:	2002      	movs	r0, #2
 80111b8:	f001 fb06 	bl	80127c8 <UTIL_SEQ_SetTask>

  return;
 80111bc:	bf00      	nop
}
 80111be:	3708      	adds	r7, #8
 80111c0:	46bd      	mov	sp, r7
 80111c2:	bd80      	pop	{r7, pc}

080111c4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b082      	sub	sp, #8
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80111cc:	2001      	movs	r0, #1
 80111ce:	f001 fb67 	bl	80128a0 <UTIL_SEQ_SetEvt>

  return;
 80111d2:	bf00      	nop
}
 80111d4:	3708      	adds	r7, #8
 80111d6:	46bd      	mov	sp, r7
 80111d8:	bd80      	pop	{r7, pc}

080111da <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80111da:	b580      	push	{r7, lr}
 80111dc:	b082      	sub	sp, #8
 80111de:	af00      	add	r7, sp, #0
 80111e0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80111e2:	2001      	movs	r0, #1
 80111e4:	f001 fb7c 	bl	80128e0 <UTIL_SEQ_WaitEvt>

  return;
 80111e8:	bf00      	nop
}
 80111ea:	3708      	adds	r7, #8
 80111ec:	46bd      	mov	sp, r7
 80111ee:	bd80      	pop	{r7, pc}

080111f0 <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80111f0:	b580      	push	{r7, lr}
 80111f2:	b084      	sub	sp, #16
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	3308      	adds	r3, #8
 8011202:	4618      	mov	r0, r3
 8011204:	f7fe fde6 	bl	800fdd4 <SVCCTL_UserEvtRx>
 8011208:	4603      	mov	r3, r0
 801120a:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 801120c:	7afb      	ldrb	r3, [r7, #11]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d003      	beq.n	801121a <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2201      	movs	r2, #1
 8011216:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8011218:	e003      	b.n	8011222 <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	2200      	movs	r2, #0
 801121e:	701a      	strb	r2, [r3, #0]
  return;
 8011220:	bf00      	nop
}
 8011222:	3710      	adds	r7, #16
 8011224:	46bd      	mov	sp, r7
 8011226:	bd80      	pop	{r7, pc}

08011228 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8011228:	b580      	push	{r7, lr}
 801122a:	b084      	sub	sp, #16
 801122c:	af00      	add	r7, sp, #0
 801122e:	4603      	mov	r3, r0
 8011230:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 8011232:	79fb      	ldrb	r3, [r7, #7]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <BLE_StatusNot+0x16>
 8011238:	2b01      	cmp	r3, #1
 801123a:	d006      	beq.n	801124a <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 801123c:	e00b      	b.n	8011256 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801123e:	2303      	movs	r3, #3
 8011240:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8011242:	68f8      	ldr	r0, [r7, #12]
 8011244:	f001 faec 	bl	8012820 <UTIL_SEQ_PauseTask>
      break;
 8011248:	e005      	b.n	8011256 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 801124a:	2303      	movs	r3, #3
 801124c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 801124e:	68f8      	ldr	r0, [r7, #12]
 8011250:	f001 fb06 	bl	8012860 <UTIL_SEQ_ResumeTask>
      break;
 8011254:	bf00      	nop
  }

  return;
 8011256:	bf00      	nop
}
 8011258:	3710      	adds	r7, #16
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
	...

08011260 <Custom_STM_App_Notification>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void Custom_STM_App_Notification(Custom_STM_App_Notification_evt_t *pNotification)
{
 8011260:	b480      	push	{r7}
 8011262:	b083      	sub	sp, #12
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_1 */

  /* USER CODE END CUSTOM_STM_App_Notification_1 */
  switch (pNotification->Custom_Evt_Opcode)
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	781b      	ldrb	r3, [r3, #0]
 801126c:	2b06      	cmp	r3, #6
 801126e:	d811      	bhi.n	8011294 <Custom_STM_App_Notification+0x34>
 8011270:	a201      	add	r2, pc, #4	@ (adr r2, 8011278 <Custom_STM_App_Notification+0x18>)
 8011272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011276:	bf00      	nop
 8011278:	08011295 	.word	0x08011295
 801127c:	08011295 	.word	0x08011295
 8011280:	08011295 	.word	0x08011295
 8011284:	08011295 	.word	0x08011295
 8011288:	08011295 	.word	0x08011295
 801128c:	08011295 	.word	0x08011295
 8011290:	08011295 	.word	0x08011295

    default:
      /* USER CODE BEGIN CUSTOM_STM_App_Notification_default */

      /* USER CODE END CUSTOM_STM_App_Notification_default */
      break;
 8011294:	bf00      	nop
  }
  /* USER CODE BEGIN CUSTOM_STM_App_Notification_2 */

  /* USER CODE END CUSTOM_STM_App_Notification_2 */
  return;
 8011296:	bf00      	nop
}
 8011298:	370c      	adds	r7, #12
 801129a:	46bd      	mov	sp, r7
 801129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a0:	4770      	bx	lr
 80112a2:	bf00      	nop

080112a4 <Custom_APP_Notification>:

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b083      	sub	sp, #12
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CUSTOM_APP_Notification_1 */

  /* USER CODE END CUSTOM_APP_Notification_1 */

  switch (pNotification->Custom_Evt_Opcode)
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	781b      	ldrb	r3, [r3, #0]
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d002      	beq.n	80112ba <Custom_APP_Notification+0x16>
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d002      	beq.n	80112be <Custom_APP_Notification+0x1a>

    default:
      /* USER CODE BEGIN CUSTOM_APP_Notification_default */

      /* USER CODE END CUSTOM_APP_Notification_default */
      break;
 80112b8:	e002      	b.n	80112c0 <Custom_APP_Notification+0x1c>
      break;
 80112ba:	bf00      	nop
 80112bc:	e000      	b.n	80112c0 <Custom_APP_Notification+0x1c>
      break;
 80112be:	bf00      	nop

  /* USER CODE BEGIN CUSTOM_APP_Notification_2 */

  /* USER CODE END CUSTOM_APP_Notification_2 */

  return;
 80112c0:	bf00      	nop
}
 80112c2:	370c      	adds	r7, #12
 80112c4:	46bd      	mov	sp, r7
 80112c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ca:	4770      	bx	lr

080112cc <Custom_APP_Init>:

void Custom_APP_Init(void)
{
 80112cc:	b480      	push	{r7}
 80112ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CUSTOM_APP_Init */

  /* USER CODE END CUSTOM_APP_Init */
  return;
 80112d0:	bf00      	nop
}
 80112d2:	46bd      	mov	sp, r7
 80112d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d8:	4770      	bx	lr
	...

080112dc <Custom_STM_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b08c      	sub	sp, #48	@ 0x30
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	6078      	str	r0, [r7, #4]
  Custom_STM_App_Notification_evt_t     Notification;
  /* USER CODE BEGIN Custom_STM_Event_Handler_1 */

  /* USER CODE END Custom_STM_Event_Handler_1 */

  return_value = SVCCTL_EvtNotAck;
 80112e4:	2300      	movs	r3, #0
 80112e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3301      	adds	r3, #1
 80112ee:	62bb      	str	r3, [r7, #40]	@ 0x28

  switch (event_pckt->evt)
 80112f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2bff      	cmp	r3, #255	@ 0xff
 80112f6:	f040 80a2 	bne.w	801143e <Custom_STM_Event_Handler+0x162>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 80112fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fc:	3302      	adds	r3, #2
 80112fe:	627b      	str	r3, [r7, #36]	@ 0x24
      switch (blecore_evt->ecode)
 8011300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011302:	881b      	ldrh	r3, [r3, #0]
 8011304:	b29b      	uxth	r3, r3
 8011306:	f6a3 4301 	subw	r3, r3, #3073	@ 0xc01
 801130a:	2b1a      	cmp	r3, #26
 801130c:	f200 8093 	bhi.w	8011436 <Custom_STM_Event_Handler+0x15a>
 8011310:	a201      	add	r2, pc, #4	@ (adr r2, 8011318 <Custom_STM_Event_Handler+0x3c>)
 8011312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011316:	bf00      	nop
 8011318:	08011385 	.word	0x08011385
 801131c:	08011437 	.word	0x08011437
 8011320:	08011437 	.word	0x08011437
 8011324:	08011437 	.word	0x08011437
 8011328:	08011437 	.word	0x08011437
 801132c:	08011437 	.word	0x08011437
 8011330:	08011437 	.word	0x08011437
 8011334:	08011437 	.word	0x08011437
 8011338:	08011437 	.word	0x08011437
 801133c:	08011437 	.word	0x08011437
 8011340:	08011437 	.word	0x08011437
 8011344:	08011437 	.word	0x08011437
 8011348:	08011437 	.word	0x08011437
 801134c:	08011437 	.word	0x08011437
 8011350:	08011437 	.word	0x08011437
 8011354:	08011437 	.word	0x08011437
 8011358:	08011437 	.word	0x08011437
 801135c:	08011437 	.word	0x08011437
 8011360:	08011437 	.word	0x08011437
 8011364:	08011437 	.word	0x08011437
 8011368:	08011437 	.word	0x08011437
 801136c:	08011437 	.word	0x08011437
 8011370:	08011437 	.word	0x08011437
 8011374:	08011437 	.word	0x08011437
 8011378:	08011437 	.word	0x08011437
 801137c:	08011437 	.word	0x08011437
 8011380:	08011419 	.word	0x08011419
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_BEGIN */
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 8011384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011386:	3302      	adds	r3, #2
 8011388:	61fb      	str	r3, [r7, #28]
          if (attribute_modified->Attr_Handle == (CustomContext.CustomXHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 801138a:	69fb      	ldr	r3, [r7, #28]
 801138c:	885b      	ldrh	r3, [r3, #2]
 801138e:	b29b      	uxth	r3, r3
 8011390:	461a      	mov	r2, r3
 8011392:	4b2e      	ldr	r3, [pc, #184]	@ (801144c <Custom_STM_Event_Handler+0x170>)
 8011394:	885b      	ldrh	r3, [r3, #2]
 8011396:	3302      	adds	r3, #2
 8011398:	429a      	cmp	r2, r3
 801139a:	d119      	bne.n	80113d0 <Custom_STM_Event_Handler+0xf4>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 801139c:	2301      	movs	r3, #1
 801139e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_1 */
            switch (attribute_modified->Attr_Data[0])
 80113a2:	69fb      	ldr	r3, [r7, #28]
 80113a4:	7a1b      	ldrb	r3, [r3, #8]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d002      	beq.n	80113b0 <Custom_STM_Event_Handler+0xd4>
 80113aa:	2b01      	cmp	r3, #1
 80113ac:	d008      	beq.n	80113c0 <Custom_STM_Event_Handler+0xe4>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_1_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_1_default */
              break;
 80113ae:	e032      	b.n	8011416 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_X_NOTIFY_DISABLED_EVT;
 80113b0:	2302      	movs	r3, #2
 80113b2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80113b4:	f107 0308 	add.w	r3, r7, #8
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7ff ff51 	bl	8011260 <Custom_STM_App_Notification>
                break;
 80113be:	e02a      	b.n	8011416 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_X_NOTIFY_ENABLED_EVT;
 80113c0:	2301      	movs	r3, #1
 80113c2:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80113c4:	f107 0308 	add.w	r3, r7, #8
 80113c8:	4618      	mov	r0, r3
 80113ca:	f7ff ff49 	bl	8011260 <Custom_STM_App_Notification>
                break;
 80113ce:	e022      	b.n	8011416 <Custom_STM_Event_Handler+0x13a>
            }
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomXHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          else if (attribute_modified->Attr_Handle == (CustomContext.CustomYHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))
 80113d0:	69fb      	ldr	r3, [r7, #28]
 80113d2:	885b      	ldrh	r3, [r3, #2]
 80113d4:	b29b      	uxth	r3, r3
 80113d6:	461a      	mov	r2, r3
 80113d8:	4b1c      	ldr	r3, [pc, #112]	@ (801144c <Custom_STM_Event_Handler+0x170>)
 80113da:	889b      	ldrh	r3, [r3, #4]
 80113dc:	3302      	adds	r3, #2
 80113de:	429a      	cmp	r2, r3
 80113e0:	d12b      	bne.n	801143a <Custom_STM_Event_Handler+0x15e>
          {
            return_value = SVCCTL_EvtAckFlowEnable;
 80113e2:	2301      	movs	r3, #1
 80113e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2 */

            /* USER CODE END CUSTOM_STM_Service_1_Char_2 */
            switch (attribute_modified->Attr_Data[0])
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	7a1b      	ldrb	r3, [r3, #8]
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d002      	beq.n	80113f6 <Custom_STM_Event_Handler+0x11a>
 80113f0:	2b01      	cmp	r3, #1
 80113f2:	d008      	beq.n	8011406 <Custom_STM_Event_Handler+0x12a>

              default:
                /* USER CODE BEGIN CUSTOM_STM_Service_1_Char_2_default */

                /* USER CODE END CUSTOM_STM_Service_1_Char_2_default */
              break;
 80113f4:	e00f      	b.n	8011416 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_Y_NOTIFY_DISABLED_EVT;
 80113f6:	2305      	movs	r3, #5
 80113f8:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 80113fa:	f107 0308 	add.w	r3, r7, #8
 80113fe:	4618      	mov	r0, r3
 8011400:	f7ff ff2e 	bl	8011260 <Custom_STM_App_Notification>
                break;
 8011404:	e007      	b.n	8011416 <Custom_STM_Event_Handler+0x13a>
                Notification.Custom_Evt_Opcode = CUSTOM_STM_Y_NOTIFY_ENABLED_EVT;
 8011406:	2304      	movs	r3, #4
 8011408:	723b      	strb	r3, [r7, #8]
                Custom_STM_App_Notification(&Notification);
 801140a:	f107 0308 	add.w	r3, r7, #8
 801140e:	4618      	mov	r0, r3
 8011410:	f7ff ff26 	bl	8011260 <Custom_STM_App_Notification>
                break;
 8011414:	bf00      	nop
          }  /* if (attribute_modified->Attr_Handle == (CustomContext.CustomYHdle + CHARACTERISTIC_DESCRIPTOR_ATTRIBUTE_OFFSET))*/

          /* USER CODE BEGIN EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */

          /* USER CODE END EVT_BLUE_GATT_ATTRIBUTE_MODIFIED_END */
          break;
 8011416:	e010      	b.n	801143a <Custom_STM_Event_Handler+0x15e>
		case ACI_GATT_NOTIFICATION_COMPLETE_VSEVT_CODE:
        {
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_BEGIN */
          notification_complete = (aci_gatt_notification_complete_event_rp0*)blecore_evt->data;
 8011418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801141a:	3302      	adds	r3, #2
 801141c:	623b      	str	r3, [r7, #32]
          Notification.Custom_Evt_Opcode = CUSTOM_STM_NOTIFICATION_COMPLETE_EVT;
 801141e:	2306      	movs	r3, #6
 8011420:	723b      	strb	r3, [r7, #8]
          Notification.AttrHandle = notification_complete->Attr_Handle;
 8011422:	6a3b      	ldr	r3, [r7, #32]
 8011424:	881b      	ldrh	r3, [r3, #0]
 8011426:	b29b      	uxth	r3, r3
 8011428:	833b      	strh	r3, [r7, #24]
          Custom_STM_App_Notification(&Notification);
 801142a:	f107 0308 	add.w	r3, r7, #8
 801142e:	4618      	mov	r0, r3
 8011430:	f7ff ff16 	bl	8011260 <Custom_STM_App_Notification>
          /* USER CODE BEGIN EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */

          /* USER CODE END EVT_BLUE_GATT_NOTIFICATION_COMPLETE_END */
          break;
 8011434:	e002      	b.n	801143c <Custom_STM_Event_Handler+0x160>
        /* USER CODE END BLECORE_EVT */
        default:
          /* USER CODE BEGIN EVT_DEFAULT */

          /* USER CODE END EVT_DEFAULT */
          break;
 8011436:	bf00      	nop
 8011438:	e002      	b.n	8011440 <Custom_STM_Event_Handler+0x164>
          break;
 801143a:	bf00      	nop
      }
      /* USER CODE BEGIN EVT_VENDOR*/

      /* USER CODE END EVT_VENDOR*/
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 801143c:	e000      	b.n	8011440 <Custom_STM_Event_Handler+0x164>

    default:
      /* USER CODE BEGIN EVENT_PCKT*/

      /* USER CODE END EVENT_PCKT*/
      break;
 801143e:	bf00      	nop

  /* USER CODE BEGIN Custom_STM_Event_Handler_2 */

  /* USER CODE END Custom_STM_Event_Handler_2 */

  return(return_value);
 8011440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}/* end Custom_STM_Event_Handler */
 8011444:	4618      	mov	r0, r3
 8011446:	3730      	adds	r7, #48	@ 0x30
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	20000508 	.word	0x20000508

08011450 <SVCCTL_InitCustomSvc>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b08c      	sub	sp, #48	@ 0x30
 8011454:	af06      	add	r7, sp, #24

  Char_UUID_t  uuid;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8011456:	2392      	movs	r3, #146	@ 0x92
 8011458:	75fb      	strb	r3, [r7, #23]
  /* USER CODE END SVCCTL_InitCustomSvc_1 */

  /**
   *  Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 801145a:	4851      	ldr	r0, [pc, #324]	@ (80115a0 <SVCCTL_InitCustomSvc+0x150>)
 801145c:	f7fe fca0 	bl	800fda0 <SVCCTL_RegisterSvcHandler>
   *                              = 7
   *
   * This value doesn't take into account number of descriptors manually added
   * In case of descriptors added, please update the max_attr_record value accordingly in the next SVCCTL_InitService User Section
   */
  max_attr_record = 7;
 8011460:	2307      	movs	r3, #7
 8011462:	75bb      	strb	r3, [r7, #22]
  /* USER CODE BEGIN SVCCTL_InitService */
  /* max_attr_record to be updated if descriptors have been added */

  /* USER CODE END SVCCTL_InitService */

  COPY_SCORE_UUID(uuid.Char_UUID_128);
 8011464:	238f      	movs	r3, #143	@ 0x8f
 8011466:	713b      	strb	r3, [r7, #4]
 8011468:	23e5      	movs	r3, #229	@ 0xe5
 801146a:	717b      	strb	r3, [r7, #5]
 801146c:	23b3      	movs	r3, #179	@ 0xb3
 801146e:	71bb      	strb	r3, [r7, #6]
 8011470:	23d5      	movs	r3, #213	@ 0xd5
 8011472:	71fb      	strb	r3, [r7, #7]
 8011474:	232e      	movs	r3, #46	@ 0x2e
 8011476:	723b      	strb	r3, [r7, #8]
 8011478:	237f      	movs	r3, #127	@ 0x7f
 801147a:	727b      	strb	r3, [r7, #9]
 801147c:	234a      	movs	r3, #74	@ 0x4a
 801147e:	72bb      	strb	r3, [r7, #10]
 8011480:	2398      	movs	r3, #152	@ 0x98
 8011482:	72fb      	strb	r3, [r7, #11]
 8011484:	232a      	movs	r3, #42	@ 0x2a
 8011486:	733b      	strb	r3, [r7, #12]
 8011488:	2348      	movs	r3, #72	@ 0x48
 801148a:	737b      	strb	r3, [r7, #13]
 801148c:	237a      	movs	r3, #122	@ 0x7a
 801148e:	73bb      	strb	r3, [r7, #14]
 8011490:	23cc      	movs	r3, #204	@ 0xcc
 8011492:	73fb      	strb	r3, [r7, #15]
 8011494:	2310      	movs	r3, #16
 8011496:	743b      	strb	r3, [r7, #16]
 8011498:	2300      	movs	r3, #0
 801149a:	747b      	strb	r3, [r7, #17]
 801149c:	2300      	movs	r3, #0
 801149e:	74bb      	strb	r3, [r7, #18]
 80114a0:	2300      	movs	r3, #0
 80114a2:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_service(UUID_TYPE_128,
 80114a4:	7dbb      	ldrb	r3, [r7, #22]
 80114a6:	1d39      	adds	r1, r7, #4
 80114a8:	4a3e      	ldr	r2, [pc, #248]	@ (80115a4 <SVCCTL_InitCustomSvc+0x154>)
 80114aa:	9200      	str	r2, [sp, #0]
 80114ac:	2201      	movs	r2, #1
 80114ae:	2002      	movs	r0, #2
 80114b0:	f7fd feea 	bl	800f288 <aci_gatt_add_service>
 80114b4:	4603      	mov	r3, r0
 80114b6:	75fb      	strb	r3, [r7, #23]
  }

  /**
   *  X_position
   */
  COPY_X_POSITION_UUID(uuid.Char_UUID_128);
 80114b8:	2319      	movs	r3, #25
 80114ba:	713b      	strb	r3, [r7, #4]
 80114bc:	23ed      	movs	r3, #237	@ 0xed
 80114be:	717b      	strb	r3, [r7, #5]
 80114c0:	2382      	movs	r3, #130	@ 0x82
 80114c2:	71bb      	strb	r3, [r7, #6]
 80114c4:	23ae      	movs	r3, #174	@ 0xae
 80114c6:	71fb      	strb	r3, [r7, #7]
 80114c8:	23ed      	movs	r3, #237	@ 0xed
 80114ca:	723b      	strb	r3, [r7, #8]
 80114cc:	2321      	movs	r3, #33	@ 0x21
 80114ce:	727b      	strb	r3, [r7, #9]
 80114d0:	234c      	movs	r3, #76	@ 0x4c
 80114d2:	72bb      	strb	r3, [r7, #10]
 80114d4:	239d      	movs	r3, #157	@ 0x9d
 80114d6:	72fb      	strb	r3, [r7, #11]
 80114d8:	2341      	movs	r3, #65	@ 0x41
 80114da:	733b      	strb	r3, [r7, #12]
 80114dc:	2345      	movs	r3, #69	@ 0x45
 80114de:	737b      	strb	r3, [r7, #13]
 80114e0:	2322      	movs	r3, #34	@ 0x22
 80114e2:	73bb      	strb	r3, [r7, #14]
 80114e4:	238e      	movs	r3, #142	@ 0x8e
 80114e6:	73fb      	strb	r3, [r7, #15]
 80114e8:	2311      	movs	r3, #17
 80114ea:	743b      	strb	r3, [r7, #16]
 80114ec:	2300      	movs	r3, #0
 80114ee:	747b      	strb	r3, [r7, #17]
 80114f0:	2300      	movs	r3, #0
 80114f2:	74bb      	strb	r3, [r7, #18]
 80114f4:	2300      	movs	r3, #0
 80114f6:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomScoreHdle,
 80114f8:	4b2a      	ldr	r3, [pc, #168]	@ (80115a4 <SVCCTL_InitCustomSvc+0x154>)
 80114fa:	8818      	ldrh	r0, [r3, #0]
 80114fc:	4b2a      	ldr	r3, [pc, #168]	@ (80115a8 <SVCCTL_InitCustomSvc+0x158>)
 80114fe:	781b      	ldrb	r3, [r3, #0]
 8011500:	4619      	mov	r1, r3
 8011502:	1d3a      	adds	r2, r7, #4
 8011504:	4b29      	ldr	r3, [pc, #164]	@ (80115ac <SVCCTL_InitCustomSvc+0x15c>)
 8011506:	9305      	str	r3, [sp, #20]
 8011508:	2300      	movs	r3, #0
 801150a:	9304      	str	r3, [sp, #16]
 801150c:	2310      	movs	r3, #16
 801150e:	9303      	str	r3, [sp, #12]
 8011510:	2300      	movs	r3, #0
 8011512:	9302      	str	r3, [sp, #8]
 8011514:	2300      	movs	r3, #0
 8011516:	9301      	str	r3, [sp, #4]
 8011518:	2312      	movs	r3, #18
 801151a:	9300      	str	r3, [sp, #0]
 801151c:	460b      	mov	r3, r1
 801151e:	2102      	movs	r1, #2
 8011520:	f7fd ff88 	bl	800f434 <aci_gatt_add_char>
 8011524:	4603      	mov	r3, r0
 8011526:	75fb      	strb	r3, [r7, #23]

  /* USER CODE END SVCCTL_Init_Service1_Char1 */
  /**
   *  Y_position
   */
  COPY_Y_POSITION_UUID(uuid.Char_UUID_128);
 8011528:	2319      	movs	r3, #25
 801152a:	713b      	strb	r3, [r7, #4]
 801152c:	23ed      	movs	r3, #237	@ 0xed
 801152e:	717b      	strb	r3, [r7, #5]
 8011530:	2382      	movs	r3, #130	@ 0x82
 8011532:	71bb      	strb	r3, [r7, #6]
 8011534:	23ae      	movs	r3, #174	@ 0xae
 8011536:	71fb      	strb	r3, [r7, #7]
 8011538:	23ed      	movs	r3, #237	@ 0xed
 801153a:	723b      	strb	r3, [r7, #8]
 801153c:	2321      	movs	r3, #33	@ 0x21
 801153e:	727b      	strb	r3, [r7, #9]
 8011540:	234c      	movs	r3, #76	@ 0x4c
 8011542:	72bb      	strb	r3, [r7, #10]
 8011544:	239d      	movs	r3, #157	@ 0x9d
 8011546:	72fb      	strb	r3, [r7, #11]
 8011548:	2341      	movs	r3, #65	@ 0x41
 801154a:	733b      	strb	r3, [r7, #12]
 801154c:	2345      	movs	r3, #69	@ 0x45
 801154e:	737b      	strb	r3, [r7, #13]
 8011550:	2322      	movs	r3, #34	@ 0x22
 8011552:	73bb      	strb	r3, [r7, #14]
 8011554:	238e      	movs	r3, #142	@ 0x8e
 8011556:	73fb      	strb	r3, [r7, #15]
 8011558:	2312      	movs	r3, #18
 801155a:	743b      	strb	r3, [r7, #16]
 801155c:	2300      	movs	r3, #0
 801155e:	747b      	strb	r3, [r7, #17]
 8011560:	2300      	movs	r3, #0
 8011562:	74bb      	strb	r3, [r7, #18]
 8011564:	2300      	movs	r3, #0
 8011566:	74fb      	strb	r3, [r7, #19]
  ret = aci_gatt_add_char(CustomContext.CustomScoreHdle,
 8011568:	4b0e      	ldr	r3, [pc, #56]	@ (80115a4 <SVCCTL_InitCustomSvc+0x154>)
 801156a:	8818      	ldrh	r0, [r3, #0]
 801156c:	4b10      	ldr	r3, [pc, #64]	@ (80115b0 <SVCCTL_InitCustomSvc+0x160>)
 801156e:	781b      	ldrb	r3, [r3, #0]
 8011570:	4619      	mov	r1, r3
 8011572:	1d3a      	adds	r2, r7, #4
 8011574:	4b0f      	ldr	r3, [pc, #60]	@ (80115b4 <SVCCTL_InitCustomSvc+0x164>)
 8011576:	9305      	str	r3, [sp, #20]
 8011578:	2300      	movs	r3, #0
 801157a:	9304      	str	r3, [sp, #16]
 801157c:	2310      	movs	r3, #16
 801157e:	9303      	str	r3, [sp, #12]
 8011580:	2300      	movs	r3, #0
 8011582:	9302      	str	r3, [sp, #8]
 8011584:	2300      	movs	r3, #0
 8011586:	9301      	str	r3, [sp, #4]
 8011588:	2312      	movs	r3, #18
 801158a:	9300      	str	r3, [sp, #0]
 801158c:	460b      	mov	r3, r1
 801158e:	2102      	movs	r1, #2
 8011590:	f7fd ff50 	bl	800f434 <aci_gatt_add_char>
 8011594:	4603      	mov	r3, r0
 8011596:	75fb      	strb	r3, [r7, #23]

  /* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

  /* USER CODE END SVCCTL_InitCustomSvc_2 */

  return;
 8011598:	bf00      	nop
}
 801159a:	3718      	adds	r7, #24
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}
 80115a0:	080112dd 	.word	0x080112dd
 80115a4:	20000508 	.word	0x20000508
 80115a8:	200000c3 	.word	0x200000c3
 80115ac:	2000050a 	.word	0x2000050a
 80115b0:	200000c4 	.word	0x200000c4
 80115b4:	2000050c 	.word	0x2000050c

080115b8 <LL_PWR_EnableBootC2>:
{
 80115b8:	b480      	push	{r7}
 80115ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80115bc:	4b05      	ldr	r3, [pc, #20]	@ (80115d4 <LL_PWR_EnableBootC2+0x1c>)
 80115be:	68db      	ldr	r3, [r3, #12]
 80115c0:	4a04      	ldr	r2, [pc, #16]	@ (80115d4 <LL_PWR_EnableBootC2+0x1c>)
 80115c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80115c6:	60d3      	str	r3, [r2, #12]
}
 80115c8:	bf00      	nop
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr
 80115d2:	bf00      	nop
 80115d4:	58000400 	.word	0x58000400

080115d8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80115d8:	b480      	push	{r7}
 80115da:	b083      	sub	sp, #12
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80115e0:	4b06      	ldr	r3, [pc, #24]	@ (80115fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80115e2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80115e6:	4905      	ldr	r1, [pc, #20]	@ (80115fc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	4313      	orrs	r3, r2
 80115ec:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 80115f0:	bf00      	nop
 80115f2:	370c      	adds	r7, #12
 80115f4:	46bd      	mov	sp, r7
 80115f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fa:	4770      	bx	lr
 80115fc:	58000800 	.word	0x58000800

08011600 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8011600:	b480      	push	{r7}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8011608:	4b05      	ldr	r3, [pc, #20]	@ (8011620 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801160a:	6a1a      	ldr	r2, [r3, #32]
 801160c:	4904      	ldr	r1, [pc, #16]	@ (8011620 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	4313      	orrs	r3, r2
 8011612:	620b      	str	r3, [r1, #32]
}
 8011614:	bf00      	nop
 8011616:	370c      	adds	r7, #12
 8011618:	46bd      	mov	sp, r7
 801161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161e:	4770      	bx	lr
 8011620:	58000800 	.word	0x58000800

08011624 <LL_AHB3_GRP1_EnableClock>:
{
 8011624:	b480      	push	{r7}
 8011626:	b085      	sub	sp, #20
 8011628:	af00      	add	r7, sp, #0
 801162a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 801162c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011630:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011632:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	4313      	orrs	r3, r2
 801163a:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 801163c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011640:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	4013      	ands	r3, r2
 8011646:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011648:	68fb      	ldr	r3, [r7, #12]
}
 801164a:	bf00      	nop
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011654:	4770      	bx	lr

08011656 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8011656:	b480      	push	{r7}
 8011658:	b085      	sub	sp, #20
 801165a:	af00      	add	r7, sp, #0
 801165c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 801165e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011662:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8011666:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	4313      	orrs	r3, r2
 801166e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8011672:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011676:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	4013      	ands	r3, r2
 801167e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011680:	68fb      	ldr	r3, [r7, #12]
}
 8011682:	bf00      	nop
 8011684:	3714      	adds	r7, #20
 8011686:	46bd      	mov	sp, r7
 8011688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801168c:	4770      	bx	lr

0801168e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 801168e:	b480      	push	{r7}
 8011690:	b083      	sub	sp, #12
 8011692:	af00      	add	r7, sp, #0
 8011694:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	601a      	str	r2, [r3, #0]
}
 80116a2:	bf00      	nop
 80116a4:	370c      	adds	r7, #12
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr

080116ae <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 80116ae:	b480      	push	{r7}
 80116b0:	b083      	sub	sp, #12
 80116b2:	af00      	add	r7, sp, #0
 80116b4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	f043 0201 	orr.w	r2, r3, #1
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	601a      	str	r2, [r3, #0]
}
 80116c2:	bf00      	nop
 80116c4:	370c      	adds	r7, #12
 80116c6:	46bd      	mov	sp, r7
 80116c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116cc:	4770      	bx	lr

080116ce <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80116ce:	b480      	push	{r7}
 80116d0:	b083      	sub	sp, #12
 80116d2:	af00      	add	r7, sp, #0
 80116d4:	6078      	str	r0, [r7, #4]
 80116d6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	685a      	ldr	r2, [r3, #4]
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	041b      	lsls	r3, r3, #16
 80116e0:	43db      	mvns	r3, r3
 80116e2:	401a      	ands	r2, r3
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	605a      	str	r2, [r3, #4]
}
 80116e8:	bf00      	nop
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr

080116f4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80116f4:	b480      	push	{r7}
 80116f6:	b083      	sub	sp, #12
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	685a      	ldr	r2, [r3, #4]
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	041b      	lsls	r3, r3, #16
 8011706:	431a      	orrs	r2, r3
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	605a      	str	r2, [r3, #4]
}
 801170c:	bf00      	nop
 801170e:	370c      	adds	r7, #12
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr

08011718 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	685a      	ldr	r2, [r3, #4]
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	43db      	mvns	r3, r3
 801172a:	401a      	ands	r2, r3
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	605a      	str	r2, [r3, #4]
}
 8011730:	bf00      	nop
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 801173c:	b480      	push	{r7}
 801173e:	b083      	sub	sp, #12
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	683a      	ldr	r2, [r7, #0]
 801174a:	609a      	str	r2, [r3, #8]
}
 801174c:	bf00      	nop
 801174e:	370c      	adds	r7, #12
 8011750:	46bd      	mov	sp, r7
 8011752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011756:	4770      	bx	lr

08011758 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8011758:	b480      	push	{r7}
 801175a:	b083      	sub	sp, #12
 801175c:	af00      	add	r7, sp, #0
 801175e:	6078      	str	r0, [r7, #4]
 8011760:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8011762:	683b      	ldr	r3, [r7, #0]
 8011764:	041a      	lsls	r2, r3, #16
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	609a      	str	r2, [r3, #8]
}
 801176a:	bf00      	nop
 801176c:	370c      	adds	r7, #12
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr

08011776 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8011776:	b480      	push	{r7}
 8011778:	b083      	sub	sp, #12
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
 801177e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	68da      	ldr	r2, [r3, #12]
 8011784:	683b      	ldr	r3, [r7, #0]
 8011786:	4013      	ands	r3, r2
 8011788:	683a      	ldr	r2, [r7, #0]
 801178a:	429a      	cmp	r2, r3
 801178c:	d101      	bne.n	8011792 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 801178e:	2301      	movs	r3, #1
 8011790:	e000      	b.n	8011794 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8011792:	2300      	movs	r3, #0
}
 8011794:	4618      	mov	r0, r3
 8011796:	370c      	adds	r7, #12
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr

080117a0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80117a0:	b480      	push	{r7}
 80117a2:	b083      	sub	sp, #12
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
 80117a8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80117aa:	687b      	ldr	r3, [r7, #4]
 80117ac:	69da      	ldr	r2, [r3, #28]
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	4013      	ands	r3, r2
 80117b2:	683a      	ldr	r2, [r7, #0]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	d101      	bne.n	80117bc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80117b8:	2301      	movs	r3, #1
 80117ba:	e000      	b.n	80117be <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	370c      	adds	r7, #12
 80117c2:	46bd      	mov	sp, r7
 80117c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c8:	4770      	bx	lr
	...

080117cc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80117d0:	2102      	movs	r1, #2
 80117d2:	4818      	ldr	r0, [pc, #96]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 80117d4:	f7ff ffe4 	bl	80117a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 80117d8:	4603      	mov	r3, r0
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d008      	beq.n	80117f0 <HW_IPCC_Rx_Handler+0x24>
 80117de:	4b15      	ldr	r3, [pc, #84]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 80117e0:	685b      	ldr	r3, [r3, #4]
 80117e2:	f003 0302 	and.w	r3, r3, #2
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d102      	bne.n	80117f0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80117ea:	f000 f8d5 	bl	8011998 <HW_IPCC_SYS_EvtHandler>
 80117ee:	e01e      	b.n	801182e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80117f0:	2101      	movs	r1, #1
 80117f2:	4810      	ldr	r0, [pc, #64]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 80117f4:	f7ff ffd4 	bl	80117a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 80117f8:	4603      	mov	r3, r0
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d008      	beq.n	8011810 <HW_IPCC_Rx_Handler+0x44>
 80117fe:	4b0d      	ldr	r3, [pc, #52]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 8011800:	685b      	ldr	r3, [r3, #4]
 8011802:	f003 0301 	and.w	r3, r3, #1
 8011806:	2b00      	cmp	r3, #0
 8011808:	d102      	bne.n	8011810 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 801180a:	f000 f889 	bl	8011920 <HW_IPCC_BLE_EvtHandler>
 801180e:	e00e      	b.n	801182e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8011810:	2108      	movs	r1, #8
 8011812:	4808      	ldr	r0, [pc, #32]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 8011814:	f7ff ffc4 	bl	80117a0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8011818:	4603      	mov	r3, r0
 801181a:	2b00      	cmp	r3, #0
 801181c:	d008      	beq.n	8011830 <HW_IPCC_Rx_Handler+0x64>
 801181e:	4b05      	ldr	r3, [pc, #20]	@ (8011834 <HW_IPCC_Rx_Handler+0x68>)
 8011820:	685b      	ldr	r3, [r3, #4]
 8011822:	f003 0308 	and.w	r3, r3, #8
 8011826:	2b00      	cmp	r3, #0
 8011828:	d102      	bne.n	8011830 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 801182a:	f000 f901 	bl	8011a30 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 801182e:	bf00      	nop
 8011830:	bf00      	nop
}
 8011832:	bd80      	pop	{r7, pc}
 8011834:	58000c00 	.word	0x58000c00

08011838 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8011838:	b580      	push	{r7, lr}
 801183a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 801183c:	2102      	movs	r1, #2
 801183e:	4818      	ldr	r0, [pc, #96]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 8011840:	f7ff ff99 	bl	8011776 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011844:	4603      	mov	r3, r0
 8011846:	2b00      	cmp	r3, #0
 8011848:	d108      	bne.n	801185c <HW_IPCC_Tx_Handler+0x24>
 801184a:	4b15      	ldr	r3, [pc, #84]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8011856:	f000 f893 	bl	8011980 <HW_IPCC_SYS_CmdEvtHandler>
 801185a:	e01e      	b.n	801189a <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 801185c:	2108      	movs	r1, #8
 801185e:	4810      	ldr	r0, [pc, #64]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 8011860:	f7ff ff89 	bl	8011776 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011864:	4603      	mov	r3, r0
 8011866:	2b00      	cmp	r3, #0
 8011868:	d108      	bne.n	801187c <HW_IPCC_Tx_Handler+0x44>
 801186a:	4b0d      	ldr	r3, [pc, #52]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 801186c:	685b      	ldr	r3, [r3, #4]
 801186e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8011872:	2b00      	cmp	r3, #0
 8011874:	d102      	bne.n	801187c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8011876:	f000 f8bd 	bl	80119f4 <HW_IPCC_MM_FreeBufHandler>
 801187a:	e00e      	b.n	801189a <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 801187c:	2120      	movs	r1, #32
 801187e:	4808      	ldr	r0, [pc, #32]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 8011880:	f7ff ff79 	bl	8011776 <LL_C1_IPCC_IsActiveFlag_CHx>
 8011884:	4603      	mov	r3, r0
 8011886:	2b00      	cmp	r3, #0
 8011888:	d108      	bne.n	801189c <HW_IPCC_Tx_Handler+0x64>
 801188a:	4b05      	ldr	r3, [pc, #20]	@ (80118a0 <HW_IPCC_Tx_Handler+0x68>)
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8011892:	2b00      	cmp	r3, #0
 8011894:	d102      	bne.n	801189c <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8011896:	f000 f84f 	bl	8011938 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 801189a:	bf00      	nop
 801189c:	bf00      	nop
}
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	58000c00 	.word	0x58000c00

080118a4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80118a4:	b580      	push	{r7, lr}
 80118a6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80118a8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80118ac:	f7ff fed3 	bl	8011656 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80118b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80118b4:	f7ff fea4 	bl	8011600 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80118b8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80118bc:	f7ff fe8c 	bl	80115d8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80118c0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80118c2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80118c4:	f7ff fe78 	bl	80115b8 <LL_PWR_EnableBootC2>

  return;
 80118c8:	bf00      	nop
}
 80118ca:	bd80      	pop	{r7, pc}

080118cc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80118d0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80118d4:	f7ff fea6 	bl	8011624 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80118d8:	4806      	ldr	r0, [pc, #24]	@ (80118f4 <HW_IPCC_Init+0x28>)
 80118da:	f7ff fee8 	bl	80116ae <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80118de:	4805      	ldr	r0, [pc, #20]	@ (80118f4 <HW_IPCC_Init+0x28>)
 80118e0:	f7ff fed5 	bl	801168e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80118e4:	202c      	movs	r0, #44	@ 0x2c
 80118e6:	f7f1 fa9a 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80118ea:	202d      	movs	r0, #45	@ 0x2d
 80118ec:	f7f1 fa97 	bl	8002e1e <HAL_NVIC_EnableIRQ>

  return;
 80118f0:	bf00      	nop
}
 80118f2:	bd80      	pop	{r7, pc}
 80118f4:	58000c00 	.word	0x58000c00

080118f8 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80118fc:	2101      	movs	r1, #1
 80118fe:	4802      	ldr	r0, [pc, #8]	@ (8011908 <HW_IPCC_BLE_Init+0x10>)
 8011900:	f7ff ff0a 	bl	8011718 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011904:	bf00      	nop
}
 8011906:	bd80      	pop	{r7, pc}
 8011908:	58000c00 	.word	0x58000c00

0801190c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 801190c:	b580      	push	{r7, lr}
 801190e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8011910:	2101      	movs	r1, #1
 8011912:	4802      	ldr	r0, [pc, #8]	@ (801191c <HW_IPCC_BLE_SendCmd+0x10>)
 8011914:	f7ff ff20 	bl	8011758 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011918:	bf00      	nop
}
 801191a:	bd80      	pop	{r7, pc}
 801191c:	58000c00 	.word	0x58000c00

08011920 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8011920:	b580      	push	{r7, lr}
 8011922:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8011924:	f7fe ff00 	bl	8010728 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8011928:	2101      	movs	r1, #1
 801192a:	4802      	ldr	r0, [pc, #8]	@ (8011934 <HW_IPCC_BLE_EvtHandler+0x14>)
 801192c:	f7ff ff06 	bl	801173c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011930:	bf00      	nop
}
 8011932:	bd80      	pop	{r7, pc}
 8011934:	58000c00 	.word	0x58000c00

08011938 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8011938:	b580      	push	{r7, lr}
 801193a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 801193c:	2120      	movs	r1, #32
 801193e:	4803      	ldr	r0, [pc, #12]	@ (801194c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8011940:	f7ff fed8 	bl	80116f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8011944:	f7fe ff20 	bl	8010788 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8011948:	bf00      	nop
}
 801194a:	bd80      	pop	{r7, pc}
 801194c:	58000c00 	.word	0x58000c00

08011950 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8011950:	b580      	push	{r7, lr}
 8011952:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8011954:	2102      	movs	r1, #2
 8011956:	4802      	ldr	r0, [pc, #8]	@ (8011960 <HW_IPCC_SYS_Init+0x10>)
 8011958:	f7ff fede 	bl	8011718 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 801195c:	bf00      	nop
}
 801195e:	bd80      	pop	{r7, pc}
 8011960:	58000c00 	.word	0x58000c00

08011964 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8011964:	b580      	push	{r7, lr}
 8011966:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011968:	2102      	movs	r1, #2
 801196a:	4804      	ldr	r0, [pc, #16]	@ (801197c <HW_IPCC_SYS_SendCmd+0x18>)
 801196c:	f7ff fef4 	bl	8011758 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011970:	2102      	movs	r1, #2
 8011972:	4802      	ldr	r0, [pc, #8]	@ (801197c <HW_IPCC_SYS_SendCmd+0x18>)
 8011974:	f7ff feab 	bl	80116ce <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8011978:	bf00      	nop
}
 801197a:	bd80      	pop	{r7, pc}
 801197c:	58000c00 	.word	0x58000c00

08011980 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8011980:	b580      	push	{r7, lr}
 8011982:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8011984:	2102      	movs	r1, #2
 8011986:	4803      	ldr	r0, [pc, #12]	@ (8011994 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8011988:	f7ff feb4 	bl	80116f4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 801198c:	f7fe ff4c 	bl	8010828 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8011990:	bf00      	nop
}
 8011992:	bd80      	pop	{r7, pc}
 8011994:	58000c00 	.word	0x58000c00

08011998 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8011998:	b580      	push	{r7, lr}
 801199a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 801199c:	f7fe ff5a 	bl	8010854 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80119a0:	2102      	movs	r1, #2
 80119a2:	4802      	ldr	r0, [pc, #8]	@ (80119ac <HW_IPCC_SYS_EvtHandler+0x14>)
 80119a4:	f7ff feca 	bl	801173c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80119a8:	bf00      	nop
}
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	58000c00 	.word	0x58000c00

080119b0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 80119b8:	2108      	movs	r1, #8
 80119ba:	480c      	ldr	r0, [pc, #48]	@ (80119ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80119bc:	f7ff fedb 	bl	8011776 <LL_C1_IPCC_IsActiveFlag_CHx>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d007      	beq.n	80119d6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 80119c6:	4a0a      	ldr	r2, [pc, #40]	@ (80119f0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80119cc:	2108      	movs	r1, #8
 80119ce:	4807      	ldr	r0, [pc, #28]	@ (80119ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80119d0:	f7ff fe7d 	bl	80116ce <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 80119d4:	e006      	b.n	80119e4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80119da:	2108      	movs	r1, #8
 80119dc:	4803      	ldr	r0, [pc, #12]	@ (80119ec <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80119de:	f7ff febb 	bl	8011758 <LL_C1_IPCC_SetFlag_CHx>
  return;
 80119e2:	bf00      	nop
}
 80119e4:	3708      	adds	r7, #8
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	58000c00 	.word	0x58000c00
 80119f0:	20000510 	.word	0x20000510

080119f4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80119f8:	2108      	movs	r1, #8
 80119fa:	4806      	ldr	r0, [pc, #24]	@ (8011a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80119fc:	f7ff fe7a 	bl	80116f4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8011a00:	4b05      	ldr	r3, [pc, #20]	@ (8011a18 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8011a06:	2108      	movs	r1, #8
 8011a08:	4802      	ldr	r0, [pc, #8]	@ (8011a14 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8011a0a:	f7ff fea5 	bl	8011758 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8011a0e:	bf00      	nop
}
 8011a10:	bd80      	pop	{r7, pc}
 8011a12:	bf00      	nop
 8011a14:	58000c00 	.word	0x58000c00
 8011a18:	20000510 	.word	0x20000510

08011a1c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011a20:	2108      	movs	r1, #8
 8011a22:	4802      	ldr	r0, [pc, #8]	@ (8011a2c <HW_IPCC_TRACES_Init+0x10>)
 8011a24:	f7ff fe78 	bl	8011718 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8011a28:	bf00      	nop
}
 8011a2a:	bd80      	pop	{r7, pc}
 8011a2c:	58000c00 	.word	0x58000c00

08011a30 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8011a34:	f7fe ffb6 	bl	80109a4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8011a38:	2108      	movs	r1, #8
 8011a3a:	4802      	ldr	r0, [pc, #8]	@ (8011a44 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8011a3c:	f7ff fe7e 	bl	801173c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8011a40:	bf00      	nop
}
 8011a42:	bd80      	pop	{r7, pc}
 8011a44:	58000c00 	.word	0x58000c00

08011a48 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	4912      	ldr	r1, [pc, #72]	@ (8011a98 <MX_USB_Device_Init+0x50>)
 8011a50:	4812      	ldr	r0, [pc, #72]	@ (8011a9c <MX_USB_Device_Init+0x54>)
 8011a52:	f7fb fd1f 	bl	800d494 <USBD_Init>
 8011a56:	4603      	mov	r3, r0
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d001      	beq.n	8011a60 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011a5c:	f7f0 fcd4 	bl	8002408 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011a60:	490f      	ldr	r1, [pc, #60]	@ (8011aa0 <MX_USB_Device_Init+0x58>)
 8011a62:	480e      	ldr	r0, [pc, #56]	@ (8011a9c <MX_USB_Device_Init+0x54>)
 8011a64:	f7fb fd46 	bl	800d4f4 <USBD_RegisterClass>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d001      	beq.n	8011a72 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011a6e:	f7f0 fccb 	bl	8002408 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011a72:	490c      	ldr	r1, [pc, #48]	@ (8011aa4 <MX_USB_Device_Init+0x5c>)
 8011a74:	4809      	ldr	r0, [pc, #36]	@ (8011a9c <MX_USB_Device_Init+0x54>)
 8011a76:	f7fb fc3d 	bl	800d2f4 <USBD_CDC_RegisterInterface>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d001      	beq.n	8011a84 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011a80:	f7f0 fcc2 	bl	8002408 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011a84:	4805      	ldr	r0, [pc, #20]	@ (8011a9c <MX_USB_Device_Init+0x54>)
 8011a86:	f7fb fd6b 	bl	800d560 <USBD_Start>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d001      	beq.n	8011a94 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011a90:	f7f0 fcba 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011a94:	bf00      	nop
 8011a96:	bd80      	pop	{r7, pc}
 8011a98:	200000dc 	.word	0x200000dc
 8011a9c:	20000514 	.word	0x20000514
 8011aa0:	20000038 	.word	0x20000038
 8011aa4:	200000c8 	.word	0x200000c8

08011aa8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011aac:	2200      	movs	r2, #0
 8011aae:	4905      	ldr	r1, [pc, #20]	@ (8011ac4 <CDC_Init_FS+0x1c>)
 8011ab0:	4805      	ldr	r0, [pc, #20]	@ (8011ac8 <CDC_Init_FS+0x20>)
 8011ab2:	f7fb fc39 	bl	800d328 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011ab6:	4905      	ldr	r1, [pc, #20]	@ (8011acc <CDC_Init_FS+0x24>)
 8011ab8:	4803      	ldr	r0, [pc, #12]	@ (8011ac8 <CDC_Init_FS+0x20>)
 8011aba:	f7fb fc57 	bl	800d36c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011abe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	bd80      	pop	{r7, pc}
 8011ac4:	20000ff0 	.word	0x20000ff0
 8011ac8:	20000514 	.word	0x20000514
 8011acc:	200007f0 	.word	0x200007f0

08011ad0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011ad0:	b480      	push	{r7}
 8011ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011ad4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ade:	4770      	bx	lr

08011ae0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b083      	sub	sp, #12
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	4603      	mov	r3, r0
 8011ae8:	6039      	str	r1, [r7, #0]
 8011aea:	71fb      	strb	r3, [r7, #7]
 8011aec:	4613      	mov	r3, r2
 8011aee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011af0:	79fb      	ldrb	r3, [r7, #7]
 8011af2:	2b23      	cmp	r3, #35	@ 0x23
 8011af4:	d84a      	bhi.n	8011b8c <CDC_Control_FS+0xac>
 8011af6:	a201      	add	r2, pc, #4	@ (adr r2, 8011afc <CDC_Control_FS+0x1c>)
 8011af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011afc:	08011b8d 	.word	0x08011b8d
 8011b00:	08011b8d 	.word	0x08011b8d
 8011b04:	08011b8d 	.word	0x08011b8d
 8011b08:	08011b8d 	.word	0x08011b8d
 8011b0c:	08011b8d 	.word	0x08011b8d
 8011b10:	08011b8d 	.word	0x08011b8d
 8011b14:	08011b8d 	.word	0x08011b8d
 8011b18:	08011b8d 	.word	0x08011b8d
 8011b1c:	08011b8d 	.word	0x08011b8d
 8011b20:	08011b8d 	.word	0x08011b8d
 8011b24:	08011b8d 	.word	0x08011b8d
 8011b28:	08011b8d 	.word	0x08011b8d
 8011b2c:	08011b8d 	.word	0x08011b8d
 8011b30:	08011b8d 	.word	0x08011b8d
 8011b34:	08011b8d 	.word	0x08011b8d
 8011b38:	08011b8d 	.word	0x08011b8d
 8011b3c:	08011b8d 	.word	0x08011b8d
 8011b40:	08011b8d 	.word	0x08011b8d
 8011b44:	08011b8d 	.word	0x08011b8d
 8011b48:	08011b8d 	.word	0x08011b8d
 8011b4c:	08011b8d 	.word	0x08011b8d
 8011b50:	08011b8d 	.word	0x08011b8d
 8011b54:	08011b8d 	.word	0x08011b8d
 8011b58:	08011b8d 	.word	0x08011b8d
 8011b5c:	08011b8d 	.word	0x08011b8d
 8011b60:	08011b8d 	.word	0x08011b8d
 8011b64:	08011b8d 	.word	0x08011b8d
 8011b68:	08011b8d 	.word	0x08011b8d
 8011b6c:	08011b8d 	.word	0x08011b8d
 8011b70:	08011b8d 	.word	0x08011b8d
 8011b74:	08011b8d 	.word	0x08011b8d
 8011b78:	08011b8d 	.word	0x08011b8d
 8011b7c:	08011b8d 	.word	0x08011b8d
 8011b80:	08011b8d 	.word	0x08011b8d
 8011b84:	08011b8d 	.word	0x08011b8d
 8011b88:	08011b8d 	.word	0x08011b8d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011b8c:	bf00      	nop
  }

  return (USBD_OK);
 8011b8e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	370c      	adds	r7, #12
 8011b94:	46bd      	mov	sp, r7
 8011b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9a:	4770      	bx	lr

08011b9c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b082      	sub	sp, #8
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	6078      	str	r0, [r7, #4]
 8011ba4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011ba6:	6879      	ldr	r1, [r7, #4]
 8011ba8:	4805      	ldr	r0, [pc, #20]	@ (8011bc0 <CDC_Receive_FS+0x24>)
 8011baa:	f7fb fbdf 	bl	800d36c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011bae:	4804      	ldr	r0, [pc, #16]	@ (8011bc0 <CDC_Receive_FS+0x24>)
 8011bb0:	f7fb fc3a 	bl	800d428 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011bb4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	3708      	adds	r7, #8
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}
 8011bbe:	bf00      	nop
 8011bc0:	20000514 	.word	0x20000514

08011bc4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
 8011bca:	6078      	str	r0, [r7, #4]
 8011bcc:	460b      	mov	r3, r1
 8011bce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8011c0c <CDC_Transmit_FS+0x48>)
 8011bd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011bda:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011bdc:	68bb      	ldr	r3, [r7, #8]
 8011bde:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d001      	beq.n	8011bea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011be6:	2301      	movs	r3, #1
 8011be8:	e00b      	b.n	8011c02 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011bea:	887b      	ldrh	r3, [r7, #2]
 8011bec:	461a      	mov	r2, r3
 8011bee:	6879      	ldr	r1, [r7, #4]
 8011bf0:	4806      	ldr	r0, [pc, #24]	@ (8011c0c <CDC_Transmit_FS+0x48>)
 8011bf2:	f7fb fb99 	bl	800d328 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011bf6:	4805      	ldr	r0, [pc, #20]	@ (8011c0c <CDC_Transmit_FS+0x48>)
 8011bf8:	f7fb fbd6 	bl	800d3a8 <USBD_CDC_TransmitPacket>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	3710      	adds	r7, #16
 8011c06:	46bd      	mov	sp, r7
 8011c08:	bd80      	pop	{r7, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20000514 	.word	0x20000514

08011c10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b087      	sub	sp, #28
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	60f8      	str	r0, [r7, #12]
 8011c18:	60b9      	str	r1, [r7, #8]
 8011c1a:	4613      	mov	r3, r2
 8011c1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011c22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	371c      	adds	r7, #28
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr
	...

08011c34 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c34:	b480      	push	{r7}
 8011c36:	b083      	sub	sp, #12
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	6039      	str	r1, [r7, #0]
 8011c3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	2212      	movs	r2, #18
 8011c44:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011c46:	4b03      	ldr	r3, [pc, #12]	@ (8011c54 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011c48:	4618      	mov	r0, r3
 8011c4a:	370c      	adds	r7, #12
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c52:	4770      	bx	lr
 8011c54:	200000fc 	.word	0x200000fc

08011c58 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c58:	b480      	push	{r7}
 8011c5a:	b083      	sub	sp, #12
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	4603      	mov	r3, r0
 8011c60:	6039      	str	r1, [r7, #0]
 8011c62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	2204      	movs	r2, #4
 8011c68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011c6a:	4b03      	ldr	r3, [pc, #12]	@ (8011c78 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr
 8011c78:	20000110 	.word	0x20000110

08011c7c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011c7c:	b580      	push	{r7, lr}
 8011c7e:	b082      	sub	sp, #8
 8011c80:	af00      	add	r7, sp, #0
 8011c82:	4603      	mov	r3, r0
 8011c84:	6039      	str	r1, [r7, #0]
 8011c86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011c88:	79fb      	ldrb	r3, [r7, #7]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d105      	bne.n	8011c9a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011c8e:	683a      	ldr	r2, [r7, #0]
 8011c90:	4907      	ldr	r1, [pc, #28]	@ (8011cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011c92:	4808      	ldr	r0, [pc, #32]	@ (8011cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011c94:	f7fc fdac 	bl	800e7f0 <USBD_GetString>
 8011c98:	e004      	b.n	8011ca4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011c9a:	683a      	ldr	r2, [r7, #0]
 8011c9c:	4904      	ldr	r1, [pc, #16]	@ (8011cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011c9e:	4805      	ldr	r0, [pc, #20]	@ (8011cb4 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011ca0:	f7fc fda6 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011ca4:	4b02      	ldr	r3, [pc, #8]	@ (8011cb0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3708      	adds	r7, #8
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
 8011cae:	bf00      	nop
 8011cb0:	200017f0 	.word	0x200017f0
 8011cb4:	080134ac 	.word	0x080134ac

08011cb8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011cb8:	b580      	push	{r7, lr}
 8011cba:	b082      	sub	sp, #8
 8011cbc:	af00      	add	r7, sp, #0
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	6039      	str	r1, [r7, #0]
 8011cc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	4904      	ldr	r1, [pc, #16]	@ (8011cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011cc8:	4804      	ldr	r0, [pc, #16]	@ (8011cdc <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011cca:	f7fc fd91 	bl	800e7f0 <USBD_GetString>
  return USBD_StrDesc;
 8011cce:	4b02      	ldr	r3, [pc, #8]	@ (8011cd8 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3708      	adds	r7, #8
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	200017f0 	.word	0x200017f0
 8011cdc:	080134c4 	.word	0x080134c4

08011ce0 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b082      	sub	sp, #8
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	4603      	mov	r3, r0
 8011ce8:	6039      	str	r1, [r7, #0]
 8011cea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	221a      	movs	r2, #26
 8011cf0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011cf2:	f000 f843 	bl	8011d7c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011cf6:	4b02      	ldr	r3, [pc, #8]	@ (8011d00 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3708      	adds	r7, #8
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}
 8011d00:	20000114 	.word	0x20000114

08011d04 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b082      	sub	sp, #8
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	6039      	str	r1, [r7, #0]
 8011d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011d10:	79fb      	ldrb	r3, [r7, #7]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d105      	bne.n	8011d22 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011d16:	683a      	ldr	r2, [r7, #0]
 8011d18:	4907      	ldr	r1, [pc, #28]	@ (8011d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011d1a:	4808      	ldr	r0, [pc, #32]	@ (8011d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011d1c:	f7fc fd68 	bl	800e7f0 <USBD_GetString>
 8011d20:	e004      	b.n	8011d2c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011d22:	683a      	ldr	r2, [r7, #0]
 8011d24:	4904      	ldr	r1, [pc, #16]	@ (8011d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011d26:	4805      	ldr	r0, [pc, #20]	@ (8011d3c <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011d28:	f7fc fd62 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d2c:	4b02      	ldr	r3, [pc, #8]	@ (8011d38 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011d2e:	4618      	mov	r0, r3
 8011d30:	3708      	adds	r7, #8
 8011d32:	46bd      	mov	sp, r7
 8011d34:	bd80      	pop	{r7, pc}
 8011d36:	bf00      	nop
 8011d38:	200017f0 	.word	0x200017f0
 8011d3c:	080134d8 	.word	0x080134d8

08011d40 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	4603      	mov	r3, r0
 8011d48:	6039      	str	r1, [r7, #0]
 8011d4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d4c:	79fb      	ldrb	r3, [r7, #7]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d105      	bne.n	8011d5e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011d52:	683a      	ldr	r2, [r7, #0]
 8011d54:	4907      	ldr	r1, [pc, #28]	@ (8011d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011d56:	4808      	ldr	r0, [pc, #32]	@ (8011d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011d58:	f7fc fd4a 	bl	800e7f0 <USBD_GetString>
 8011d5c:	e004      	b.n	8011d68 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011d5e:	683a      	ldr	r2, [r7, #0]
 8011d60:	4904      	ldr	r1, [pc, #16]	@ (8011d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011d62:	4805      	ldr	r0, [pc, #20]	@ (8011d78 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011d64:	f7fc fd44 	bl	800e7f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d68:	4b02      	ldr	r3, [pc, #8]	@ (8011d74 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3708      	adds	r7, #8
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	200017f0 	.word	0x200017f0
 8011d78:	080134e4 	.word	0x080134e4

08011d7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011d7c:	b580      	push	{r7, lr}
 8011d7e:	b084      	sub	sp, #16
 8011d80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011d82:	4b0f      	ldr	r3, [pc, #60]	@ (8011dc0 <Get_SerialNum+0x44>)
 8011d84:	681b      	ldr	r3, [r3, #0]
 8011d86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011d88:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc4 <Get_SerialNum+0x48>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8011dc8 <Get_SerialNum+0x4c>)
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011d94:	68fa      	ldr	r2, [r7, #12]
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	4413      	add	r3, r2
 8011d9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d009      	beq.n	8011db6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011da2:	2208      	movs	r2, #8
 8011da4:	4909      	ldr	r1, [pc, #36]	@ (8011dcc <Get_SerialNum+0x50>)
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	f000 f814 	bl	8011dd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011dac:	2204      	movs	r2, #4
 8011dae:	4908      	ldr	r1, [pc, #32]	@ (8011dd0 <Get_SerialNum+0x54>)
 8011db0:	68b8      	ldr	r0, [r7, #8]
 8011db2:	f000 f80f 	bl	8011dd4 <IntToUnicode>
  }
}
 8011db6:	bf00      	nop
 8011db8:	3710      	adds	r7, #16
 8011dba:	46bd      	mov	sp, r7
 8011dbc:	bd80      	pop	{r7, pc}
 8011dbe:	bf00      	nop
 8011dc0:	1fff7590 	.word	0x1fff7590
 8011dc4:	1fff7594 	.word	0x1fff7594
 8011dc8:	1fff7598 	.word	0x1fff7598
 8011dcc:	20000116 	.word	0x20000116
 8011dd0:	20000126 	.word	0x20000126

08011dd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011dd4:	b480      	push	{r7}
 8011dd6:	b087      	sub	sp, #28
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	60f8      	str	r0, [r7, #12]
 8011ddc:	60b9      	str	r1, [r7, #8]
 8011dde:	4613      	mov	r3, r2
 8011de0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011de6:	2300      	movs	r3, #0
 8011de8:	75fb      	strb	r3, [r7, #23]
 8011dea:	e027      	b.n	8011e3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	0f1b      	lsrs	r3, r3, #28
 8011df0:	2b09      	cmp	r3, #9
 8011df2:	d80b      	bhi.n	8011e0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	0f1b      	lsrs	r3, r3, #28
 8011df8:	b2da      	uxtb	r2, r3
 8011dfa:	7dfb      	ldrb	r3, [r7, #23]
 8011dfc:	005b      	lsls	r3, r3, #1
 8011dfe:	4619      	mov	r1, r3
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	440b      	add	r3, r1
 8011e04:	3230      	adds	r2, #48	@ 0x30
 8011e06:	b2d2      	uxtb	r2, r2
 8011e08:	701a      	strb	r2, [r3, #0]
 8011e0a:	e00a      	b.n	8011e22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	0f1b      	lsrs	r3, r3, #28
 8011e10:	b2da      	uxtb	r2, r3
 8011e12:	7dfb      	ldrb	r3, [r7, #23]
 8011e14:	005b      	lsls	r3, r3, #1
 8011e16:	4619      	mov	r1, r3
 8011e18:	68bb      	ldr	r3, [r7, #8]
 8011e1a:	440b      	add	r3, r1
 8011e1c:	3237      	adds	r2, #55	@ 0x37
 8011e1e:	b2d2      	uxtb	r2, r2
 8011e20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	011b      	lsls	r3, r3, #4
 8011e26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011e28:	7dfb      	ldrb	r3, [r7, #23]
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	68ba      	ldr	r2, [r7, #8]
 8011e30:	4413      	add	r3, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011e36:	7dfb      	ldrb	r3, [r7, #23]
 8011e38:	3301      	adds	r3, #1
 8011e3a:	75fb      	strb	r3, [r7, #23]
 8011e3c:	7dfa      	ldrb	r2, [r7, #23]
 8011e3e:	79fb      	ldrb	r3, [r7, #7]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d3d3      	bcc.n	8011dec <IntToUnicode+0x18>
  }
}
 8011e44:	bf00      	nop
 8011e46:	bf00      	nop
 8011e48:	371c      	adds	r7, #28
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e50:	4770      	bx	lr

08011e52 <LL_AHB2_GRP1_EnableClock>:
{
 8011e52:	b480      	push	{r7}
 8011e54:	b085      	sub	sp, #20
 8011e56:	af00      	add	r7, sp, #0
 8011e58:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011e5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011e5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	4313      	orrs	r3, r2
 8011e68:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011e6e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	4013      	ands	r3, r2
 8011e74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011e76:	68fb      	ldr	r3, [r7, #12]
}
 8011e78:	bf00      	nop
 8011e7a:	3714      	adds	r7, #20
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <LL_APB1_GRP1_EnableClock>:
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011e90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	4313      	orrs	r3, r2
 8011e9a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011ea0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	4013      	ands	r3, r2
 8011ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011ea8:	68fb      	ldr	r3, [r7, #12]
}
 8011eaa:	bf00      	nop
 8011eac:	3714      	adds	r7, #20
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr
	...

08011eb8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b09c      	sub	sp, #112	@ 0x70
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	605a      	str	r2, [r3, #4]
 8011eca:	609a      	str	r2, [r3, #8]
 8011ecc:	60da      	str	r2, [r3, #12]
 8011ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011ed0:	f107 030c 	add.w	r3, r7, #12
 8011ed4:	2250      	movs	r2, #80	@ 0x50
 8011ed6:	2100      	movs	r1, #0
 8011ed8:	4618      	mov	r0, r3
 8011eda:	f000 fdc5 	bl	8012a68 <memset>
  if(pcdHandle->Instance==USB)
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	681b      	ldr	r3, [r3, #0]
 8011ee2:	4a23      	ldr	r2, [pc, #140]	@ (8011f70 <HAL_PCD_MspInit+0xb8>)
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d13e      	bne.n	8011f66 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011ee8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011eec:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 8011eee:	2318      	movs	r3, #24
 8011ef0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8011ef2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8011ef6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8011ef8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8011efc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8011efe:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011f02:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK;
 8011f04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8011f08:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8011f0a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8011f0e:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011f10:	f107 030c 	add.w	r3, r7, #12
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f6 fcef 	bl	80088f8 <HAL_RCCEx_PeriphCLKConfig>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d001      	beq.n	8011f24 <HAL_PCD_MspInit+0x6c>
    {
      Error_Handler();
 8011f20:	f7f0 fa72 	bl	8002408 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f24:	2001      	movs	r0, #1
 8011f26:	f7ff ff94 	bl	8011e52 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011f2a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011f30:	2302      	movs	r3, #2
 8011f32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f34:	2300      	movs	r3, #0
 8011f36:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011f3c:	230a      	movs	r3, #10
 8011f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f40:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8011f44:	4619      	mov	r1, r3
 8011f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011f4a:	f7f1 f879 	bl	8003040 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011f4e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8011f52:	f7ff ff97 	bl	8011e84 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011f56:	2200      	movs	r2, #0
 8011f58:	2100      	movs	r1, #0
 8011f5a:	2014      	movs	r0, #20
 8011f5c:	f7f0 ff45 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8011f60:	2014      	movs	r0, #20
 8011f62:	f7f0 ff5c 	bl	8002e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011f66:	bf00      	nop
 8011f68:	3770      	adds	r7, #112	@ 0x70
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd80      	pop	{r7, pc}
 8011f6e:	bf00      	nop
 8011f70:	40006800 	.word	0x40006800

08011f74 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b082      	sub	sp, #8
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8011f88:	4619      	mov	r1, r3
 8011f8a:	4610      	mov	r0, r2
 8011f8c:	f7fb fb35 	bl	800d5fa <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8011f90:	bf00      	nop
 8011f92:	3708      	adds	r7, #8
 8011f94:	46bd      	mov	sp, r7
 8011f96:	bd80      	pop	{r7, pc}

08011f98 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b082      	sub	sp, #8
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	6078      	str	r0, [r7, #4]
 8011fa0:	460b      	mov	r3, r1
 8011fa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011faa:	78fa      	ldrb	r2, [r7, #3]
 8011fac:	6879      	ldr	r1, [r7, #4]
 8011fae:	4613      	mov	r3, r2
 8011fb0:	009b      	lsls	r3, r3, #2
 8011fb2:	4413      	add	r3, r2
 8011fb4:	00db      	lsls	r3, r3, #3
 8011fb6:	440b      	add	r3, r1
 8011fb8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	78fb      	ldrb	r3, [r7, #3]
 8011fc0:	4619      	mov	r1, r3
 8011fc2:	f7fb fb6f 	bl	800d6a4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011fc6:	bf00      	nop
 8011fc8:	3708      	adds	r7, #8
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}

08011fce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fce:	b580      	push	{r7, lr}
 8011fd0:	b082      	sub	sp, #8
 8011fd2:	af00      	add	r7, sp, #0
 8011fd4:	6078      	str	r0, [r7, #4]
 8011fd6:	460b      	mov	r3, r1
 8011fd8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011fe0:	78fa      	ldrb	r2, [r7, #3]
 8011fe2:	6879      	ldr	r1, [r7, #4]
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	009b      	lsls	r3, r3, #2
 8011fe8:	4413      	add	r3, r2
 8011fea:	00db      	lsls	r3, r3, #3
 8011fec:	440b      	add	r3, r1
 8011fee:	3324      	adds	r3, #36	@ 0x24
 8011ff0:	681a      	ldr	r2, [r3, #0]
 8011ff2:	78fb      	ldrb	r3, [r7, #3]
 8011ff4:	4619      	mov	r1, r3
 8011ff6:	f7fb fc08 	bl	800d80a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011ffa:	bf00      	nop
 8011ffc:	3708      	adds	r7, #8
 8011ffe:	46bd      	mov	sp, r7
 8012000:	bd80      	pop	{r7, pc}

08012002 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012002:	b580      	push	{r7, lr}
 8012004:	b082      	sub	sp, #8
 8012006:	af00      	add	r7, sp, #0
 8012008:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012010:	4618      	mov	r0, r3
 8012012:	f7fb fd42 	bl	800da9a <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8012016:	bf00      	nop
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}

0801201e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801201e:	b580      	push	{r7, lr}
 8012020:	b084      	sub	sp, #16
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012026:	2301      	movs	r3, #1
 8012028:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	795b      	ldrb	r3, [r3, #5]
 801202e:	2b02      	cmp	r3, #2
 8012030:	d001      	beq.n	8012036 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8012032:	f7f0 f9e9 	bl	8002408 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801203c:	7bfa      	ldrb	r2, [r7, #15]
 801203e:	4611      	mov	r1, r2
 8012040:	4618      	mov	r0, r3
 8012042:	f7fb fce6 	bl	800da12 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801204c:	4618      	mov	r0, r3
 801204e:	f7fb fc8e 	bl	800d96e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012052:	bf00      	nop
 8012054:	3710      	adds	r7, #16
 8012056:	46bd      	mov	sp, r7
 8012058:	bd80      	pop	{r7, pc}
	...

0801205c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801206a:	4618      	mov	r0, r3
 801206c:	f7fb fce1 	bl	800da32 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	7a5b      	ldrb	r3, [r3, #9]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d005      	beq.n	8012084 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012078:	4b04      	ldr	r3, [pc, #16]	@ (801208c <HAL_PCD_SuspendCallback+0x30>)
 801207a:	691b      	ldr	r3, [r3, #16]
 801207c:	4a03      	ldr	r2, [pc, #12]	@ (801208c <HAL_PCD_SuspendCallback+0x30>)
 801207e:	f043 0306 	orr.w	r3, r3, #6
 8012082:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012084:	bf00      	nop
 8012086:	3708      	adds	r7, #8
 8012088:	46bd      	mov	sp, r7
 801208a:	bd80      	pop	{r7, pc}
 801208c:	e000ed00 	.word	0xe000ed00

08012090 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b082      	sub	sp, #8
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	7a5b      	ldrb	r3, [r3, #9]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d007      	beq.n	80120b0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80120a0:	4b08      	ldr	r3, [pc, #32]	@ (80120c4 <HAL_PCD_ResumeCallback+0x34>)
 80120a2:	691b      	ldr	r3, [r3, #16]
 80120a4:	4a07      	ldr	r2, [pc, #28]	@ (80120c4 <HAL_PCD_ResumeCallback+0x34>)
 80120a6:	f023 0306 	bic.w	r3, r3, #6
 80120aa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80120ac:	f000 f9fa 	bl	80124a4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120b6:	4618      	mov	r0, r3
 80120b8:	f7fb fcd7 	bl	800da6a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 80120bc:	bf00      	nop
 80120be:	3708      	adds	r7, #8
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	e000ed00 	.word	0xe000ed00

080120c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 80120d0:	4a2c      	ldr	r2, [pc, #176]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	4a2a      	ldr	r2, [pc, #168]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80120e0:	f7f5 f8c4 	bl	800726c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 80120e4:	4b27      	ldr	r3, [pc, #156]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120e6:	4a28      	ldr	r2, [pc, #160]	@ (8012188 <USBD_LL_Init+0xc0>)
 80120e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80120ea:	4b26      	ldr	r3, [pc, #152]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120ec:	2208      	movs	r2, #8
 80120ee:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80120f0:	4b24      	ldr	r3, [pc, #144]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120f2:	2202      	movs	r2, #2
 80120f4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80120f6:	4b23      	ldr	r3, [pc, #140]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120f8:	2202      	movs	r2, #2
 80120fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80120fc:	4b21      	ldr	r3, [pc, #132]	@ (8012184 <USBD_LL_Init+0xbc>)
 80120fe:	2200      	movs	r2, #0
 8012100:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8012102:	4b20      	ldr	r3, [pc, #128]	@ (8012184 <USBD_LL_Init+0xbc>)
 8012104:	2200      	movs	r2, #0
 8012106:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8012108:	4b1e      	ldr	r3, [pc, #120]	@ (8012184 <USBD_LL_Init+0xbc>)
 801210a:	2200      	movs	r2, #0
 801210c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801210e:	4b1d      	ldr	r3, [pc, #116]	@ (8012184 <USBD_LL_Init+0xbc>)
 8012110:	2200      	movs	r2, #0
 8012112:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8012114:	481b      	ldr	r0, [pc, #108]	@ (8012184 <USBD_LL_Init+0xbc>)
 8012116:	f7f3 fb57 	bl	80057c8 <HAL_PCD_Init>
 801211a:	4603      	mov	r3, r0
 801211c:	2b00      	cmp	r3, #0
 801211e:	d001      	beq.n	8012124 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8012120:	f7f0 f972 	bl	8002408 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801212a:	2318      	movs	r3, #24
 801212c:	2200      	movs	r2, #0
 801212e:	2100      	movs	r1, #0
 8012130:	f7f5 f810 	bl	8007154 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801213a:	2358      	movs	r3, #88	@ 0x58
 801213c:	2200      	movs	r2, #0
 801213e:	2180      	movs	r1, #128	@ 0x80
 8012140:	f7f5 f808 	bl	8007154 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801214a:	23c0      	movs	r3, #192	@ 0xc0
 801214c:	2200      	movs	r2, #0
 801214e:	2181      	movs	r1, #129	@ 0x81
 8012150:	f7f5 f800 	bl	8007154 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801215a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801215e:	2200      	movs	r2, #0
 8012160:	2101      	movs	r1, #1
 8012162:	f7f4 fff7 	bl	8007154 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801216c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012170:	2200      	movs	r2, #0
 8012172:	2182      	movs	r1, #130	@ 0x82
 8012174:	f7f4 ffee 	bl	8007154 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012178:	2300      	movs	r3, #0
}
 801217a:	4618      	mov	r0, r3
 801217c:	3708      	adds	r7, #8
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}
 8012182:	bf00      	nop
 8012184:	200019f0 	.word	0x200019f0
 8012188:	40006800 	.word	0x40006800

0801218c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801218c:	b580      	push	{r7, lr}
 801218e:	b084      	sub	sp, #16
 8012190:	af00      	add	r7, sp, #0
 8012192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012194:	2300      	movs	r3, #0
 8012196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012198:	2300      	movs	r3, #0
 801219a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7f3 fbde 	bl	8005964 <HAL_PCD_Start>
 80121a8:	4603      	mov	r3, r0
 80121aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121ac:	7bfb      	ldrb	r3, [r7, #15]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f000 f97e 	bl	80124b0 <USBD_Get_USB_Status>
 80121b4:	4603      	mov	r3, r0
 80121b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80121b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}

080121c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b084      	sub	sp, #16
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	4608      	mov	r0, r1
 80121cc:	4611      	mov	r1, r2
 80121ce:	461a      	mov	r2, r3
 80121d0:	4603      	mov	r3, r0
 80121d2:	70fb      	strb	r3, [r7, #3]
 80121d4:	460b      	mov	r3, r1
 80121d6:	70bb      	strb	r3, [r7, #2]
 80121d8:	4613      	mov	r3, r2
 80121da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80121dc:	2300      	movs	r3, #0
 80121de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80121e0:	2300      	movs	r3, #0
 80121e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121ea:	78bb      	ldrb	r3, [r7, #2]
 80121ec:	883a      	ldrh	r2, [r7, #0]
 80121ee:	78f9      	ldrb	r1, [r7, #3]
 80121f0:	f7f3 fd25 	bl	8005c3e <HAL_PCD_EP_Open>
 80121f4:	4603      	mov	r3, r0
 80121f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80121f8:	7bfb      	ldrb	r3, [r7, #15]
 80121fa:	4618      	mov	r0, r3
 80121fc:	f000 f958 	bl	80124b0 <USBD_Get_USB_Status>
 8012200:	4603      	mov	r3, r0
 8012202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012204:	7bbb      	ldrb	r3, [r7, #14]
}
 8012206:	4618      	mov	r0, r3
 8012208:	3710      	adds	r7, #16
 801220a:	46bd      	mov	sp, r7
 801220c:	bd80      	pop	{r7, pc}

0801220e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b084      	sub	sp, #16
 8012212:	af00      	add	r7, sp, #0
 8012214:	6078      	str	r0, [r7, #4]
 8012216:	460b      	mov	r3, r1
 8012218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801221a:	2300      	movs	r3, #0
 801221c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801221e:	2300      	movs	r3, #0
 8012220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012228:	78fa      	ldrb	r2, [r7, #3]
 801222a:	4611      	mov	r1, r2
 801222c:	4618      	mov	r0, r3
 801222e:	f7f3 fd63 	bl	8005cf8 <HAL_PCD_EP_Close>
 8012232:	4603      	mov	r3, r0
 8012234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012236:	7bfb      	ldrb	r3, [r7, #15]
 8012238:	4618      	mov	r0, r3
 801223a:	f000 f939 	bl	80124b0 <USBD_Get_USB_Status>
 801223e:	4603      	mov	r3, r0
 8012240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012242:	7bbb      	ldrb	r3, [r7, #14]
}
 8012244:	4618      	mov	r0, r3
 8012246:	3710      	adds	r7, #16
 8012248:	46bd      	mov	sp, r7
 801224a:	bd80      	pop	{r7, pc}

0801224c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b084      	sub	sp, #16
 8012250:	af00      	add	r7, sp, #0
 8012252:	6078      	str	r0, [r7, #4]
 8012254:	460b      	mov	r3, r1
 8012256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012258:	2300      	movs	r3, #0
 801225a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801225c:	2300      	movs	r3, #0
 801225e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012266:	78fa      	ldrb	r2, [r7, #3]
 8012268:	4611      	mov	r1, r2
 801226a:	4618      	mov	r0, r3
 801226c:	f7f3 fe0c 	bl	8005e88 <HAL_PCD_EP_SetStall>
 8012270:	4603      	mov	r3, r0
 8012272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012274:	7bfb      	ldrb	r3, [r7, #15]
 8012276:	4618      	mov	r0, r3
 8012278:	f000 f91a 	bl	80124b0 <USBD_Get_USB_Status>
 801227c:	4603      	mov	r3, r0
 801227e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012280:	7bbb      	ldrb	r3, [r7, #14]
}
 8012282:	4618      	mov	r0, r3
 8012284:	3710      	adds	r7, #16
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}

0801228a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801228a:	b580      	push	{r7, lr}
 801228c:	b084      	sub	sp, #16
 801228e:	af00      	add	r7, sp, #0
 8012290:	6078      	str	r0, [r7, #4]
 8012292:	460b      	mov	r3, r1
 8012294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012296:	2300      	movs	r3, #0
 8012298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801229a:	2300      	movs	r3, #0
 801229c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122a4:	78fa      	ldrb	r2, [r7, #3]
 80122a6:	4611      	mov	r1, r2
 80122a8:	4618      	mov	r0, r3
 80122aa:	f7f3 fe3f 	bl	8005f2c <HAL_PCD_EP_ClrStall>
 80122ae:	4603      	mov	r3, r0
 80122b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122b2:	7bfb      	ldrb	r3, [r7, #15]
 80122b4:	4618      	mov	r0, r3
 80122b6:	f000 f8fb 	bl	80124b0 <USBD_Get_USB_Status>
 80122ba:	4603      	mov	r3, r0
 80122bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122be:	7bbb      	ldrb	r3, [r7, #14]
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3710      	adds	r7, #16
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122c8:	b480      	push	{r7}
 80122ca:	b085      	sub	sp, #20
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	460b      	mov	r3, r1
 80122d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80122dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	da0b      	bge.n	80122fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80122e4:	78fb      	ldrb	r3, [r7, #3]
 80122e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80122ea:	68f9      	ldr	r1, [r7, #12]
 80122ec:	4613      	mov	r3, r2
 80122ee:	009b      	lsls	r3, r3, #2
 80122f0:	4413      	add	r3, r2
 80122f2:	00db      	lsls	r3, r3, #3
 80122f4:	440b      	add	r3, r1
 80122f6:	3312      	adds	r3, #18
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	e00b      	b.n	8012314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80122fc:	78fb      	ldrb	r3, [r7, #3]
 80122fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012302:	68f9      	ldr	r1, [r7, #12]
 8012304:	4613      	mov	r3, r2
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	4413      	add	r3, r2
 801230a:	00db      	lsls	r3, r3, #3
 801230c:	440b      	add	r3, r1
 801230e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8012312:	781b      	ldrb	r3, [r3, #0]
  }
}
 8012314:	4618      	mov	r0, r3
 8012316:	3714      	adds	r7, #20
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b084      	sub	sp, #16
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	460b      	mov	r3, r1
 801232a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801232c:	2300      	movs	r3, #0
 801232e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012330:	2300      	movs	r3, #0
 8012332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801233a:	78fa      	ldrb	r2, [r7, #3]
 801233c:	4611      	mov	r1, r2
 801233e:	4618      	mov	r0, r3
 8012340:	f7f3 fc59 	bl	8005bf6 <HAL_PCD_SetAddress>
 8012344:	4603      	mov	r3, r0
 8012346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012348:	7bfb      	ldrb	r3, [r7, #15]
 801234a:	4618      	mov	r0, r3
 801234c:	f000 f8b0 	bl	80124b0 <USBD_Get_USB_Status>
 8012350:	4603      	mov	r3, r0
 8012352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012354:	7bbb      	ldrb	r3, [r7, #14]
}
 8012356:	4618      	mov	r0, r3
 8012358:	3710      	adds	r7, #16
 801235a:	46bd      	mov	sp, r7
 801235c:	bd80      	pop	{r7, pc}

0801235e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801235e:	b580      	push	{r7, lr}
 8012360:	b086      	sub	sp, #24
 8012362:	af00      	add	r7, sp, #0
 8012364:	60f8      	str	r0, [r7, #12]
 8012366:	607a      	str	r2, [r7, #4]
 8012368:	603b      	str	r3, [r7, #0]
 801236a:	460b      	mov	r3, r1
 801236c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801236e:	2300      	movs	r3, #0
 8012370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012372:	2300      	movs	r3, #0
 8012374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801237c:	7af9      	ldrb	r1, [r7, #11]
 801237e:	683b      	ldr	r3, [r7, #0]
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	f7f3 fd4a 	bl	8005e1a <HAL_PCD_EP_Transmit>
 8012386:	4603      	mov	r3, r0
 8012388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801238a:	7dfb      	ldrb	r3, [r7, #23]
 801238c:	4618      	mov	r0, r3
 801238e:	f000 f88f 	bl	80124b0 <USBD_Get_USB_Status>
 8012392:	4603      	mov	r3, r0
 8012394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012396:	7dbb      	ldrb	r3, [r7, #22]
}
 8012398:	4618      	mov	r0, r3
 801239a:	3718      	adds	r7, #24
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b086      	sub	sp, #24
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	60f8      	str	r0, [r7, #12]
 80123a8:	607a      	str	r2, [r7, #4]
 80123aa:	603b      	str	r3, [r7, #0]
 80123ac:	460b      	mov	r3, r1
 80123ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123b0:	2300      	movs	r3, #0
 80123b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123b4:	2300      	movs	r3, #0
 80123b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80123be:	7af9      	ldrb	r1, [r7, #11]
 80123c0:	683b      	ldr	r3, [r7, #0]
 80123c2:	687a      	ldr	r2, [r7, #4]
 80123c4:	f7f3 fce0 	bl	8005d88 <HAL_PCD_EP_Receive>
 80123c8:	4603      	mov	r3, r0
 80123ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123cc:	7dfb      	ldrb	r3, [r7, #23]
 80123ce:	4618      	mov	r0, r3
 80123d0:	f000 f86e 	bl	80124b0 <USBD_Get_USB_Status>
 80123d4:	4603      	mov	r3, r0
 80123d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80123d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80123da:	4618      	mov	r0, r3
 80123dc:	3718      	adds	r7, #24
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}

080123e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80123e2:	b580      	push	{r7, lr}
 80123e4:	b082      	sub	sp, #8
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
 80123ea:	460b      	mov	r3, r1
 80123ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80123f4:	78fa      	ldrb	r2, [r7, #3]
 80123f6:	4611      	mov	r1, r2
 80123f8:	4618      	mov	r0, r3
 80123fa:	f7f3 fcf6 	bl	8005dea <HAL_PCD_EP_GetRxCount>
 80123fe:	4603      	mov	r3, r0
}
 8012400:	4618      	mov	r0, r3
 8012402:	3708      	adds	r7, #8
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}

08012408 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b082      	sub	sp, #8
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	460b      	mov	r3, r1
 8012412:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8012414:	78fb      	ldrb	r3, [r7, #3]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d002      	beq.n	8012420 <HAL_PCDEx_LPM_Callback+0x18>
 801241a:	2b01      	cmp	r3, #1
 801241c:	d013      	beq.n	8012446 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 801241e:	e023      	b.n	8012468 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	7a5b      	ldrb	r3, [r3, #9]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d007      	beq.n	8012438 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012428:	f000 f83c 	bl	80124a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801242c:	4b10      	ldr	r3, [pc, #64]	@ (8012470 <HAL_PCDEx_LPM_Callback+0x68>)
 801242e:	691b      	ldr	r3, [r3, #16]
 8012430:	4a0f      	ldr	r2, [pc, #60]	@ (8012470 <HAL_PCDEx_LPM_Callback+0x68>)
 8012432:	f023 0306 	bic.w	r3, r3, #6
 8012436:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801243e:	4618      	mov	r0, r3
 8012440:	f7fb fb13 	bl	800da6a <USBD_LL_Resume>
    break;
 8012444:	e010      	b.n	8012468 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801244c:	4618      	mov	r0, r3
 801244e:	f7fb faf0 	bl	800da32 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	7a5b      	ldrb	r3, [r3, #9]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d005      	beq.n	8012466 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801245a:	4b05      	ldr	r3, [pc, #20]	@ (8012470 <HAL_PCDEx_LPM_Callback+0x68>)
 801245c:	691b      	ldr	r3, [r3, #16]
 801245e:	4a04      	ldr	r2, [pc, #16]	@ (8012470 <HAL_PCDEx_LPM_Callback+0x68>)
 8012460:	f043 0306 	orr.w	r3, r3, #6
 8012464:	6113      	str	r3, [r2, #16]
    break;
 8012466:	bf00      	nop
}
 8012468:	bf00      	nop
 801246a:	3708      	adds	r7, #8
 801246c:	46bd      	mov	sp, r7
 801246e:	bd80      	pop	{r7, pc}
 8012470:	e000ed00 	.word	0xe000ed00

08012474 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012474:	b480      	push	{r7}
 8012476:	b083      	sub	sp, #12
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801247c:	4b03      	ldr	r3, [pc, #12]	@ (801248c <USBD_static_malloc+0x18>)
}
 801247e:	4618      	mov	r0, r3
 8012480:	370c      	adds	r7, #12
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
 801248a:	bf00      	nop
 801248c:	20001ccc 	.word	0x20001ccc

08012490 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012490:	b480      	push	{r7}
 8012492:	b083      	sub	sp, #12
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012498:	bf00      	nop
 801249a:	370c      	adds	r7, #12
 801249c:	46bd      	mov	sp, r7
 801249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124a2:	4770      	bx	lr

080124a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80124a8:	f7ef fd3c 	bl	8001f24 <SystemClock_Config>
}
 80124ac:	bf00      	nop
 80124ae:	bd80      	pop	{r7, pc}

080124b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b085      	sub	sp, #20
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	4603      	mov	r3, r0
 80124b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80124be:	79fb      	ldrb	r3, [r7, #7]
 80124c0:	2b03      	cmp	r3, #3
 80124c2:	d817      	bhi.n	80124f4 <USBD_Get_USB_Status+0x44>
 80124c4:	a201      	add	r2, pc, #4	@ (adr r2, 80124cc <USBD_Get_USB_Status+0x1c>)
 80124c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124ca:	bf00      	nop
 80124cc:	080124dd 	.word	0x080124dd
 80124d0:	080124e3 	.word	0x080124e3
 80124d4:	080124e9 	.word	0x080124e9
 80124d8:	080124ef 	.word	0x080124ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	73fb      	strb	r3, [r7, #15]
    break;
 80124e0:	e00b      	b.n	80124fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80124e2:	2303      	movs	r3, #3
 80124e4:	73fb      	strb	r3, [r7, #15]
    break;
 80124e6:	e008      	b.n	80124fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80124e8:	2301      	movs	r3, #1
 80124ea:	73fb      	strb	r3, [r7, #15]
    break;
 80124ec:	e005      	b.n	80124fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80124ee:	2303      	movs	r3, #3
 80124f0:	73fb      	strb	r3, [r7, #15]
    break;
 80124f2:	e002      	b.n	80124fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80124f4:	2303      	movs	r3, #3
 80124f6:	73fb      	strb	r3, [r7, #15]
    break;
 80124f8:	bf00      	nop
  }
  return usb_status;
 80124fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80124fc:	4618      	mov	r0, r3
 80124fe:	3714      	adds	r7, #20
 8012500:	46bd      	mov	sp, r7
 8012502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012506:	4770      	bx	lr

08012508 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8012508:	b480      	push	{r7}
 801250a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801250c:	4b05      	ldr	r3, [pc, #20]	@ (8012524 <UTIL_LPM_Init+0x1c>)
 801250e:	2200      	movs	r2, #0
 8012510:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8012512:	4b05      	ldr	r3, [pc, #20]	@ (8012528 <UTIL_LPM_Init+0x20>)
 8012514:	2200      	movs	r2, #0
 8012516:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8012518:	bf00      	nop
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr
 8012522:	bf00      	nop
 8012524:	20001eec 	.word	0x20001eec
 8012528:	20001ef0 	.word	0x20001ef0

0801252c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801252c:	b480      	push	{r7}
 801252e:	b087      	sub	sp, #28
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	460b      	mov	r3, r1
 8012536:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012538:	f3ef 8310 	mrs	r3, PRIMASK
 801253c:	613b      	str	r3, [r7, #16]
  return(result);
 801253e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8012540:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012542:	b672      	cpsid	i
}
 8012544:	bf00      	nop
  
  switch(state)
 8012546:	78fb      	ldrb	r3, [r7, #3]
 8012548:	2b00      	cmp	r3, #0
 801254a:	d008      	beq.n	801255e <UTIL_LPM_SetOffMode+0x32>
 801254c:	2b01      	cmp	r3, #1
 801254e:	d10e      	bne.n	801256e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8012550:	4b0d      	ldr	r3, [pc, #52]	@ (8012588 <UTIL_LPM_SetOffMode+0x5c>)
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	4313      	orrs	r3, r2
 8012558:	4a0b      	ldr	r2, [pc, #44]	@ (8012588 <UTIL_LPM_SetOffMode+0x5c>)
 801255a:	6013      	str	r3, [r2, #0]
      break;
 801255c:	e008      	b.n	8012570 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	43da      	mvns	r2, r3
 8012562:	4b09      	ldr	r3, [pc, #36]	@ (8012588 <UTIL_LPM_SetOffMode+0x5c>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	4013      	ands	r3, r2
 8012568:	4a07      	ldr	r2, [pc, #28]	@ (8012588 <UTIL_LPM_SetOffMode+0x5c>)
 801256a:	6013      	str	r3, [r2, #0]
      break;
 801256c:	e000      	b.n	8012570 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801256e:	bf00      	nop
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	f383 8810 	msr	PRIMASK, r3
}
 801257a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801257c:	bf00      	nop
 801257e:	371c      	adds	r7, #28
 8012580:	46bd      	mov	sp, r7
 8012582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012586:	4770      	bx	lr
 8012588:	20001ef0 	.word	0x20001ef0

0801258c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b090      	sub	sp, #64	@ 0x40
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8012594:	4b73      	ldr	r3, [pc, #460]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801259a:	4b72      	ldr	r3, [pc, #456]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	4013      	ands	r3, r2
 80125a2:	4a70      	ldr	r2, [pc, #448]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 80125a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80125a6:	4b70      	ldr	r3, [pc, #448]	@ (8012768 <UTIL_SEQ_Run+0x1dc>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80125ac:	4b6f      	ldr	r3, [pc, #444]	@ (801276c <UTIL_SEQ_Run+0x1e0>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80125b2:	4b6f      	ldr	r3, [pc, #444]	@ (8012770 <UTIL_SEQ_Run+0x1e4>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80125b8:	4b6e      	ldr	r3, [pc, #440]	@ (8012774 <UTIL_SEQ_Run+0x1e8>)
 80125ba:	681b      	ldr	r3, [r3, #0]
 80125bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80125be:	e08d      	b.n	80126dc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80125c0:	2300      	movs	r3, #0
 80125c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80125c4:	e002      	b.n	80125cc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80125c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125c8:	3301      	adds	r3, #1
 80125ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80125cc:	4a6a      	ldr	r2, [pc, #424]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 80125ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80125d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125d6:	401a      	ands	r2, r3
 80125d8:	4b62      	ldr	r3, [pc, #392]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4013      	ands	r3, r2
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d0f1      	beq.n	80125c6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80125e2:	4a65      	ldr	r2, [pc, #404]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 80125e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80125ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80125ec:	401a      	ands	r2, r3
 80125ee:	4b5d      	ldr	r3, [pc, #372]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 80125f0:	681b      	ldr	r3, [r3, #0]
 80125f2:	4013      	ands	r3, r2
 80125f4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80125f6:	4a60      	ldr	r2, [pc, #384]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 80125f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	4413      	add	r3, r2
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012602:	4013      	ands	r3, r2
 8012604:	2b00      	cmp	r3, #0
 8012606:	d106      	bne.n	8012616 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8012608:	4a5b      	ldr	r2, [pc, #364]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 801260a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801260c:	00db      	lsls	r3, r3, #3
 801260e:	4413      	add	r3, r2
 8012610:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012614:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8012616:	4a58      	ldr	r2, [pc, #352]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 8012618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801261a:	00db      	lsls	r3, r3, #3
 801261c:	4413      	add	r3, r2
 801261e:	685a      	ldr	r2, [r3, #4]
 8012620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012622:	4013      	ands	r3, r2
 8012624:	4618      	mov	r0, r3
 8012626:	f000 f9b3 	bl	8012990 <SEQ_BitPosition>
 801262a:	4603      	mov	r3, r0
 801262c:	461a      	mov	r2, r3
 801262e:	4b53      	ldr	r3, [pc, #332]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 8012630:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8012632:	4a51      	ldr	r2, [pc, #324]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 8012634:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012636:	00db      	lsls	r3, r3, #3
 8012638:	4413      	add	r3, r2
 801263a:	685a      	ldr	r2, [r3, #4]
 801263c:	4b4f      	ldr	r3, [pc, #316]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	2101      	movs	r1, #1
 8012642:	fa01 f303 	lsl.w	r3, r1, r3
 8012646:	43db      	mvns	r3, r3
 8012648:	401a      	ands	r2, r3
 801264a:	494b      	ldr	r1, [pc, #300]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 801264c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801264e:	00db      	lsls	r3, r3, #3
 8012650:	440b      	add	r3, r1
 8012652:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012654:	f3ef 8310 	mrs	r3, PRIMASK
 8012658:	61bb      	str	r3, [r7, #24]
  return(result);
 801265a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801265c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801265e:	b672      	cpsid	i
}
 8012660:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8012662:	4b46      	ldr	r3, [pc, #280]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	2201      	movs	r2, #1
 8012668:	fa02 f303 	lsl.w	r3, r2, r3
 801266c:	43da      	mvns	r2, r3
 801266e:	4b3e      	ldr	r3, [pc, #248]	@ (8012768 <UTIL_SEQ_Run+0x1dc>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	4013      	ands	r3, r2
 8012674:	4a3c      	ldr	r2, [pc, #240]	@ (8012768 <UTIL_SEQ_Run+0x1dc>)
 8012676:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8012678:	2302      	movs	r3, #2
 801267a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801267c:	e013      	b.n	80126a6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801267e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012680:	3b01      	subs	r3, #1
 8012682:	4a3d      	ldr	r2, [pc, #244]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 8012684:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8012688:	4b3c      	ldr	r3, [pc, #240]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	2201      	movs	r2, #1
 801268e:	fa02 f303 	lsl.w	r3, r2, r3
 8012692:	43da      	mvns	r2, r3
 8012694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012696:	3b01      	subs	r3, #1
 8012698:	400a      	ands	r2, r1
 801269a:	4937      	ldr	r1, [pc, #220]	@ (8012778 <UTIL_SEQ_Run+0x1ec>)
 801269c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80126a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a2:	3b01      	subs	r3, #1
 80126a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80126a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d1e8      	bne.n	801267e <UTIL_SEQ_Run+0xf2>
 80126ac:	6a3b      	ldr	r3, [r7, #32]
 80126ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80126b0:	697b      	ldr	r3, [r7, #20]
 80126b2:	f383 8810 	msr	PRIMASK, r3
}
 80126b6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80126b8:	4b30      	ldr	r3, [pc, #192]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	4a30      	ldr	r2, [pc, #192]	@ (8012780 <UTIL_SEQ_Run+0x1f4>)
 80126be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126c2:	4798      	blx	r3

    local_taskset = TaskSet;
 80126c4:	4b28      	ldr	r3, [pc, #160]	@ (8012768 <UTIL_SEQ_Run+0x1dc>)
 80126c6:	681b      	ldr	r3, [r3, #0]
 80126c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80126ca:	4b28      	ldr	r3, [pc, #160]	@ (801276c <UTIL_SEQ_Run+0x1e0>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80126d0:	4b27      	ldr	r3, [pc, #156]	@ (8012770 <UTIL_SEQ_Run+0x1e4>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80126d6:	4b27      	ldr	r3, [pc, #156]	@ (8012774 <UTIL_SEQ_Run+0x1e8>)
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80126dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126e0:	401a      	ands	r2, r3
 80126e2:	4b20      	ldr	r3, [pc, #128]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	4013      	ands	r3, r2
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d005      	beq.n	80126f8 <UTIL_SEQ_Run+0x16c>
 80126ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80126ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f0:	4013      	ands	r3, r2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	f43f af64 	beq.w	80125c0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80126f8:	4b20      	ldr	r3, [pc, #128]	@ (801277c <UTIL_SEQ_Run+0x1f0>)
 80126fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80126fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8012700:	f000 f938 	bl	8012974 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012704:	f3ef 8310 	mrs	r3, PRIMASK
 8012708:	613b      	str	r3, [r7, #16]
  return(result);
 801270a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801270c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801270e:	b672      	cpsid	i
}
 8012710:	bf00      	nop
  local_taskset = TaskSet;
 8012712:	4b15      	ldr	r3, [pc, #84]	@ (8012768 <UTIL_SEQ_Run+0x1dc>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8012718:	4b14      	ldr	r3, [pc, #80]	@ (801276c <UTIL_SEQ_Run+0x1e0>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801271e:	4b14      	ldr	r3, [pc, #80]	@ (8012770 <UTIL_SEQ_Run+0x1e4>)
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8012724:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012728:	401a      	ands	r2, r3
 801272a:	4b0e      	ldr	r3, [pc, #56]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	4013      	ands	r3, r2
 8012730:	2b00      	cmp	r3, #0
 8012732:	d107      	bne.n	8012744 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8012734:	4b0f      	ldr	r3, [pc, #60]	@ (8012774 <UTIL_SEQ_Run+0x1e8>)
 8012736:	681a      	ldr	r2, [r3, #0]
 8012738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801273a:	4013      	ands	r3, r2
 801273c:	2b00      	cmp	r3, #0
 801273e:	d101      	bne.n	8012744 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8012740:	f7ef f95b 	bl	80019fa <UTIL_SEQ_Idle>
 8012744:	69fb      	ldr	r3, [r7, #28]
 8012746:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	f383 8810 	msr	PRIMASK, r3
}
 801274e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8012750:	f000 f917 	bl	8012982 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8012754:	4a03      	ldr	r2, [pc, #12]	@ (8012764 <UTIL_SEQ_Run+0x1d8>)
 8012756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012758:	6013      	str	r3, [r2, #0]

  return;
 801275a:	bf00      	nop
}
 801275c:	3740      	adds	r7, #64	@ 0x40
 801275e:	46bd      	mov	sp, r7
 8012760:	bd80      	pop	{r7, pc}
 8012762:	bf00      	nop
 8012764:	20000134 	.word	0x20000134
 8012768:	20001ef4 	.word	0x20001ef4
 801276c:	20001ef8 	.word	0x20001ef8
 8012770:	20000130 	.word	0x20000130
 8012774:	20001efc 	.word	0x20001efc
 8012778:	20001f84 	.word	0x20001f84
 801277c:	20001f00 	.word	0x20001f00
 8012780:	20001f04 	.word	0x20001f04

08012784 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b088      	sub	sp, #32
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012790:	f3ef 8310 	mrs	r3, PRIMASK
 8012794:	617b      	str	r3, [r7, #20]
  return(result);
 8012796:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8012798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801279a:	b672      	cpsid	i
}
 801279c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f000 f8f6 	bl	8012990 <SEQ_BitPosition>
 80127a4:	4603      	mov	r3, r0
 80127a6:	4619      	mov	r1, r3
 80127a8:	4a06      	ldr	r2, [pc, #24]	@ (80127c4 <UTIL_SEQ_RegTask+0x40>)
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80127b4:	69bb      	ldr	r3, [r7, #24]
 80127b6:	f383 8810 	msr	PRIMASK, r3
}
 80127ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80127bc:	bf00      	nop
}
 80127be:	3720      	adds	r7, #32
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}
 80127c4:	20001f04 	.word	0x20001f04

080127c8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80127c8:	b480      	push	{r7}
 80127ca:	b087      	sub	sp, #28
 80127cc:	af00      	add	r7, sp, #0
 80127ce:	6078      	str	r0, [r7, #4]
 80127d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80127d2:	f3ef 8310 	mrs	r3, PRIMASK
 80127d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80127d8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80127da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80127dc:	b672      	cpsid	i
}
 80127de:	bf00      	nop

  TaskSet |= TaskId_bm;
 80127e0:	4b0d      	ldr	r3, [pc, #52]	@ (8012818 <UTIL_SEQ_SetTask+0x50>)
 80127e2:	681a      	ldr	r2, [r3, #0]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	4313      	orrs	r3, r2
 80127e8:	4a0b      	ldr	r2, [pc, #44]	@ (8012818 <UTIL_SEQ_SetTask+0x50>)
 80127ea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80127ec:	4a0b      	ldr	r2, [pc, #44]	@ (801281c <UTIL_SEQ_SetTask+0x54>)
 80127ee:	683b      	ldr	r3, [r7, #0]
 80127f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	431a      	orrs	r2, r3
 80127f8:	4908      	ldr	r1, [pc, #32]	@ (801281c <UTIL_SEQ_SetTask+0x54>)
 80127fa:	683b      	ldr	r3, [r7, #0]
 80127fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012804:	693b      	ldr	r3, [r7, #16]
 8012806:	f383 8810 	msr	PRIMASK, r3
}
 801280a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801280c:	bf00      	nop
}
 801280e:	371c      	adds	r7, #28
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr
 8012818:	20001ef4 	.word	0x20001ef4
 801281c:	20001f84 	.word	0x20001f84

08012820 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012820:	b480      	push	{r7}
 8012822:	b087      	sub	sp, #28
 8012824:	af00      	add	r7, sp, #0
 8012826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012828:	f3ef 8310 	mrs	r3, PRIMASK
 801282c:	60fb      	str	r3, [r7, #12]
  return(result);
 801282e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012830:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012832:	b672      	cpsid	i
}
 8012834:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	43da      	mvns	r2, r3
 801283a:	4b08      	ldr	r3, [pc, #32]	@ (801285c <UTIL_SEQ_PauseTask+0x3c>)
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	4013      	ands	r3, r2
 8012840:	4a06      	ldr	r2, [pc, #24]	@ (801285c <UTIL_SEQ_PauseTask+0x3c>)
 8012842:	6013      	str	r3, [r2, #0]
 8012844:	697b      	ldr	r3, [r7, #20]
 8012846:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012848:	693b      	ldr	r3, [r7, #16]
 801284a:	f383 8810 	msr	PRIMASK, r3
}
 801284e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8012850:	bf00      	nop
}
 8012852:	371c      	adds	r7, #28
 8012854:	46bd      	mov	sp, r7
 8012856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285a:	4770      	bx	lr
 801285c:	20000130 	.word	0x20000130

08012860 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8012860:	b480      	push	{r7}
 8012862:	b087      	sub	sp, #28
 8012864:	af00      	add	r7, sp, #0
 8012866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012868:	f3ef 8310 	mrs	r3, PRIMASK
 801286c:	60fb      	str	r3, [r7, #12]
  return(result);
 801286e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8012870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012872:	b672      	cpsid	i
}
 8012874:	bf00      	nop

  TaskMask |= TaskId_bm;
 8012876:	4b09      	ldr	r3, [pc, #36]	@ (801289c <UTIL_SEQ_ResumeTask+0x3c>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	4313      	orrs	r3, r2
 801287e:	4a07      	ldr	r2, [pc, #28]	@ (801289c <UTIL_SEQ_ResumeTask+0x3c>)
 8012880:	6013      	str	r3, [r2, #0]
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	f383 8810 	msr	PRIMASK, r3
}
 801288c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801288e:	bf00      	nop
}
 8012890:	371c      	adds	r7, #28
 8012892:	46bd      	mov	sp, r7
 8012894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	20000130 	.word	0x20000130

080128a0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 80128a0:	b480      	push	{r7}
 80128a2:	b087      	sub	sp, #28
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128a8:	f3ef 8310 	mrs	r3, PRIMASK
 80128ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80128ae:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80128b0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128b2:	b672      	cpsid	i
}
 80128b4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80128b6:	4b09      	ldr	r3, [pc, #36]	@ (80128dc <UTIL_SEQ_SetEvt+0x3c>)
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	4313      	orrs	r3, r2
 80128be:	4a07      	ldr	r2, [pc, #28]	@ (80128dc <UTIL_SEQ_SetEvt+0x3c>)
 80128c0:	6013      	str	r3, [r2, #0]
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	f383 8810 	msr	PRIMASK, r3
}
 80128cc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80128ce:	bf00      	nop
}
 80128d0:	371c      	adds	r7, #28
 80128d2:	46bd      	mov	sp, r7
 80128d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d8:	4770      	bx	lr
 80128da:	bf00      	nop
 80128dc:	20001ef8 	.word	0x20001ef8

080128e0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b088      	sub	sp, #32
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80128e8:	4b1f      	ldr	r3, [pc, #124]	@ (8012968 <UTIL_SEQ_WaitEvt+0x88>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80128ee:	4b1e      	ldr	r3, [pc, #120]	@ (8012968 <UTIL_SEQ_WaitEvt+0x88>)
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80128f6:	d102      	bne.n	80128fe <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80128f8:	2300      	movs	r3, #0
 80128fa:	61fb      	str	r3, [r7, #28]
 80128fc:	e005      	b.n	801290a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80128fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012968 <UTIL_SEQ_WaitEvt+0x88>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	2201      	movs	r2, #1
 8012904:	fa02 f303 	lsl.w	r3, r2, r3
 8012908:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801290a:	4b18      	ldr	r3, [pc, #96]	@ (801296c <UTIL_SEQ_WaitEvt+0x8c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8012910:	4a16      	ldr	r2, [pc, #88]	@ (801296c <UTIL_SEQ_WaitEvt+0x8c>)
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8012916:	e003      	b.n	8012920 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8012918:	6879      	ldr	r1, [r7, #4]
 801291a:	69f8      	ldr	r0, [r7, #28]
 801291c:	f7ef f874 	bl	8001a08 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8012920:	4b13      	ldr	r3, [pc, #76]	@ (8012970 <UTIL_SEQ_WaitEvt+0x90>)
 8012922:	681a      	ldr	r2, [r3, #0]
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	4013      	ands	r3, r2
 8012928:	2b00      	cmp	r3, #0
 801292a:	d0f5      	beq.n	8012918 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801292c:	4a0e      	ldr	r2, [pc, #56]	@ (8012968 <UTIL_SEQ_WaitEvt+0x88>)
 801292e:	69bb      	ldr	r3, [r7, #24]
 8012930:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012932:	f3ef 8310 	mrs	r3, PRIMASK
 8012936:	60bb      	str	r3, [r7, #8]
  return(result);
 8012938:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801293a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801293c:	b672      	cpsid	i
}
 801293e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	43da      	mvns	r2, r3
 8012944:	4b0a      	ldr	r3, [pc, #40]	@ (8012970 <UTIL_SEQ_WaitEvt+0x90>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4013      	ands	r3, r2
 801294a:	4a09      	ldr	r2, [pc, #36]	@ (8012970 <UTIL_SEQ_WaitEvt+0x90>)
 801294c:	6013      	str	r3, [r2, #0]
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012952:	68fb      	ldr	r3, [r7, #12]
 8012954:	f383 8810 	msr	PRIMASK, r3
}
 8012958:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801295a:	4a04      	ldr	r2, [pc, #16]	@ (801296c <UTIL_SEQ_WaitEvt+0x8c>)
 801295c:	697b      	ldr	r3, [r7, #20]
 801295e:	6013      	str	r3, [r2, #0]
  return;
 8012960:	bf00      	nop
}
 8012962:	3720      	adds	r7, #32
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}
 8012968:	20001f00 	.word	0x20001f00
 801296c:	20001efc 	.word	0x20001efc
 8012970:	20001ef8 	.word	0x20001ef8

08012974 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8012974:	b480      	push	{r7}
 8012976:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012978:	bf00      	nop
}
 801297a:	46bd      	mov	sp, r7
 801297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012980:	4770      	bx	lr

08012982 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8012982:	b480      	push	{r7}
 8012984:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8012986:	bf00      	nop
}
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8012990:	b480      	push	{r7}
 8012992:	b085      	sub	sp, #20
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8012998:	2300      	movs	r3, #0
 801299a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80129a0:	68bb      	ldr	r3, [r7, #8]
 80129a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80129a6:	d204      	bcs.n	80129b2 <SEQ_BitPosition+0x22>
 80129a8:	2310      	movs	r3, #16
 80129aa:	73fb      	strb	r3, [r7, #15]
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	041b      	lsls	r3, r3, #16
 80129b0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80129b8:	d205      	bcs.n	80129c6 <SEQ_BitPosition+0x36>
 80129ba:	7bfb      	ldrb	r3, [r7, #15]
 80129bc:	3308      	adds	r3, #8
 80129be:	73fb      	strb	r3, [r7, #15]
 80129c0:	68bb      	ldr	r3, [r7, #8]
 80129c2:	021b      	lsls	r3, r3, #8
 80129c4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80129c6:	68bb      	ldr	r3, [r7, #8]
 80129c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80129cc:	d205      	bcs.n	80129da <SEQ_BitPosition+0x4a>
 80129ce:	7bfb      	ldrb	r3, [r7, #15]
 80129d0:	3304      	adds	r3, #4
 80129d2:	73fb      	strb	r3, [r7, #15]
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	011b      	lsls	r3, r3, #4
 80129d8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80129da:	68bb      	ldr	r3, [r7, #8]
 80129dc:	0f1b      	lsrs	r3, r3, #28
 80129de:	4a07      	ldr	r2, [pc, #28]	@ (80129fc <SEQ_BitPosition+0x6c>)
 80129e0:	5cd2      	ldrb	r2, [r2, r3]
 80129e2:	7bfb      	ldrb	r3, [r7, #15]
 80129e4:	4413      	add	r3, r2
 80129e6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80129e8:	7bfb      	ldrb	r3, [r7, #15]
 80129ea:	f1c3 031f 	rsb	r3, r3, #31
 80129ee:	b2db      	uxtb	r3, r3
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3714      	adds	r7, #20
 80129f4:	46bd      	mov	sp, r7
 80129f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129fa:	4770      	bx	lr
 80129fc:	08013714 	.word	0x08013714

08012a00 <sniprintf>:
 8012a00:	b40c      	push	{r2, r3}
 8012a02:	b530      	push	{r4, r5, lr}
 8012a04:	4b17      	ldr	r3, [pc, #92]	@ (8012a64 <sniprintf+0x64>)
 8012a06:	1e0c      	subs	r4, r1, #0
 8012a08:	681d      	ldr	r5, [r3, #0]
 8012a0a:	b09d      	sub	sp, #116	@ 0x74
 8012a0c:	da08      	bge.n	8012a20 <sniprintf+0x20>
 8012a0e:	238b      	movs	r3, #139	@ 0x8b
 8012a10:	602b      	str	r3, [r5, #0]
 8012a12:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a16:	b01d      	add	sp, #116	@ 0x74
 8012a18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012a1c:	b002      	add	sp, #8
 8012a1e:	4770      	bx	lr
 8012a20:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8012a24:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012a28:	bf14      	ite	ne
 8012a2a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8012a2e:	4623      	moveq	r3, r4
 8012a30:	9304      	str	r3, [sp, #16]
 8012a32:	9307      	str	r3, [sp, #28]
 8012a34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012a38:	9002      	str	r0, [sp, #8]
 8012a3a:	9006      	str	r0, [sp, #24]
 8012a3c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012a40:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012a42:	ab21      	add	r3, sp, #132	@ 0x84
 8012a44:	a902      	add	r1, sp, #8
 8012a46:	4628      	mov	r0, r5
 8012a48:	9301      	str	r3, [sp, #4]
 8012a4a:	f000 f9a3 	bl	8012d94 <_svfiprintf_r>
 8012a4e:	1c43      	adds	r3, r0, #1
 8012a50:	bfbc      	itt	lt
 8012a52:	238b      	movlt	r3, #139	@ 0x8b
 8012a54:	602b      	strlt	r3, [r5, #0]
 8012a56:	2c00      	cmp	r4, #0
 8012a58:	d0dd      	beq.n	8012a16 <sniprintf+0x16>
 8012a5a:	9b02      	ldr	r3, [sp, #8]
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	701a      	strb	r2, [r3, #0]
 8012a60:	e7d9      	b.n	8012a16 <sniprintf+0x16>
 8012a62:	bf00      	nop
 8012a64:	20000138 	.word	0x20000138

08012a68 <memset>:
 8012a68:	4402      	add	r2, r0
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	d100      	bne.n	8012a72 <memset+0xa>
 8012a70:	4770      	bx	lr
 8012a72:	f803 1b01 	strb.w	r1, [r3], #1
 8012a76:	e7f9      	b.n	8012a6c <memset+0x4>

08012a78 <__errno>:
 8012a78:	4b01      	ldr	r3, [pc, #4]	@ (8012a80 <__errno+0x8>)
 8012a7a:	6818      	ldr	r0, [r3, #0]
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop
 8012a80:	20000138 	.word	0x20000138

08012a84 <__libc_init_array>:
 8012a84:	b570      	push	{r4, r5, r6, lr}
 8012a86:	4d0d      	ldr	r5, [pc, #52]	@ (8012abc <__libc_init_array+0x38>)
 8012a88:	4c0d      	ldr	r4, [pc, #52]	@ (8012ac0 <__libc_init_array+0x3c>)
 8012a8a:	1b64      	subs	r4, r4, r5
 8012a8c:	10a4      	asrs	r4, r4, #2
 8012a8e:	2600      	movs	r6, #0
 8012a90:	42a6      	cmp	r6, r4
 8012a92:	d109      	bne.n	8012aa8 <__libc_init_array+0x24>
 8012a94:	4d0b      	ldr	r5, [pc, #44]	@ (8012ac4 <__libc_init_array+0x40>)
 8012a96:	4c0c      	ldr	r4, [pc, #48]	@ (8012ac8 <__libc_init_array+0x44>)
 8012a98:	f000 fc66 	bl	8013368 <_init>
 8012a9c:	1b64      	subs	r4, r4, r5
 8012a9e:	10a4      	asrs	r4, r4, #2
 8012aa0:	2600      	movs	r6, #0
 8012aa2:	42a6      	cmp	r6, r4
 8012aa4:	d105      	bne.n	8012ab2 <__libc_init_array+0x2e>
 8012aa6:	bd70      	pop	{r4, r5, r6, pc}
 8012aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8012aac:	4798      	blx	r3
 8012aae:	3601      	adds	r6, #1
 8012ab0:	e7ee      	b.n	8012a90 <__libc_init_array+0xc>
 8012ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8012ab6:	4798      	blx	r3
 8012ab8:	3601      	adds	r6, #1
 8012aba:	e7f2      	b.n	8012aa2 <__libc_init_array+0x1e>
 8012abc:	08013760 	.word	0x08013760
 8012ac0:	08013760 	.word	0x08013760
 8012ac4:	08013760 	.word	0x08013760
 8012ac8:	08013764 	.word	0x08013764

08012acc <__retarget_lock_acquire_recursive>:
 8012acc:	4770      	bx	lr

08012ace <__retarget_lock_release_recursive>:
 8012ace:	4770      	bx	lr

08012ad0 <memcpy>:
 8012ad0:	440a      	add	r2, r1
 8012ad2:	4291      	cmp	r1, r2
 8012ad4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8012ad8:	d100      	bne.n	8012adc <memcpy+0xc>
 8012ada:	4770      	bx	lr
 8012adc:	b510      	push	{r4, lr}
 8012ade:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ae2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012ae6:	4291      	cmp	r1, r2
 8012ae8:	d1f9      	bne.n	8012ade <memcpy+0xe>
 8012aea:	bd10      	pop	{r4, pc}

08012aec <_free_r>:
 8012aec:	b538      	push	{r3, r4, r5, lr}
 8012aee:	4605      	mov	r5, r0
 8012af0:	2900      	cmp	r1, #0
 8012af2:	d041      	beq.n	8012b78 <_free_r+0x8c>
 8012af4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012af8:	1f0c      	subs	r4, r1, #4
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	bfb8      	it	lt
 8012afe:	18e4      	addlt	r4, r4, r3
 8012b00:	f000 f8e0 	bl	8012cc4 <__malloc_lock>
 8012b04:	4a1d      	ldr	r2, [pc, #116]	@ (8012b7c <_free_r+0x90>)
 8012b06:	6813      	ldr	r3, [r2, #0]
 8012b08:	b933      	cbnz	r3, 8012b18 <_free_r+0x2c>
 8012b0a:	6063      	str	r3, [r4, #4]
 8012b0c:	6014      	str	r4, [r2, #0]
 8012b0e:	4628      	mov	r0, r5
 8012b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b14:	f000 b8dc 	b.w	8012cd0 <__malloc_unlock>
 8012b18:	42a3      	cmp	r3, r4
 8012b1a:	d908      	bls.n	8012b2e <_free_r+0x42>
 8012b1c:	6820      	ldr	r0, [r4, #0]
 8012b1e:	1821      	adds	r1, r4, r0
 8012b20:	428b      	cmp	r3, r1
 8012b22:	bf01      	itttt	eq
 8012b24:	6819      	ldreq	r1, [r3, #0]
 8012b26:	685b      	ldreq	r3, [r3, #4]
 8012b28:	1809      	addeq	r1, r1, r0
 8012b2a:	6021      	streq	r1, [r4, #0]
 8012b2c:	e7ed      	b.n	8012b0a <_free_r+0x1e>
 8012b2e:	461a      	mov	r2, r3
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	b10b      	cbz	r3, 8012b38 <_free_r+0x4c>
 8012b34:	42a3      	cmp	r3, r4
 8012b36:	d9fa      	bls.n	8012b2e <_free_r+0x42>
 8012b38:	6811      	ldr	r1, [r2, #0]
 8012b3a:	1850      	adds	r0, r2, r1
 8012b3c:	42a0      	cmp	r0, r4
 8012b3e:	d10b      	bne.n	8012b58 <_free_r+0x6c>
 8012b40:	6820      	ldr	r0, [r4, #0]
 8012b42:	4401      	add	r1, r0
 8012b44:	1850      	adds	r0, r2, r1
 8012b46:	4283      	cmp	r3, r0
 8012b48:	6011      	str	r1, [r2, #0]
 8012b4a:	d1e0      	bne.n	8012b0e <_free_r+0x22>
 8012b4c:	6818      	ldr	r0, [r3, #0]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	6053      	str	r3, [r2, #4]
 8012b52:	4408      	add	r0, r1
 8012b54:	6010      	str	r0, [r2, #0]
 8012b56:	e7da      	b.n	8012b0e <_free_r+0x22>
 8012b58:	d902      	bls.n	8012b60 <_free_r+0x74>
 8012b5a:	230c      	movs	r3, #12
 8012b5c:	602b      	str	r3, [r5, #0]
 8012b5e:	e7d6      	b.n	8012b0e <_free_r+0x22>
 8012b60:	6820      	ldr	r0, [r4, #0]
 8012b62:	1821      	adds	r1, r4, r0
 8012b64:	428b      	cmp	r3, r1
 8012b66:	bf04      	itt	eq
 8012b68:	6819      	ldreq	r1, [r3, #0]
 8012b6a:	685b      	ldreq	r3, [r3, #4]
 8012b6c:	6063      	str	r3, [r4, #4]
 8012b6e:	bf04      	itt	eq
 8012b70:	1809      	addeq	r1, r1, r0
 8012b72:	6021      	streq	r1, [r4, #0]
 8012b74:	6054      	str	r4, [r2, #4]
 8012b76:	e7ca      	b.n	8012b0e <_free_r+0x22>
 8012b78:	bd38      	pop	{r3, r4, r5, pc}
 8012b7a:	bf00      	nop
 8012b7c:	200020d8 	.word	0x200020d8

08012b80 <sbrk_aligned>:
 8012b80:	b570      	push	{r4, r5, r6, lr}
 8012b82:	4e0f      	ldr	r6, [pc, #60]	@ (8012bc0 <sbrk_aligned+0x40>)
 8012b84:	460c      	mov	r4, r1
 8012b86:	6831      	ldr	r1, [r6, #0]
 8012b88:	4605      	mov	r5, r0
 8012b8a:	b911      	cbnz	r1, 8012b92 <sbrk_aligned+0x12>
 8012b8c:	f000 fba6 	bl	80132dc <_sbrk_r>
 8012b90:	6030      	str	r0, [r6, #0]
 8012b92:	4621      	mov	r1, r4
 8012b94:	4628      	mov	r0, r5
 8012b96:	f000 fba1 	bl	80132dc <_sbrk_r>
 8012b9a:	1c43      	adds	r3, r0, #1
 8012b9c:	d103      	bne.n	8012ba6 <sbrk_aligned+0x26>
 8012b9e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	bd70      	pop	{r4, r5, r6, pc}
 8012ba6:	1cc4      	adds	r4, r0, #3
 8012ba8:	f024 0403 	bic.w	r4, r4, #3
 8012bac:	42a0      	cmp	r0, r4
 8012bae:	d0f8      	beq.n	8012ba2 <sbrk_aligned+0x22>
 8012bb0:	1a21      	subs	r1, r4, r0
 8012bb2:	4628      	mov	r0, r5
 8012bb4:	f000 fb92 	bl	80132dc <_sbrk_r>
 8012bb8:	3001      	adds	r0, #1
 8012bba:	d1f2      	bne.n	8012ba2 <sbrk_aligned+0x22>
 8012bbc:	e7ef      	b.n	8012b9e <sbrk_aligned+0x1e>
 8012bbe:	bf00      	nop
 8012bc0:	200020d4 	.word	0x200020d4

08012bc4 <_malloc_r>:
 8012bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012bc8:	1ccd      	adds	r5, r1, #3
 8012bca:	f025 0503 	bic.w	r5, r5, #3
 8012bce:	3508      	adds	r5, #8
 8012bd0:	2d0c      	cmp	r5, #12
 8012bd2:	bf38      	it	cc
 8012bd4:	250c      	movcc	r5, #12
 8012bd6:	2d00      	cmp	r5, #0
 8012bd8:	4606      	mov	r6, r0
 8012bda:	db01      	blt.n	8012be0 <_malloc_r+0x1c>
 8012bdc:	42a9      	cmp	r1, r5
 8012bde:	d904      	bls.n	8012bea <_malloc_r+0x26>
 8012be0:	230c      	movs	r3, #12
 8012be2:	6033      	str	r3, [r6, #0]
 8012be4:	2000      	movs	r0, #0
 8012be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012bea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012cc0 <_malloc_r+0xfc>
 8012bee:	f000 f869 	bl	8012cc4 <__malloc_lock>
 8012bf2:	f8d8 3000 	ldr.w	r3, [r8]
 8012bf6:	461c      	mov	r4, r3
 8012bf8:	bb44      	cbnz	r4, 8012c4c <_malloc_r+0x88>
 8012bfa:	4629      	mov	r1, r5
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	f7ff ffbf 	bl	8012b80 <sbrk_aligned>
 8012c02:	1c43      	adds	r3, r0, #1
 8012c04:	4604      	mov	r4, r0
 8012c06:	d158      	bne.n	8012cba <_malloc_r+0xf6>
 8012c08:	f8d8 4000 	ldr.w	r4, [r8]
 8012c0c:	4627      	mov	r7, r4
 8012c0e:	2f00      	cmp	r7, #0
 8012c10:	d143      	bne.n	8012c9a <_malloc_r+0xd6>
 8012c12:	2c00      	cmp	r4, #0
 8012c14:	d04b      	beq.n	8012cae <_malloc_r+0xea>
 8012c16:	6823      	ldr	r3, [r4, #0]
 8012c18:	4639      	mov	r1, r7
 8012c1a:	4630      	mov	r0, r6
 8012c1c:	eb04 0903 	add.w	r9, r4, r3
 8012c20:	f000 fb5c 	bl	80132dc <_sbrk_r>
 8012c24:	4581      	cmp	r9, r0
 8012c26:	d142      	bne.n	8012cae <_malloc_r+0xea>
 8012c28:	6821      	ldr	r1, [r4, #0]
 8012c2a:	1a6d      	subs	r5, r5, r1
 8012c2c:	4629      	mov	r1, r5
 8012c2e:	4630      	mov	r0, r6
 8012c30:	f7ff ffa6 	bl	8012b80 <sbrk_aligned>
 8012c34:	3001      	adds	r0, #1
 8012c36:	d03a      	beq.n	8012cae <_malloc_r+0xea>
 8012c38:	6823      	ldr	r3, [r4, #0]
 8012c3a:	442b      	add	r3, r5
 8012c3c:	6023      	str	r3, [r4, #0]
 8012c3e:	f8d8 3000 	ldr.w	r3, [r8]
 8012c42:	685a      	ldr	r2, [r3, #4]
 8012c44:	bb62      	cbnz	r2, 8012ca0 <_malloc_r+0xdc>
 8012c46:	f8c8 7000 	str.w	r7, [r8]
 8012c4a:	e00f      	b.n	8012c6c <_malloc_r+0xa8>
 8012c4c:	6822      	ldr	r2, [r4, #0]
 8012c4e:	1b52      	subs	r2, r2, r5
 8012c50:	d420      	bmi.n	8012c94 <_malloc_r+0xd0>
 8012c52:	2a0b      	cmp	r2, #11
 8012c54:	d917      	bls.n	8012c86 <_malloc_r+0xc2>
 8012c56:	1961      	adds	r1, r4, r5
 8012c58:	42a3      	cmp	r3, r4
 8012c5a:	6025      	str	r5, [r4, #0]
 8012c5c:	bf18      	it	ne
 8012c5e:	6059      	strne	r1, [r3, #4]
 8012c60:	6863      	ldr	r3, [r4, #4]
 8012c62:	bf08      	it	eq
 8012c64:	f8c8 1000 	streq.w	r1, [r8]
 8012c68:	5162      	str	r2, [r4, r5]
 8012c6a:	604b      	str	r3, [r1, #4]
 8012c6c:	4630      	mov	r0, r6
 8012c6e:	f000 f82f 	bl	8012cd0 <__malloc_unlock>
 8012c72:	f104 000b 	add.w	r0, r4, #11
 8012c76:	1d23      	adds	r3, r4, #4
 8012c78:	f020 0007 	bic.w	r0, r0, #7
 8012c7c:	1ac2      	subs	r2, r0, r3
 8012c7e:	bf1c      	itt	ne
 8012c80:	1a1b      	subne	r3, r3, r0
 8012c82:	50a3      	strne	r3, [r4, r2]
 8012c84:	e7af      	b.n	8012be6 <_malloc_r+0x22>
 8012c86:	6862      	ldr	r2, [r4, #4]
 8012c88:	42a3      	cmp	r3, r4
 8012c8a:	bf0c      	ite	eq
 8012c8c:	f8c8 2000 	streq.w	r2, [r8]
 8012c90:	605a      	strne	r2, [r3, #4]
 8012c92:	e7eb      	b.n	8012c6c <_malloc_r+0xa8>
 8012c94:	4623      	mov	r3, r4
 8012c96:	6864      	ldr	r4, [r4, #4]
 8012c98:	e7ae      	b.n	8012bf8 <_malloc_r+0x34>
 8012c9a:	463c      	mov	r4, r7
 8012c9c:	687f      	ldr	r7, [r7, #4]
 8012c9e:	e7b6      	b.n	8012c0e <_malloc_r+0x4a>
 8012ca0:	461a      	mov	r2, r3
 8012ca2:	685b      	ldr	r3, [r3, #4]
 8012ca4:	42a3      	cmp	r3, r4
 8012ca6:	d1fb      	bne.n	8012ca0 <_malloc_r+0xdc>
 8012ca8:	2300      	movs	r3, #0
 8012caa:	6053      	str	r3, [r2, #4]
 8012cac:	e7de      	b.n	8012c6c <_malloc_r+0xa8>
 8012cae:	230c      	movs	r3, #12
 8012cb0:	6033      	str	r3, [r6, #0]
 8012cb2:	4630      	mov	r0, r6
 8012cb4:	f000 f80c 	bl	8012cd0 <__malloc_unlock>
 8012cb8:	e794      	b.n	8012be4 <_malloc_r+0x20>
 8012cba:	6005      	str	r5, [r0, #0]
 8012cbc:	e7d6      	b.n	8012c6c <_malloc_r+0xa8>
 8012cbe:	bf00      	nop
 8012cc0:	200020d8 	.word	0x200020d8

08012cc4 <__malloc_lock>:
 8012cc4:	4801      	ldr	r0, [pc, #4]	@ (8012ccc <__malloc_lock+0x8>)
 8012cc6:	f7ff bf01 	b.w	8012acc <__retarget_lock_acquire_recursive>
 8012cca:	bf00      	nop
 8012ccc:	200020d0 	.word	0x200020d0

08012cd0 <__malloc_unlock>:
 8012cd0:	4801      	ldr	r0, [pc, #4]	@ (8012cd8 <__malloc_unlock+0x8>)
 8012cd2:	f7ff befc 	b.w	8012ace <__retarget_lock_release_recursive>
 8012cd6:	bf00      	nop
 8012cd8:	200020d0 	.word	0x200020d0

08012cdc <__ssputs_r>:
 8012cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ce0:	688e      	ldr	r6, [r1, #8]
 8012ce2:	461f      	mov	r7, r3
 8012ce4:	42be      	cmp	r6, r7
 8012ce6:	680b      	ldr	r3, [r1, #0]
 8012ce8:	4682      	mov	sl, r0
 8012cea:	460c      	mov	r4, r1
 8012cec:	4690      	mov	r8, r2
 8012cee:	d82d      	bhi.n	8012d4c <__ssputs_r+0x70>
 8012cf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012cf4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012cf8:	d026      	beq.n	8012d48 <__ssputs_r+0x6c>
 8012cfa:	6965      	ldr	r5, [r4, #20]
 8012cfc:	6909      	ldr	r1, [r1, #16]
 8012cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d02:	eba3 0901 	sub.w	r9, r3, r1
 8012d06:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d0a:	1c7b      	adds	r3, r7, #1
 8012d0c:	444b      	add	r3, r9
 8012d0e:	106d      	asrs	r5, r5, #1
 8012d10:	429d      	cmp	r5, r3
 8012d12:	bf38      	it	cc
 8012d14:	461d      	movcc	r5, r3
 8012d16:	0553      	lsls	r3, r2, #21
 8012d18:	d527      	bpl.n	8012d6a <__ssputs_r+0x8e>
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f7ff ff52 	bl	8012bc4 <_malloc_r>
 8012d20:	4606      	mov	r6, r0
 8012d22:	b360      	cbz	r0, 8012d7e <__ssputs_r+0xa2>
 8012d24:	6921      	ldr	r1, [r4, #16]
 8012d26:	464a      	mov	r2, r9
 8012d28:	f7ff fed2 	bl	8012ad0 <memcpy>
 8012d2c:	89a3      	ldrh	r3, [r4, #12]
 8012d2e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012d36:	81a3      	strh	r3, [r4, #12]
 8012d38:	6126      	str	r6, [r4, #16]
 8012d3a:	6165      	str	r5, [r4, #20]
 8012d3c:	444e      	add	r6, r9
 8012d3e:	eba5 0509 	sub.w	r5, r5, r9
 8012d42:	6026      	str	r6, [r4, #0]
 8012d44:	60a5      	str	r5, [r4, #8]
 8012d46:	463e      	mov	r6, r7
 8012d48:	42be      	cmp	r6, r7
 8012d4a:	d900      	bls.n	8012d4e <__ssputs_r+0x72>
 8012d4c:	463e      	mov	r6, r7
 8012d4e:	6820      	ldr	r0, [r4, #0]
 8012d50:	4632      	mov	r2, r6
 8012d52:	4641      	mov	r1, r8
 8012d54:	f000 faa8 	bl	80132a8 <memmove>
 8012d58:	68a3      	ldr	r3, [r4, #8]
 8012d5a:	1b9b      	subs	r3, r3, r6
 8012d5c:	60a3      	str	r3, [r4, #8]
 8012d5e:	6823      	ldr	r3, [r4, #0]
 8012d60:	4433      	add	r3, r6
 8012d62:	6023      	str	r3, [r4, #0]
 8012d64:	2000      	movs	r0, #0
 8012d66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d6a:	462a      	mov	r2, r5
 8012d6c:	f000 fac6 	bl	80132fc <_realloc_r>
 8012d70:	4606      	mov	r6, r0
 8012d72:	2800      	cmp	r0, #0
 8012d74:	d1e0      	bne.n	8012d38 <__ssputs_r+0x5c>
 8012d76:	6921      	ldr	r1, [r4, #16]
 8012d78:	4650      	mov	r0, sl
 8012d7a:	f7ff feb7 	bl	8012aec <_free_r>
 8012d7e:	230c      	movs	r3, #12
 8012d80:	f8ca 3000 	str.w	r3, [sl]
 8012d84:	89a3      	ldrh	r3, [r4, #12]
 8012d86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012d8a:	81a3      	strh	r3, [r4, #12]
 8012d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012d90:	e7e9      	b.n	8012d66 <__ssputs_r+0x8a>
	...

08012d94 <_svfiprintf_r>:
 8012d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d98:	4698      	mov	r8, r3
 8012d9a:	898b      	ldrh	r3, [r1, #12]
 8012d9c:	061b      	lsls	r3, r3, #24
 8012d9e:	b09d      	sub	sp, #116	@ 0x74
 8012da0:	4607      	mov	r7, r0
 8012da2:	460d      	mov	r5, r1
 8012da4:	4614      	mov	r4, r2
 8012da6:	d510      	bpl.n	8012dca <_svfiprintf_r+0x36>
 8012da8:	690b      	ldr	r3, [r1, #16]
 8012daa:	b973      	cbnz	r3, 8012dca <_svfiprintf_r+0x36>
 8012dac:	2140      	movs	r1, #64	@ 0x40
 8012dae:	f7ff ff09 	bl	8012bc4 <_malloc_r>
 8012db2:	6028      	str	r0, [r5, #0]
 8012db4:	6128      	str	r0, [r5, #16]
 8012db6:	b930      	cbnz	r0, 8012dc6 <_svfiprintf_r+0x32>
 8012db8:	230c      	movs	r3, #12
 8012dba:	603b      	str	r3, [r7, #0]
 8012dbc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012dc0:	b01d      	add	sp, #116	@ 0x74
 8012dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012dc6:	2340      	movs	r3, #64	@ 0x40
 8012dc8:	616b      	str	r3, [r5, #20]
 8012dca:	2300      	movs	r3, #0
 8012dcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8012dce:	2320      	movs	r3, #32
 8012dd0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8012dd8:	2330      	movs	r3, #48	@ 0x30
 8012dda:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012f78 <_svfiprintf_r+0x1e4>
 8012dde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012de2:	f04f 0901 	mov.w	r9, #1
 8012de6:	4623      	mov	r3, r4
 8012de8:	469a      	mov	sl, r3
 8012dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012dee:	b10a      	cbz	r2, 8012df4 <_svfiprintf_r+0x60>
 8012df0:	2a25      	cmp	r2, #37	@ 0x25
 8012df2:	d1f9      	bne.n	8012de8 <_svfiprintf_r+0x54>
 8012df4:	ebba 0b04 	subs.w	fp, sl, r4
 8012df8:	d00b      	beq.n	8012e12 <_svfiprintf_r+0x7e>
 8012dfa:	465b      	mov	r3, fp
 8012dfc:	4622      	mov	r2, r4
 8012dfe:	4629      	mov	r1, r5
 8012e00:	4638      	mov	r0, r7
 8012e02:	f7ff ff6b 	bl	8012cdc <__ssputs_r>
 8012e06:	3001      	adds	r0, #1
 8012e08:	f000 80a7 	beq.w	8012f5a <_svfiprintf_r+0x1c6>
 8012e0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e0e:	445a      	add	r2, fp
 8012e10:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e12:	f89a 3000 	ldrb.w	r3, [sl]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	f000 809f 	beq.w	8012f5a <_svfiprintf_r+0x1c6>
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e26:	f10a 0a01 	add.w	sl, sl, #1
 8012e2a:	9304      	str	r3, [sp, #16]
 8012e2c:	9307      	str	r3, [sp, #28]
 8012e2e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012e32:	931a      	str	r3, [sp, #104]	@ 0x68
 8012e34:	4654      	mov	r4, sl
 8012e36:	2205      	movs	r2, #5
 8012e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012e3c:	484e      	ldr	r0, [pc, #312]	@ (8012f78 <_svfiprintf_r+0x1e4>)
 8012e3e:	f7ed f9a7 	bl	8000190 <memchr>
 8012e42:	9a04      	ldr	r2, [sp, #16]
 8012e44:	b9d8      	cbnz	r0, 8012e7e <_svfiprintf_r+0xea>
 8012e46:	06d0      	lsls	r0, r2, #27
 8012e48:	bf44      	itt	mi
 8012e4a:	2320      	movmi	r3, #32
 8012e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e50:	0711      	lsls	r1, r2, #28
 8012e52:	bf44      	itt	mi
 8012e54:	232b      	movmi	r3, #43	@ 0x2b
 8012e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8012e5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012e60:	d015      	beq.n	8012e8e <_svfiprintf_r+0xfa>
 8012e62:	9a07      	ldr	r2, [sp, #28]
 8012e64:	4654      	mov	r4, sl
 8012e66:	2000      	movs	r0, #0
 8012e68:	f04f 0c0a 	mov.w	ip, #10
 8012e6c:	4621      	mov	r1, r4
 8012e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012e72:	3b30      	subs	r3, #48	@ 0x30
 8012e74:	2b09      	cmp	r3, #9
 8012e76:	d94b      	bls.n	8012f10 <_svfiprintf_r+0x17c>
 8012e78:	b1b0      	cbz	r0, 8012ea8 <_svfiprintf_r+0x114>
 8012e7a:	9207      	str	r2, [sp, #28]
 8012e7c:	e014      	b.n	8012ea8 <_svfiprintf_r+0x114>
 8012e7e:	eba0 0308 	sub.w	r3, r0, r8
 8012e82:	fa09 f303 	lsl.w	r3, r9, r3
 8012e86:	4313      	orrs	r3, r2
 8012e88:	9304      	str	r3, [sp, #16]
 8012e8a:	46a2      	mov	sl, r4
 8012e8c:	e7d2      	b.n	8012e34 <_svfiprintf_r+0xa0>
 8012e8e:	9b03      	ldr	r3, [sp, #12]
 8012e90:	1d19      	adds	r1, r3, #4
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	9103      	str	r1, [sp, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	bfbb      	ittet	lt
 8012e9a:	425b      	neglt	r3, r3
 8012e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8012ea0:	9307      	strge	r3, [sp, #28]
 8012ea2:	9307      	strlt	r3, [sp, #28]
 8012ea4:	bfb8      	it	lt
 8012ea6:	9204      	strlt	r2, [sp, #16]
 8012ea8:	7823      	ldrb	r3, [r4, #0]
 8012eaa:	2b2e      	cmp	r3, #46	@ 0x2e
 8012eac:	d10a      	bne.n	8012ec4 <_svfiprintf_r+0x130>
 8012eae:	7863      	ldrb	r3, [r4, #1]
 8012eb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8012eb2:	d132      	bne.n	8012f1a <_svfiprintf_r+0x186>
 8012eb4:	9b03      	ldr	r3, [sp, #12]
 8012eb6:	1d1a      	adds	r2, r3, #4
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	9203      	str	r2, [sp, #12]
 8012ebc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ec0:	3402      	adds	r4, #2
 8012ec2:	9305      	str	r3, [sp, #20]
 8012ec4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012f88 <_svfiprintf_r+0x1f4>
 8012ec8:	7821      	ldrb	r1, [r4, #0]
 8012eca:	2203      	movs	r2, #3
 8012ecc:	4650      	mov	r0, sl
 8012ece:	f7ed f95f 	bl	8000190 <memchr>
 8012ed2:	b138      	cbz	r0, 8012ee4 <_svfiprintf_r+0x150>
 8012ed4:	9b04      	ldr	r3, [sp, #16]
 8012ed6:	eba0 000a 	sub.w	r0, r0, sl
 8012eda:	2240      	movs	r2, #64	@ 0x40
 8012edc:	4082      	lsls	r2, r0
 8012ede:	4313      	orrs	r3, r2
 8012ee0:	3401      	adds	r4, #1
 8012ee2:	9304      	str	r3, [sp, #16]
 8012ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012ee8:	4824      	ldr	r0, [pc, #144]	@ (8012f7c <_svfiprintf_r+0x1e8>)
 8012eea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012eee:	2206      	movs	r2, #6
 8012ef0:	f7ed f94e 	bl	8000190 <memchr>
 8012ef4:	2800      	cmp	r0, #0
 8012ef6:	d036      	beq.n	8012f66 <_svfiprintf_r+0x1d2>
 8012ef8:	4b21      	ldr	r3, [pc, #132]	@ (8012f80 <_svfiprintf_r+0x1ec>)
 8012efa:	bb1b      	cbnz	r3, 8012f44 <_svfiprintf_r+0x1b0>
 8012efc:	9b03      	ldr	r3, [sp, #12]
 8012efe:	3307      	adds	r3, #7
 8012f00:	f023 0307 	bic.w	r3, r3, #7
 8012f04:	3308      	adds	r3, #8
 8012f06:	9303      	str	r3, [sp, #12]
 8012f08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f0a:	4433      	add	r3, r6
 8012f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f0e:	e76a      	b.n	8012de6 <_svfiprintf_r+0x52>
 8012f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f14:	460c      	mov	r4, r1
 8012f16:	2001      	movs	r0, #1
 8012f18:	e7a8      	b.n	8012e6c <_svfiprintf_r+0xd8>
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	3401      	adds	r4, #1
 8012f1e:	9305      	str	r3, [sp, #20]
 8012f20:	4619      	mov	r1, r3
 8012f22:	f04f 0c0a 	mov.w	ip, #10
 8012f26:	4620      	mov	r0, r4
 8012f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f2c:	3a30      	subs	r2, #48	@ 0x30
 8012f2e:	2a09      	cmp	r2, #9
 8012f30:	d903      	bls.n	8012f3a <_svfiprintf_r+0x1a6>
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d0c6      	beq.n	8012ec4 <_svfiprintf_r+0x130>
 8012f36:	9105      	str	r1, [sp, #20]
 8012f38:	e7c4      	b.n	8012ec4 <_svfiprintf_r+0x130>
 8012f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8012f3e:	4604      	mov	r4, r0
 8012f40:	2301      	movs	r3, #1
 8012f42:	e7f0      	b.n	8012f26 <_svfiprintf_r+0x192>
 8012f44:	ab03      	add	r3, sp, #12
 8012f46:	9300      	str	r3, [sp, #0]
 8012f48:	462a      	mov	r2, r5
 8012f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8012f84 <_svfiprintf_r+0x1f0>)
 8012f4c:	a904      	add	r1, sp, #16
 8012f4e:	4638      	mov	r0, r7
 8012f50:	f3af 8000 	nop.w
 8012f54:	1c42      	adds	r2, r0, #1
 8012f56:	4606      	mov	r6, r0
 8012f58:	d1d6      	bne.n	8012f08 <_svfiprintf_r+0x174>
 8012f5a:	89ab      	ldrh	r3, [r5, #12]
 8012f5c:	065b      	lsls	r3, r3, #25
 8012f5e:	f53f af2d 	bmi.w	8012dbc <_svfiprintf_r+0x28>
 8012f62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012f64:	e72c      	b.n	8012dc0 <_svfiprintf_r+0x2c>
 8012f66:	ab03      	add	r3, sp, #12
 8012f68:	9300      	str	r3, [sp, #0]
 8012f6a:	462a      	mov	r2, r5
 8012f6c:	4b05      	ldr	r3, [pc, #20]	@ (8012f84 <_svfiprintf_r+0x1f0>)
 8012f6e:	a904      	add	r1, sp, #16
 8012f70:	4638      	mov	r0, r7
 8012f72:	f000 f879 	bl	8013068 <_printf_i>
 8012f76:	e7ed      	b.n	8012f54 <_svfiprintf_r+0x1c0>
 8012f78:	08013724 	.word	0x08013724
 8012f7c:	0801372e 	.word	0x0801372e
 8012f80:	00000000 	.word	0x00000000
 8012f84:	08012cdd 	.word	0x08012cdd
 8012f88:	0801372a 	.word	0x0801372a

08012f8c <_printf_common>:
 8012f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f90:	4616      	mov	r6, r2
 8012f92:	4698      	mov	r8, r3
 8012f94:	688a      	ldr	r2, [r1, #8]
 8012f96:	690b      	ldr	r3, [r1, #16]
 8012f98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012f9c:	4293      	cmp	r3, r2
 8012f9e:	bfb8      	it	lt
 8012fa0:	4613      	movlt	r3, r2
 8012fa2:	6033      	str	r3, [r6, #0]
 8012fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012fa8:	4607      	mov	r7, r0
 8012faa:	460c      	mov	r4, r1
 8012fac:	b10a      	cbz	r2, 8012fb2 <_printf_common+0x26>
 8012fae:	3301      	adds	r3, #1
 8012fb0:	6033      	str	r3, [r6, #0]
 8012fb2:	6823      	ldr	r3, [r4, #0]
 8012fb4:	0699      	lsls	r1, r3, #26
 8012fb6:	bf42      	ittt	mi
 8012fb8:	6833      	ldrmi	r3, [r6, #0]
 8012fba:	3302      	addmi	r3, #2
 8012fbc:	6033      	strmi	r3, [r6, #0]
 8012fbe:	6825      	ldr	r5, [r4, #0]
 8012fc0:	f015 0506 	ands.w	r5, r5, #6
 8012fc4:	d106      	bne.n	8012fd4 <_printf_common+0x48>
 8012fc6:	f104 0a19 	add.w	sl, r4, #25
 8012fca:	68e3      	ldr	r3, [r4, #12]
 8012fcc:	6832      	ldr	r2, [r6, #0]
 8012fce:	1a9b      	subs	r3, r3, r2
 8012fd0:	42ab      	cmp	r3, r5
 8012fd2:	dc26      	bgt.n	8013022 <_printf_common+0x96>
 8012fd4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012fd8:	6822      	ldr	r2, [r4, #0]
 8012fda:	3b00      	subs	r3, #0
 8012fdc:	bf18      	it	ne
 8012fde:	2301      	movne	r3, #1
 8012fe0:	0692      	lsls	r2, r2, #26
 8012fe2:	d42b      	bmi.n	801303c <_printf_common+0xb0>
 8012fe4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012fe8:	4641      	mov	r1, r8
 8012fea:	4638      	mov	r0, r7
 8012fec:	47c8      	blx	r9
 8012fee:	3001      	adds	r0, #1
 8012ff0:	d01e      	beq.n	8013030 <_printf_common+0xa4>
 8012ff2:	6823      	ldr	r3, [r4, #0]
 8012ff4:	6922      	ldr	r2, [r4, #16]
 8012ff6:	f003 0306 	and.w	r3, r3, #6
 8012ffa:	2b04      	cmp	r3, #4
 8012ffc:	bf02      	ittt	eq
 8012ffe:	68e5      	ldreq	r5, [r4, #12]
 8013000:	6833      	ldreq	r3, [r6, #0]
 8013002:	1aed      	subeq	r5, r5, r3
 8013004:	68a3      	ldr	r3, [r4, #8]
 8013006:	bf0c      	ite	eq
 8013008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801300c:	2500      	movne	r5, #0
 801300e:	4293      	cmp	r3, r2
 8013010:	bfc4      	itt	gt
 8013012:	1a9b      	subgt	r3, r3, r2
 8013014:	18ed      	addgt	r5, r5, r3
 8013016:	2600      	movs	r6, #0
 8013018:	341a      	adds	r4, #26
 801301a:	42b5      	cmp	r5, r6
 801301c:	d11a      	bne.n	8013054 <_printf_common+0xc8>
 801301e:	2000      	movs	r0, #0
 8013020:	e008      	b.n	8013034 <_printf_common+0xa8>
 8013022:	2301      	movs	r3, #1
 8013024:	4652      	mov	r2, sl
 8013026:	4641      	mov	r1, r8
 8013028:	4638      	mov	r0, r7
 801302a:	47c8      	blx	r9
 801302c:	3001      	adds	r0, #1
 801302e:	d103      	bne.n	8013038 <_printf_common+0xac>
 8013030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013038:	3501      	adds	r5, #1
 801303a:	e7c6      	b.n	8012fca <_printf_common+0x3e>
 801303c:	18e1      	adds	r1, r4, r3
 801303e:	1c5a      	adds	r2, r3, #1
 8013040:	2030      	movs	r0, #48	@ 0x30
 8013042:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013046:	4422      	add	r2, r4
 8013048:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801304c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013050:	3302      	adds	r3, #2
 8013052:	e7c7      	b.n	8012fe4 <_printf_common+0x58>
 8013054:	2301      	movs	r3, #1
 8013056:	4622      	mov	r2, r4
 8013058:	4641      	mov	r1, r8
 801305a:	4638      	mov	r0, r7
 801305c:	47c8      	blx	r9
 801305e:	3001      	adds	r0, #1
 8013060:	d0e6      	beq.n	8013030 <_printf_common+0xa4>
 8013062:	3601      	adds	r6, #1
 8013064:	e7d9      	b.n	801301a <_printf_common+0x8e>
	...

08013068 <_printf_i>:
 8013068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801306c:	7e0f      	ldrb	r7, [r1, #24]
 801306e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013070:	2f78      	cmp	r7, #120	@ 0x78
 8013072:	4691      	mov	r9, r2
 8013074:	4680      	mov	r8, r0
 8013076:	460c      	mov	r4, r1
 8013078:	469a      	mov	sl, r3
 801307a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801307e:	d807      	bhi.n	8013090 <_printf_i+0x28>
 8013080:	2f62      	cmp	r7, #98	@ 0x62
 8013082:	d80a      	bhi.n	801309a <_printf_i+0x32>
 8013084:	2f00      	cmp	r7, #0
 8013086:	f000 80d2 	beq.w	801322e <_printf_i+0x1c6>
 801308a:	2f58      	cmp	r7, #88	@ 0x58
 801308c:	f000 80b9 	beq.w	8013202 <_printf_i+0x19a>
 8013090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013094:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013098:	e03a      	b.n	8013110 <_printf_i+0xa8>
 801309a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801309e:	2b15      	cmp	r3, #21
 80130a0:	d8f6      	bhi.n	8013090 <_printf_i+0x28>
 80130a2:	a101      	add	r1, pc, #4	@ (adr r1, 80130a8 <_printf_i+0x40>)
 80130a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80130a8:	08013101 	.word	0x08013101
 80130ac:	08013115 	.word	0x08013115
 80130b0:	08013091 	.word	0x08013091
 80130b4:	08013091 	.word	0x08013091
 80130b8:	08013091 	.word	0x08013091
 80130bc:	08013091 	.word	0x08013091
 80130c0:	08013115 	.word	0x08013115
 80130c4:	08013091 	.word	0x08013091
 80130c8:	08013091 	.word	0x08013091
 80130cc:	08013091 	.word	0x08013091
 80130d0:	08013091 	.word	0x08013091
 80130d4:	08013215 	.word	0x08013215
 80130d8:	0801313f 	.word	0x0801313f
 80130dc:	080131cf 	.word	0x080131cf
 80130e0:	08013091 	.word	0x08013091
 80130e4:	08013091 	.word	0x08013091
 80130e8:	08013237 	.word	0x08013237
 80130ec:	08013091 	.word	0x08013091
 80130f0:	0801313f 	.word	0x0801313f
 80130f4:	08013091 	.word	0x08013091
 80130f8:	08013091 	.word	0x08013091
 80130fc:	080131d7 	.word	0x080131d7
 8013100:	6833      	ldr	r3, [r6, #0]
 8013102:	1d1a      	adds	r2, r3, #4
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	6032      	str	r2, [r6, #0]
 8013108:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801310c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013110:	2301      	movs	r3, #1
 8013112:	e09d      	b.n	8013250 <_printf_i+0x1e8>
 8013114:	6833      	ldr	r3, [r6, #0]
 8013116:	6820      	ldr	r0, [r4, #0]
 8013118:	1d19      	adds	r1, r3, #4
 801311a:	6031      	str	r1, [r6, #0]
 801311c:	0606      	lsls	r6, r0, #24
 801311e:	d501      	bpl.n	8013124 <_printf_i+0xbc>
 8013120:	681d      	ldr	r5, [r3, #0]
 8013122:	e003      	b.n	801312c <_printf_i+0xc4>
 8013124:	0645      	lsls	r5, r0, #25
 8013126:	d5fb      	bpl.n	8013120 <_printf_i+0xb8>
 8013128:	f9b3 5000 	ldrsh.w	r5, [r3]
 801312c:	2d00      	cmp	r5, #0
 801312e:	da03      	bge.n	8013138 <_printf_i+0xd0>
 8013130:	232d      	movs	r3, #45	@ 0x2d
 8013132:	426d      	negs	r5, r5
 8013134:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013138:	4859      	ldr	r0, [pc, #356]	@ (80132a0 <_printf_i+0x238>)
 801313a:	230a      	movs	r3, #10
 801313c:	e011      	b.n	8013162 <_printf_i+0xfa>
 801313e:	6821      	ldr	r1, [r4, #0]
 8013140:	6833      	ldr	r3, [r6, #0]
 8013142:	0608      	lsls	r0, r1, #24
 8013144:	f853 5b04 	ldr.w	r5, [r3], #4
 8013148:	d402      	bmi.n	8013150 <_printf_i+0xe8>
 801314a:	0649      	lsls	r1, r1, #25
 801314c:	bf48      	it	mi
 801314e:	b2ad      	uxthmi	r5, r5
 8013150:	2f6f      	cmp	r7, #111	@ 0x6f
 8013152:	4853      	ldr	r0, [pc, #332]	@ (80132a0 <_printf_i+0x238>)
 8013154:	6033      	str	r3, [r6, #0]
 8013156:	bf14      	ite	ne
 8013158:	230a      	movne	r3, #10
 801315a:	2308      	moveq	r3, #8
 801315c:	2100      	movs	r1, #0
 801315e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013162:	6866      	ldr	r6, [r4, #4]
 8013164:	60a6      	str	r6, [r4, #8]
 8013166:	2e00      	cmp	r6, #0
 8013168:	bfa2      	ittt	ge
 801316a:	6821      	ldrge	r1, [r4, #0]
 801316c:	f021 0104 	bicge.w	r1, r1, #4
 8013170:	6021      	strge	r1, [r4, #0]
 8013172:	b90d      	cbnz	r5, 8013178 <_printf_i+0x110>
 8013174:	2e00      	cmp	r6, #0
 8013176:	d04b      	beq.n	8013210 <_printf_i+0x1a8>
 8013178:	4616      	mov	r6, r2
 801317a:	fbb5 f1f3 	udiv	r1, r5, r3
 801317e:	fb03 5711 	mls	r7, r3, r1, r5
 8013182:	5dc7      	ldrb	r7, [r0, r7]
 8013184:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013188:	462f      	mov	r7, r5
 801318a:	42bb      	cmp	r3, r7
 801318c:	460d      	mov	r5, r1
 801318e:	d9f4      	bls.n	801317a <_printf_i+0x112>
 8013190:	2b08      	cmp	r3, #8
 8013192:	d10b      	bne.n	80131ac <_printf_i+0x144>
 8013194:	6823      	ldr	r3, [r4, #0]
 8013196:	07df      	lsls	r7, r3, #31
 8013198:	d508      	bpl.n	80131ac <_printf_i+0x144>
 801319a:	6923      	ldr	r3, [r4, #16]
 801319c:	6861      	ldr	r1, [r4, #4]
 801319e:	4299      	cmp	r1, r3
 80131a0:	bfde      	ittt	le
 80131a2:	2330      	movle	r3, #48	@ 0x30
 80131a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80131a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80131ac:	1b92      	subs	r2, r2, r6
 80131ae:	6122      	str	r2, [r4, #16]
 80131b0:	f8cd a000 	str.w	sl, [sp]
 80131b4:	464b      	mov	r3, r9
 80131b6:	aa03      	add	r2, sp, #12
 80131b8:	4621      	mov	r1, r4
 80131ba:	4640      	mov	r0, r8
 80131bc:	f7ff fee6 	bl	8012f8c <_printf_common>
 80131c0:	3001      	adds	r0, #1
 80131c2:	d14a      	bne.n	801325a <_printf_i+0x1f2>
 80131c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80131c8:	b004      	add	sp, #16
 80131ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131ce:	6823      	ldr	r3, [r4, #0]
 80131d0:	f043 0320 	orr.w	r3, r3, #32
 80131d4:	6023      	str	r3, [r4, #0]
 80131d6:	4833      	ldr	r0, [pc, #204]	@ (80132a4 <_printf_i+0x23c>)
 80131d8:	2778      	movs	r7, #120	@ 0x78
 80131da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80131de:	6823      	ldr	r3, [r4, #0]
 80131e0:	6831      	ldr	r1, [r6, #0]
 80131e2:	061f      	lsls	r7, r3, #24
 80131e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80131e8:	d402      	bmi.n	80131f0 <_printf_i+0x188>
 80131ea:	065f      	lsls	r7, r3, #25
 80131ec:	bf48      	it	mi
 80131ee:	b2ad      	uxthmi	r5, r5
 80131f0:	6031      	str	r1, [r6, #0]
 80131f2:	07d9      	lsls	r1, r3, #31
 80131f4:	bf44      	itt	mi
 80131f6:	f043 0320 	orrmi.w	r3, r3, #32
 80131fa:	6023      	strmi	r3, [r4, #0]
 80131fc:	b11d      	cbz	r5, 8013206 <_printf_i+0x19e>
 80131fe:	2310      	movs	r3, #16
 8013200:	e7ac      	b.n	801315c <_printf_i+0xf4>
 8013202:	4827      	ldr	r0, [pc, #156]	@ (80132a0 <_printf_i+0x238>)
 8013204:	e7e9      	b.n	80131da <_printf_i+0x172>
 8013206:	6823      	ldr	r3, [r4, #0]
 8013208:	f023 0320 	bic.w	r3, r3, #32
 801320c:	6023      	str	r3, [r4, #0]
 801320e:	e7f6      	b.n	80131fe <_printf_i+0x196>
 8013210:	4616      	mov	r6, r2
 8013212:	e7bd      	b.n	8013190 <_printf_i+0x128>
 8013214:	6833      	ldr	r3, [r6, #0]
 8013216:	6825      	ldr	r5, [r4, #0]
 8013218:	6961      	ldr	r1, [r4, #20]
 801321a:	1d18      	adds	r0, r3, #4
 801321c:	6030      	str	r0, [r6, #0]
 801321e:	062e      	lsls	r6, r5, #24
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	d501      	bpl.n	8013228 <_printf_i+0x1c0>
 8013224:	6019      	str	r1, [r3, #0]
 8013226:	e002      	b.n	801322e <_printf_i+0x1c6>
 8013228:	0668      	lsls	r0, r5, #25
 801322a:	d5fb      	bpl.n	8013224 <_printf_i+0x1bc>
 801322c:	8019      	strh	r1, [r3, #0]
 801322e:	2300      	movs	r3, #0
 8013230:	6123      	str	r3, [r4, #16]
 8013232:	4616      	mov	r6, r2
 8013234:	e7bc      	b.n	80131b0 <_printf_i+0x148>
 8013236:	6833      	ldr	r3, [r6, #0]
 8013238:	1d1a      	adds	r2, r3, #4
 801323a:	6032      	str	r2, [r6, #0]
 801323c:	681e      	ldr	r6, [r3, #0]
 801323e:	6862      	ldr	r2, [r4, #4]
 8013240:	2100      	movs	r1, #0
 8013242:	4630      	mov	r0, r6
 8013244:	f7ec ffa4 	bl	8000190 <memchr>
 8013248:	b108      	cbz	r0, 801324e <_printf_i+0x1e6>
 801324a:	1b80      	subs	r0, r0, r6
 801324c:	6060      	str	r0, [r4, #4]
 801324e:	6863      	ldr	r3, [r4, #4]
 8013250:	6123      	str	r3, [r4, #16]
 8013252:	2300      	movs	r3, #0
 8013254:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013258:	e7aa      	b.n	80131b0 <_printf_i+0x148>
 801325a:	6923      	ldr	r3, [r4, #16]
 801325c:	4632      	mov	r2, r6
 801325e:	4649      	mov	r1, r9
 8013260:	4640      	mov	r0, r8
 8013262:	47d0      	blx	sl
 8013264:	3001      	adds	r0, #1
 8013266:	d0ad      	beq.n	80131c4 <_printf_i+0x15c>
 8013268:	6823      	ldr	r3, [r4, #0]
 801326a:	079b      	lsls	r3, r3, #30
 801326c:	d413      	bmi.n	8013296 <_printf_i+0x22e>
 801326e:	68e0      	ldr	r0, [r4, #12]
 8013270:	9b03      	ldr	r3, [sp, #12]
 8013272:	4298      	cmp	r0, r3
 8013274:	bfb8      	it	lt
 8013276:	4618      	movlt	r0, r3
 8013278:	e7a6      	b.n	80131c8 <_printf_i+0x160>
 801327a:	2301      	movs	r3, #1
 801327c:	4632      	mov	r2, r6
 801327e:	4649      	mov	r1, r9
 8013280:	4640      	mov	r0, r8
 8013282:	47d0      	blx	sl
 8013284:	3001      	adds	r0, #1
 8013286:	d09d      	beq.n	80131c4 <_printf_i+0x15c>
 8013288:	3501      	adds	r5, #1
 801328a:	68e3      	ldr	r3, [r4, #12]
 801328c:	9903      	ldr	r1, [sp, #12]
 801328e:	1a5b      	subs	r3, r3, r1
 8013290:	42ab      	cmp	r3, r5
 8013292:	dcf2      	bgt.n	801327a <_printf_i+0x212>
 8013294:	e7eb      	b.n	801326e <_printf_i+0x206>
 8013296:	2500      	movs	r5, #0
 8013298:	f104 0619 	add.w	r6, r4, #25
 801329c:	e7f5      	b.n	801328a <_printf_i+0x222>
 801329e:	bf00      	nop
 80132a0:	08013735 	.word	0x08013735
 80132a4:	08013746 	.word	0x08013746

080132a8 <memmove>:
 80132a8:	4288      	cmp	r0, r1
 80132aa:	b510      	push	{r4, lr}
 80132ac:	eb01 0402 	add.w	r4, r1, r2
 80132b0:	d902      	bls.n	80132b8 <memmove+0x10>
 80132b2:	4284      	cmp	r4, r0
 80132b4:	4623      	mov	r3, r4
 80132b6:	d807      	bhi.n	80132c8 <memmove+0x20>
 80132b8:	1e43      	subs	r3, r0, #1
 80132ba:	42a1      	cmp	r1, r4
 80132bc:	d008      	beq.n	80132d0 <memmove+0x28>
 80132be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80132c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80132c6:	e7f8      	b.n	80132ba <memmove+0x12>
 80132c8:	4402      	add	r2, r0
 80132ca:	4601      	mov	r1, r0
 80132cc:	428a      	cmp	r2, r1
 80132ce:	d100      	bne.n	80132d2 <memmove+0x2a>
 80132d0:	bd10      	pop	{r4, pc}
 80132d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80132d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80132da:	e7f7      	b.n	80132cc <memmove+0x24>

080132dc <_sbrk_r>:
 80132dc:	b538      	push	{r3, r4, r5, lr}
 80132de:	4d06      	ldr	r5, [pc, #24]	@ (80132f8 <_sbrk_r+0x1c>)
 80132e0:	2300      	movs	r3, #0
 80132e2:	4604      	mov	r4, r0
 80132e4:	4608      	mov	r0, r1
 80132e6:	602b      	str	r3, [r5, #0]
 80132e8:	f7ef fafc 	bl	80028e4 <_sbrk>
 80132ec:	1c43      	adds	r3, r0, #1
 80132ee:	d102      	bne.n	80132f6 <_sbrk_r+0x1a>
 80132f0:	682b      	ldr	r3, [r5, #0]
 80132f2:	b103      	cbz	r3, 80132f6 <_sbrk_r+0x1a>
 80132f4:	6023      	str	r3, [r4, #0]
 80132f6:	bd38      	pop	{r3, r4, r5, pc}
 80132f8:	200020cc 	.word	0x200020cc

080132fc <_realloc_r>:
 80132fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013300:	4680      	mov	r8, r0
 8013302:	4615      	mov	r5, r2
 8013304:	460c      	mov	r4, r1
 8013306:	b921      	cbnz	r1, 8013312 <_realloc_r+0x16>
 8013308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801330c:	4611      	mov	r1, r2
 801330e:	f7ff bc59 	b.w	8012bc4 <_malloc_r>
 8013312:	b92a      	cbnz	r2, 8013320 <_realloc_r+0x24>
 8013314:	f7ff fbea 	bl	8012aec <_free_r>
 8013318:	2400      	movs	r4, #0
 801331a:	4620      	mov	r0, r4
 801331c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013320:	f000 f81a 	bl	8013358 <_malloc_usable_size_r>
 8013324:	4285      	cmp	r5, r0
 8013326:	4606      	mov	r6, r0
 8013328:	d802      	bhi.n	8013330 <_realloc_r+0x34>
 801332a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801332e:	d8f4      	bhi.n	801331a <_realloc_r+0x1e>
 8013330:	4629      	mov	r1, r5
 8013332:	4640      	mov	r0, r8
 8013334:	f7ff fc46 	bl	8012bc4 <_malloc_r>
 8013338:	4607      	mov	r7, r0
 801333a:	2800      	cmp	r0, #0
 801333c:	d0ec      	beq.n	8013318 <_realloc_r+0x1c>
 801333e:	42b5      	cmp	r5, r6
 8013340:	462a      	mov	r2, r5
 8013342:	4621      	mov	r1, r4
 8013344:	bf28      	it	cs
 8013346:	4632      	movcs	r2, r6
 8013348:	f7ff fbc2 	bl	8012ad0 <memcpy>
 801334c:	4621      	mov	r1, r4
 801334e:	4640      	mov	r0, r8
 8013350:	f7ff fbcc 	bl	8012aec <_free_r>
 8013354:	463c      	mov	r4, r7
 8013356:	e7e0      	b.n	801331a <_realloc_r+0x1e>

08013358 <_malloc_usable_size_r>:
 8013358:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801335c:	1f18      	subs	r0, r3, #4
 801335e:	2b00      	cmp	r3, #0
 8013360:	bfbc      	itt	lt
 8013362:	580b      	ldrlt	r3, [r1, r0]
 8013364:	18c0      	addlt	r0, r0, r3
 8013366:	4770      	bx	lr

08013368 <_init>:
 8013368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801336a:	bf00      	nop
 801336c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801336e:	bc08      	pop	{r3}
 8013370:	469e      	mov	lr, r3
 8013372:	4770      	bx	lr

08013374 <_fini>:
 8013374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013376:	bf00      	nop
 8013378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801337a:	bc08      	pop	{r3}
 801337c:	469e      	mov	lr, r3
 801337e:	4770      	bx	lr
